{"ast":null,"code":"// API Configuration\nconst API_BASE_URL_SALES = 'https://api-pos.hulmsolutions.com/POS/accounting2/31fc8df0-61db-41e5-bb67-070fde367ea1/orders?start=0&size=200';\nconst API_CUSTOMERS = 'https://api-pos.hulmsolutions.com/POS/accounting2/31fc8df0-61db-41e5-bb67-070fde367ea1/customers?status=Active';\n\n// Replace with your actual Bearer token\nconst BEARER_TOKEN = 'your-bearer-token-here';\nexport const fetchSales = async setSales => {\n  setSales(prev => ({\n    ...prev,\n    loading: true,\n    error: null\n  }));\n  try {\n    const response = await fetch(API_BASE_URL_SALES, {\n      method: 'GET',\n      headers: {\n        'Authorization': `Bearer ${BEARER_TOKEN}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const allData = await response.json();\n    setSales({\n      loading: false,\n      data: allData,\n      error: null\n    });\n    return allData;\n  } catch (error) {\n    console.error('Error fetching sales:', error);\n    setSales({\n      loading: false,\n      data: [],\n      error: error.message\n    });\n    return null;\n  }\n};\nexport const fetchCustomers = async (setCustomers, allSalesData) => {\n  setCustomers(prev => ({\n    ...prev,\n    loading: true,\n    error: null\n  }));\n  try {\n    const response = await fetch(API_CUSTOMERS, {\n      method: 'GET',\n      headers: {\n        'Authorization': `Bearer ${BEARER_TOKEN}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n\n    // Transform API customers to match our structure with real calculated data\n    const transformedCustomers = data.map(customer => {\n      // Get ALL orders for this customer (not just filtered ones)\n      const customerOrders = allSalesData.filter(order => order.customerId === customer.id);\n\n      // Calculate total owed from ALL unpaid orders\n      const totalOwed = customerOrders.filter(order => !order.paid).reduce((sum, order) => sum + (order.total || 0), 0);\n\n      // Overdue amount = total owed (since all unpaid orders need collection)\n      const overdueAmount = totalOwed;\n\n      // Total number of orders for this customer\n      const invoiceCount = customerOrders.length;\n\n      // Determine customer type based on actual order history\n      let customerType = 'individual';\n      const totalSpentFromOrders = customerOrders.reduce((sum, order) => sum + (order.total || 0), 0);\n      if (totalSpentFromOrders > 500000) {\n        customerType = 'corporate';\n      } else if (totalSpentFromOrders > 200000) {\n        customerType = 'small_business';\n      } else {\n        customerType = 'individual';\n      }\n\n      // Set credit limit based on customer type\n      let creditLimit = 25000; // Default for individual\n      if (customerType === 'corporate') {\n        creditLimit = 500000;\n      } else if (customerType === 'small_business') {\n        creditLimit = 100000;\n      }\n\n      // Determine credit status based on payment behavior\n      let creditStatus = 'good';\n      if (totalOwed === 0) {\n        creditStatus = 'excellent';\n      } else if (totalOwed > creditLimit * 0.9) {\n        creditStatus = 'hold';\n      } else if (totalOwed > creditLimit * 0.7) {\n        creditStatus = 'watch';\n      }\n\n      // Get last payment date from most recent paid order\n      const paidOrders = customerOrders.filter(o => o.paid);\n      const lastPayment = paidOrders.length > 0 ? paidOrders.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt))[0].createdAt.split('.').slice(0, 3).join('-') : 'No payments';\n      return {\n        id: customer.id,\n        name: customer.name,\n        email: customer.email || 'No email provided',\n        phone: customer.phoneNumber || 'No phone provided',\n        address: customer.address && customer.address.length > 0 ? typeof customer.address[0] === 'string' ? customer.address[0] : 'No address provided' : 'No address provided',\n        customerType: customerType,\n        creditLimit: creditLimit,\n        paymentTerms: customerType === 'corporate' ? 45 : customerType === 'small_business' ? 30 : 15,\n        totalOwed: totalOwed,\n        overdueAmount: overdueAmount,\n        lastPayment: lastPayment,\n        creditStatus: creditStatus,\n        accountBalance: -totalOwed,\n        invoiceCount: invoiceCount,\n        avgPaymentDays: 30,\n        // Default estimate\n        status: customer.status,\n        totalSpendOnOrder: customer.totalSpendOnOrder || 0,\n        averageOrderValue: customer.averageOrderValue || 0,\n        numberOfOrders: customer.numberOfOrders || invoiceCount\n      };\n    });\n    setCustomers({\n      loading: false,\n      data: transformedCustomers,\n      error: null\n    });\n  } catch (error) {\n    console.error('Error fetching customers:', error);\n    setCustomers({\n      loading: false,\n      data: [],\n      error: error.message\n    });\n  }\n};","map":{"version":3,"names":["API_BASE_URL_SALES","API_CUSTOMERS","BEARER_TOKEN","fetchSales","setSales","prev","loading","error","response","fetch","method","headers","ok","Error","status","allData","json","data","console","message","fetchCustomers","setCustomers","allSalesData","transformedCustomers","map","customer","customerOrders","filter","order","customerId","id","totalOwed","paid","reduce","sum","total","overdueAmount","invoiceCount","length","customerType","totalSpentFromOrders","creditLimit","creditStatus","paidOrders","o","lastPayment","sort","a","b","Date","createdAt","split","slice","join","name","email","phone","phoneNumber","address","paymentTerms","accountBalance","avgPaymentDays","totalSpendOnOrder","averageOrderValue","numberOfOrders"],"sources":["C:/Users/Logic-Unit/my-account/src/components/AccountsReceivable/AccountsReceivableHook/useAPData.js"],"sourcesContent":["// API Configuration\r\nconst API_BASE_URL_SALES = 'https://api-pos.hulmsolutions.com/POS/accounting2/31fc8df0-61db-41e5-bb67-070fde367ea1/orders?start=0&size=200';\r\nconst API_CUSTOMERS = 'https://api-pos.hulmsolutions.com/POS/accounting2/31fc8df0-61db-41e5-bb67-070fde367ea1/customers?status=Active';\r\n\r\n// Replace with your actual Bearer token\r\nconst BEARER_TOKEN = 'your-bearer-token-here';\r\n\r\nexport const fetchSales = async (setSales) => {\r\n  setSales(prev => ({ ...prev, loading: true, error: null }));\r\n  try {\r\n    const response = await fetch(API_BASE_URL_SALES, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Authorization': `Bearer ${BEARER_TOKEN}`,\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n    \r\n    const allData = await response.json();\r\n    setSales({ loading: false, data: allData, error: null });\r\n    return allData;\r\n  } catch (error) {\r\n    console.error('Error fetching sales:', error);\r\n    setSales({ loading: false, data: [], error: error.message });\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const fetchCustomers = async (setCustomers, allSalesData) => {\r\n  setCustomers(prev => ({ ...prev, loading: true, error: null }));\r\n  try {\r\n    const response = await fetch(API_CUSTOMERS, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Authorization': `Bearer ${BEARER_TOKEN}`,\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n    \r\n    const data = await response.json();\r\n    \r\n    // Transform API customers to match our structure with real calculated data\r\n    const transformedCustomers = data.map(customer => {\r\n      // Get ALL orders for this customer (not just filtered ones)\r\n      const customerOrders = allSalesData.filter(order => order.customerId === customer.id);\r\n     \r\n      // Calculate total owed from ALL unpaid orders\r\n      const totalOwed = customerOrders\r\n        .filter(order => !order.paid)\r\n        .reduce((sum, order) => sum + (order.total || 0), 0);\r\n      \r\n      // Overdue amount = total owed (since all unpaid orders need collection)\r\n      const overdueAmount = totalOwed;\r\n      \r\n      // Total number of orders for this customer\r\n      const invoiceCount = customerOrders.length;\r\n      \r\n      // Determine customer type based on actual order history\r\n      let customerType = 'individual';\r\n      const totalSpentFromOrders = customerOrders.reduce((sum, order) => sum + (order.total || 0), 0);\r\n      \r\n      if (totalSpentFromOrders > 500000) {\r\n        customerType = 'corporate';\r\n      } else if (totalSpentFromOrders > 200000) {\r\n        customerType = 'small_business';\r\n      } else {\r\n        customerType = 'individual';\r\n      }\r\n      \r\n      // Set credit limit based on customer type\r\n      let creditLimit = 25000; // Default for individual\r\n      if (customerType === 'corporate') {\r\n        creditLimit = 500000;\r\n      } else if (customerType === 'small_business') {\r\n        creditLimit = 100000;\r\n      }\r\n      \r\n      // Determine credit status based on payment behavior\r\n      let creditStatus = 'good';\r\n      if (totalOwed === 0) {\r\n        creditStatus = 'excellent';\r\n      } else if (totalOwed > creditLimit * 0.9) {\r\n        creditStatus = 'hold';\r\n      } else if (totalOwed > creditLimit * 0.7) {\r\n        creditStatus = 'watch';\r\n      }\r\n      \r\n      // Get last payment date from most recent paid order\r\n      const paidOrders = customerOrders.filter(o => o.paid);\r\n      const lastPayment = paidOrders.length > 0 ? \r\n        paidOrders.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt))[0].createdAt.split('.').slice(0, 3).join('-') :\r\n        'No payments';\r\n\r\n      return {\r\n        id: customer.id,\r\n        name: customer.name,\r\n        email: customer.email || 'No email provided',\r\n        phone: customer.phoneNumber || 'No phone provided',\r\n        address: customer.address && customer.address.length > 0 ? \r\n          (typeof customer.address[0] === 'string' ? customer.address[0] : 'No address provided') : \r\n          'No address provided',\r\n        customerType: customerType,\r\n        creditLimit: creditLimit,\r\n        paymentTerms: customerType === 'corporate' ? 45 : (customerType === 'small_business' ? 30 : 15),\r\n        totalOwed: totalOwed,\r\n        overdueAmount: overdueAmount,\r\n        lastPayment: lastPayment,\r\n        creditStatus: creditStatus,\r\n        accountBalance: -totalOwed,\r\n        invoiceCount: invoiceCount,\r\n        avgPaymentDays: 30, // Default estimate\r\n        status: customer.status,\r\n        totalSpendOnOrder: customer.totalSpendOnOrder || 0,\r\n        averageOrderValue: customer.averageOrderValue || 0,\r\n        numberOfOrders: customer.numberOfOrders || invoiceCount\r\n      };\r\n    });\r\n    \r\n    setCustomers({ loading: false, data: transformedCustomers, error: null });\r\n  } catch (error) {\r\n    console.error('Error fetching customers:', error);\r\n    setCustomers({ loading: false, data: [], error: error.message });\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}