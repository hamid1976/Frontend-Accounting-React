{"ast":null,"code":"// Utility/formatters.js\n\n// Format date from \"2025.08.18.10.08.54.569\" to \"2025/08/18\"\nexport const formatDate = dateString => {\n  if (!dateString) return 'N/A';\n  return dateString.split('.').slice(0, 3).join('/');\n};\n\n// Format currency\nexport const formatCurrency = amount => {\n  return new Intl.NumberFormat('en-PK', {\n    style: 'currency',\n    currency: 'PKR'\n  }).format(amount);\n};\n\n// Utility to safely parse yyyy-mm-dd as local date\nexport const parseLocalDate = dateStr => {\n  if (!dateStr) return null;\n  const [year, month, day] = dateStr.split(\"-\").map(Number);\n  return new Date(year, month - 1, day, 0, 0, 0); // local midnight\n};\n// Parse \"YYYY.MM.DD.HH.mm.ss.SSS\" into a local Date\nexport const parseDotTimestampToDate = s => {\n  if (!s || typeof s !== 'string') return null;\n  const [y, m, d, hh = '0', mm = '0', ss = '0', ms = '0'] = s.split('.');\n  const year = Number(y),\n    month = Number(m) - 1,\n    day = Number(d);\n  const h = Number(hh),\n    mi = Number(mm),\n    s2 = Number(ss),\n    milli = Number(ms);\n  if ([year, month, day].some(Number.isNaN)) return null;\n  return new Date(year, month, day, h, mi, s2, milli);\n};","map":{"version":3,"names":["formatDate","dateString","split","slice","join","formatCurrency","amount","Intl","NumberFormat","style","currency","format","parseLocalDate","dateStr","year","month","day","map","Number","Date","parseDotTimestampToDate","s","y","m","d","hh","mm","ss","ms","h","mi","s2","milli","some","isNaN"],"sources":["C:/Users/Logic-Unit/my-account/src/Utility/formatters.js"],"sourcesContent":["// Utility/formatters.js\r\n\r\n// Format date from \"2025.08.18.10.08.54.569\" to \"2025/08/18\"\r\nexport const formatDate = (dateString) => {\r\n  if (!dateString) return 'N/A';\r\n  return dateString.split('.').slice(0, 3).join('/');\r\n};\r\n\r\n// Format currency\r\nexport const formatCurrency = (amount) => {\r\n  return new Intl.NumberFormat('en-PK', { style: 'currency', currency: 'PKR' }).format(amount);\r\n};\r\n\r\n// Utility to safely parse yyyy-mm-dd as local date\r\nexport const parseLocalDate = (dateStr) => {\r\n  if (!dateStr) return null;\r\n  const [year, month, day] = dateStr.split(\"-\").map(Number);\r\n  return new Date(year, month - 1, day, 0, 0, 0); // local midnight\r\n};\r\n// Parse \"YYYY.MM.DD.HH.mm.ss.SSS\" into a local Date\r\nexport const parseDotTimestampToDate = (s) => {\r\n  if (!s || typeof s !== 'string') return null;\r\n  const [y, m, d, hh = '0', mm = '0', ss = '0', ms = '0'] = s.split('.');\r\n  const year = Number(y), month = Number(m) - 1, day = Number(d);\r\n  const h = Number(hh), mi = Number(mm), s2 = Number(ss), milli = Number(ms);\r\n  if ([year, month, day].some(Number.isNaN)) return null;\r\n  return new Date(year, month, day, h, mi, s2, milli);\r\n};\r\n"],"mappings":"AAAA;;AAEA;AACA,OAAO,MAAMA,UAAU,GAAIC,UAAU,IAAK;EACxC,IAAI,CAACA,UAAU,EAAE,OAAO,KAAK;EAC7B,OAAOA,UAAU,CAACC,KAAK,CAAC,GAAG,CAAC,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;AACpD,CAAC;;AAED;AACA,OAAO,MAAMC,cAAc,GAAIC,MAAM,IAAK;EACxC,OAAO,IAAIC,IAAI,CAACC,YAAY,CAAC,OAAO,EAAE;IAAEC,KAAK,EAAE,UAAU;IAAEC,QAAQ,EAAE;EAAM,CAAC,CAAC,CAACC,MAAM,CAACL,MAAM,CAAC;AAC9F,CAAC;;AAED;AACA,OAAO,MAAMM,cAAc,GAAIC,OAAO,IAAK;EACzC,IAAI,CAACA,OAAO,EAAE,OAAO,IAAI;EACzB,MAAM,CAACC,IAAI,EAAEC,KAAK,EAAEC,GAAG,CAAC,GAAGH,OAAO,CAACX,KAAK,CAAC,GAAG,CAAC,CAACe,GAAG,CAACC,MAAM,CAAC;EACzD,OAAO,IAAIC,IAAI,CAACL,IAAI,EAAEC,KAAK,GAAG,CAAC,EAAEC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AAClD,CAAC;AACD;AACA,OAAO,MAAMI,uBAAuB,GAAIC,CAAC,IAAK;EAC5C,IAAI,CAACA,CAAC,IAAI,OAAOA,CAAC,KAAK,QAAQ,EAAE,OAAO,IAAI;EAC5C,MAAM,CAACC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,EAAE,GAAG,GAAG,EAAEC,EAAE,GAAG,GAAG,EAAEC,EAAE,GAAG,GAAG,EAAEC,EAAE,GAAG,GAAG,CAAC,GAAGP,CAAC,CAACnB,KAAK,CAAC,GAAG,CAAC;EACtE,MAAMY,IAAI,GAAGI,MAAM,CAACI,CAAC,CAAC;IAAEP,KAAK,GAAGG,MAAM,CAACK,CAAC,CAAC,GAAG,CAAC;IAAEP,GAAG,GAAGE,MAAM,CAACM,CAAC,CAAC;EAC9D,MAAMK,CAAC,GAAGX,MAAM,CAACO,EAAE,CAAC;IAAEK,EAAE,GAAGZ,MAAM,CAACQ,EAAE,CAAC;IAAEK,EAAE,GAAGb,MAAM,CAACS,EAAE,CAAC;IAAEK,KAAK,GAAGd,MAAM,CAACU,EAAE,CAAC;EAC1E,IAAI,CAACd,IAAI,EAAEC,KAAK,EAAEC,GAAG,CAAC,CAACiB,IAAI,CAACf,MAAM,CAACgB,KAAK,CAAC,EAAE,OAAO,IAAI;EACtD,OAAO,IAAIf,IAAI,CAACL,IAAI,EAAEC,KAAK,EAAEC,GAAG,EAAEa,CAAC,EAAEC,EAAE,EAAEC,EAAE,EAAEC,KAAK,CAAC;AACrD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}