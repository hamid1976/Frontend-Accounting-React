{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Logic-Unit\\\\my-account\\\\src\\\\modals\\\\InvoiceDetailModal.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import { XCircle, CheckCircle, FileText, Download } from 'lucide-react';\n// import { formatCurrency, formatDate } from '../components/AccountsReceivable/AccountsReceivableUtils/formatters';\n// const RecordPaymentModal = React.lazy(() =>\n//   import('../components/AccountsReceivable/RecordPaymentModal')\n// );\n\n// const InvoiceDetailModal = ({ invoice, onClose, getCustomerName }) => {\n//   const [isPaymentModalOpen, setPaymentModalOpen] = useState(false);\n\n//   return (\n//     <>\n//       <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center p-4 z-50\">\n//         <div className=\"bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-y-auto\">\n//           <div className=\"px-6 py-4 border-b border-gray-200\">\n//             <div className=\"flex items-center justify-between\">\n//               <h3 className=\"text-lg font-semibold text-gray-900\">\n//                 Order Details - #{invoice.orderId}\n//               </h3>\n//               <button\n//                 onClick={onClose}\n//                 className=\"text-gray-400 hover:text-gray-600\"\n//               >\n//                 <XCircle size={20} />\n//               </button>\n//             </div>\n//           </div>\n\n//           <div className=\"px-6 py-4\">\n//             {/* Order Info */}\n//             <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-6\">\n//               <div className=\"space-y-4\">\n//                 <div>\n//                   <label className=\"text-sm font-medium text-gray-500\">Order ID</label>\n//                   <p className=\"text-sm text-gray-900\">{invoice.orderId}</p>\n//                 </div>\n//                 <div>\n//                   <label className=\"text-sm font-medium text-gray-500\">Customer</label>\n//                   <p className=\"text-sm text-gray-900\">{getCustomerName(invoice.customerId)}</p>\n//                 </div>\n//                 <div>\n//                   <label className=\"text-sm font-medium text-gray-500\">Created Date</label>\n//                   <p className=\"text-sm text-gray-900\">{formatDate(invoice.createdAt)}</p>\n//                 </div>\n//                 <div>\n//                   <label className=\"text-sm font-medium text-gray-500\">Status</label>\n//                   <p className=\"text-sm text-gray-900\">{invoice.status}</p>\n//                 </div>\n//               </div>\n\n//               <div className=\"space-y-4\">\n//                 <div>\n//                   <label className=\"text-sm font-medium text-gray-500\">Payment Status</label>\n//                   <div>\n//                     <span className={`px-2 py-1 text-xs font-medium rounded-full ${\n//                       invoice.paid ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'\n//                     }`}>\n//                       {invoice.paid ? 'Paid' : 'Unpaid'}\n//                     </span>\n//                   </div>\n//                 </div>\n//                 <div>\n//                   <label className=\"text-sm font-medium text-gray-500\">Fulfillment Status</label>\n//                   <div>\n//                     <span className={`px-2 py-1 text-xs font-medium rounded-full ${\n//                       invoice.fulfilled ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'\n//                     }`}>\n//                       {invoice.fulfilled ? 'Fulfilled' : 'Pending'}\n//                     </span>\n//                   </div>\n//                 </div>\n//                 <div>\n//                   <label className=\"text-sm font-medium text-gray-500\">Total Amount</label>\n//                   <p className=\"text-lg font-bold text-gray-900\">{formatCurrency(invoice.total)}</p>\n//                 </div>\n//                 <div>\n//                   <label className=\"text-sm font-medium text-gray-500\">Payable Amount</label>\n//                   <p className=\"text-sm text-gray-900\">{formatCurrency(invoice.payableAmount)}</p>\n//                 </div>\n//               </div>\n//             </div>\n\n//             {/* Line Items */}\n//             <div className=\"mb-6\">\n//               <h4 className=\"text-md font-semibold text-gray-900 mb-3\">Order Items</h4>\n//               <div className=\"overflow-x-auto\">\n//                 <table className=\"w-full border border-gray-200 rounded\">\n//                   <thead className=\"bg-gray-50\">\n//                     <tr>\n//                       <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500\">Product</th>\n//                       <th className=\"px-4 py-2 text-right text-xs font-medium text-gray-500\">Quantity</th>\n//                       <th className=\"px-4 py-2 text-right text-xs font-medium text-gray-500\">Unit Price</th>\n//                       <th className=\"px-4 py-2 text-right text-xs font-medium text-gray-500\">Total</th>\n//                       <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500\">Status</th>\n//                     </tr>\n//                   </thead>\n//                   <tbody className=\"divide-y divide-gray-200\">\n//                     {invoice.lineItems.map((item, index) => (\n//                       <tr key={index}>\n//                         <td className=\"px-4 py-2 text-sm text-gray-900\">{item.productName}</td>\n//                         <td className=\"px-4 py-2 text-sm text-gray-900 text-right\">{item.quantity}</td>\n//                         <td className=\"px-4 py-2 text-sm text-gray-900 text-right\">{formatCurrency(item.price)}</td>\n//                         <td className=\"px-4 py-2 text-sm font-medium text-gray-900 text-right\">{formatCurrency(item.total)}</td>\n//                         <td className=\"px-4 py-2\">\n//                           <span className={`px-2 py-1 text-xs font-medium rounded-full ${\n//                             item.fulfilled ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'\n//                           }`}>\n//                             {item.status}\n//                           </span>\n//                         </td>\n//                       </tr>\n//                     ))}\n//                   </tbody>\n//                 </table>\n//               </div>\n//             </div>\n\n//             {/* Totals */}\n//             <div className=\"bg-gray-50 p-4 rounded-lg\">\n//               <div className=\"space-y-2\">\n//                 <div className=\"flex justify-between\">\n//                   <span className=\"text-sm text-gray-600\">Subtotal:</span>\n//                   <span className=\"text-sm text-gray-900\">{formatCurrency(invoice.subTotal)}</span>\n//                 </div>\n//                 <div className=\"flex justify-between\">\n//                   <span className=\"text-sm text-gray-600\">Tax ({invoice.taxRate}%):</span>\n//                   <span className=\"text-sm text-gray-900\">{formatCurrency(invoice.taxAmount)}</span>\n//                 </div>\n//                 {invoice.discountAmount > 0 && (\n//                   <div className=\"flex justify-between\">\n//                     <span className=\"text-sm text-gray-600\">Discount:</span>\n//                     <span className=\"text-sm text-red-600\">-{formatCurrency(invoice.discountAmount)}</span>\n//                   </div>\n//                 )}\n//                 <div className=\"flex justify-between font-bold text-lg border-t pt-2\">\n//                   <span>Total:</span>\n//                   <span>{formatCurrency(invoice.total)}</span>\n//                 </div>\n//               </div>\n//             </div>\n\n//             {/* Action Buttons */}\n//             <div className=\"flex space-x-3 mt-6\">\n//               <button\n//                 className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center space-x-2\"\n//                 onClick={() => setPaymentModalOpen(true)}\n//               >\n//                 <CheckCircle size={16} />\n//                 <span>Record Payment</span>\n//               </button>\n\n//               {!invoice.paid && (\n//                 <button className=\"px-4 py-2 bg-emerald-600 text-white rounded-lg hover:bg-emerald-700 flex items-center space-x-2\">\n//                   <CheckCircle size={16} />\n//                   <span>Mark as Paid</span>\n//                 </button>\n//               )}\n//               {!invoice.fulfilled && (\n//                 <button className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center space-x-2\">\n//                   <FileText size={16} />\n//                   <span>Mark as Fulfilled</span>\n//                 </button>\n//               )}\n//               <button className=\"px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 flex items-center space-x-2\">\n//                 <Download size={16} />\n//                 <span>Download Invoice</span>\n//               </button>\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n\n//    {isPaymentModalOpen && (\n//   <React.Suspense fallback={<div>Loading Payment Modal...</div>}>\n//     <RecordPaymentModal\n//       invoiceId={invoice.orderId}\n//       amount={invoice.total}\n//       onClose={() => setPaymentModalOpen(false)}\n//       onSubmit={(date, enteredAmount, method, account, memo, paymentData, isFullPayment) => {\n//         console.log('Payment Submitted:', { \n//           date, \n//           enteredAmount, \n//           method, \n//           account, \n//           memo, \n//           paymentData, \n//           isFullPayment \n//         });\n\n//         if (isFullPayment) {\n//           // Update the local state to reflect the paid status\n//           // This will trigger a re-render with the updated status\n//           invoice.paid = true;\n//           invoice.paymentStatus = 'paid';\n//         }\n\n//         setPaymentModalOpen(false);\n\n//         // You might want to refresh the data or show a success message\n//        // message.success(isFullPayment ? 'Invoice marked as paid!' : 'Partial payment recorded!');\n//       }}\n//     />\n//   </React.Suspense>\n// )}\n\n//     </>\n//   );\n// };\n\n// export default InvoiceDetailModal;\n\n// import React, { useState, useEffect } from 'react';\n// import { XCircle, CheckCircle, FileText, Download, Clock, Calendar, DollarSign } from 'lucide-react';\n// import { formatCurrency, formatDate } from '../components/AccountsReceivable/AccountsReceivableUtils/formatters';\n// import RecordPaymentModal from '../components/AccountsReceivable/RecordPaymentModal';\n\n// const InvoiceDetailModal = ({ invoice, onClose, getCustomerName, onRefresh }) => {\n//   const [isPaymentModalOpen, setPaymentModalOpen] = useState(false);\n//   const [localInvoice, setLocalInvoice] = useState(invoice);\n//   const [paymentHistory, setPaymentHistory] = useState([]);\n\n//   // Load payment history when invoice changes\n//   useEffect(() => {\n//     if (invoice) {\n//       setLocalInvoice(invoice);\n//       loadPaymentHistory();\n//     }\n//   }, [invoice]);\n\n//   const loadPaymentHistory = () => {\n//     const storedPayments = JSON.parse(localStorage.getItem('payments') || '[]');\n//     const invoicePayments = storedPayments.filter(\n//       payment => payment.invoiceId === invoice.orderId || payment.orderId === invoice.orderId\n//     );\n//     setPaymentHistory(invoicePayments);\n//   };\n\n//   const handlePaymentComplete = (paymentData, isFullPayment) => {\n//     // Update local invoice state to reflect the payment\n//     if (isFullPayment) {\n//       setLocalInvoice(prev => ({\n//         ...prev,\n//         paid: true,\n//         paymentStatus: 'paid',\n//         remainingAmount: 0\n//       }));\n//     } else {\n//       setLocalInvoice(prev => ({\n//         ...prev,\n//         paid: false,\n//         paymentStatus: 'partial',\n//         remainingAmount: paymentData.remainingAmount\n//       }));\n//     }\n\n//     // Reload payment history\n//     loadPaymentHistory();\n\n//     // Trigger parent refresh if available\n//     if (onRefresh) {\n//       onRefresh();\n//     }\n\n//     setPaymentModalOpen(false);\n//   };\n\n//   const handleMarkAsPaid = async () => {\n//     try {\n//       // Update order status in localStorage\n//       const existingOrders = JSON.parse(localStorage.getItem('orders') || '[]');\n//       const orderIndex = existingOrders.findIndex(order => \n//         order.orderId === localInvoice.orderId || order.id === localInvoice.orderId\n//       );\n\n//       if (orderIndex !== -1) {\n//         existingOrders[orderIndex] = {\n//           ...existingOrders[orderIndex],\n//           paid: true,\n//           paymentStatus: 'paid',\n//           paymentDate: new Date().toISOString().split('T')[0],\n//           remainingAmount: 0\n//         };\n\n//         localStorage.setItem('orders', JSON.stringify(existingOrders));\n//       }\n\n//       // Update local state\n//       setLocalInvoice(prev => ({\n//         ...prev,\n//         paid: true,\n//         paymentStatus: 'paid'\n//       }));\n\n//       // Trigger refresh\n//       if (onRefresh) {\n//         onRefresh();\n//       }\n//     } catch (error) {\n//       console.error('Error marking as paid:', error);\n//     }\n//   };\n\n//   const handleMarkAsFulfilled = async () => {\n//     try {\n//       // Update order status in localStorage\n//       const existingOrders = JSON.parse(localStorage.getItem('orders') || '[]');\n//       const orderIndex = existingOrders.findIndex(order => \n//         order.orderId === localInvoice.orderId || order.id === localInvoice.orderId\n//       );\n\n//       if (orderIndex !== -1) {\n//         existingOrders[orderIndex] = {\n//           ...existingOrders[orderIndex],\n//           fulfilled: true,\n//           fulfillmentDate: new Date().toISOString()\n//         };\n\n//         localStorage.setItem('orders', JSON.stringify(existingOrders));\n//       }\n\n//       // Update local state\n//       setLocalInvoice(prev => ({\n//         ...prev,\n//         fulfilled: true\n//       }));\n\n//       // Trigger refresh\n//       if (onRefresh) {\n//         onRefresh();\n//       }\n//     } catch (error) {\n//       console.error('Error marking as fulfilled:', error);\n//     }\n//   };\n\n//   const getStatusBadge = (invoice) => {\n//     let statusClass = '';\n//     let statusText = '';\n\n//     if (invoice.paid) {\n//       statusClass = 'bg-green-100 text-green-800';\n//       statusText = 'Paid';\n//     } else if (invoice.paymentStatus === 'partial') {\n//       statusClass = 'bg-orange-100 text-orange-800';\n//       statusText = 'Partial Payment';\n//     } else {\n//       statusClass = 'bg-red-100 text-red-800';\n//       statusText = 'Unpaid';\n//     }\n\n//     return (\n//       <span className={`px-2 py-1 text-xs font-medium rounded-full ${statusClass}`}>\n//         {statusText}\n//       </span>\n//     );\n//   };\n\n//   const getFulfillmentBadge = (invoice) => {\n//     if (invoice.fulfilled) {\n//       return (\n//         <span className=\"px-2 py-1 text-xs font-medium rounded-full bg-blue-100 text-blue-800\">\n//           Fulfilled\n//         </span>\n//       );\n//     } else {\n//       return (\n//         <span className=\"px-2 py-1 text-xs font-medium rounded-full bg-yellow-100 text-yellow-800\">\n//           Pending Fulfillment\n//         </span>\n//       );\n//     }\n//   };\n\n//   return (\n//     <>\n//       <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center p-4 z-50\">\n//         <div className=\"bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-y-auto\">\n//           <div className=\"px-6 py-4 border-b border-gray-200\">\n//             <div className=\"flex items-center justify-between\">\n//               <h3 className=\"text-lg font-semibold text-gray-900\">\n//                 Order Details - #{localInvoice.orderId}\n//               </h3>\n//               <button\n//                 onClick={onClose}\n//                 className=\"text-gray-400 hover:text-gray-600\"\n//               >\n//                 <XCircle size={20} />\n//               </button>\n//             </div>\n//           </div>\n\n//           <div className=\"px-6 py-4\">\n//             {/* Order Info */}\n//             <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-6\">\n//               <div className=\"space-y-4\">\n//                 <div>\n//                   <label className=\"text-sm font-medium text-gray-500\">Order ID</label>\n//                   <p className=\"text-sm text-gray-900\">{localInvoice.orderId}</p>\n//                 </div>\n//                 <div>\n//                   <label className=\"text-sm font-medium text-gray-500\">Customer</label>\n//                   <p className=\"text-sm text-gray-900\">{getCustomerName(localInvoice.customerId)}</p>\n//                 </div>\n//                 <div>\n//                   <label className=\"text-sm font-medium text-gray-500\">Created Date</label>\n//                   <p className=\"text-sm text-gray-900\">{formatDate(localInvoice.createdAt)}</p>\n//                 </div>\n//                 <div>\n//                   <label className=\"text-sm font-medium text-gray-500\">Status</label>\n//                   <p className=\"text-sm text-gray-900\">{localInvoice.status}</p>\n//                 </div>\n//               </div>\n\n//               <div className=\"space-y-4\">\n//                 <div>\n//                   <label className=\"text-sm font-medium text-gray-500\">Payment Status</label>\n//                   <div className=\"flex items-center gap-2 mt-1\">\n//                     {getStatusBadge(localInvoice)}\n//                     {localInvoice.paymentStatus === 'partial' && (\n//                       <span className=\"text-xs text-gray-500\">\n//                         ({formatCurrency(localInvoice.remainingAmount || 0)} remaining)\n//                       </span>\n//                     )}\n//                   </div>\n//                 </div>\n//                 <div>\n//                   <label className=\"text-sm font-medium text-gray-500\">Fulfillment Status</label>\n//                   <div className=\"mt-1\">\n//                     {getFulfillmentBadge(localInvoice)}\n//                   </div>\n//                 </div>\n//                 <div>\n//                   <label className=\"text-sm font-medium text-gray-500\">Total Amount</label>\n//                   <p className=\"text-sm font-medium text-gray-900\">{formatCurrency(localInvoice.total)}</p>\n//                 </div>\n//                 <div>\n//                   <label className=\"text-sm font-medium text-gray-500\">Last Updated</label>\n//                   <p className=\"text-sm text-gray-900\">{formatDate(localInvoice.updatedAt || localInvoice.createdAt)}</p>\n//                 </div>\n//               </div>\n//             </div>\n\n//             {/* Order Items */}\n//             <div className=\"mb-6\">\n//               <h4 className=\"text-md font-medium text-gray-900 mb-3\">Order Items</h4>\n//               <div className=\"border border-gray-200 rounded-lg overflow-hidden\">\n//                 <table className=\"min-w-full divide-y divide-gray-200\">\n//                   <thead className=\"bg-gray-50\">\n//                     <tr>\n//                       <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Item</th>\n//                       <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Quantity</th>\n//                       <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Price</th>\n//                       <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Total</th>\n//                     </tr>\n//                   </thead>\n//                   <tbody className=\"bg-white divide-y divide-gray-200\">\n//                     {localInvoice.items && localInvoice.items.map((item, index) => (\n//                       <tr key={index}>\n//                         <td className=\"px-4 py-3 text-sm text-gray-900\">{item.name}</td>\n//                         <td className=\"px-4 py-3 text-sm text-gray-900\">{item.quantity}</td>\n//                         <td className=\"px-4 py-3 text-sm text-gray-900\">{formatCurrency(item.price)}</td>\n//                         <td className=\"px-4 py-3 text-sm text-gray-900\">{formatCurrency(item.quantity * item.price)}</td>\n//                       </tr>\n//                     ))}\n//                     <tr className=\"bg-gray-50\">\n//                       <td colSpan=\"3\" className=\"px-4 py-3 text-sm font-medium text-gray-900 text-right\">Total</td>\n//                       <td className=\"px-4 py-3 text-sm font-medium text-gray-900\">{formatCurrency(localInvoice.total)}</td>\n//                     </tr>\n//                   </tbody>\n//                 </table>\n//               </div>\n//             </div>\n\n//             {/* Payment History */}\n//             {paymentHistory.length > 0 && (\n//               <div className=\"mb-6\">\n//                 <h4 className=\"text-md font-medium text-gray-900 mb-3\">Payment History</h4>\n//                 <div className=\"border border-gray-200 rounded-lg overflow-hidden\">\n//                   <table className=\"min-w-full divide-y divide-gray-200\">\n//                     <thead className=\"bg-gray-50\">\n//                       <tr>\n//                         <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Date</th>\n//                         <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Amount</th>\n//                         <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Method</th>\n//                         <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Memo</th>\n//                       </tr>\n//                     </thead>\n//                     <tbody className=\"bg-white divide-y divide-gray-200\">\n//                       {paymentHistory.map((payment, index) => (\n//                         <tr key={index}>\n//                           <td className=\"px-4 py-3 text-sm text-gray-900\">{formatDate(payment.date)}</td>\n//                           <td className=\"px-4 py-3 text-sm text-gray-900\">{formatCurrency(payment.amount)}</td>\n//                           <td className=\"px-4 py-3 text-sm text-gray-900\">{payment.paymentMethod}</td>\n//                           <td className=\"px-4 py-3 text-sm text-gray-600\">{payment.memo || '-'}</td>\n//                         </tr>\n//                       ))}\n//                     </tbody>\n//                   </table>\n//                 </div>\n//               </div>\n//             )}\n\n//             {/* Action Buttons */}\n//             <div className=\"flex flex-wrap gap-3 pt-4 border-t border-gray-200\">\n//               {!localInvoice.paid && (\n//                 <button\n//                   onClick={() => setPaymentModalOpen(true)}\n//                   className=\"flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\"\n//                 >\n//                   <DollarSign size={16} />\n//                   Record Payment\n//                 </button>\n//               )}\n\n//               {!localInvoice.paid && (\n//                 <button\n//                   onClick={handleMarkAsPaid}\n//                   className=\"flex items-center gap-2 px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors\"\n//                 >\n//                   <CheckCircle size={16} />\n//                   Mark as Paid\n//                 </button>\n//               )}\n\n//               {!localInvoice.fulfilled && (\n//                 <button\n//                   onClick={handleMarkAsFulfilled}\n//                   className=\"flex items-center gap-2 px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors\"\n//                 >\n//                   <CheckCircle size={16} />\n//                   Mark as Fulfilled\n//                 </button>\n//               )}\n\n//               <button className=\"flex items-center gap-2 px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors\">\n//                 <Download size={16} />\n//                 Download Invoice\n//               </button>\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n\n//       {/* Payment Modal */}\n//       {isPaymentModalOpen && (\n//         <RecordPaymentModal\n//           invoiceId={localInvoice.orderId}\n//           amount={localInvoice.remainingAmount || localInvoice.total}\n//           onClose={() => setPaymentModalOpen(false)}\n//           onPaymentComplete={handlePaymentComplete}\n//         />\n//       )}\n//     </>\n//   );\n// };\n\n// export default InvoiceDetailModal;\n\nimport React, { useState, useEffect } from 'react';\nimport { XCircle, CheckCircle, Download, DollarSign } from 'lucide-react';\nimport { formatCurrency, formatDate } from '../components/AccountsReceivable/AccountsReceivableUtils/formatters';\nimport RecordPaymentModal from '../components/AccountsReceivable/RecordPaymentModal';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst InvoiceDetailModal = ({\n  invoice,\n  onClose,\n  getCustomerName,\n  onRefresh\n}) => {\n  _s();\n  const [localInvoice, setLocalInvoice] = useState(invoice);\n  const [isPaymentModalOpen, setPaymentModalOpen] = useState(false);\n  const [paymentHistory, setPaymentHistory] = useState([]);\n  useEffect(() => {\n    if (invoice) {\n      setLocalInvoice(invoice);\n      loadPaymentHistory();\n    }\n  }, [invoice]);\n  const loadPaymentHistory = () => {\n    const storedPayments = JSON.parse(localStorage.getItem('payments') || '[]');\n    const invoicePayments = storedPayments.filter(p => p.invoiceId === invoice.orderId || p.orderId === invoice.orderId);\n    setPaymentHistory(invoicePayments);\n  };\n  const handlePaymentComplete = (paymentData, isFullPayment) => {\n    if (isFullPayment) {\n      setLocalInvoice(prev => ({\n        ...prev,\n        paid: true,\n        paymentStatus: 'paid',\n        remainingAmount: 0\n      }));\n    } else {\n      setLocalInvoice(prev => ({\n        ...prev,\n        paid: false,\n        paymentStatus: 'partial',\n        remainingAmount: paymentData.remainingAmount\n      }));\n    }\n    loadPaymentHistory();\n    if (onRefresh) onRefresh();\n    setPaymentModalOpen(false);\n  };\n  const handleMarkAsPaid = () => {\n    const orders = JSON.parse(localStorage.getItem('orders') || '[]');\n    const index = orders.findIndex(o => o.orderId === localInvoice.orderId || o.id === localInvoice.orderId);\n    if (index !== -1) {\n      orders[index] = {\n        ...orders[index],\n        paid: true,\n        paymentStatus: 'paid',\n        remainingAmount: 0\n      };\n      localStorage.setItem('orders', JSON.stringify(orders));\n    }\n    setLocalInvoice(prev => ({\n      ...prev,\n      paid: true,\n      paymentStatus: 'paid',\n      remainingAmount: 0\n    }));\n    if (onRefresh) onRefresh();\n  };\n  const handleMarkAsFulfilled = () => {\n    const orders = JSON.parse(localStorage.getItem('orders') || '[]');\n    const index = orders.findIndex(o => o.orderId === localInvoice.orderId || o.id === localInvoice.orderId);\n    if (index !== -1) {\n      orders[index] = {\n        ...orders[index],\n        fulfilled: true\n      };\n      localStorage.setItem('orders', JSON.stringify(orders));\n    }\n    setLocalInvoice(prev => ({\n      ...prev,\n      fulfilled: true\n    }));\n    if (onRefresh) onRefresh();\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center p-4 z-50\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-y-auto\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"px-6 py-4 border-b border-gray-200 flex items-center justify-between\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"text-lg font-semibold text-gray-900\",\n            children: [\"Order Details - #\", localInvoice.orderId]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 633,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: onClose,\n            className: \"text-gray-400 hover:text-gray-600\",\n            children: /*#__PURE__*/_jsxDEV(XCircle, {\n              size: 20\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 637,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 636,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 632,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"px-6 py-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"text-md font-medium text-gray-900 mb-3\",\n            children: \"Order Items\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 643,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"border border-gray-200 rounded-lg overflow-x-auto\",\n            children: /*#__PURE__*/_jsxDEV(\"table\", {\n              className: \"min-w-full divide-y divide-gray-200\",\n              children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                className: \"bg-gray-50\",\n                children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                    className: \"px-4 py-2 text-left text-xs font-medium text-gray-500\",\n                    children: \"Item\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 648,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    className: \"px-4 py-2 text-left text-xs font-medium text-gray-500\",\n                    children: \"Description\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 649,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    className: \"px-4 py-2 text-left text-xs font-medium text-gray-500\",\n                    children: \"Quantity\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 650,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    className: \"px-4 py-2 text-left text-xs font-medium text-gray-500\",\n                    children: \"Unit Price\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 651,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    className: \"px-4 py-2 text-left text-xs font-medium text-gray-500\",\n                    children: \"Total\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 652,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    className: \"px-4 py-2 text-left text-xs font-medium text-gray-500\",\n                    children: \"Status\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 653,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 647,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 646,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                className: \"bg-white divide-y divide-gray-200\",\n                children: localInvoice.items && localInvoice.items.map((item, idx) => /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    className: \"px-4 py-2 text-sm text-gray-900\",\n                    children: item.productName\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 659,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    className: \"px-4 py-2 text-sm text-gray-900\",\n                    children: item.description || '-'\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 660,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    className: \"px-4 py-2 text-sm text-gray-900\",\n                    children: item.quantity\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 661,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    className: \"px-4 py-2 text-sm text-gray-900\",\n                    children: formatCurrency(item.price)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 662,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    className: \"px-4 py-2 text-sm text-gray-900\",\n                    children: formatCurrency(item.total)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 663,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    className: \"px-4 py-2\",\n                    children: /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: `px-2 py-1 text-xs font-medium rounded-full ${item.fulfilled ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'}`,\n                      children: item.status || (item.fulfilled ? 'Fulfilled' : 'Pending')\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 665,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 664,\n                    columnNumber: 23\n                  }, this)]\n                }, idx, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 658,\n                  columnNumber: 21\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 656,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 645,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 644,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex flex-wrap gap-3 pt-4 border-t border-gray-200\",\n            children: [!localInvoice.paid && /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => setPaymentModalOpen(true),\n              className: \"flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\",\n              children: [/*#__PURE__*/_jsxDEV(DollarSign, {\n                size: 16\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 684,\n                columnNumber: 19\n              }, this), \"Record Payment\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 680,\n              columnNumber: 17\n            }, this), !localInvoice.paid && /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: handleMarkAsPaid,\n              className: \"flex items-center gap-2 px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors\",\n              children: [/*#__PURE__*/_jsxDEV(CheckCircle, {\n                size: 16\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 693,\n                columnNumber: 19\n              }, this), \"Mark as Paid\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 689,\n              columnNumber: 17\n            }, this), !localInvoice.fulfilled && /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: handleMarkAsFulfilled,\n              className: \"flex items-center gap-2 px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors\",\n              children: [/*#__PURE__*/_jsxDEV(CheckCircle, {\n                size: 16\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 702,\n                columnNumber: 19\n              }, this), \"Mark as Fulfilled\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 698,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"flex items-center gap-2 px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors\",\n              children: [/*#__PURE__*/_jsxDEV(Download, {\n                size: 16\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 707,\n                columnNumber: 17\n              }, this), \"Download Invoice\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 706,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 678,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 642,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 631,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 630,\n      columnNumber: 7\n    }, this), isPaymentModalOpen && /*#__PURE__*/_jsxDEV(RecordPaymentModal, {\n      invoiceId: localInvoice.orderId,\n      amount: localInvoice.remainingAmount || localInvoice.total,\n      onClose: () => setPaymentModalOpen(false),\n      onPaymentComplete: handlePaymentComplete\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 717,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n_s(InvoiceDetailModal, \"OJsPxw/EGoNsKkJk0t92F0Oj6Jw=\");\n_c = InvoiceDetailModal;\nexport default InvoiceDetailModal;\nvar _c;\n$RefreshReg$(_c, \"InvoiceDetailModal\");","map":{"version":3,"names":["React","useState","useEffect","XCircle","CheckCircle","Download","DollarSign","formatCurrency","formatDate","RecordPaymentModal","jsxDEV","_jsxDEV","Fragment","_Fragment","InvoiceDetailModal","invoice","onClose","getCustomerName","onRefresh","_s","localInvoice","setLocalInvoice","isPaymentModalOpen","setPaymentModalOpen","paymentHistory","setPaymentHistory","loadPaymentHistory","storedPayments","JSON","parse","localStorage","getItem","invoicePayments","filter","p","invoiceId","orderId","handlePaymentComplete","paymentData","isFullPayment","prev","paid","paymentStatus","remainingAmount","handleMarkAsPaid","orders","index","findIndex","o","id","setItem","stringify","handleMarkAsFulfilled","fulfilled","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onClick","size","items","map","item","idx","productName","description","quantity","price","total","status","amount","onPaymentComplete","_c","$RefreshReg$"],"sources":["C:/Users/Logic-Unit/my-account/src/modals/InvoiceDetailModal.jsx"],"sourcesContent":["// import React, { useState } from 'react';\r\n// import { XCircle, CheckCircle, FileText, Download } from 'lucide-react';\r\n// import { formatCurrency, formatDate } from '../components/AccountsReceivable/AccountsReceivableUtils/formatters';\r\n// const RecordPaymentModal = React.lazy(() =>\r\n//   import('../components/AccountsReceivable/RecordPaymentModal')\r\n// );\r\n\r\n// const InvoiceDetailModal = ({ invoice, onClose, getCustomerName }) => {\r\n//   const [isPaymentModalOpen, setPaymentModalOpen] = useState(false);\r\n\r\n//   return (\r\n//     <>\r\n//       <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center p-4 z-50\">\r\n//         <div className=\"bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-y-auto\">\r\n//           <div className=\"px-6 py-4 border-b border-gray-200\">\r\n//             <div className=\"flex items-center justify-between\">\r\n//               <h3 className=\"text-lg font-semibold text-gray-900\">\r\n//                 Order Details - #{invoice.orderId}\r\n//               </h3>\r\n//               <button\r\n//                 onClick={onClose}\r\n//                 className=\"text-gray-400 hover:text-gray-600\"\r\n//               >\r\n//                 <XCircle size={20} />\r\n//               </button>\r\n//             </div>\r\n//           </div>\r\n\r\n//           <div className=\"px-6 py-4\">\r\n//             {/* Order Info */}\r\n//             <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-6\">\r\n//               <div className=\"space-y-4\">\r\n//                 <div>\r\n//                   <label className=\"text-sm font-medium text-gray-500\">Order ID</label>\r\n//                   <p className=\"text-sm text-gray-900\">{invoice.orderId}</p>\r\n//                 </div>\r\n//                 <div>\r\n//                   <label className=\"text-sm font-medium text-gray-500\">Customer</label>\r\n//                   <p className=\"text-sm text-gray-900\">{getCustomerName(invoice.customerId)}</p>\r\n//                 </div>\r\n//                 <div>\r\n//                   <label className=\"text-sm font-medium text-gray-500\">Created Date</label>\r\n//                   <p className=\"text-sm text-gray-900\">{formatDate(invoice.createdAt)}</p>\r\n//                 </div>\r\n//                 <div>\r\n//                   <label className=\"text-sm font-medium text-gray-500\">Status</label>\r\n//                   <p className=\"text-sm text-gray-900\">{invoice.status}</p>\r\n//                 </div>\r\n//               </div>\r\n\r\n//               <div className=\"space-y-4\">\r\n//                 <div>\r\n//                   <label className=\"text-sm font-medium text-gray-500\">Payment Status</label>\r\n//                   <div>\r\n//                     <span className={`px-2 py-1 text-xs font-medium rounded-full ${\r\n//                       invoice.paid ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'\r\n//                     }`}>\r\n//                       {invoice.paid ? 'Paid' : 'Unpaid'}\r\n//                     </span>\r\n//                   </div>\r\n//                 </div>\r\n//                 <div>\r\n//                   <label className=\"text-sm font-medium text-gray-500\">Fulfillment Status</label>\r\n//                   <div>\r\n//                     <span className={`px-2 py-1 text-xs font-medium rounded-full ${\r\n//                       invoice.fulfilled ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'\r\n//                     }`}>\r\n//                       {invoice.fulfilled ? 'Fulfilled' : 'Pending'}\r\n//                     </span>\r\n//                   </div>\r\n//                 </div>\r\n//                 <div>\r\n//                   <label className=\"text-sm font-medium text-gray-500\">Total Amount</label>\r\n//                   <p className=\"text-lg font-bold text-gray-900\">{formatCurrency(invoice.total)}</p>\r\n//                 </div>\r\n//                 <div>\r\n//                   <label className=\"text-sm font-medium text-gray-500\">Payable Amount</label>\r\n//                   <p className=\"text-sm text-gray-900\">{formatCurrency(invoice.payableAmount)}</p>\r\n//                 </div>\r\n//               </div>\r\n//             </div>\r\n\r\n//             {/* Line Items */}\r\n//             <div className=\"mb-6\">\r\n//               <h4 className=\"text-md font-semibold text-gray-900 mb-3\">Order Items</h4>\r\n//               <div className=\"overflow-x-auto\">\r\n//                 <table className=\"w-full border border-gray-200 rounded\">\r\n//                   <thead className=\"bg-gray-50\">\r\n//                     <tr>\r\n//                       <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500\">Product</th>\r\n//                       <th className=\"px-4 py-2 text-right text-xs font-medium text-gray-500\">Quantity</th>\r\n//                       <th className=\"px-4 py-2 text-right text-xs font-medium text-gray-500\">Unit Price</th>\r\n//                       <th className=\"px-4 py-2 text-right text-xs font-medium text-gray-500\">Total</th>\r\n//                       <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500\">Status</th>\r\n//                     </tr>\r\n//                   </thead>\r\n//                   <tbody className=\"divide-y divide-gray-200\">\r\n//                     {invoice.lineItems.map((item, index) => (\r\n//                       <tr key={index}>\r\n//                         <td className=\"px-4 py-2 text-sm text-gray-900\">{item.productName}</td>\r\n//                         <td className=\"px-4 py-2 text-sm text-gray-900 text-right\">{item.quantity}</td>\r\n//                         <td className=\"px-4 py-2 text-sm text-gray-900 text-right\">{formatCurrency(item.price)}</td>\r\n//                         <td className=\"px-4 py-2 text-sm font-medium text-gray-900 text-right\">{formatCurrency(item.total)}</td>\r\n//                         <td className=\"px-4 py-2\">\r\n//                           <span className={`px-2 py-1 text-xs font-medium rounded-full ${\r\n//                             item.fulfilled ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'\r\n//                           }`}>\r\n//                             {item.status}\r\n//                           </span>\r\n//                         </td>\r\n//                       </tr>\r\n//                     ))}\r\n//                   </tbody>\r\n//                 </table>\r\n//               </div>\r\n//             </div>\r\n\r\n//             {/* Totals */}\r\n//             <div className=\"bg-gray-50 p-4 rounded-lg\">\r\n//               <div className=\"space-y-2\">\r\n//                 <div className=\"flex justify-between\">\r\n//                   <span className=\"text-sm text-gray-600\">Subtotal:</span>\r\n//                   <span className=\"text-sm text-gray-900\">{formatCurrency(invoice.subTotal)}</span>\r\n//                 </div>\r\n//                 <div className=\"flex justify-between\">\r\n//                   <span className=\"text-sm text-gray-600\">Tax ({invoice.taxRate}%):</span>\r\n//                   <span className=\"text-sm text-gray-900\">{formatCurrency(invoice.taxAmount)}</span>\r\n//                 </div>\r\n//                 {invoice.discountAmount > 0 && (\r\n//                   <div className=\"flex justify-between\">\r\n//                     <span className=\"text-sm text-gray-600\">Discount:</span>\r\n//                     <span className=\"text-sm text-red-600\">-{formatCurrency(invoice.discountAmount)}</span>\r\n//                   </div>\r\n//                 )}\r\n//                 <div className=\"flex justify-between font-bold text-lg border-t pt-2\">\r\n//                   <span>Total:</span>\r\n//                   <span>{formatCurrency(invoice.total)}</span>\r\n//                 </div>\r\n//               </div>\r\n//             </div>\r\n\r\n//             {/* Action Buttons */}\r\n//             <div className=\"flex space-x-3 mt-6\">\r\n//               <button\r\n//                 className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center space-x-2\"\r\n//                 onClick={() => setPaymentModalOpen(true)}\r\n//               >\r\n//                 <CheckCircle size={16} />\r\n//                 <span>Record Payment</span>\r\n//               </button>\r\n\r\n//               {!invoice.paid && (\r\n//                 <button className=\"px-4 py-2 bg-emerald-600 text-white rounded-lg hover:bg-emerald-700 flex items-center space-x-2\">\r\n//                   <CheckCircle size={16} />\r\n//                   <span>Mark as Paid</span>\r\n//                 </button>\r\n//               )}\r\n//               {!invoice.fulfilled && (\r\n//                 <button className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center space-x-2\">\r\n//                   <FileText size={16} />\r\n//                   <span>Mark as Fulfilled</span>\r\n//                 </button>\r\n//               )}\r\n//               <button className=\"px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 flex items-center space-x-2\">\r\n//                 <Download size={16} />\r\n//                 <span>Download Invoice</span>\r\n//               </button>\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n\r\n//    {isPaymentModalOpen && (\r\n//   <React.Suspense fallback={<div>Loading Payment Modal...</div>}>\r\n//     <RecordPaymentModal\r\n//       invoiceId={invoice.orderId}\r\n//       amount={invoice.total}\r\n//       onClose={() => setPaymentModalOpen(false)}\r\n//       onSubmit={(date, enteredAmount, method, account, memo, paymentData, isFullPayment) => {\r\n//         console.log('Payment Submitted:', { \r\n//           date, \r\n//           enteredAmount, \r\n//           method, \r\n//           account, \r\n//           memo, \r\n//           paymentData, \r\n//           isFullPayment \r\n//         });\r\n        \r\n//         if (isFullPayment) {\r\n//           // Update the local state to reflect the paid status\r\n//           // This will trigger a re-render with the updated status\r\n//           invoice.paid = true;\r\n//           invoice.paymentStatus = 'paid';\r\n//         }\r\n        \r\n//         setPaymentModalOpen(false);\r\n        \r\n//         // You might want to refresh the data or show a success message\r\n//        // message.success(isFullPayment ? 'Invoice marked as paid!' : 'Partial payment recorded!');\r\n//       }}\r\n//     />\r\n//   </React.Suspense>\r\n// )}\r\n\r\n//     </>\r\n//   );\r\n// };\r\n\r\n// export default InvoiceDetailModal;\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import { XCircle, CheckCircle, FileText, Download, Clock, Calendar, DollarSign } from 'lucide-react';\r\n// import { formatCurrency, formatDate } from '../components/AccountsReceivable/AccountsReceivableUtils/formatters';\r\n// import RecordPaymentModal from '../components/AccountsReceivable/RecordPaymentModal';\r\n\r\n// const InvoiceDetailModal = ({ invoice, onClose, getCustomerName, onRefresh }) => {\r\n//   const [isPaymentModalOpen, setPaymentModalOpen] = useState(false);\r\n//   const [localInvoice, setLocalInvoice] = useState(invoice);\r\n//   const [paymentHistory, setPaymentHistory] = useState([]);\r\n\r\n//   // Load payment history when invoice changes\r\n//   useEffect(() => {\r\n//     if (invoice) {\r\n//       setLocalInvoice(invoice);\r\n//       loadPaymentHistory();\r\n//     }\r\n//   }, [invoice]);\r\n\r\n//   const loadPaymentHistory = () => {\r\n//     const storedPayments = JSON.parse(localStorage.getItem('payments') || '[]');\r\n//     const invoicePayments = storedPayments.filter(\r\n//       payment => payment.invoiceId === invoice.orderId || payment.orderId === invoice.orderId\r\n//     );\r\n//     setPaymentHistory(invoicePayments);\r\n//   };\r\n\r\n//   const handlePaymentComplete = (paymentData, isFullPayment) => {\r\n//     // Update local invoice state to reflect the payment\r\n//     if (isFullPayment) {\r\n//       setLocalInvoice(prev => ({\r\n//         ...prev,\r\n//         paid: true,\r\n//         paymentStatus: 'paid',\r\n//         remainingAmount: 0\r\n//       }));\r\n//     } else {\r\n//       setLocalInvoice(prev => ({\r\n//         ...prev,\r\n//         paid: false,\r\n//         paymentStatus: 'partial',\r\n//         remainingAmount: paymentData.remainingAmount\r\n//       }));\r\n//     }\r\n\r\n//     // Reload payment history\r\n//     loadPaymentHistory();\r\n\r\n//     // Trigger parent refresh if available\r\n//     if (onRefresh) {\r\n//       onRefresh();\r\n//     }\r\n\r\n//     setPaymentModalOpen(false);\r\n//   };\r\n\r\n//   const handleMarkAsPaid = async () => {\r\n//     try {\r\n//       // Update order status in localStorage\r\n//       const existingOrders = JSON.parse(localStorage.getItem('orders') || '[]');\r\n//       const orderIndex = existingOrders.findIndex(order => \r\n//         order.orderId === localInvoice.orderId || order.id === localInvoice.orderId\r\n//       );\r\n      \r\n//       if (orderIndex !== -1) {\r\n//         existingOrders[orderIndex] = {\r\n//           ...existingOrders[orderIndex],\r\n//           paid: true,\r\n//           paymentStatus: 'paid',\r\n//           paymentDate: new Date().toISOString().split('T')[0],\r\n//           remainingAmount: 0\r\n//         };\r\n        \r\n//         localStorage.setItem('orders', JSON.stringify(existingOrders));\r\n//       }\r\n\r\n//       // Update local state\r\n//       setLocalInvoice(prev => ({\r\n//         ...prev,\r\n//         paid: true,\r\n//         paymentStatus: 'paid'\r\n//       }));\r\n\r\n//       // Trigger refresh\r\n//       if (onRefresh) {\r\n//         onRefresh();\r\n//       }\r\n//     } catch (error) {\r\n//       console.error('Error marking as paid:', error);\r\n//     }\r\n//   };\r\n\r\n//   const handleMarkAsFulfilled = async () => {\r\n//     try {\r\n//       // Update order status in localStorage\r\n//       const existingOrders = JSON.parse(localStorage.getItem('orders') || '[]');\r\n//       const orderIndex = existingOrders.findIndex(order => \r\n//         order.orderId === localInvoice.orderId || order.id === localInvoice.orderId\r\n//       );\r\n      \r\n//       if (orderIndex !== -1) {\r\n//         existingOrders[orderIndex] = {\r\n//           ...existingOrders[orderIndex],\r\n//           fulfilled: true,\r\n//           fulfillmentDate: new Date().toISOString()\r\n//         };\r\n        \r\n//         localStorage.setItem('orders', JSON.stringify(existingOrders));\r\n//       }\r\n\r\n//       // Update local state\r\n//       setLocalInvoice(prev => ({\r\n//         ...prev,\r\n//         fulfilled: true\r\n//       }));\r\n\r\n//       // Trigger refresh\r\n//       if (onRefresh) {\r\n//         onRefresh();\r\n//       }\r\n//     } catch (error) {\r\n//       console.error('Error marking as fulfilled:', error);\r\n//     }\r\n//   };\r\n\r\n//   const getStatusBadge = (invoice) => {\r\n//     let statusClass = '';\r\n//     let statusText = '';\r\n    \r\n//     if (invoice.paid) {\r\n//       statusClass = 'bg-green-100 text-green-800';\r\n//       statusText = 'Paid';\r\n//     } else if (invoice.paymentStatus === 'partial') {\r\n//       statusClass = 'bg-orange-100 text-orange-800';\r\n//       statusText = 'Partial Payment';\r\n//     } else {\r\n//       statusClass = 'bg-red-100 text-red-800';\r\n//       statusText = 'Unpaid';\r\n//     }\r\n    \r\n//     return (\r\n//       <span className={`px-2 py-1 text-xs font-medium rounded-full ${statusClass}`}>\r\n//         {statusText}\r\n//       </span>\r\n//     );\r\n//   };\r\n\r\n//   const getFulfillmentBadge = (invoice) => {\r\n//     if (invoice.fulfilled) {\r\n//       return (\r\n//         <span className=\"px-2 py-1 text-xs font-medium rounded-full bg-blue-100 text-blue-800\">\r\n//           Fulfilled\r\n//         </span>\r\n//       );\r\n//     } else {\r\n//       return (\r\n//         <span className=\"px-2 py-1 text-xs font-medium rounded-full bg-yellow-100 text-yellow-800\">\r\n//           Pending Fulfillment\r\n//         </span>\r\n//       );\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <>\r\n//       <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center p-4 z-50\">\r\n//         <div className=\"bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-y-auto\">\r\n//           <div className=\"px-6 py-4 border-b border-gray-200\">\r\n//             <div className=\"flex items-center justify-between\">\r\n//               <h3 className=\"text-lg font-semibold text-gray-900\">\r\n//                 Order Details - #{localInvoice.orderId}\r\n//               </h3>\r\n//               <button\r\n//                 onClick={onClose}\r\n//                 className=\"text-gray-400 hover:text-gray-600\"\r\n//               >\r\n//                 <XCircle size={20} />\r\n//               </button>\r\n//             </div>\r\n//           </div>\r\n\r\n//           <div className=\"px-6 py-4\">\r\n//             {/* Order Info */}\r\n//             <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-6\">\r\n//               <div className=\"space-y-4\">\r\n//                 <div>\r\n//                   <label className=\"text-sm font-medium text-gray-500\">Order ID</label>\r\n//                   <p className=\"text-sm text-gray-900\">{localInvoice.orderId}</p>\r\n//                 </div>\r\n//                 <div>\r\n//                   <label className=\"text-sm font-medium text-gray-500\">Customer</label>\r\n//                   <p className=\"text-sm text-gray-900\">{getCustomerName(localInvoice.customerId)}</p>\r\n//                 </div>\r\n//                 <div>\r\n//                   <label className=\"text-sm font-medium text-gray-500\">Created Date</label>\r\n//                   <p className=\"text-sm text-gray-900\">{formatDate(localInvoice.createdAt)}</p>\r\n//                 </div>\r\n//                 <div>\r\n//                   <label className=\"text-sm font-medium text-gray-500\">Status</label>\r\n//                   <p className=\"text-sm text-gray-900\">{localInvoice.status}</p>\r\n//                 </div>\r\n//               </div>\r\n\r\n//               <div className=\"space-y-4\">\r\n//                 <div>\r\n//                   <label className=\"text-sm font-medium text-gray-500\">Payment Status</label>\r\n//                   <div className=\"flex items-center gap-2 mt-1\">\r\n//                     {getStatusBadge(localInvoice)}\r\n//                     {localInvoice.paymentStatus === 'partial' && (\r\n//                       <span className=\"text-xs text-gray-500\">\r\n//                         ({formatCurrency(localInvoice.remainingAmount || 0)} remaining)\r\n//                       </span>\r\n//                     )}\r\n//                   </div>\r\n//                 </div>\r\n//                 <div>\r\n//                   <label className=\"text-sm font-medium text-gray-500\">Fulfillment Status</label>\r\n//                   <div className=\"mt-1\">\r\n//                     {getFulfillmentBadge(localInvoice)}\r\n//                   </div>\r\n//                 </div>\r\n//                 <div>\r\n//                   <label className=\"text-sm font-medium text-gray-500\">Total Amount</label>\r\n//                   <p className=\"text-sm font-medium text-gray-900\">{formatCurrency(localInvoice.total)}</p>\r\n//                 </div>\r\n//                 <div>\r\n//                   <label className=\"text-sm font-medium text-gray-500\">Last Updated</label>\r\n//                   <p className=\"text-sm text-gray-900\">{formatDate(localInvoice.updatedAt || localInvoice.createdAt)}</p>\r\n//                 </div>\r\n//               </div>\r\n//             </div>\r\n\r\n//             {/* Order Items */}\r\n//             <div className=\"mb-6\">\r\n//               <h4 className=\"text-md font-medium text-gray-900 mb-3\">Order Items</h4>\r\n//               <div className=\"border border-gray-200 rounded-lg overflow-hidden\">\r\n//                 <table className=\"min-w-full divide-y divide-gray-200\">\r\n//                   <thead className=\"bg-gray-50\">\r\n//                     <tr>\r\n//                       <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Item</th>\r\n//                       <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Quantity</th>\r\n//                       <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Price</th>\r\n//                       <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Total</th>\r\n//                     </tr>\r\n//                   </thead>\r\n//                   <tbody className=\"bg-white divide-y divide-gray-200\">\r\n//                     {localInvoice.items && localInvoice.items.map((item, index) => (\r\n//                       <tr key={index}>\r\n//                         <td className=\"px-4 py-3 text-sm text-gray-900\">{item.name}</td>\r\n//                         <td className=\"px-4 py-3 text-sm text-gray-900\">{item.quantity}</td>\r\n//                         <td className=\"px-4 py-3 text-sm text-gray-900\">{formatCurrency(item.price)}</td>\r\n//                         <td className=\"px-4 py-3 text-sm text-gray-900\">{formatCurrency(item.quantity * item.price)}</td>\r\n//                       </tr>\r\n//                     ))}\r\n//                     <tr className=\"bg-gray-50\">\r\n//                       <td colSpan=\"3\" className=\"px-4 py-3 text-sm font-medium text-gray-900 text-right\">Total</td>\r\n//                       <td className=\"px-4 py-3 text-sm font-medium text-gray-900\">{formatCurrency(localInvoice.total)}</td>\r\n//                     </tr>\r\n//                   </tbody>\r\n//                 </table>\r\n//               </div>\r\n//             </div>\r\n\r\n//             {/* Payment History */}\r\n//             {paymentHistory.length > 0 && (\r\n//               <div className=\"mb-6\">\r\n//                 <h4 className=\"text-md font-medium text-gray-900 mb-3\">Payment History</h4>\r\n//                 <div className=\"border border-gray-200 rounded-lg overflow-hidden\">\r\n//                   <table className=\"min-w-full divide-y divide-gray-200\">\r\n//                     <thead className=\"bg-gray-50\">\r\n//                       <tr>\r\n//                         <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Date</th>\r\n//                         <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Amount</th>\r\n//                         <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Method</th>\r\n//                         <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Memo</th>\r\n//                       </tr>\r\n//                     </thead>\r\n//                     <tbody className=\"bg-white divide-y divide-gray-200\">\r\n//                       {paymentHistory.map((payment, index) => (\r\n//                         <tr key={index}>\r\n//                           <td className=\"px-4 py-3 text-sm text-gray-900\">{formatDate(payment.date)}</td>\r\n//                           <td className=\"px-4 py-3 text-sm text-gray-900\">{formatCurrency(payment.amount)}</td>\r\n//                           <td className=\"px-4 py-3 text-sm text-gray-900\">{payment.paymentMethod}</td>\r\n//                           <td className=\"px-4 py-3 text-sm text-gray-600\">{payment.memo || '-'}</td>\r\n//                         </tr>\r\n//                       ))}\r\n//                     </tbody>\r\n//                   </table>\r\n//                 </div>\r\n//               </div>\r\n//             )}\r\n\r\n//             {/* Action Buttons */}\r\n//             <div className=\"flex flex-wrap gap-3 pt-4 border-t border-gray-200\">\r\n//               {!localInvoice.paid && (\r\n//                 <button\r\n//                   onClick={() => setPaymentModalOpen(true)}\r\n//                   className=\"flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\"\r\n//                 >\r\n//                   <DollarSign size={16} />\r\n//                   Record Payment\r\n//                 </button>\r\n//               )}\r\n              \r\n//               {!localInvoice.paid && (\r\n//                 <button\r\n//                   onClick={handleMarkAsPaid}\r\n//                   className=\"flex items-center gap-2 px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors\"\r\n//                 >\r\n//                   <CheckCircle size={16} />\r\n//                   Mark as Paid\r\n//                 </button>\r\n//               )}\r\n              \r\n//               {!localInvoice.fulfilled && (\r\n//                 <button\r\n//                   onClick={handleMarkAsFulfilled}\r\n//                   className=\"flex items-center gap-2 px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors\"\r\n//                 >\r\n//                   <CheckCircle size={16} />\r\n//                   Mark as Fulfilled\r\n//                 </button>\r\n//               )}\r\n              \r\n//               <button className=\"flex items-center gap-2 px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors\">\r\n//                 <Download size={16} />\r\n//                 Download Invoice\r\n//               </button>\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n\r\n//       {/* Payment Modal */}\r\n//       {isPaymentModalOpen && (\r\n//         <RecordPaymentModal\r\n//           invoiceId={localInvoice.orderId}\r\n//           amount={localInvoice.remainingAmount || localInvoice.total}\r\n//           onClose={() => setPaymentModalOpen(false)}\r\n//           onPaymentComplete={handlePaymentComplete}\r\n//         />\r\n//       )}\r\n//     </>\r\n//   );\r\n// };\r\n\r\n// export default InvoiceDetailModal;\r\n\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { XCircle, CheckCircle, Download, DollarSign } from 'lucide-react';\r\nimport { formatCurrency, formatDate } from '../components/AccountsReceivable/AccountsReceivableUtils/formatters';\r\nimport RecordPaymentModal from '../components/AccountsReceivable/RecordPaymentModal';\r\n\r\nconst InvoiceDetailModal = ({ invoice, onClose, getCustomerName, onRefresh }) => {\r\n  const [localInvoice, setLocalInvoice] = useState(invoice);\r\n  const [isPaymentModalOpen, setPaymentModalOpen] = useState(false);\r\n  const [paymentHistory, setPaymentHistory] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (invoice) {\r\n      setLocalInvoice(invoice);\r\n      loadPaymentHistory();\r\n    }\r\n  }, [invoice]);\r\n\r\n  const loadPaymentHistory = () => {\r\n    const storedPayments = JSON.parse(localStorage.getItem('payments') || '[]');\r\n    const invoicePayments = storedPayments.filter(\r\n      p => p.invoiceId === invoice.orderId || p.orderId === invoice.orderId\r\n    );\r\n    setPaymentHistory(invoicePayments);\r\n  };\r\n\r\n  const handlePaymentComplete = (paymentData, isFullPayment) => {\r\n    if (isFullPayment) {\r\n      setLocalInvoice(prev => ({\r\n        ...prev,\r\n        paid: true,\r\n        paymentStatus: 'paid',\r\n        remainingAmount: 0\r\n      }));\r\n    } else {\r\n      setLocalInvoice(prev => ({\r\n        ...prev,\r\n        paid: false,\r\n        paymentStatus: 'partial',\r\n        remainingAmount: paymentData.remainingAmount\r\n      }));\r\n    }\r\n    loadPaymentHistory();\r\n    if (onRefresh) onRefresh();\r\n    setPaymentModalOpen(false);\r\n  };\r\n\r\n  const handleMarkAsPaid = () => {\r\n    const orders = JSON.parse(localStorage.getItem('orders') || '[]');\r\n    const index = orders.findIndex(o => o.orderId === localInvoice.orderId || o.id === localInvoice.orderId);\r\n    if (index !== -1) {\r\n      orders[index] = { ...orders[index], paid: true, paymentStatus: 'paid', remainingAmount: 0 };\r\n      localStorage.setItem('orders', JSON.stringify(orders));\r\n    }\r\n    setLocalInvoice(prev => ({ ...prev, paid: true, paymentStatus: 'paid', remainingAmount: 0 }));\r\n    if (onRefresh) onRefresh();\r\n  };\r\n\r\n  const handleMarkAsFulfilled = () => {\r\n    const orders = JSON.parse(localStorage.getItem('orders') || '[]');\r\n    const index = orders.findIndex(o => o.orderId === localInvoice.orderId || o.id === localInvoice.orderId);\r\n    if (index !== -1) {\r\n      orders[index] = { ...orders[index], fulfilled: true };\r\n      localStorage.setItem('orders', JSON.stringify(orders));\r\n    }\r\n    setLocalInvoice(prev => ({ ...prev, fulfilled: true }));\r\n    if (onRefresh) onRefresh();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center p-4 z-50\">\r\n        <div className=\"bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-y-auto\">\r\n          <div className=\"px-6 py-4 border-b border-gray-200 flex items-center justify-between\">\r\n            <h3 className=\"text-lg font-semibold text-gray-900\">\r\n              Order Details - #{localInvoice.orderId}\r\n            </h3>\r\n            <button onClick={onClose} className=\"text-gray-400 hover:text-gray-600\">\r\n              <XCircle size={20} />\r\n            </button>\r\n          </div>\r\n\r\n          {/* Items Table */}\r\n          <div className=\"px-6 py-4\">\r\n            <h4 className=\"text-md font-medium text-gray-900 mb-3\">Order Items</h4>\r\n            <div className=\"border border-gray-200 rounded-lg overflow-x-auto\">\r\n              <table className=\"min-w-full divide-y divide-gray-200\">\r\n                <thead className=\"bg-gray-50\">\r\n                  <tr>\r\n                    <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500\">Item</th>\r\n                    <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500\">Description</th>\r\n                    <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500\">Quantity</th>\r\n                    <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500\">Unit Price</th>\r\n                    <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500\">Total</th>\r\n                    <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500\">Status</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody className=\"bg-white divide-y divide-gray-200\">\r\n                  {localInvoice.items && localInvoice.items.map((item, idx) => (\r\n                    <tr key={idx}>\r\n                      <td className=\"px-4 py-2 text-sm text-gray-900\">{item.productName}</td>\r\n                      <td className=\"px-4 py-2 text-sm text-gray-900\">{item.description || '-'}</td>\r\n                      <td className=\"px-4 py-2 text-sm text-gray-900\">{item.quantity}</td>\r\n                      <td className=\"px-4 py-2 text-sm text-gray-900\">{formatCurrency(item.price)}</td>\r\n                      <td className=\"px-4 py-2 text-sm text-gray-900\">{formatCurrency(item.total)}</td>\r\n                      <td className=\"px-4 py-2\">\r\n                        <span className={`px-2 py-1 text-xs font-medium rounded-full ${\r\n                          item.fulfilled ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'\r\n                        }`}>\r\n                          {item.status || (item.fulfilled ? 'Fulfilled' : 'Pending')}\r\n                        </span>\r\n                      </td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n\r\n            {/* Action Buttons */}\r\n            <div className=\"flex flex-wrap gap-3 pt-4 border-t border-gray-200\">\r\n              {!localInvoice.paid && (\r\n                <button\r\n                  onClick={() => setPaymentModalOpen(true)}\r\n                  className=\"flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\"\r\n                >\r\n                  <DollarSign size={16} />\r\n                  Record Payment\r\n                </button>\r\n              )}\r\n              {!localInvoice.paid && (\r\n                <button\r\n                  onClick={handleMarkAsPaid}\r\n                  className=\"flex items-center gap-2 px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors\"\r\n                >\r\n                  <CheckCircle size={16} />\r\n                  Mark as Paid\r\n                </button>\r\n              )}\r\n              {!localInvoice.fulfilled && (\r\n                <button\r\n                  onClick={handleMarkAsFulfilled}\r\n                  className=\"flex items-center gap-2 px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors\"\r\n                >\r\n                  <CheckCircle size={16} />\r\n                  Mark as Fulfilled\r\n                </button>\r\n              )}\r\n              <button className=\"flex items-center gap-2 px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors\">\r\n                <Download size={16} />\r\n                Download Invoice\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Payment Modal */}\r\n      {isPaymentModalOpen && (\r\n        <RecordPaymentModal\r\n          invoiceId={localInvoice.orderId}\r\n          amount={localInvoice.remainingAmount || localInvoice.total}\r\n          onClose={() => setPaymentModalOpen(false)}\r\n          onPaymentComplete={handlePaymentComplete}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default InvoiceDetailModal;\r\n\r\n\r\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}