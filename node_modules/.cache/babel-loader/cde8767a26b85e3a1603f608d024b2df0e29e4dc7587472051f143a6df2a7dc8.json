{"ast":null,"code":"// const API_BASE = '/api/ar';\n\n// export const arService = {\n//   // Customer APIs\n//   async getCustomers() {\n//     const response = await fetch(`${API_BASE}/customers`);\n//     if (!response.ok) throw new Error('Failed to fetch customers');\n//     return response.json();\n//   },\n\n//   async getCustomer(id) {\n//     const response = await fetch(`${API_BASE}/customers/${id}`);\n//     if (!response.ok) throw new Error('Failed to fetch customer');\n//     return response.json();\n//   },\n\n//   async createCustomer(customer) {\n//     const response = await fetch(`${API_BASE}/customers`, {\n//       method: 'POST',\n//       headers: { 'Content-Type': 'application/json' },\n//       body: JSON.stringify(customer)\n//     });\n//     if (!response.ok) throw new Error('Failed to create customer');\n//     return response.json();\n//   },\n\n//   // Invoice APIs\n//   async getInvoices(filters = {}) {\n//     const params = new URLSearchParams(filters);\n//     const response = await fetch(`${API_BASE}/invoices?${params}`);\n//     if (!response.ok) throw new Error('Failed to fetch invoices');\n//     return response.json();\n//   },\n\n//   async createInvoice(invoice) {\n//     const response = await fetch(`${API_BASE}/invoices`, {\n//       method: 'POST',\n//       headers: { 'Content-Type': 'application/json' },\n//       body: JSON.stringify(invoice)\n//     });\n//     if (!response.ok) throw new Error('Failed to create invoice');\n//     return response.json();\n//   },\n\n//   // Payment APIs\n//   async getPayments(filters = {}) {\n//     const params = new URLSearchParams(filters);\n//     const response = await fetch(`${API_BASE}/payments?${params}`);\n//     if (!response.ok) throw new Error('Failed to fetch payments');\n//     return response.json();\n//   },\n\n//   async createPayment(payment) {\n//     const response = await fetch(`${API_BASE}/payments`, {\n//       method: 'POST',\n//       headers: { 'Content-Type': 'application/json' },\n//       body: JSON.stringify(payment)\n//     });\n//     if (!response.ok) throw new Error('Failed to create payment');\n//     return response.json();\n//   }\n// };\n\n// src/services/arService.js\n\n// Static Data Storage\nlet staticCustomers = [{\n  id: 'CUST001',\n  name: 'Al Noor Medical Center',\n  email: 'finance@alnoor.com',\n  phone: '+966-11-123-4567',\n  address: 'King Fahd Road, Riyadh',\n  customerType: 'corporate',\n  creditLimit: 50000,\n  paymentTerms: 30,\n  totalOwed: 15750.00,\n  overdueAmount: 5250.00,\n  lastPayment: '2025-01-10',\n  creditStatus: 'good',\n  accountBalance: -15750.00,\n  invoiceCount: 8,\n  avgPaymentDays: 25,\n  createdAt: '2024-01-15',\n  isActive: true\n}, {\n  id: 'CUST002',\n  name: 'Dr. Ahmed Clinic',\n  email: 'dr.ahmed@clinic.com',\n  phone: '+966-12-987-6543',\n  address: 'Prince Sultan Street, Jeddah',\n  customerType: 'small_business',\n  creditLimit: 20000,\n  paymentTerms: 15,\n  totalOwed: 8900.00,\n  overdueAmount: 2100.00,\n  lastPayment: '2025-01-12',\n  creditStatus: 'watch',\n  accountBalance: -8900.00,\n  invoiceCount: 5,\n  avgPaymentDays: 18,\n  createdAt: '2024-02-20',\n  isActive: true\n}, {\n  id: 'CUST003',\n  name: 'Pharmacy Plus Chain',\n  email: 'accounts@pharmacyplus.sa',\n  phone: '+966-13-555-0123',\n  address: 'Al Khobar, Eastern Province',\n  customerType: 'corporate',\n  creditLimit: 75000,\n  paymentTerms: 45,\n  totalOwed: 32100.00,\n  overdueAmount: 0,\n  lastPayment: '2025-01-14',\n  creditStatus: 'excellent',\n  accountBalance: -32100.00,\n  invoiceCount: 12,\n  avgPaymentDays: 35,\n  createdAt: '2023-11-10',\n  isActive: true\n}, {\n  id: 'CUST004',\n  name: 'Walk-in Customer',\n  email: 'cash@pos.system',\n  phone: '+966-50-000-0000',\n  address: 'Point of Sale',\n  customerType: 'cash',\n  creditLimit: 0,\n  paymentTerms: 0,\n  totalOwed: 0,\n  overdueAmount: 0,\n  lastPayment: '2025-01-15',\n  creditStatus: 'cash_only',\n  accountBalance: 0,\n  invoiceCount: 0,\n  avgPaymentDays: 0,\n  createdAt: '2024-01-01',\n  isActive: true\n}, {\n  id: 'CUST005',\n  name: 'City Hospital',\n  email: 'procurement@cityhospital.sa',\n  phone: '+966-11-777-8888',\n  address: 'Medical District, Riyadh',\n  customerType: 'corporate',\n  creditLimit: 100000,\n  paymentTerms: 60,\n  totalOwed: 45500.00,\n  overdueAmount: 12000.00,\n  lastPayment: '2024-12-28',\n  creditStatus: 'watch',\n  accountBalance: -45500.00,\n  invoiceCount: 15,\n  avgPaymentDays: 55,\n  createdAt: '2023-06-15',\n  isActive: true\n}];\nlet staticInvoices = [{\n  id: 'INV-2025-001',\n  customerId: 'CUST001',\n  customerName: 'Al Noor Medical Center',\n  date: '2025-01-15',\n  dueDate: '2025-02-14',\n  amount: 5250.00,\n  paid: 0,\n  balance: 5250.00,\n  status: 'outstanding',\n  daysOverdue: 0,\n  paymentTerms: 30,\n  items: [{\n    description: 'A2A 25MG TAB',\n    quantity: 100,\n    price: 15.00,\n    total: 1500.00\n  }, {\n    description: 'AALBUMIN 50ML',\n    quantity: 150,\n    price: 25.00,\n    total: 3750.00\n  }],\n  notes: 'Monthly medical supplies order',\n  source: 'manual',\n  createdAt: '2025-01-15T10:30:00Z',\n  updatedAt: '2025-01-15T10:30:00Z'\n}, {\n  id: 'INV-2025-002',\n  customerId: 'CUST002',\n  customerName: 'Dr. Ahmed Clinic',\n  date: '2025-01-10',\n  dueDate: '2025-01-25',\n  amount: 2100.00,\n  paid: 0,\n  balance: 2100.00,\n  status: 'overdue',\n  daysOverdue: 5,\n  paymentTerms: 15,\n  items: [{\n    description: 'ABAKTAL INJ',\n    quantity: 50,\n    price: 30.00,\n    total: 1500.00\n  }, {\n    description: 'AARAM PLUS',\n    quantity: 20,\n    price: 30.00,\n    total: 600.00\n  }],\n  notes: 'Urgent medical supplies',\n  source: 'pos',\n  createdAt: '2025-01-10T14:20:00Z',\n  updatedAt: '2025-01-10T14:20:00Z'\n}, {\n  id: 'POS-2025-003',\n  customerId: 'CUST001',\n  customerName: 'Al Noor Medical Center',\n  date: '2025-01-12',\n  dueDate: '2025-02-11',\n  amount: 1850.00,\n  paid: 1850.00,\n  balance: 0,\n  status: 'paid',\n  daysOverdue: 0,\n  paymentTerms: 30,\n  items: [{\n    description: 'Medical supplies - POS Sale',\n    quantity: 1,\n    price: 1850.00,\n    total: 1850.00\n  }],\n  notes: 'Direct POS sale - Credit account',\n  source: 'pos',\n  createdAt: '2025-01-12T16:45:00Z',\n  updatedAt: '2025-01-14T12:00:00Z',\n  paymentHistory: [{\n    date: '2025-01-14',\n    method: 'bank_transfer',\n    amount: 1850.00,\n    reference: 'TXN123456789'\n  }]\n}, {\n  id: 'INV-2025-004',\n  customerId: 'CUST003',\n  customerName: 'Pharmacy Plus Chain',\n  date: '2025-01-08',\n  dueDate: '2025-02-22',\n  amount: 15600.00,\n  paid: 15600.00,\n  balance: 0,\n  status: 'paid',\n  daysOverdue: 0,\n  paymentTerms: 45,\n  items: [{\n    description: 'Bulk pharmaceutical supplies',\n    quantity: 200,\n    price: 45.00,\n    total: 9000.00\n  }, {\n    description: 'Medical equipment',\n    quantity: 40,\n    price: 165.00,\n    total: 6600.00\n  }],\n  notes: 'Quarterly bulk order',\n  source: 'manual',\n  createdAt: '2025-01-08T09:15:00Z',\n  updatedAt: '2025-01-12T15:30:00Z',\n  paymentHistory: [{\n    date: '2025-01-12',\n    method: 'check',\n    amount: 15600.00,\n    reference: 'CHK-789123'\n  }]\n}, {\n  id: 'INV-2025-005',\n  customerId: 'CUST005',\n  customerName: 'City Hospital',\n  date: '2024-12-15',\n  dueDate: '2025-01-14',\n  amount: 12000.00,\n  paid: 0,\n  balance: 12000.00,\n  status: 'overdue',\n  daysOverdue: 16,\n  paymentTerms: 60,\n  items: [{\n    description: 'Hospital-grade equipment',\n    quantity: 30,\n    price: 300.00,\n    total: 9000.00\n  }, {\n    description: 'Surgical supplies',\n    quantity: 60,\n    price: 50.00,\n    total: 3000.00\n  }],\n  notes: 'Urgent hospital supplies - overdue follow-up required',\n  source: 'manual',\n  createdAt: '2024-12-15T11:20:00Z',\n  updatedAt: '2024-12-15T11:20:00Z'\n}];\nlet staticPayments = [{\n  id: 'PAY001',\n  customerId: 'CUST001',\n  customerName: 'Al Noor Medical Center',\n  invoiceId: 'POS-2025-003',\n  date: '2025-01-14',\n  amount: 1850.00,\n  method: 'bank_transfer',\n  reference: 'TXN123456789',\n  status: 'cleared',\n  notes: 'Payment for POS sale',\n  createdAt: '2025-01-14T12:00:00Z'\n}, {\n  id: 'PAY002',\n  customerId: 'CUST003',\n  customerName: 'Pharmacy Plus Chain',\n  invoiceId: 'INV-2025-004',\n  date: '2025-01-12',\n  amount: 15600.00,\n  method: 'check',\n  reference: 'CHK-789123',\n  status: 'cleared',\n  notes: 'December invoice payment',\n  createdAt: '2025-01-12T15:30:00Z'\n}, {\n  id: 'PAY003',\n  customerId: 'CUST002',\n  customerName: 'Dr. Ahmed Clinic',\n  invoiceId: 'INV-2024-089',\n  date: '2025-01-05',\n  amount: 850.00,\n  method: 'cash',\n  reference: 'CASH-001',\n  status: 'cleared',\n  notes: 'Partial payment on old invoice',\n  createdAt: '2025-01-05T10:15:00Z'\n}, {\n  id: 'PAY004',\n  customerId: 'CUST001',\n  customerName: 'Al Noor Medical Center',\n  invoiceId: 'INV-2024-145',\n  date: '2025-01-10',\n  amount: 3200.00,\n  method: 'card',\n  reference: 'CARD-567890',\n  status: 'pending',\n  notes: 'Credit card payment processing',\n  createdAt: '2025-01-10T14:45:00Z'\n}];\n\n// Helper function to simulate API delay\nconst simulateDelay = (ms = 500) => {\n  return new Promise(resolve => setTimeout(resolve, ms));\n};\n\n// Helper function to generate unique IDs\nconst generateId = prefix => {\n  const timestamp = Date.now();\n  const random = Math.floor(Math.random() * 1000);\n  return `${prefix}-${timestamp}-${random}`;\n};\n\n// Helper function to filter data\nconst applyFilters = (data, filters) => {\n  let filtered = [...data];\n  Object.keys(filters).forEach(key => {\n    const value = filters[key];\n    if (value && value !== 'all' && value.trim() !== '') {\n      filtered = filtered.filter(item => {\n        if (key === 'searchTerm') {\n          const searchValue = value.toLowerCase();\n          return Object.values(item).some(val => val && val.toString().toLowerCase().includes(searchValue));\n        }\n        return item[key] === value;\n      });\n    }\n  });\n  return filtered;\n};\nexport const arService = {\n  // Customer APIs\n  async getCustomers(filters = {}) {\n    await simulateDelay(300);\n    try {\n      const filtered = applyFilters(staticCustomers, filters);\n      return {\n        success: true,\n        data: filtered,\n        total: filtered.length\n      };\n    } catch (error) {\n      throw new Error('Failed to fetch customers: ' + error.message);\n    }\n  },\n  async getCustomer(id) {\n    await simulateDelay(200);\n    try {\n      const customer = staticCustomers.find(c => c.id === id);\n      if (!customer) {\n        throw new Error('Customer not found');\n      }\n      return {\n        success: true,\n        data: customer\n      };\n    } catch (error) {\n      throw new Error('Failed to fetch customer: ' + error.message);\n    }\n  },\n  async createCustomer(customerData) {\n    await simulateDelay(400);\n    try {\n      const newCustomer = {\n        id: generateId('CUST'),\n        ...customerData,\n        totalOwed: 0,\n        overdueAmount: 0,\n        accountBalance: 0,\n        invoiceCount: 0,\n        avgPaymentDays: 0,\n        createdAt: new Date().toISOString(),\n        isActive: true\n      };\n      staticCustomers.push(newCustomer);\n      return {\n        success: true,\n        data: newCustomer,\n        message: 'Customer created successfully'\n      };\n    } catch (error) {\n      throw new Error('Failed to create customer: ' + error.message);\n    }\n  },\n  async updateCustomer(id, updateData) {\n    await simulateDelay(300);\n    try {\n      const index = staticCustomers.findIndex(c => c.id === id);\n      if (index === -1) {\n        throw new Error('Customer not found');\n      }\n      staticCustomers[index] = {\n        ...staticCustomers[index],\n        ...updateData,\n        updatedAt: new Date().toISOString()\n      };\n      return {\n        success: true,\n        data: staticCustomers[index],\n        message: 'Customer updated successfully'\n      };\n    } catch (error) {\n      throw new Error('Failed to update customer: ' + error.message);\n    }\n  },\n  // Invoice APIs\n  async getInvoices(filters = {}) {\n    await simulateDelay(350);\n    try {\n      const filtered = applyFilters(staticInvoices, filters);\n      return {\n        success: true,\n        data: filtered,\n        total: filtered.length\n      };\n    } catch (error) {\n      throw new Error('Failed to fetch invoices: ' + error.message);\n    }\n  },\n  async getInvoice(id) {\n    await simulateDelay(200);\n    try {\n      const invoice = staticInvoices.find(inv => inv.id === id);\n      if (!invoice) {\n        throw new Error('Invoice not found');\n      }\n      return {\n        success: true,\n        data: invoice\n      };\n    } catch (error) {\n      throw new Error('Failed to fetch invoice: ' + error.message);\n    }\n  },\n  async createInvoice(invoiceData) {\n    await simulateDelay(500);\n    try {\n      const newInvoice = {\n        id: generateId('INV'),\n        ...invoiceData,\n        paid: 0,\n        balance: invoiceData.amount,\n        status: 'outstanding',\n        daysOverdue: 0,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      };\n      staticInvoices.unshift(newInvoice);\n\n      // Update customer totals\n      const customerIndex = staticCustomers.findIndex(c => c.id === invoiceData.customerId);\n      if (customerIndex !== -1) {\n        staticCustomers[customerIndex].totalOwed += invoiceData.amount;\n        staticCustomers[customerIndex].invoiceCount += 1;\n      }\n      return {\n        success: true,\n        data: newInvoice,\n        message: 'Invoice created successfully'\n      };\n    } catch (error) {\n      throw new Error('Failed to create invoice: ' + error.message);\n    }\n  },\n  async updateInvoice(id, updateData) {\n    await simulateDelay(300);\n    try {\n      const index = staticInvoices.findIndex(inv => inv.id === id);\n      if (index === -1) {\n        throw new Error('Invoice not found');\n      }\n      staticInvoices[index] = {\n        ...staticInvoices[index],\n        ...updateData,\n        updatedAt: new Date().toISOString()\n      };\n      return {\n        success: true,\n        data: staticInvoices[index],\n        message: 'Invoice updated successfully'\n      };\n    } catch (error) {\n      throw new Error('Failed to update invoice: ' + error.message);\n    }\n  },\n  // Payment APIs\n  async getPayments(filters = {}) {\n    await simulateDelay(300);\n    try {\n      const filtered = applyFilters(staticPayments, filters);\n      return {\n        success: true,\n        data: filtered,\n        total: filtered.length\n      };\n    } catch (error) {\n      throw new Error('Failed to fetch payments: ' + error.message);\n    }\n  },\n  async getPayment(id) {\n    await simulateDelay(200);\n    try {\n      const payment = staticPayments.find(p => p.id === id);\n      if (!payment) {\n        throw new Error('Payment not found');\n      }\n      return {\n        success: true,\n        data: payment\n      };\n    } catch (error) {\n      throw new Error('Failed to fetch payment: ' + error.message);\n    }\n  },\n  async createPayment(paymentData) {\n    await simulateDelay(400);\n    try {\n      const newPayment = {\n        id: generateId('PAY'),\n        ...paymentData,\n        status: 'cleared',\n        createdAt: new Date().toISOString()\n      };\n      staticPayments.unshift(newPayment);\n\n      // Update invoice balance\n      const invoiceIndex = staticInvoices.findIndex(inv => inv.id === paymentData.invoiceId);\n      if (invoiceIndex !== -1) {\n        const invoice = staticInvoices[invoiceIndex];\n        invoice.paid += paymentData.amount;\n        invoice.balance = Math.max(0, invoice.amount - invoice.paid);\n        invoice.status = invoice.balance === 0 ? 'paid' : 'partial';\n        invoice.updatedAt = new Date().toISOString();\n\n        // Update payment history\n        if (!invoice.paymentHistory) {\n          invoice.paymentHistory = [];\n        }\n        invoice.paymentHistory.push({\n          date: paymentData.date,\n          method: paymentData.method,\n          amount: paymentData.amount,\n          reference: paymentData.reference\n        });\n      }\n\n      // Update customer balance\n      const customerIndex = staticCustomers.findIndex(c => c.id === paymentData.customerId);\n      if (customerIndex !== -1) {\n        staticCustomers[customerIndex].totalOwed -= paymentData.amount;\n        staticCustomers[customerIndex].lastPayment = paymentData.date;\n      }\n      return {\n        success: true,\n        data: newPayment,\n        message: 'Payment recorded successfully'\n      };\n    } catch (error) {\n      throw new Error('Failed to create payment: ' + error.message);\n    }\n  },\n  // Utility APIs\n  async getARSummary() {\n    await simulateDelay(200);\n    try {\n      const totalAR = staticCustomers.reduce((sum, customer) => sum + customer.totalOwed, 0);\n      const totalOverdue = staticCustomers.reduce((sum, customer) => sum + customer.overdueAmount, 0);\n      const customersWithBalance = staticCustomers.filter(customer => customer.totalOwed > 0).length;\n      const avgDaysOutstanding = staticCustomers.reduce((sum, customer) => sum + customer.avgPaymentDays, 0) / staticCustomers.length;\n      return {\n        success: true,\n        data: {\n          totalAR,\n          totalOverdue,\n          customersWithBalance,\n          avgDaysOutstanding: Math.round(avgDaysOutstanding)\n        }\n      };\n    } catch (error) {\n      throw new Error('Failed to fetch AR summary: ' + error.message);\n    }\n  },\n  async getAgingReport() {\n    await simulateDelay(250);\n    try {\n      const aging = {\n        current: 0,\n        days30: 0,\n        days60: 0,\n        days90: 0,\n        over90: 0\n      };\n      staticInvoices.forEach(invoice => {\n        if (invoice.status === 'paid') return;\n        const daysPastDue = invoice.daysOverdue || 0;\n        if (daysPastDue <= 0) {\n          aging.current += invoice.balance;\n        } else if (daysPastDue <= 30) {\n          aging.days30 += invoice.balance;\n        } else if (daysPastDue <= 60) {\n          aging.days60 += invoice.balance;\n        } else if (daysPastDue <= 90) {\n          aging.days90 += invoice.balance;\n        } else {\n          aging.over90 += invoice.balance;\n        }\n      });\n      return {\n        success: true,\n        data: aging\n      };\n    } catch (error) {\n      throw new Error('Failed to fetch aging report: ' + error.message);\n    }\n  }\n};","map":{"version":3,"names":["staticCustomers","id","name","email","phone","address","customerType","creditLimit","paymentTerms","totalOwed","overdueAmount","lastPayment","creditStatus","accountBalance","invoiceCount","avgPaymentDays","createdAt","isActive","staticInvoices","customerId","customerName","date","dueDate","amount","paid","balance","status","daysOverdue","items","description","quantity","price","total","notes","source","updatedAt","paymentHistory","method","reference","staticPayments","invoiceId","simulateDelay","ms","Promise","resolve","setTimeout","generateId","prefix","timestamp","Date","now","random","Math","floor","applyFilters","data","filters","filtered","Object","keys","forEach","key","value","trim","filter","item","searchValue","toLowerCase","values","some","val","toString","includes","arService","getCustomers","success","length","error","Error","message","getCustomer","customer","find","c","createCustomer","customerData","newCustomer","toISOString","push","updateCustomer","updateData","index","findIndex","getInvoices","getInvoice","invoice","inv","createInvoice","invoiceData","newInvoice","unshift","customerIndex","updateInvoice","getPayments","getPayment","payment","p","createPayment","paymentData","newPayment","invoiceIndex","max","getARSummary","totalAR","reduce","sum","totalOverdue","customersWithBalance","avgDaysOutstanding","round","getAgingReport","aging","current","days30","days60","days90","over90","daysPastDue"],"sources":["C:/Users/Logic-Unit/my-account/src/services/arService.js"],"sourcesContent":["// const API_BASE = '/api/ar';\r\n\r\n// export const arService = {\r\n//   // Customer APIs\r\n//   async getCustomers() {\r\n//     const response = await fetch(`${API_BASE}/customers`);\r\n//     if (!response.ok) throw new Error('Failed to fetch customers');\r\n//     return response.json();\r\n//   },\r\n\r\n//   async getCustomer(id) {\r\n//     const response = await fetch(`${API_BASE}/customers/${id}`);\r\n//     if (!response.ok) throw new Error('Failed to fetch customer');\r\n//     return response.json();\r\n//   },\r\n\r\n//   async createCustomer(customer) {\r\n//     const response = await fetch(`${API_BASE}/customers`, {\r\n//       method: 'POST',\r\n//       headers: { 'Content-Type': 'application/json' },\r\n//       body: JSON.stringify(customer)\r\n//     });\r\n//     if (!response.ok) throw new Error('Failed to create customer');\r\n//     return response.json();\r\n//   },\r\n\r\n//   // Invoice APIs\r\n//   async getInvoices(filters = {}) {\r\n//     const params = new URLSearchParams(filters);\r\n//     const response = await fetch(`${API_BASE}/invoices?${params}`);\r\n//     if (!response.ok) throw new Error('Failed to fetch invoices');\r\n//     return response.json();\r\n//   },\r\n\r\n//   async createInvoice(invoice) {\r\n//     const response = await fetch(`${API_BASE}/invoices`, {\r\n//       method: 'POST',\r\n//       headers: { 'Content-Type': 'application/json' },\r\n//       body: JSON.stringify(invoice)\r\n//     });\r\n//     if (!response.ok) throw new Error('Failed to create invoice');\r\n//     return response.json();\r\n//   },\r\n\r\n//   // Payment APIs\r\n//   async getPayments(filters = {}) {\r\n//     const params = new URLSearchParams(filters);\r\n//     const response = await fetch(`${API_BASE}/payments?${params}`);\r\n//     if (!response.ok) throw new Error('Failed to fetch payments');\r\n//     return response.json();\r\n//   },\r\n\r\n//   async createPayment(payment) {\r\n//     const response = await fetch(`${API_BASE}/payments`, {\r\n//       method: 'POST',\r\n//       headers: { 'Content-Type': 'application/json' },\r\n//       body: JSON.stringify(payment)\r\n//     });\r\n//     if (!response.ok) throw new Error('Failed to create payment');\r\n//     return response.json();\r\n//   }\r\n// };\r\n\r\n\r\n// src/services/arService.js\r\n\r\n// Static Data Storage\r\nlet staticCustomers = [\r\n  {\r\n    id: 'CUST001',\r\n    name: 'Al Noor Medical Center',\r\n    email: 'finance@alnoor.com',\r\n    phone: '+966-11-123-4567',\r\n    address: 'King Fahd Road, Riyadh',\r\n    customerType: 'corporate',\r\n    creditLimit: 50000,\r\n    paymentTerms: 30,\r\n    totalOwed: 15750.00,\r\n    overdueAmount: 5250.00,\r\n    lastPayment: '2025-01-10',\r\n    creditStatus: 'good',\r\n    accountBalance: -15750.00,\r\n    invoiceCount: 8,\r\n    avgPaymentDays: 25,\r\n    createdAt: '2024-01-15',\r\n    isActive: true\r\n  },\r\n  {\r\n    id: 'CUST002',\r\n    name: 'Dr. Ahmed Clinic',\r\n    email: 'dr.ahmed@clinic.com',\r\n    phone: '+966-12-987-6543',\r\n    address: 'Prince Sultan Street, Jeddah',\r\n    customerType: 'small_business',\r\n    creditLimit: 20000,\r\n    paymentTerms: 15,\r\n    totalOwed: 8900.00,\r\n    overdueAmount: 2100.00,\r\n    lastPayment: '2025-01-12',\r\n    creditStatus: 'watch',\r\n    accountBalance: -8900.00,\r\n    invoiceCount: 5,\r\n    avgPaymentDays: 18,\r\n    createdAt: '2024-02-20',\r\n    isActive: true\r\n  },\r\n  {\r\n    id: 'CUST003',\r\n    name: 'Pharmacy Plus Chain',\r\n    email: 'accounts@pharmacyplus.sa',\r\n    phone: '+966-13-555-0123',\r\n    address: 'Al Khobar, Eastern Province',\r\n    customerType: 'corporate',\r\n    creditLimit: 75000,\r\n    paymentTerms: 45,\r\n    totalOwed: 32100.00,\r\n    overdueAmount: 0,\r\n    lastPayment: '2025-01-14',\r\n    creditStatus: 'excellent',\r\n    accountBalance: -32100.00,\r\n    invoiceCount: 12,\r\n    avgPaymentDays: 35,\r\n    createdAt: '2023-11-10',\r\n    isActive: true\r\n  },\r\n  {\r\n    id: 'CUST004',\r\n    name: 'Walk-in Customer',\r\n    email: 'cash@pos.system',\r\n    phone: '+966-50-000-0000',\r\n    address: 'Point of Sale',\r\n    customerType: 'cash',\r\n    creditLimit: 0,\r\n    paymentTerms: 0,\r\n    totalOwed: 0,\r\n    overdueAmount: 0,\r\n    lastPayment: '2025-01-15',\r\n    creditStatus: 'cash_only',\r\n    accountBalance: 0,\r\n    invoiceCount: 0,\r\n    avgPaymentDays: 0,\r\n    createdAt: '2024-01-01',\r\n    isActive: true\r\n  },\r\n  {\r\n    id: 'CUST005',\r\n    name: 'City Hospital',\r\n    email: 'procurement@cityhospital.sa',\r\n    phone: '+966-11-777-8888',\r\n    address: 'Medical District, Riyadh',\r\n    customerType: 'corporate',\r\n    creditLimit: 100000,\r\n    paymentTerms: 60,\r\n    totalOwed: 45500.00,\r\n    overdueAmount: 12000.00,\r\n    lastPayment: '2024-12-28',\r\n    creditStatus: 'watch',\r\n    accountBalance: -45500.00,\r\n    invoiceCount: 15,\r\n    avgPaymentDays: 55,\r\n    createdAt: '2023-06-15',\r\n    isActive: true\r\n  }\r\n];\r\n\r\nlet staticInvoices = [\r\n  {\r\n    id: 'INV-2025-001',\r\n    customerId: 'CUST001',\r\n    customerName: 'Al Noor Medical Center',\r\n    date: '2025-01-15',\r\n    dueDate: '2025-02-14',\r\n    amount: 5250.00,\r\n    paid: 0,\r\n    balance: 5250.00,\r\n    status: 'outstanding',\r\n    daysOverdue: 0,\r\n    paymentTerms: 30,\r\n    items: [\r\n      { description: 'A2A 25MG TAB', quantity: 100, price: 15.00, total: 1500.00 },\r\n      { description: 'AALBUMIN 50ML', quantity: 150, price: 25.00, total: 3750.00 }\r\n    ],\r\n    notes: 'Monthly medical supplies order',\r\n    source: 'manual',\r\n    createdAt: '2025-01-15T10:30:00Z',\r\n    updatedAt: '2025-01-15T10:30:00Z'\r\n  },\r\n  {\r\n    id: 'INV-2025-002',\r\n    customerId: 'CUST002',\r\n    customerName: 'Dr. Ahmed Clinic',\r\n    date: '2025-01-10',\r\n    dueDate: '2025-01-25',\r\n    amount: 2100.00,\r\n    paid: 0,\r\n    balance: 2100.00,\r\n    status: 'overdue',\r\n    daysOverdue: 5,\r\n    paymentTerms: 15,\r\n    items: [\r\n      { description: 'ABAKTAL INJ', quantity: 50, price: 30.00, total: 1500.00 },\r\n      { description: 'AARAM PLUS', quantity: 20, price: 30.00, total: 600.00 }\r\n    ],\r\n    notes: 'Urgent medical supplies',\r\n    source: 'pos',\r\n    createdAt: '2025-01-10T14:20:00Z',\r\n    updatedAt: '2025-01-10T14:20:00Z'\r\n  },\r\n  {\r\n    id: 'POS-2025-003',\r\n    customerId: 'CUST001',\r\n    customerName: 'Al Noor Medical Center',\r\n    date: '2025-01-12',\r\n    dueDate: '2025-02-11',\r\n    amount: 1850.00,\r\n    paid: 1850.00,\r\n    balance: 0,\r\n    status: 'paid',\r\n    daysOverdue: 0,\r\n    paymentTerms: 30,\r\n    items: [\r\n      { description: 'Medical supplies - POS Sale', quantity: 1, price: 1850.00, total: 1850.00 }\r\n    ],\r\n    notes: 'Direct POS sale - Credit account',\r\n    source: 'pos',\r\n    createdAt: '2025-01-12T16:45:00Z',\r\n    updatedAt: '2025-01-14T12:00:00Z',\r\n    paymentHistory: [\r\n      {\r\n        date: '2025-01-14',\r\n        method: 'bank_transfer',\r\n        amount: 1850.00,\r\n        reference: 'TXN123456789'\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    id: 'INV-2025-004',\r\n    customerId: 'CUST003',\r\n    customerName: 'Pharmacy Plus Chain',\r\n    date: '2025-01-08',\r\n    dueDate: '2025-02-22',\r\n    amount: 15600.00,\r\n    paid: 15600.00,\r\n    balance: 0,\r\n    status: 'paid',\r\n    daysOverdue: 0,\r\n    paymentTerms: 45,\r\n    items: [\r\n      { description: 'Bulk pharmaceutical supplies', quantity: 200, price: 45.00, total: 9000.00 },\r\n      { description: 'Medical equipment', quantity: 40, price: 165.00, total: 6600.00 }\r\n    ],\r\n    notes: 'Quarterly bulk order',\r\n    source: 'manual',\r\n    createdAt: '2025-01-08T09:15:00Z',\r\n    updatedAt: '2025-01-12T15:30:00Z',\r\n    paymentHistory: [\r\n      {\r\n        date: '2025-01-12',\r\n        method: 'check',\r\n        amount: 15600.00,\r\n        reference: 'CHK-789123'\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    id: 'INV-2025-005',\r\n    customerId: 'CUST005',\r\n    customerName: 'City Hospital',\r\n    date: '2024-12-15',\r\n    dueDate: '2025-01-14',\r\n    amount: 12000.00,\r\n    paid: 0,\r\n    balance: 12000.00,\r\n    status: 'overdue',\r\n    daysOverdue: 16,\r\n    paymentTerms: 60,\r\n    items: [\r\n      { description: 'Hospital-grade equipment', quantity: 30, price: 300.00, total: 9000.00 },\r\n      { description: 'Surgical supplies', quantity: 60, price: 50.00, total: 3000.00 }\r\n    ],\r\n    notes: 'Urgent hospital supplies - overdue follow-up required',\r\n    source: 'manual',\r\n    createdAt: '2024-12-15T11:20:00Z',\r\n    updatedAt: '2024-12-15T11:20:00Z'\r\n  }\r\n];\r\n\r\nlet staticPayments = [\r\n  {\r\n    id: 'PAY001',\r\n    customerId: 'CUST001',\r\n    customerName: 'Al Noor Medical Center',\r\n    invoiceId: 'POS-2025-003',\r\n    date: '2025-01-14',\r\n    amount: 1850.00,\r\n    method: 'bank_transfer',\r\n    reference: 'TXN123456789',\r\n    status: 'cleared',\r\n    notes: 'Payment for POS sale',\r\n    createdAt: '2025-01-14T12:00:00Z'\r\n  },\r\n  {\r\n    id: 'PAY002',\r\n    customerId: 'CUST003',\r\n    customerName: 'Pharmacy Plus Chain',\r\n    invoiceId: 'INV-2025-004',\r\n    date: '2025-01-12',\r\n    amount: 15600.00,\r\n    method: 'check',\r\n    reference: 'CHK-789123',\r\n    status: 'cleared',\r\n    notes: 'December invoice payment',\r\n    createdAt: '2025-01-12T15:30:00Z'\r\n  },\r\n  {\r\n    id: 'PAY003',\r\n    customerId: 'CUST002',\r\n    customerName: 'Dr. Ahmed Clinic',\r\n    invoiceId: 'INV-2024-089',\r\n    date: '2025-01-05',\r\n    amount: 850.00,\r\n    method: 'cash',\r\n    reference: 'CASH-001',\r\n    status: 'cleared',\r\n    notes: 'Partial payment on old invoice',\r\n    createdAt: '2025-01-05T10:15:00Z'\r\n  },\r\n  {\r\n    id: 'PAY004',\r\n    customerId: 'CUST001',\r\n    customerName: 'Al Noor Medical Center',\r\n    invoiceId: 'INV-2024-145',\r\n    date: '2025-01-10',\r\n    amount: 3200.00,\r\n    method: 'card',\r\n    reference: 'CARD-567890',\r\n    status: 'pending',\r\n    notes: 'Credit card payment processing',\r\n    createdAt: '2025-01-10T14:45:00Z'\r\n  }\r\n];\r\n\r\n// Helper function to simulate API delay\r\nconst simulateDelay = (ms = 500) => {\r\n  return new Promise(resolve => setTimeout(resolve, ms));\r\n};\r\n\r\n// Helper function to generate unique IDs\r\nconst generateId = (prefix) => {\r\n  const timestamp = Date.now();\r\n  const random = Math.floor(Math.random() * 1000);\r\n  return `${prefix}-${timestamp}-${random}`;\r\n};\r\n\r\n// Helper function to filter data\r\nconst applyFilters = (data, filters) => {\r\n  let filtered = [...data];\r\n  \r\n  Object.keys(filters).forEach(key => {\r\n    const value = filters[key];\r\n    if (value && value !== 'all' && value.trim() !== '') {\r\n      filtered = filtered.filter(item => {\r\n        if (key === 'searchTerm') {\r\n          const searchValue = value.toLowerCase();\r\n          return Object.values(item).some(val => \r\n            val && val.toString().toLowerCase().includes(searchValue)\r\n          );\r\n        }\r\n        return item[key] === value;\r\n      });\r\n    }\r\n  });\r\n  \r\n  return filtered;\r\n};\r\n\r\nexport const arService = {\r\n  // Customer APIs\r\n  async getCustomers(filters = {}) {\r\n    await simulateDelay(300);\r\n    try {\r\n      const filtered = applyFilters(staticCustomers, filters);\r\n      return {\r\n        success: true,\r\n        data: filtered,\r\n        total: filtered.length\r\n      };\r\n    } catch (error) {\r\n      throw new Error('Failed to fetch customers: ' + error.message);\r\n    }\r\n  },\r\n\r\n  async getCustomer(id) {\r\n    await simulateDelay(200);\r\n    try {\r\n      const customer = staticCustomers.find(c => c.id === id);\r\n      if (!customer) {\r\n        throw new Error('Customer not found');\r\n      }\r\n      return {\r\n        success: true,\r\n        data: customer\r\n      };\r\n    } catch (error) {\r\n      throw new Error('Failed to fetch customer: ' + error.message);\r\n    }\r\n  },\r\n\r\n  async createCustomer(customerData) {\r\n    await simulateDelay(400);\r\n    try {\r\n      const newCustomer = {\r\n        id: generateId('CUST'),\r\n        ...customerData,\r\n        totalOwed: 0,\r\n        overdueAmount: 0,\r\n        accountBalance: 0,\r\n        invoiceCount: 0,\r\n        avgPaymentDays: 0,\r\n        createdAt: new Date().toISOString(),\r\n        isActive: true\r\n      };\r\n      \r\n      staticCustomers.push(newCustomer);\r\n      \r\n      return {\r\n        success: true,\r\n        data: newCustomer,\r\n        message: 'Customer created successfully'\r\n      };\r\n    } catch (error) {\r\n      throw new Error('Failed to create customer: ' + error.message);\r\n    }\r\n  },\r\n\r\n  async updateCustomer(id, updateData) {\r\n    await simulateDelay(300);\r\n    try {\r\n      const index = staticCustomers.findIndex(c => c.id === id);\r\n      if (index === -1) {\r\n        throw new Error('Customer not found');\r\n      }\r\n      \r\n      staticCustomers[index] = {\r\n        ...staticCustomers[index],\r\n        ...updateData,\r\n        updatedAt: new Date().toISOString()\r\n      };\r\n      \r\n      return {\r\n        success: true,\r\n        data: staticCustomers[index],\r\n        message: 'Customer updated successfully'\r\n      };\r\n    } catch (error) {\r\n      throw new Error('Failed to update customer: ' + error.message);\r\n    }\r\n  },\r\n\r\n  // Invoice APIs\r\n  async getInvoices(filters = {}) {\r\n    await simulateDelay(350);\r\n    try {\r\n      const filtered = applyFilters(staticInvoices, filters);\r\n      return {\r\n        success: true,\r\n        data: filtered,\r\n        total: filtered.length\r\n      };\r\n    } catch (error) {\r\n      throw new Error('Failed to fetch invoices: ' + error.message);\r\n    }\r\n  },\r\n\r\n  async getInvoice(id) {\r\n    await simulateDelay(200);\r\n    try {\r\n      const invoice = staticInvoices.find(inv => inv.id === id);\r\n      if (!invoice) {\r\n        throw new Error('Invoice not found');\r\n      }\r\n      return {\r\n        success: true,\r\n        data: invoice\r\n      };\r\n    } catch (error) {\r\n      throw new Error('Failed to fetch invoice: ' + error.message);\r\n    }\r\n  },\r\n\r\n  async createInvoice(invoiceData) {\r\n    await simulateDelay(500);\r\n    try {\r\n      const newInvoice = {\r\n        id: generateId('INV'),\r\n        ...invoiceData,\r\n        paid: 0,\r\n        balance: invoiceData.amount,\r\n        status: 'outstanding',\r\n        daysOverdue: 0,\r\n        createdAt: new Date().toISOString(),\r\n        updatedAt: new Date().toISOString()\r\n      };\r\n      \r\n      staticInvoices.unshift(newInvoice);\r\n      \r\n      // Update customer totals\r\n      const customerIndex = staticCustomers.findIndex(c => c.id === invoiceData.customerId);\r\n      if (customerIndex !== -1) {\r\n        staticCustomers[customerIndex].totalOwed += invoiceData.amount;\r\n        staticCustomers[customerIndex].invoiceCount += 1;\r\n      }\r\n      \r\n      return {\r\n        success: true,\r\n        data: newInvoice,\r\n        message: 'Invoice created successfully'\r\n      };\r\n    } catch (error) {\r\n      throw new Error('Failed to create invoice: ' + error.message);\r\n    }\r\n  },\r\n\r\n  async updateInvoice(id, updateData) {\r\n    await simulateDelay(300);\r\n    try {\r\n      const index = staticInvoices.findIndex(inv => inv.id === id);\r\n      if (index === -1) {\r\n        throw new Error('Invoice not found');\r\n      }\r\n      \r\n      staticInvoices[index] = {\r\n        ...staticInvoices[index],\r\n        ...updateData,\r\n        updatedAt: new Date().toISOString()\r\n      };\r\n      \r\n      return {\r\n        success: true,\r\n        data: staticInvoices[index],\r\n        message: 'Invoice updated successfully'\r\n      };\r\n    } catch (error) {\r\n      throw new Error('Failed to update invoice: ' + error.message);\r\n    }\r\n  },\r\n\r\n  // Payment APIs\r\n  async getPayments(filters = {}) {\r\n    await simulateDelay(300);\r\n    try {\r\n      const filtered = applyFilters(staticPayments, filters);\r\n      return {\r\n        success: true,\r\n        data: filtered,\r\n        total: filtered.length\r\n      };\r\n    } catch (error) {\r\n      throw new Error('Failed to fetch payments: ' + error.message);\r\n    }\r\n  },\r\n\r\n  async getPayment(id) {\r\n    await simulateDelay(200);\r\n    try {\r\n      const payment = staticPayments.find(p => p.id === id);\r\n      if (!payment) {\r\n        throw new Error('Payment not found');\r\n      }\r\n      return {\r\n        success: true,\r\n        data: payment\r\n      };\r\n    } catch (error) {\r\n      throw new Error('Failed to fetch payment: ' + error.message);\r\n    }\r\n  },\r\n\r\n  async createPayment(paymentData) {\r\n    await simulateDelay(400);\r\n    try {\r\n      const newPayment = {\r\n        id: generateId('PAY'),\r\n        ...paymentData,\r\n        status: 'cleared',\r\n        createdAt: new Date().toISOString()\r\n      };\r\n      \r\n      staticPayments.unshift(newPayment);\r\n      \r\n      // Update invoice balance\r\n      const invoiceIndex = staticInvoices.findIndex(inv => inv.id === paymentData.invoiceId);\r\n      if (invoiceIndex !== -1) {\r\n        const invoice = staticInvoices[invoiceIndex];\r\n        invoice.paid += paymentData.amount;\r\n        invoice.balance = Math.max(0, invoice.amount - invoice.paid);\r\n        invoice.status = invoice.balance === 0 ? 'paid' : 'partial';\r\n        invoice.updatedAt = new Date().toISOString();\r\n        \r\n        // Update payment history\r\n        if (!invoice.paymentHistory) {\r\n          invoice.paymentHistory = [];\r\n        }\r\n        invoice.paymentHistory.push({\r\n          date: paymentData.date,\r\n          method: paymentData.method,\r\n          amount: paymentData.amount,\r\n          reference: paymentData.reference\r\n        });\r\n      }\r\n      \r\n      // Update customer balance\r\n      const customerIndex = staticCustomers.findIndex(c => c.id === paymentData.customerId);\r\n      if (customerIndex !== -1) {\r\n        staticCustomers[customerIndex].totalOwed -= paymentData.amount;\r\n        staticCustomers[customerIndex].lastPayment = paymentData.date;\r\n      }\r\n      \r\n      return {\r\n        success: true,\r\n        data: newPayment,\r\n        message: 'Payment recorded successfully'\r\n      };\r\n    } catch (error) {\r\n      throw new Error('Failed to create payment: ' + error.message);\r\n    }\r\n  },\r\n\r\n  // Utility APIs\r\n  async getARSummary() {\r\n    await simulateDelay(200);\r\n    try {\r\n      const totalAR = staticCustomers.reduce((sum, customer) => sum + customer.totalOwed, 0);\r\n      const totalOverdue = staticCustomers.reduce((sum, customer) => sum + customer.overdueAmount, 0);\r\n      const customersWithBalance = staticCustomers.filter(customer => customer.totalOwed > 0).length;\r\n      const avgDaysOutstanding = staticCustomers.reduce((sum, customer) => sum + customer.avgPaymentDays, 0) / staticCustomers.length;\r\n\r\n      return {\r\n        success: true,\r\n        data: {\r\n          totalAR,\r\n          totalOverdue,\r\n          customersWithBalance,\r\n          avgDaysOutstanding: Math.round(avgDaysOutstanding)\r\n        }\r\n      };\r\n    } catch (error) {\r\n      throw new Error('Failed to fetch AR summary: ' + error.message);\r\n    }\r\n  },\r\n\r\n  async getAgingReport() {\r\n    await simulateDelay(250);\r\n    try {\r\n      const aging = {\r\n        current: 0,\r\n        days30: 0,\r\n        days60: 0,\r\n        days90: 0,\r\n        over90: 0\r\n      };\r\n\r\n      staticInvoices.forEach(invoice => {\r\n        if (invoice.status === 'paid') return;\r\n        \r\n        const daysPastDue = invoice.daysOverdue || 0;\r\n        \r\n        if (daysPastDue <= 0) {\r\n          aging.current += invoice.balance;\r\n        } else if (daysPastDue <= 30) {\r\n          aging.days30 += invoice.balance;\r\n        } else if (daysPastDue <= 60) {\r\n          aging.days60 += invoice.balance;\r\n        } else if (daysPastDue <= 90) {\r\n          aging.days90 += invoice.balance;\r\n        } else {\r\n          aging.over90 += invoice.balance;\r\n        }\r\n      });\r\n\r\n      return {\r\n        success: true,\r\n        data: aging\r\n      };\r\n    } catch (error) {\r\n      throw new Error('Failed to fetch aging report: ' + error.message);\r\n    }\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}