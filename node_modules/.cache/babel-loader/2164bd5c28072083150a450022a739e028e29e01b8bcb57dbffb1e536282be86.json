{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Logic-Unit\\\\my-account\\\\src\\\\pages\\\\AccountsReceivable.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import { \n//   Users, \n//   DollarSign, \n//   CreditCard, \n//   AlertTriangle, \n//   Clock, \n//   Plus, \n//   Search, \n//   Filter, \n//   Eye, \n//   Edit, \n//   Download,\n//   CheckCircle,\n//   XCircle,\n//   Calendar,\n//   FileText,\n//   TrendingUp,\n//   Mail,\n//   Phone,\n//   Loader,\n//   RefreshCw\n// } from 'lucide-react';\n\n// // API Configuration\n// const API_BASE_URL_SALES = 'https://api-pos.hulmsolutions.com/POS/accounting2/31fc8df0-61db-41e5-bb67-070fde367ea1/orders?start=0&size=200';\n// const API_CUSTOMERS = 'https://api-pos.hulmsolutions.com/POS/accounting2/31fc8df0-61db-41e5-bb67-070fde367ea1/customers?status=Active';\n\n// // Replace with your actual Bearer token\n// const BEARER_TOKEN = 'your-bearer-token-here';\n\n// const AccountsReceivable = () => {\n//   // State management\n//   const [sales, setSales] = useState({ loading: false, data: [], error: null });\n//   const [customers, setCustomers] = useState({ loading: false, data: [], error: null });\n//   const [activeTab, setActiveTab] = useState('overview');\n//   const [selectedCustomer, setSelectedCustomer] = useState(null);\n//   const [selectedOrder, setSelectedOrder] = useState(null);\n//   const [viewInvoice, setViewInvoice] = useState(null);\n//   const [showInvoiceForm, setShowInvoiceForm] = useState(false);\n//   const [filters, setFilters] = useState({\n//     customerType: 'all',\n//     status: 'all',\n//     dateRange: '30',\n//     searchTerm: ''\n//   });\n\n//   // API Functions\n//   const fetchSales = async () => {\n//     setSales(prev => ({ ...prev, loading: true, error: null }));\n//     try {\n//       const response = await fetch(API_BASE_URL_SALES, {\n//         method: 'GET',\n//         headers: {\n//           'Authorization': `Bearer ${BEARER_TOKEN}`,\n//           'Content-Type': 'application/json',\n//         },\n//       });\n\n//       if (!response.ok) {\n//         throw new Error(`HTTP error! status: ${response.status}`);\n//       }\n\n//       const allData = await response.json();\n\n//       // Store all data for customer calculations\n//       window.allSalesData = allData;\n\n//       // // Show only records that are unpaid and fulfilled for display\n//       // const filteredOrders = allData.filter(order => \n//       //   !order.paid && order.fulfilled\n//       // );\n\n//       setSales({ loading: false, data: allData, error: null });\n//     } catch (error) {\n//       console.error('Error fetching sales:', error);\n//       setSales({ loading: false, data: [], error: error.message });\n//     }\n//   };\n\n//   const fetchCustomers = async () => {\n//     setCustomers(prev => ({ ...prev, loading: true, error: null }));\n//     try {\n//       const response = await fetch(API_CUSTOMERS, {\n//         method: 'GET',\n//         headers: {\n//           'Authorization': `Bearer ${BEARER_TOKEN}`,\n//           'Content-Type': 'application/json',\n//         },\n//       });\n\n//       if (!response.ok) {\n//         throw new Error(`HTTP error! status: ${response.status}`);\n//       }\n\n//       const data = await response.json();\n\n//       // Use all sales data for customer calculations, not just filtered display data\n//       const allSalesData = window.allSalesData || [];\n\n//       // Transform API customers to match our structure with real calculated data\n//       const transformedCustomers = data.map(customer => {\n//         // Get ALL orders for this customer (not just filtered ones)\n//         const customerOrders = allSalesData.filter(order => order.customerId === customer.id);\n\n//         console.log('customerOrders:'+customerOrders)\n//         // Calculate total owed from ALL unpaid orders\n//         const totalOwed = customerOrders\n//           .filter(order => !order.paid)\n//           .reduce((sum, order) => sum + (order.total || 0), 0);\n\n//         // Overdue amount = total owed (since all unpaid orders need collection)\n//         const overdueAmount = totalOwed;\n\n//         // Total number of orders for this customer\n//         const invoiceCount = customerOrders.length;\n\n//         // Determine customer type based on actual order history, not API totalSpendOnOrder\n//         let customerType = 'individual';\n//         const totalSpentFromOrders = customerOrders.reduce((sum, order) => sum + (order.total || 0), 0);\n\n//         // Use actual order amounts to determine customer type\n//         if (totalSpentFromOrders > 500000) {\n//           customerType = 'corporate';\n//         } else if (totalSpentFromOrders > 200000) {\n//           customerType = 'small_business';\n//         } else {\n//           customerType = 'individual';\n//         }\n\n//         // Set credit limit based on customer type\n//         let creditLimit = 25000; // Default for individual\n//         if (customerType === 'corporate') {\n//           creditLimit = 500000;\n//         } else if (customerType === 'small_business') {\n//           creditLimit = 100000;\n//         }\n\n//         // Determine credit status based on payment behavior\n//         let creditStatus = 'good';\n//         if (totalOwed === 0) {\n//           creditStatus = 'excellent';\n//         } else if (totalOwed > creditLimit * 0.9) {\n//           creditStatus = 'hold'; // Hold means credit limit exceeded, stop further credit\n//         } else if (totalOwed > creditLimit * 0.7) {\n//           creditStatus = 'watch'; // Watch means monitor closely\n//         }\n\n//         // Get last payment date from most recent paid order\n//         const paidOrders = customerOrders.filter(o => o.paid);\n//         const lastPayment = paidOrders.length > 0 ? \n//           paidOrders.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt))[0].createdAt.split('.').slice(0, 3).join('-') :\n//           'No payments';\n\n//         return {\n//           id: customer.id,\n//           name: customer.name,\n//           email: customer.email || 'No email provided',\n//           phone: customer.phoneNumber || 'No phone provided',\n//           address: customer.address && customer.address.length > 0 ? \n//             (typeof customer.address[0] === 'string' ? customer.address[0] : 'No address provided') : \n//             'No address provided',\n//           customerType: customerType,\n//           creditLimit: creditLimit,\n//           paymentTerms: customerType === 'corporate' ? 45 : (customerType === 'small_business' ? 30 : 15),\n//           totalOwed: totalOwed,\n//           overdueAmount: overdueAmount,\n//           lastPayment: lastPayment,\n//           creditStatus: creditStatus,\n//           accountBalance: -totalOwed,\n//           invoiceCount: invoiceCount,\n//           avgPaymentDays: 30, // Default estimate\n//           status: customer.status,\n//           totalSpendOnOrder: customer.totalSpendOnOrder || 0,\n//           averageOrderValue: customer.averageOrderValue || 0,\n//           numberOfOrders: customer.numberOfOrders || invoiceCount\n//         };\n//       });\n\n//       // Also add walk-in customers (null customerId) as separate entries for each order\n//       const walkInOrders = allSalesData.filter(order => !order.customerId || order.customerId === 'null');\n//       walkInOrders.forEach((order, index) => {\n//         const guestNumber = index + 1;\n//         const guestTotalOwed = order.paid ? 0 : order.total;\n//         const guestLastPayment = order.paid ? \n//           order.createdAt.split('.').slice(0, 3).join('-') : \n//           'No payments';\n\n//         // transformedCustomers.push({\n//         //   id: `guest-${order.orderId}`,\n//         //   name: `Guest Customer #${guestNumber}`,\n//         //   email: 'guest@pos.system',\n//         //   phone: '+000-000-0000',\n//         //   address: 'Walk-in Sale',\n//         //   customerType: 'cash',\n//         //   creditLimit: 0,\n//         //   paymentTerms: 0,\n//         //   totalOwed: guestTotalOwed,\n//         //   overdueAmount: guestTotalOwed,\n//         //   lastPayment: guestLastPayment,\n//         //   creditStatus: 'cash_only',\n//         //   accountBalance: -guestTotalOwed,\n//         //   invoiceCount: 1,\n//         //   avgPaymentDays: 0,\n//         //   status: 'Active',\n//         //   totalSpendOnOrder: order.total,\n//         //   averageOrderValue: order.total,\n//         //   numberOfOrders: 1,\n//         //   orderId: order.orderId // Store order ID for reference\n//         // });\n//       });\n\n//       setCustomers({ loading: false, data: transformedCustomers, error: null });\n//     } catch (error) {\n//       console.error('Error fetching customers:', error);\n//       setCustomers({ loading: false, data: [], error: error.message });\n//     }\n//   };\n\n//   // Also add refresh button functionality to recalculate customer data\n//   const refreshAllData = async () => {\n//     await fetchSales();\n//     setTimeout(() => fetchCustomers(), 500);\n//   };\n\n//   // Load data on component mount\n//   useEffect(() => {\n//     const loadData = async () => {\n//       await fetchSales();\n//       // Fetch customers after sales data is loaded to calculate balances correctly\n//       setTimeout(() => fetchCustomers(), 500);\n//     };\n//     loadData();\n//   }, []);\n\n//   // Helper function to get customer name by ID\n//   const getCustomerName = (customerId) => {\n//     if (!customerId || customerId === 'null') return 'Guest Customer';\n//     const customer = customers.data.find(c => c.id === customerId);\n//     return customer ? customer.name : 'Unknown Customer';\n//   };\n\n//   // Helper function to get customer details by ID\n//   const getCustomerDetails = (customerId) => {\n//     if (!customerId || customerId === 'null') return null;\n//     return customers.data.find(c => c.id === customerId);\n//   };\n\n//   // Calculate AR summary\n//   const calculateARSummary = () => {\n//     const totalAR = customers.data.reduce((sum, customer) => sum + customer.totalOwed, 0);\n//     const totalOverdue = customers.data.reduce((sum, customer) => sum + customer.overdueAmount, 0);\n//     const customersWithBalance = customers.data.filter(customer => customer.totalOwed > 0).length;\n\n//     // Calculate real average days outstanding from actual order data\n//     const allSalesData = window.allSalesData || [];\n//     let totalDaysOutstanding = 0;\n//     let orderCount = 0;\n\n//     allSalesData.forEach(order => {\n//       // Convert order creation date from \"2025.08.18.10.08.54.569\" to proper date\n//       const orderDateStr = order.createdAt.split('.').slice(0, 3).join('-'); // \"2025-08-18\"\n//       const orderDate = new Date(orderDateStr);\n//       const today = new Date();\n\n//       // Calculate days between order creation and today\n//       const timeDiff = today.getTime() - orderDate.getTime();\n//       const daysDiff = Math.floor(timeDiff / (1000 * 3600 * 24));\n\n//       totalDaysOutstanding += daysDiff;\n//       orderCount++;\n//     });\n\n//     const avgDaysOutstanding = orderCount > 0 ? Math.round(totalDaysOutstanding / orderCount) : 0;\n\n//     return {\n//       totalAR,\n//       totalOverdue,\n//       customersWithBalance,\n//       avgDaysOutstanding\n//     };\n//   };\n\n//   // Get aging data\n//   const getAgingData = () => {\n//     const aging = {\n//       current: 0,\n//       days30: 0,\n//       days60: 0,\n//       days90: 0,\n//       over90: 0\n//     };\n\n//     sales.data.forEach(order => {\n//       if (order.paid) return;\n\n//       const daysPastDue = order.daysOverdue || 0;\n\n//       if (daysPastDue <= 0) {\n//         aging.current += order.total;\n//       } else if (daysPastDue <= 30) {\n//         aging.days30 += order.total;\n//       } else if (daysPastDue <= 60) {\n//         aging.days60 += order.total;\n//       } else if (daysPastDue <= 90) {\n//         aging.days90 += order.total;\n//       } else {\n//         aging.over90 += order.total;\n//       }\n//     });\n\n//     return aging;\n//   };\n\n//   // // Filter customers\n//   // const getFilteredCustomers = () => {\n//   //   let filtered = [...customers.data];\n\n//   //   if (filters.customerType !== 'all') {\n//   //     filtered = filtered.filter(customer => customer.customerType === filters.customerType);\n//   //   }\n\n//   //   if (filters.status !== 'all') {\n//   //     filtered = filtered.filter(customer => {\n//   //       if (filters.status === 'overdue') return customer.overdueAmount > 0;\n//   //       if (filters.status === 'current') return customer.totalOwed > 0 && customer.overdueAmount === 0;\n//   //       if (filters.status === 'paid_up') return customer.totalOwed === 0;\n//   //       return true;\n//   //     });\n//   //   }\n\n//   //   if (filters.searchTerm) {\n//   //     const term = filters.searchTerm.toLowerCase();\n//   //     filtered = filtered.filter(customer =>\n//   //       customer.name.toLowerCase().includes(term) ||\n//   //       customer.email.toLowerCase().includes(term) ||\n//   //       customer.id.toLowerCase().includes(term)\n//   //     );\n//   //   }\n\n//   //   return filtered;\n//   // };\n//   // Filter customers - ONLY those with valid names\n// const getFilteredCustomers = () => {\n//   // First check if we have valid data\n//   if (!customers || !customers.data) {\n//     return [];\n//   }\n\n//   // Start by filtering ONLY customers WITH names\n//   let filtered = customers.data.filter(customer => \n//     customer && \n//     customer.name && \n//     typeof customer.name === 'string' && \n//     customer.name.trim() !== ''\n//   );\n\n//   // Now apply the rest of the filters to our name-filtered list\n//   if (filters && filters.customerType && filters.customerType !== 'all') {\n//     filtered = filtered.filter(customer => customer.customerType === filters.customerType);\n//   }\n\n//   if (filters && filters.status && filters.status !== 'all') {\n//     filtered = filtered.filter(customer => {\n//       if (filters.status === 'overdue') return customer.overdueAmount > 0;\n//       if (filters.status === 'current') return customer.totalOwed > 0 && customer.overdueAmount === 0;\n//       if (filters.status === 'paid_up') return customer.totalOwed === 0;\n//       return true;\n//     });\n//   }\n\n//   if (filters && filters.searchTerm) {\n//     const term = filters.searchTerm.toLowerCase();\n//     filtered = filtered.filter(customer =>\n//       customer.name.toLowerCase().includes(term) ||\n//       (customer.email && customer.email.toLowerCase().includes(term)) ||\n//       (customer.id && customer.id.toLowerCase().includes(term))\n//     );\n//   }\n\n//   console.log(`Filtered to ${filtered.length} customers with valid names`);\n//   return filtered;\n// };\n\n// // ✅ Apply filters\n// const filteredOrders = sales.data.filter(order => {\n//   // Status filter\n//   if (filters.status === 'paid' && !order.paid) return false;\n//   if (filters.status === 'unpaid' && order.paid) return false;\n//   if (filters.status === 'fulfilled' && !order.fulfilled) return false;\n//   if (filters.status === 'unfulfilled' && order.fulfilled) return false;\n\n//   // Date filter (from / to)\n//   const orderDate = new Date(order.createdAt);\n//   if (filters.fromDate && orderDate < new Date(filters.fromDate)) return false;\n//   if (filters.toDate && orderDate > new Date(filters.toDate)) return false;\n\n//   return true;\n// });\n\n//   const getCreditStatusColor = (status) => {\n//     switch (status) {\n//       case 'excellent': return 'bg-green-100 text-green-800';\n//       case 'good': return 'bg-blue-100 text-blue-800';\n//       case 'watch': return 'bg-yellow-100 text-yellow-800';\n//       case 'hold': return 'bg-red-100 text-red-800';\n//       case 'cash_only': return 'bg-gray-100 text-gray-800';\n//       default: return 'bg-gray-100 text-gray-800';\n//     }\n//   };\n\n//   const getInvoiceStatusColor = (status) => {\n//     switch (status) {\n//       case 'paid': return 'bg-green-100 text-green-800';\n//       case 'outstanding': return 'bg-blue-100 text-blue-800';\n//       case 'overdue': return 'bg-red-100 text-red-800';\n//       case 'partial': return 'bg-yellow-100 text-yellow-800';\n//       default: return 'bg-gray-100 text-gray-800';\n//     }\n//   };\n\n//   const formatDate = (dateString) => {\n//     if (!dateString) return 'N/A';\n//     return dateString.split('.').slice(0, 3).join('/');\n//   };\n\n//   const formatCurrency = (amount) => {\n//     return new Intl.NumberFormat('en-US', {\n//       style: 'currency',\n//       currency: 'USD'\n//     }).format(amount);\n//   };\n\n//   const summary = calculateARSummary();\n//   const aging = getAgingData();\n//   const filteredCustomers = getFilteredCustomers();\n\n//   // Loading state\n//   if (sales.loading || customers.loading) {\n//     return (\n//       <div className=\"flex items-center justify-center min-h-screen\">\n//         <div className=\"flex items-center space-x-3\">\n//           <Loader className=\"animate-spin text-emerald-600\" size={24} />\n//           <span className=\"text-gray-600\">Loading data from API...</span>\n//         </div>\n//       </div>\n//     );\n//   }\n\n//   // Error state\n//   if (sales.error || customers.error) {\n//     return (\n//       <div className=\"max-w-7xl mx-auto p-6\">\n//         <div className=\"bg-red-50 border border-red-200 rounded-lg p-6\">\n//           <div className=\"flex items-center mb-4\">\n//             <AlertTriangle className=\"text-red-600 mr-2\" size={20} />\n//             <h3 className=\"font-medium text-red-800\">API Connection Error</h3>\n//           </div>\n//           <div className=\"text-red-700 mb-4\">\n//             {sales.error && <div>Sales API Error: {sales.error}</div>}\n//             {customers.error && <div>Customers API Error: {customers.error}</div>}\n//           </div>\n//           <button\n//             onClick={() => {\n//               fetchSales();\n//               fetchCustomers();\n//             }}\n//             className=\"px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 flex items-center space-x-2\"\n//           >\n//             <RefreshCw size={16} />\n//             <span>Retry Connection</span>\n//           </button>\n//         </div>\n//       </div>\n//     );\n//   }\n\n//   return (\n//     <div className=\"max-w-7xl mx-auto p-6 bg-white\">\n//       {/* Header */}\n//       <div className=\"mb-8\">\n//         <h1 className=\"text-3xl font-bold text-gray-900 mb-2 flex items-center\">\n//           <CreditCard className=\"mr-3 text-emerald-600\" />\n//           Accounts Receivable\n//         </h1>\n//         <p className=\"text-gray-600\">Manage customer invoicing, payments, and credit limits</p>\n//       </div>\n\n//       {/* Summary Cards */}\n//       <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n//         <div className=\"bg-blue-50 p-6 rounded-lg border border-blue-200\">\n//           <div className=\"flex items-center justify-between\">\n//             <div>\n//               <p className=\"text-blue-600 text-sm font-medium\">Total A/R</p>\n//               <p className=\"text-2xl font-bold text-blue-900\">{formatCurrency(summary.totalAR)}</p>\n//             </div>\n//             <DollarSign className=\"text-blue-600\" size={24} />\n//           </div>\n//           <p className=\"text-sm text-blue-700 mt-2\">{summary.customersWithBalance} customers with balances</p>\n//         </div>\n\n//         <div className=\"bg-red-50 p-6 rounded-lg border border-red-200\">\n//           <div className=\"flex items-center justify-between\">\n//             <div>\n//               <p className=\"text-red-600 text-sm font-medium\">Overdue Amount</p>\n//               <p className=\"text-2xl font-bold text-red-900\">{formatCurrency(summary.totalOverdue)}</p>\n//             </div>\n//             <AlertTriangle className=\"text-red-600\" size={24} />\n//           </div>\n//           <p className=\"text-sm text-red-700 mt-2\">\n//             {summary.totalAR > 0 ? ((summary.totalOverdue / summary.totalAR) * 100).toFixed(1) : 0}% of total A/R\n//           </p>\n//         </div>\n\n//         <div className=\"bg-green-50 p-6 rounded-lg border border-green-200\">\n//           <div className=\"flex items-center justify-between\">\n//             <div>\n//               <p className=\"text-green-600 text-sm font-medium\">Avg. Days Outstanding</p>\n//               <p className=\"text-2xl font-bold text-green-900\">{summary.avgDaysOutstanding}</p>\n//             </div>\n//             <Clock className=\"text-green-600\" size={24} />\n//           </div>\n//           <p className=\"text-sm text-green-700 mt-2\">Collection performance</p>\n//         </div>\n\n//         <div className=\"bg-purple-50 p-6 rounded-lg border border-purple-200\">\n//           <div className=\"flex items-center justify-between\">\n//             <div>\n//               <p className=\"text-purple-600 text-sm font-medium\">Active Customers</p>\n//               <p className=\"text-2xl font-bold text-purple-900\">{customers.data.length}</p>\n//             </div>\n//             <Users className=\"text-purple-600\" size={24} />\n//           </div>\n//           <p className=\"text-sm text-purple-700 mt-2\">Total customer accounts</p>\n//         </div>\n//       </div>\n\n//       {/* Tabs */}\n//       <div className=\"mb-6\">\n//         <div className=\"border-b border-gray-200\">\n//           <nav className=\"-mb-px flex space-x-8\">\n//             {[\n//               { id: 'overview', name: 'Customer Overview', icon: Users },\n//               { id: 'invoices', name: 'Invoices', icon: FileText },\n//               { id: 'aging', name: 'Aging Report', icon: Clock },\n//               { id: 'payments', name: 'Payments', icon: CheckCircle }\n//             ].map((tab) => (\n//               <button\n//                 key={tab.id}\n//                 onClick={() => setActiveTab(tab.id)}\n//                 className={`flex items-center py-2 px-1 border-b-2 font-medium text-sm {\n//                   activeTab === tab.id\n//                     ? 'border-emerald-500 text-emerald-600'\n//                     : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n//                 }`}\n//               >\n//                 <tab.icon className=\"mr-2\" size={16} />\n//                 {tab.name}\n//               </button>\n//             ))}\n//           </nav>\n//         </div>\n//       </div>\n\n//       {/* Tab Content */}\n//       {activeTab === 'overview' && (\n//         <div>\n//           {/* Filters */}\n\n// <div className=\"flex flex-wrap items-center gap-4 mb-6\">\n//   {/* 🔍 Search */}\n//   <div className=\"relative\">\n//     <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" size={16} />\n//     <input\n//       type=\"text\"\n//       placeholder=\"Search customers...\"\n//       value={filters.searchTerm}\n//       onChange={(e) => setFilters({ ...filters, searchTerm: e.target.value })}\n//       className=\"pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\n//     />\n//   </div>\n\n//   {/* 📅 From Date */}\n//   <div>\n//     <label className=\"block text-xs text-gray-500 mb-1\">From</label>\n//     <input\n//       type=\"date\"\n//       value={filters.dateFrom || ''}\n//       onChange={(e) => setFilters({ ...filters, dateFrom: e.target.value })}\n//       className=\"px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\n//     />\n//   </div>\n\n//   {/* 📅 To Date */}\n//   <div>\n//     <label className=\"block text-xs text-gray-500 mb-1\">To</label>\n//     <input\n//       type=\"date\"\n//       value={filters.dateTo || ''}\n//       onChange={(e) => setFilters({ ...filters, dateTo: e.target.value })}\n//       className=\"px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\n//     />\n//   </div>\n\n//   {/* Status */}\n//   <select\n//     value={filters.status}\n//     onChange={(e) => setFilters({ ...filters, status: e.target.value })}\n//     className=\"px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\n//   >\n//     <option value=\"all\">All Statuses</option>\n//     <option value=\"current\">Paid</option>\n//     <option value=\"overdue\">UnPaid</option>\n//     <option value=\"paid_up\">Fulfilled</option>\n//         <option value=\"paid_up\">UnFulfilled</option>\n\n//   </select>\n\n//   {/* ➕ New Invoice */}\n//   <button\n//     onClick={() => setShowInvoiceForm(true)}\n//     className=\"px-4 py-2 bg-emerald-600 text-white rounded-lg hover:bg-emerald-700 flex items-center space-x-2\"\n//   >\n//     <Plus size={16} />\n//     <span>New Invoice</span>\n//   </button>\n\n//   {/* Clear Dates Button */}\n//   {(filters.dateFrom || filters.dateTo) && (\n//     <button\n//       onClick={() => setFilters({ ...filters, dateFrom: '', dateTo: '' })}\n//       className=\"px-3 py-1 bg-gray-200 rounded-lg hover:bg-gray-300 text-sm\"\n//     >\n//       Clear Dates\n//     </button>\n//   )}\n// </div>\n\n//           {/* Customer List */}\n//           <div className=\"bg-white border border-gray-200 rounded-lg overflow-hidden\">\n//             <div className=\"overflow-x-auto\">\n//               <table className=\"w-full\">\n//                 <thead className=\"bg-gray-50\">\n//                   <tr>\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                       Customer\n//                     </th>\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                       Credit Limit\n//                     </th>\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                       Balance\n//                     </th>\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                       Overdue\n//                     </th>\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                       Credit Status\n//                     </th>\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                       Last Payment\n//                     </th>\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                       Sales Orders\n//                     </th>\n//                   </tr>\n//                 </thead>\n//                 <tbody className=\"bg-white divide-y divide-gray-200\">\n//                   {filteredCustomers.map((customer) => (\n//                     <tr key={customer.id} className=\"hover:bg-gray-50\">\n//                       <td className=\"px-6 py-4\">\n//                         <div>\n//                           <div className=\"text-sm font-medium text-gray-900\">{customer.name}</div>\n//                           <div className=\"text-sm text-gray-500\">{customer.id}</div>\n//                           <div className=\"text-xs text-gray-400 flex items-center mt-1\">\n//                             <Mail className=\"mr-1\" size={12} />\n//                             {customer.email}\n//                           </div>\n//                         </div>\n//                       </td>\n//                       <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n//                         {formatCurrency(customer.creditLimit)}\n//                       </td>\n//                       <td className=\"px-6 py-4 whitespace-nowrap\">\n//                         <div className=\"text-sm font-medium text-gray-900\">\n//                           {formatCurrency(customer.totalOwed)}\n//                         </div>\n//                         <div className=\"text-xs text-gray-500\">\n//                           {customer.invoiceCount} invoices\n//                         </div>\n//                       </td>\n//                       <td className=\"px-6 py-4 whitespace-nowrap\">\n//                         {customer.overdueAmount > 0 ? (\n//                           <span className=\"text-red-600 font-medium\">\n//                             {formatCurrency(customer.overdueAmount)}\n//                           </span>\n//                         ) : (\n//                           <span className=\"text-green-600\">0.00</span>\n//                         )}\n//                       </td>\n//                       <td className=\"px-6 py-4 whitespace-nowrap\">\n//                         <span className={`px-2 py-1 text-xs font-medium rounded-full {getCreditStatusColor(customer.creditStatus)}`}>\n//                           {customer.creditStatus.replace('_', ' ')}\n//                         </span>\n//                       </td>\n//                       <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n//                         {customer.lastPayment}\n//                       </td>\n//                       <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">\n//                         <button\n//                           onClick={() => setSelectedCustomer(customer)}\n//                           className=\"text-emerald-600 hover:text-emerald-900 mr-3\"\n//                         >\n//                           <Eye size={16} />\n//                         </button>\n//                         <button className=\"text-blue-600 hover:text-blue-900\">\n//                           <Edit size={16} />\n//                         </button>\n//                       </td>\n//                     </tr>\n//                   ))}\n//                 </tbody>\n//               </table>\n//             </div>\n//           </div>\n//         </div>\n//       )}\n\n//       {activeTab === 'aging' && (\n//         <div>\n//           <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n//             {/* Aging Summary */}\n//             <div className=\"bg-white border border-gray-200 rounded-lg p-6\">\n//               <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Aging Summary</h3>\n//               <div className=\"space-y-4\">\n//                 <div className=\"flex justify-between items-center p-3 bg-green-50 rounded\">\n//                   <span className=\"font-medium text-green-800\">Current (0-30 days)</span>\n//                   <span className=\"font-bold text-green-900\">{formatCurrency(aging.current)}</span>\n//                 </div>\n//                 <div className=\"flex justify-between items-center p-3 bg-yellow-50 rounded\">\n//                   <span className=\"font-medium text-yellow-800\">31-60 days</span>\n//                   <span className=\"font-bold text-yellow-900\">{formatCurrency(aging.days30)}</span>\n//                 </div>\n//                 <div className=\"flex justify-between items-center p-3 bg-orange-50 rounded\">\n//                   <span className=\"font-medium text-orange-800\">61-90 days</span>\n//                   <span className=\"font-bold text-orange-900\">{formatCurrency(aging.days60)}</span>\n//                 </div>\n//                 <div className=\"flex justify-between items-center p-3 bg-red-50 rounded\">\n//                   <span className=\"font-medium text-red-800\">Over 90 days</span>\n//                   <span className=\"font-bold text-red-900\">{formatCurrency(aging.over90)}</span>\n//                 </div>\n//               </div>\n//               <div className=\"mt-4 pt-4 border-t\">\n//                 <div className=\"flex justify-between items-center\">\n//                   <span className=\"text-lg font-semibold text-gray-900\">Total Outstanding</span>\n//                   <span className=\"text-xl font-bold text-gray-900\">\n//                     {formatCurrency(aging.current + aging.days30 + aging.days60 + aging.days90 + aging.over90)}\n//                   </span>\n//                 </div>\n//               </div>\n//             </div>\n\n//             {/* Collection Priority */}\n//             <div className=\"bg-white border border-gray-200 rounded-lg p-6\">\n//               <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Collection Priority</h3>\n//               <div className=\"space-y-3\">\n//                 {customers.data\n//                   .filter(customer => customer.overdueAmount > 0)\n//                   .sort((a, b) => b.overdueAmount - a.overdueAmount)\n//                   .slice(0, 5)\n//                   .map((customer, index) => (\n//                     <div key={customer.id} className=\"flex items-center justify-between p-3 bg-red-50 rounded\">\n//                       <div>\n//                         <div className=\"font-medium text-gray-900\">{customer.name}</div>\n//                         <div className=\"text-sm text-gray-500\">\n//                           Last payment: {customer.lastPayment}\n//                         </div>\n//                       </div>\n//                       <div className=\"text-right\">\n//                         <div className=\"font-bold text-red-900\">{formatCurrency(customer.overdueAmount)}</div>\n//                         <div className=\"text-xs text-red-700\">#{index + 1} Priority</div>\n//                       </div>\n//                     </div>\n//                   ))}\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n//       )}\n\n//      {activeTab === 'invoices' && (\n//   <div>\n//     <div className=\"bg-white border border-gray-200 rounded-lg overflow-hidden\">\n//       <div className=\"px-6 py-4 border-b border-gray-200\">\n//         <h3 className=\"text-lg font-semibold text-gray-900\">Outstanding Orders/Invoices</h3>\n//       </div>\n\n//       {/* 🔍 Filters Bar */}\n//       <div className=\"flex flex-wrap items-end gap-4 px-6 py-4 bg-gray-50 border-b border-gray-200\">\n//         {/* From Date */}\n//         <div>\n//           <label className=\"block text-xs font-medium text-gray-600 mb-1\">From</label>\n//           <input\n//             type=\"date\"\n//             value={filters.fromDate}\n//             onChange={(e) => setFilters({ ...filters, fromDate: e.target.value })}\n//             className=\"px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\n//           />\n//         </div>\n\n//         {/* To Date */}\n//         <div>\n//           <label className=\"block text-xs font-medium text-gray-600 mb-1\">To</label>\n//           <input\n//             type=\"date\"\n//             value={filters.toDate}\n//             onChange={(e) => setFilters({ ...filters, toDate: e.target.value })}\n//             className=\"px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\n//           />\n//         </div>\n\n//         {/* Status */}\n//         <div>\n//           <label className=\"block text-xs font-medium text-gray-600 mb-1\">Status</label>\n//           <select\n//             value={filters.status}\n//             onChange={(e) => setFilters({ ...filters, status: e.target.value })}\n//             className=\"px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\n//           >\n//             <option value=\"all\">All</option>\n//             <option value=\"paid\">Paid</option>\n//             <option value=\"unpaid\">Unpaid</option>\n//             <option value=\"fulfilled\">Fulfilled</option>\n//             <option value=\"unfulfilled\">Unfulfilled</option>\n//           </select>\n//         </div>\n\n//         {/* Search */}\n//         <div className=\"flex-1 min-w-[200px]\">\n//           <label className=\"block text-xs font-medium text-gray-600 mb-1\">Search</label>\n//           <input\n//             type=\"text\"\n//             placeholder=\"Search by Order # or Customer\"\n//             value={filters.searchTerm}\n//             onChange={(e) => setFilters({ ...filters, searchTerm: e.target.value })}\n//             className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\n//           />\n//         </div>\n//       </div>\n\n//       {/* Table */}\n//       <div className=\"overflow-x-auto\">\n//         <table className=\"w-full\">\n//           <thead className=\"bg-gray-50\">\n//             <tr>\n//               <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                 ORDERID\n//               </th>\n//               <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                 Customer\n//               </th>\n//               <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                 Date\n//               </th>\n//               <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                 Items\n//               </th>\n//               <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                 Amount\n//               </th>\n//               <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                 Payment Status\n//               </th>\n//               <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                 Fulfillment\n//               </th>\n//               <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                 Sales Order\n//               </th>\n//             </tr>\n//           </thead>\n//           <tbody className=\"bg-white divide-y divide-gray-200\">\n//             {filteredOrders.map((order) => (\n//               <tr key={order.orderId} className=\"hover:bg-gray-50\">\n//                 <td className=\"px-6 py-4 whitespace-nowrap\">\n//                   <div className=\"text-sm font-medium text-gray-900\">{order.orderId}</div>\n//                   <div className=\"text-xs text-gray-500\">{order.status}</div>\n//                 </td>\n//                 <td className=\"px-6 py-4\">\n//                   <div className=\"text-sm font-medium text-gray-900\">{getCustomerName(order.customerId)}</div>\n//                 </td>\n//                 <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n//                   {formatDate(order.createdAt)}\n//                 </td>\n//                 <td className=\"px-6 py-4\">\n//                   <div className=\"text-sm text-gray-900\">\n//                     {order.lineItems.map((item, index) => (\n//                       <div key={index} className=\"mb-1\">\n//                         <span className=\"font-medium\">{item.productName}</span>\n//                         <span className=\"text-gray-500 ml-2\">x{item.quantity}</span>\n//                       </div>\n//                     ))}\n//                   </div>\n//                 </td>\n//                 <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n//                   {formatCurrency(order.total)}\n//                 </td>\n//                 <td className=\"px-6 py-4 whitespace-nowrap\">\n//                   <span\n//                     className={`px-2 py-1 text-xs font-medium rounded-full ${\n//                       order.paid ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'\n//                     }`}\n//                   >\n//                     {order.paid ? 'Paid' : 'Unpaid'}\n//                   </span>\n//                 </td>\n//                 <td className=\"px-6 py-4 whitespace-nowrap\">\n//                   <span\n//                     className={`px-2 py-1 text-xs font-medium rounded-full ${\n//                       order.fulfilled ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'\n//                     }`}\n//                   >\n//                     {order.fulfilled ? 'Fulfilled' : 'Unfulfilled'}\n//                   </span>\n//                 </td>\n//                 <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">\n//                   <button\n//                     className=\"text-emerald-600 hover:text-emerald-900 mr-3\"\n//                     onClick={() => setViewInvoice(order)}\n//                   >\n//                     <Eye size={16} />\n//                   </button>\n//                   <button className=\"text-blue-600 hover:text-blue-900\">\n//                     <Download size={16} />\n//                   </button>\n//                 </td>\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//       </div>\n//     </div>\n//   </div>\n// )}\n\n//       {activeTab === 'payments' && (\n//         <div>\n//           <div className=\"bg-white border border-gray-200 rounded-lg overflow-hidden\">\n//             <div className=\"px-6 py-4 border-b border-gray-200\">\n//               <h3 className=\"text-lg font-semibold text-gray-900\">Payment History</h3>\n//             </div>\n//             <div className=\"overflow-x-auto\">\n//               <table className=\"w-full\">\n//                 <thead className=\"bg-gray-50\">\n//                   <tr>\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                       Order ID\n//                     </th>\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                       Customer\n//                     </th>\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                       Date\n//                     </th>\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                       Amount\n//                     </th>\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                       Payment Status\n//                     </th>\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                       Fulfillment Status\n//                     </th>\n//                   </tr>\n//                 </thead>\n//                 <tbody className=\"bg-white divide-y divide-gray-200\">\n//   {window.allSalesData\n//     ?.filter(order => order.paid && order.fulfilled)\n//     .map((order) => (\n//       <tr key={order.orderId} className=\"hover:bg-gray-50\">\n//         <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\n//           #{order.orderId}\n//         </td>\n//         <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n//           {/* show customer name if exists, otherwise fallback */}\n//           {getCustomerName(order.customerId) || 'Unknown / Guest'}\n//         </td>\n//         <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n//           {formatDate(order.createdAt)}\n//         </td>\n//         <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n//           {formatCurrency(order.total)}\n//         </td>\n//         <td className=\"px-6 py-4 whitespace-nowrap\">\n//           <span className=\"px-2 py-1 text-xs font-medium rounded-full bg-green-100 text-green-800\">\n//             Paid\n//           </span>\n//         </td>\n//         <td className=\"px-6 py-4 whitespace-nowrap\">\n//           <span className=\"px-2 py-1 text-xs font-medium rounded-full bg-green-100 text-green-800\">\n//             Fulfilled\n//           </span>\n//         </td>\n//       </tr>\n//     ))}\n\n//   {/* Show message when no qualifying orders are found */}\n//   {(!window.allSalesData ||\n//     window.allSalesData.filter(order => order.paid && order.fulfilled).length === 0) && (\n//     <tr>\n//       <td colSpan={6} className=\"px-6 py-4 text-center text-gray-500\">\n//         No paid & fulfilled orders found.\n//       </td>\n//     </tr>\n//   )}\n// </tbody>\n\n//               </table>\n//             </div>\n\n//             {(!window.allSalesData?.filter(order => order.paid).length || window.allSalesData?.filter(order => order.paid).length === 0) && (\n//               <div className=\"text-center py-12\">\n//                 <div className=\"text-gray-500 text-lg\">No payments found</div>\n//                 <p className=\"text-gray-400 mt-2\">All orders are currently unpaid</p>\n//               </div>\n//             )}\n//           </div>\n//         </div>\n//       )}\n\n//       {/* Customer Detail Modal */}\n//       {selectedCustomer && (\n//         <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center p-4 z-50\">\n//           <div className=\"bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-y-auto\">\n//             <div className=\"px-6 py-4 border-b border-gray-200\">\n//               <div className=\"flex items-center justify-between\">\n//                 <h3 className=\"text-lg font-semibold text-gray-900\">\n//                   Customer Details - {selectedCustomer.name}\n//                 </h3>\n//                 <button\n//                   onClick={() => setSelectedCustomer(null)}\n//                   className=\"text-gray-400 hover:text-gray-600\"\n//                 >\n//                   <XCircle size={20} />\n//                 </button>\n//               </div>\n//             </div>\n\n//             <div className=\"px-6 py-4\">\n//               {/* Customer Info Grid */}\n//               <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-6\">\n//                 <div className=\"space-y-4\">\n//                   <div>\n//                     <label className=\"text-sm font-medium text-gray-500\">Customer ID</label>\n//                     <p className=\"text-sm text-gray-900\">{selectedCustomer.id}</p>\n//                   </div>\n//                   <div>\n//                     <label className=\"text-sm font-medium text-gray-500\">Email</label>\n//                     <p className=\"text-sm text-gray-900\">{selectedCustomer.email}</p>\n//                   </div>\n//                   <div>\n//                     <label className=\"text-sm font-medium text-gray-500\">Phone</label>\n//                     <p className=\"text-sm text-gray-900\">{selectedCustomer.phone}</p>\n//                   </div>\n//                   <div>\n//                     <label className=\"text-sm font-medium text-gray-500\">Address</label>\n//                     <p className=\"text-sm text-gray-900\">{selectedCustomer.address}</p>\n//                   </div>\n//                 </div>\n\n//                 <div className=\"space-y-4\">\n//                   <div>\n//                     <label className=\"text-sm font-medium text-gray-500\">Customer Type</label>\n//                     <p className=\"text-sm text-gray-900\">{selectedCustomer.customerType.replace('_', ' ')}</p>\n//                   </div>\n//                   <div>\n//                     <label className=\"text-sm font-medium text-gray-500\">Credit Limit</label>\n//                     <p className=\"text-sm text-gray-900\">{formatCurrency(selectedCustomer.creditLimit)}</p>\n//                   </div>\n//                   <div>\n//                     <label className=\"text-sm font-medium text-gray-500\">Payment Terms</label>\n//                     <p className=\"text-sm text-gray-900\">{selectedCustomer.paymentTerms} days</p>\n//                   </div>\n//                   <div>\n//                     <label className=\"text-sm font-medium text-gray-500\">Credit Status</label>\n//                     <span className={`px-2 py-1 text-xs font-medium rounded-full {getCreditStatusColor(selectedCustomer.creditStatus)}`}>\n//                       {selectedCustomer.creditStatus.replace('_', ' ')}\n//                     </span>\n//                   </div>\n//                 </div>\n//               </div>\n\n//               {/* Financial Summary */}\n//               <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n//                 <div className=\"bg-blue-50 p-4 rounded-lg\">\n//                   <div className=\"text-sm font-medium text-blue-600\">Current Balance</div>\n//                   <div className=\"text-xl font-bold text-blue-900\">\n//                     {formatCurrency(selectedCustomer.totalOwed)}\n//                   </div>\n//                 </div>\n//                 <div className=\"bg-red-50 p-4 rounded-lg\">\n//                   <div className=\"text-sm font-medium text-red-600\">Overdue Amount</div>\n//                   <div className=\"text-xl font-bold text-red-900\">\n//                     {formatCurrency(selectedCustomer.overdueAmount)}\n//                   </div>\n//                 </div>\n//                 <div className=\"bg-green-50 p-4 rounded-lg\">\n//                   <div className=\"text-sm font-medium text-green-600\">Credit Available</div>\n//                   <div className=\"text-xl font-bold text-green-900\">\n//                     {formatCurrency(selectedCustomer.creditLimit - selectedCustomer.totalOwed)}\n//                   </div>\n//                 </div>\n//                 <div className=\"bg-purple-50 p-4 rounded-lg\">\n//                   <div className=\"text-sm font-medium text-purple-600\">Avg Payment Days</div>\n//                   <div className=\"text-xl font-bold text-purple-900\">\n//                     {selectedCustomer.avgPaymentDays}\n//                   </div>\n//                 </div>\n//               </div>\n\n//               {/* Customer Orders */}\n//               <div className=\"mb-6\">\n//                 <h4 className=\"text-md font-semibold text-gray-900 mb-3\">Customer Orders</h4>\n//                 <div className=\"overflow-x-auto\">\n//                   <table className=\"w-full border border-gray-200 rounded\">\n//                     <thead className=\"bg-gray-50\">\n//                       <tr>\n//                         <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500\">Order Id</th>\n//                         <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500\">Date</th>\n//                         <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500\">Items</th>\n//                         <th className=\"px-4 py-2 text-right text-xs font-medium text-gray-500\">Amount</th>\n//                         <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500\">Payment</th>\n//                         <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500\">Fulfillment</th>\n//                       </tr>\n//                     </thead>\n//                     <tbody className=\"divide-y divide-gray-200\">\n//                       {(window.allSalesData || [])\n//                         .filter(order => {\n//                           if (selectedCustomer.id.startsWith('guest-')) {\n//                             return order.orderId === selectedCustomer.orderId;\n//                           }\n//                           return order.customerId === selectedCustomer.id;\n//                         })\n//                         .map((order) => (\n//                           <tr key={order.orderId}>\n//                             <td className=\"px-4 py-2 text-sm text-gray-900\">{order.orderId}</td>\n//                             <td className=\"px-4 py-2 text-sm text-gray-900\">{formatDate(order.createdAt)}</td>\n//                             <td className=\"px-4 py-2 text-sm text-gray-900\">\n//                               {order.lineItems.map(item => item.productName).join(', ')}\n//                             </td>\n//                             <td className=\"px-4 py-2 text-sm text-gray-900 text-right\">{formatCurrency(order.total)}</td>\n//                             <td className=\"px-4 py-2\">\n//                               <span className={`px-2 py-1 text-xs font-medium rounded-full {\n//                                 order.paid ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'\n//                               }`}>\n//                                 {order.paid ? 'Paid' : 'Unpaid'}\n//                               </span>\n//                             </td>\n//                             <td className=\"px-4 py-2\">\n//                               <span className={`px-2 py-1 text-xs font-medium rounded-full {\n//                                 order.fulfilled ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'\n//                               }`}>\n//                                 {order.fulfilled ? 'Fulfilled' : 'UnFulfillment'}\n//                               </span>\n//                             </td>\n//                           </tr>\n//                         ))}\n//                     </tbody>\n//                   </table>\n//                 </div>\n\n//                 {(window.allSalesData || [])\n//                   .filter(order => {\n//                     if (selectedCustomer.id.startsWith('guest-')) {\n//                       return order.orderId === selectedCustomer.orderId;\n//                     }\n//                     return order.customerId === selectedCustomer.id;\n//                   }).length === 0 && (\n//                     <div className=\"text-center py-4 text-gray-500\">\n//                       No orders found for this customer\n//                     </div>\n//                   )}\n//               </div>\n\n//               {/* Action Buttons */}\n//               <div className=\"flex space-x-3\">\n//                 <button className=\"px-4 py-2 bg-emerald-600 text-white rounded-lg hover:bg-emerald-700 flex items-center space-x-2\">\n//                   <Plus size={16} />\n//                   <span>New Invoice</span>\n//                 </button>\n//                 <button className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center space-x-2\">\n//                   <CheckCircle size={16} />\n//                   <span>Record Payment</span>\n//                 </button>\n//                 <button className=\"px-4 py-2 bg-yellow-600 text-white rounded-lg hover:bg-yellow-700 flex items-center space-x-2\">\n//                   <Mail size={16} />\n//                   <span>Send Statement</span>\n//                 </button>\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n//       )}\n\n//       {/* Order/Invoice Detail Modal */}\n//       {viewInvoice && (\n//         <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center p-4 z-50\">\n//           <div className=\"bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-y-auto\">\n//             <div className=\"px-6 py-4 border-b border-gray-200\">\n//               <div className=\"flex items-center justify-between\">\n//                 <h3 className=\"text-lg font-semibold text-gray-900\">\n//                   Order Details - #{viewInvoice.orderId}\n//                 </h3>\n//                 <button\n//                   onClick={() => setViewInvoice(null)}\n//                   className=\"text-gray-400 hover:text-gray-600\"\n//                 >\n//                   <XCircle size={20} />\n//                 </button>\n//               </div>\n//             </div>\n\n//             <div className=\"px-6 py-4\">\n//               {/* Order Info */}\n//               <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-6\">\n//                 <div className=\"space-y-4\">\n//                   <div>\n//                     <label className=\"text-sm font-medium text-gray-500\">Order ID</label>\n//                     <p className=\"text-sm text-gray-900\">{viewInvoice.orderId}</p>\n//                   </div>\n//                   <div>\n//                     <label className=\"text-sm font-medium text-gray-500\">Customer</label>\n//                     <p className=\"text-sm text-gray-900\">{getCustomerName(viewInvoice.customerId)}</p>\n//                   </div>\n//                   <div>\n//                     <label className=\"text-sm font-medium text-gray-500\">Created Date</label>\n//                     <p className=\"text-sm text-gray-900\">{formatDate(viewInvoice.createdAt)}</p>\n//                   </div>\n//                   <div>\n//                     <label className=\"text-sm font-medium text-gray-500\">Status</label>\n//                     <p className=\"text-sm text-gray-900\">{viewInvoice.status}</p>\n//                   </div>\n//                 </div>\n\n//                 <div className=\"space-y-4\">\n//                   <div>\n//                     <label className=\"text-sm font-medium text-gray-500\">Payment Status</label>\n//                     <div>\n//                       <span className={`px-2 py-1 text-xs font-medium rounded-full {\n//                         viewInvoice.paid ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'\n//                       }`}>\n//                         {viewInvoice.paid ? 'Paid' : 'Unpaid'}\n//                       </span>\n//                     </div>\n//                   </div>\n//                   <div>\n//                     <label className=\"text-sm font-medium text-gray-500\">Fulfillment Status</label>\n//                     <div>\n//                       <span className={`px-2 py-1 text-xs font-medium rounded-full {\n//                         viewInvoice.fulfilled ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'\n//                       }`}>\n//                         {viewInvoice.fulfilled ? 'Fulfilled' : 'Pending'}\n//                       </span>\n//                     </div>\n//                   </div>\n//                   <div>\n//                     <label className=\"text-sm font-medium text-gray-500\">Total Amount</label>\n//                     <p className=\"text-lg font-bold text-gray-900\">{formatCurrency(viewInvoice.total)}</p>\n//                   </div>\n//                   <div>\n//                     <label className=\"text-sm font-medium text-gray-500\">Payable Amount</label>\n//                     <p className=\"text-sm text-gray-900\">{formatCurrency(viewInvoice.payableAmount)}</p>\n//                   </div>\n//                 </div>\n//               </div>\n\n//               {/* Line Items */}\n//               <div className=\"mb-6\">\n//                 <h4 className=\"text-md font-semibold text-gray-900 mb-3\">Order Items</h4>\n//                 <div className=\"overflow-x-auto\">\n//                   <table className=\"w-full border border-gray-200 rounded\">\n//                     <thead className=\"bg-gray-50\">\n//                       <tr>\n//                         <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500\">Product</th>\n//                         <th className=\"px-4 py-2 text-right text-xs font-medium text-gray-500\">Quantity</th>\n//                         <th className=\"px-4 py-2 text-right text-xs font-medium text-gray-500\">Unit Price</th>\n//                         <th className=\"px-4 py-2 text-right text-xs font-medium text-gray-500\">Total</th>\n//                         <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500\">Status</th>\n//                       </tr>\n//                     </thead>\n//                     <tbody className=\"divide-y divide-gray-200\">\n//                       {viewInvoice.lineItems.map((item, index) => (\n//                         <tr key={index}>\n//                           <td className=\"px-4 py-2 text-sm text-gray-900\">{item.productName}</td>\n//                           <td className=\"px-4 py-2 text-sm text-gray-900 text-right\">{item.quantity}</td>\n//                           <td className=\"px-4 py-2 text-sm text-gray-900 text-right\">{formatCurrency(item.price)}</td>\n//                           <td className=\"px-4 py-2 text-sm font-medium text-gray-900 text-right\">{formatCurrency(item.total)}</td>\n//                           <td className=\"px-4 py-2\">\n//                             <span className={`px-2 py-1 text-xs font-medium rounded-full {\n//                               item.fulfilled ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'\n//                             }`}>\n//                               {item.status}\n//                             </span>\n//                           </td>\n//                         </tr>\n//                       ))}\n//                     </tbody>\n//                   </table>\n//                 </div>\n//               </div>\n\n//               {/* Totals */}\n//               <div className=\"bg-gray-50 p-4 rounded-lg\">\n//                 <div className=\"space-y-2\">\n//                   <div className=\"flex justify-between\">\n//                     <span className=\"text-sm text-gray-600\">Subtotal:</span>\n//                     <span className=\"text-sm text-gray-900\">{formatCurrency(viewInvoice.subTotal)}</span>\n//                   </div>\n//                   <div className=\"flex justify-between\">\n//                     <span className=\"text-sm text-gray-600\">Tax ({viewInvoice.taxRate}%):</span>\n//                     <span className=\"text-sm text-gray-900\">{formatCurrency(viewInvoice.taxAmount)}</span>\n//                   </div>\n//                   {viewInvoice.discountAmount > 0 && (\n//                     <div className=\"flex justify-between\">\n//                       <span className=\"text-sm text-gray-600\">Discount:</span>\n//                       <span className=\"text-sm text-red-600\">-{formatCurrency(viewInvoice.discountAmount)}</span>\n//                     </div>\n//                   )}\n//                   <div className=\"flex justify-between font-bold text-lg border-t pt-2\">\n//                     <span>Total:</span>\n//                     <span>{formatCurrency(viewInvoice.total)}</span>\n//                   </div>\n//                 </div>\n//               </div>\n\n//               {/* Action Buttons */}\n//               <div className=\"flex space-x-3 mt-6\">\n//                 {!viewInvoice.paid && (\n//                   <button className=\"px-4 py-2 bg-emerald-600 text-white rounded-lg hover:bg-emerald-700 flex items-center space-x-2\">\n//                     <CheckCircle size={16} />\n//                     <span>Mark as Paid</span>\n//                   </button>\n//                 )}\n//                 {!viewInvoice.fulfilled && (\n//                   <button className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center space-x-2\">\n//                     <FileText size={16} />\n//                     <span>Mark as Fulfilled</span>\n//                   </button>\n//                 )}\n//                 <button className=\"px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 flex items-center space-x-2\">\n//                   <Download size={16} />\n//                   <span>Download Invoice</span>\n//                 </button>\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n//       )}\n\n//       {/* API Integration Status */}\n//       <div className=\"mt-8 p-6 bg-green-50 border border-green-200 rounded-lg\">\n//         <div className=\"flex items-center mb-4\">\n//           <CheckCircle className=\"text-green-600 mr-2\" size={20} />\n//           <h3 className=\"font-medium text-green-800\">POS Integration Active</h3>\n//         </div>\n//         <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm text-green-700\">\n//           <div>\n//             <strong>Sales Orders:</strong> {sales.data.length} outstanding orders from POS system\n//           </div>\n//           <div>\n//             <strong>Customers:</strong> {customers.data.length} active customers synchronized\n//           </div>\n//           <div>\n//             <strong>Real-time Updates:</strong> Data refreshes automatically with POS transactions\n//           </div>\n//         </div>\n//         <div className=\"mt-4 text-xs text-green-600\">\n//           <strong>Note:</strong> Only showing unpaid or unfulfilled orders. Replace Bearer token for live data connection.\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default AccountsReceivable;\n\nimport React, { useState, useEffect } from 'react';\nimport { RefreshCw } from 'lucide-react';\nimport { fetchSales, fetchCustomers } from '../Hook/useAPData';\nimport { getFilteredCustomers } from '../Utility/apCalculations';\nimport { parseLocalDate } from '../Utility/formatters';\nimport APHeader from '../components/AccountsReceivable/APHeader';\nimport APSummaryCards from '../components/AccountsReceivable/APSummaryCards';\nimport APTabs from '../components/AccountsReceivable/APTabs';\nimport APOverviewTab from '../components/AccountsReceivable/APOverviewTab';\nimport APAgingTab from '../components/AccountsReceivable/APAgingTab';\nimport APInvoicesTab from '../components/AccountsReceivable/APInvoicesTab';\nimport APPaymentsTab from '../components/AccountsReceivable/APPaymentsTab';\nimport CustomerDetailModal from '../modals/CustomerDetailModal';\nimport InvoiceDetailModal from '../modals/InvoiceDetailModal';\nimport APIStatusBadge from '../components/AccountsReceivable/APIStatusBadge';\nimport LoadingState from '../components/AccountsReceivable/LoadingState';\nimport ErrorState from '../components/AccountsReceivable/ErrorState';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AccountsReceivable = () => {\n  _s();\n  // State management\n  const [sales, setSales] = useState({\n    loading: false,\n    data: [],\n    error: null\n  });\n  const [customers, setCustomers] = useState({\n    loading: false,\n    data: [],\n    error: null\n  });\n  const [activeTab, setActiveTab] = useState('overview');\n  const [selectedCustomer, setSelectedCustomer] = useState(null);\n  const [viewInvoice, setViewInvoice] = useState(null);\n  const [showInvoiceForm, setShowInvoiceForm] = useState(false);\n  const [filters, setFilters] = useState({\n    customerType: 'all',\n    status: 'all',\n    dateRange: '30',\n    searchTerm: '',\n    fromDate: '',\n    toDate: ''\n  });\n\n  // Load data on component mount\n  useEffect(() => {\n    const loadData = async () => {\n      const salesData = await fetchSales(setSales);\n      if (salesData) {\n        window.allSalesData = salesData;\n        setTimeout(() => fetchCustomers(setCustomers, salesData), 500);\n      }\n    };\n    loadData();\n  }, []);\n\n  // Refresh functionality\n  const refreshAllData = async () => {\n    const salesData = await fetchSales(setSales);\n    if (salesData) {\n      window.allSalesData = salesData;\n      setTimeout(() => fetchCustomers(setCustomers, salesData), 500);\n    }\n  };\n\n  // Helper function to get customer name by ID\n  const getCustomerName = customerId => {\n    if (!customerId || customerId === 'null') return 'Guest Customer';\n    const customer = customers.data.find(c => c.id === customerId);\n    return customer ? customer.name : 'Unknown Customer';\n  };\n\n  // Loading state\n  if (sales.loading || customers.loading) {\n    return /*#__PURE__*/_jsxDEV(LoadingState, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1458,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Error state\n  if (sales.error || customers.error) {\n    return /*#__PURE__*/_jsxDEV(ErrorState, {\n      salesError: sales.error,\n      customersError: customers.error,\n      onRetry: refreshAllData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1464,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Filter customers\n  const filteredCustomers = getFilteredCustomers(customers.data, filters);\n\n  // Filter orders\n  // Filter orders\n  const filteredOrders = sales.data.filter(order => {\n    if (filters.status === 'paid' && !order.paid) return false;\n    if (filters.status === 'unpaid' && order.paid) return false;\n    if (filters.status === 'fulfilled' && !order.fulfilled) return false;\n    if (filters.status === 'unfulfilled' && order.fulfilled) return false;\n    const orderDate = new Date(order.createdAt);\n    const from = parseLocalDate(filters.fromDate);\n    const to = parseLocalDate(filters.toDate);\n    if (from && orderDate < from) return false;\n    if (to) {\n      // include whole \"to\" day by setting it to end of day\n      const endOfTo = new Date(to);\n      endOfTo.setHours(23, 59, 59, 999);\n      if (orderDate > endOfTo) return false;\n    }\n    return true;\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"max-w-7xl mx-auto p-6 bg-white\",\n    children: [/*#__PURE__*/_jsxDEV(APHeader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1501,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(APSummaryCards, {\n      customers: customers.data,\n      allSalesData: window.allSalesData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1502,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(APTabs, {\n      activeTab: activeTab,\n      setActiveTab: setActiveTab\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1503,\n      columnNumber: 7\n    }, this), activeTab === 'overview' && /*#__PURE__*/_jsxDEV(APOverviewTab, {\n      filters: filters,\n      setFilters: setFilters,\n      filteredCustomers: filteredCustomers,\n      setSelectedCustomer: setSelectedCustomer,\n      setShowInvoiceForm: setShowInvoiceForm\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1507,\n      columnNumber: 9\n    }, this), activeTab === 'aging' && /*#__PURE__*/_jsxDEV(APAgingTab, {\n      salesData: sales.data,\n      customers: customers.data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1517,\n      columnNumber: 9\n    }, this), activeTab === 'invoices' && /*#__PURE__*/_jsxDEV(APInvoicesTab, {\n      filters: filters,\n      setFilters: setFilters,\n      filteredOrders: filteredOrders,\n      getCustomerName: getCustomerName,\n      setViewInvoice: setViewInvoice\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1524,\n      columnNumber: 9\n    }, this), activeTab === 'payments' && /*#__PURE__*/_jsxDEV(APPaymentsTab, {\n      allSalesData: window.allSalesData,\n      getCustomerName: getCustomerName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1534,\n      columnNumber: 9\n    }, this), selectedCustomer && /*#__PURE__*/_jsxDEV(CustomerDetailModal, {\n      customer: selectedCustomer,\n      onClose: () => setSelectedCustomer(null),\n      allSalesData: window.allSalesData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1542,\n      columnNumber: 9\n    }, this), viewInvoice && /*#__PURE__*/_jsxDEV(InvoiceDetailModal, {\n      invoice: viewInvoice,\n      onClose: () => setViewInvoice(null),\n      getCustomerName: getCustomerName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1550,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(APIStatusBadge, {\n      salesCount: sales.data.length,\n      customersCount: customers.data.length\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1557,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1500,\n    columnNumber: 5\n  }, this);\n};\n_s(AccountsReceivable, \"Mm3k9ANC6rxc0tJSgc+OOxODU+I=\");\n_c = AccountsReceivable;\nexport default AccountsReceivable;\nvar _c;\n$RefreshReg$(_c, \"AccountsReceivable\");","map":{"version":3,"names":["React","useState","useEffect","RefreshCw","fetchSales","fetchCustomers","getFilteredCustomers","parseLocalDate","APHeader","APSummaryCards","APTabs","APOverviewTab","APAgingTab","APInvoicesTab","APPaymentsTab","CustomerDetailModal","InvoiceDetailModal","APIStatusBadge","LoadingState","ErrorState","jsxDEV","_jsxDEV","AccountsReceivable","_s","sales","setSales","loading","data","error","customers","setCustomers","activeTab","setActiveTab","selectedCustomer","setSelectedCustomer","viewInvoice","setViewInvoice","showInvoiceForm","setShowInvoiceForm","filters","setFilters","customerType","status","dateRange","searchTerm","fromDate","toDate","loadData","salesData","window","allSalesData","setTimeout","refreshAllData","getCustomerName","customerId","customer","find","c","id","name","fileName","_jsxFileName","lineNumber","columnNumber","salesError","customersError","onRetry","filteredCustomers","filteredOrders","filter","order","paid","fulfilled","orderDate","Date","createdAt","from","to","endOfTo","setHours","className","children","onClose","invoice","salesCount","length","customersCount","_c","$RefreshReg$"],"sources":["C:/Users/Logic-Unit/my-account/src/pages/AccountsReceivable.jsx"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import { \r\n//   Users, \r\n//   DollarSign, \r\n//   CreditCard, \r\n//   AlertTriangle, \r\n//   Clock, \r\n//   Plus, \r\n//   Search, \r\n//   Filter, \r\n//   Eye, \r\n//   Edit, \r\n//   Download,\r\n//   CheckCircle,\r\n//   XCircle,\r\n//   Calendar,\r\n//   FileText,\r\n//   TrendingUp,\r\n//   Mail,\r\n//   Phone,\r\n//   Loader,\r\n//   RefreshCw\r\n// } from 'lucide-react';\r\n\r\n// // API Configuration\r\n// const API_BASE_URL_SALES = 'https://api-pos.hulmsolutions.com/POS/accounting2/31fc8df0-61db-41e5-bb67-070fde367ea1/orders?start=0&size=200';\r\n// const API_CUSTOMERS = 'https://api-pos.hulmsolutions.com/POS/accounting2/31fc8df0-61db-41e5-bb67-070fde367ea1/customers?status=Active';\r\n\r\n// // Replace with your actual Bearer token\r\n// const BEARER_TOKEN = 'your-bearer-token-here';\r\n\r\n// const AccountsReceivable = () => {\r\n//   // State management\r\n//   const [sales, setSales] = useState({ loading: false, data: [], error: null });\r\n//   const [customers, setCustomers] = useState({ loading: false, data: [], error: null });\r\n//   const [activeTab, setActiveTab] = useState('overview');\r\n//   const [selectedCustomer, setSelectedCustomer] = useState(null);\r\n//   const [selectedOrder, setSelectedOrder] = useState(null);\r\n//   const [viewInvoice, setViewInvoice] = useState(null);\r\n//   const [showInvoiceForm, setShowInvoiceForm] = useState(false);\r\n//   const [filters, setFilters] = useState({\r\n//     customerType: 'all',\r\n//     status: 'all',\r\n//     dateRange: '30',\r\n//     searchTerm: ''\r\n//   });\r\n\r\n//   // API Functions\r\n//   const fetchSales = async () => {\r\n//     setSales(prev => ({ ...prev, loading: true, error: null }));\r\n//     try {\r\n//       const response = await fetch(API_BASE_URL_SALES, {\r\n//         method: 'GET',\r\n//         headers: {\r\n//           'Authorization': `Bearer ${BEARER_TOKEN}`,\r\n//           'Content-Type': 'application/json',\r\n//         },\r\n//       });\r\n      \r\n//       if (!response.ok) {\r\n//         throw new Error(`HTTP error! status: ${response.status}`);\r\n//       }\r\n      \r\n//       const allData = await response.json();\r\n      \r\n//       // Store all data for customer calculations\r\n//       window.allSalesData = allData;\r\n      \r\n//       // // Show only records that are unpaid and fulfilled for display\r\n//       // const filteredOrders = allData.filter(order => \r\n//       //   !order.paid && order.fulfilled\r\n//       // );\r\n      \r\n//       setSales({ loading: false, data: allData, error: null });\r\n//     } catch (error) {\r\n//       console.error('Error fetching sales:', error);\r\n//       setSales({ loading: false, data: [], error: error.message });\r\n//     }\r\n//   };\r\n\r\n//   const fetchCustomers = async () => {\r\n//     setCustomers(prev => ({ ...prev, loading: true, error: null }));\r\n//     try {\r\n//       const response = await fetch(API_CUSTOMERS, {\r\n//         method: 'GET',\r\n//         headers: {\r\n//           'Authorization': `Bearer ${BEARER_TOKEN}`,\r\n//           'Content-Type': 'application/json',\r\n//         },\r\n//       });\r\n      \r\n//       if (!response.ok) {\r\n//         throw new Error(`HTTP error! status: ${response.status}`);\r\n//       }\r\n      \r\n//       const data = await response.json();\r\n      \r\n//       // Use all sales data for customer calculations, not just filtered display data\r\n//       const allSalesData = window.allSalesData || [];\r\n      \r\n//       // Transform API customers to match our structure with real calculated data\r\n//       const transformedCustomers = data.map(customer => {\r\n//         // Get ALL orders for this customer (not just filtered ones)\r\n//         const customerOrders = allSalesData.filter(order => order.customerId === customer.id);\r\n       \r\n//         console.log('customerOrders:'+customerOrders)\r\n//         // Calculate total owed from ALL unpaid orders\r\n//         const totalOwed = customerOrders\r\n//           .filter(order => !order.paid)\r\n//           .reduce((sum, order) => sum + (order.total || 0), 0);\r\n        \r\n//         // Overdue amount = total owed (since all unpaid orders need collection)\r\n//         const overdueAmount = totalOwed;\r\n        \r\n//         // Total number of orders for this customer\r\n//         const invoiceCount = customerOrders.length;\r\n        \r\n//         // Determine customer type based on actual order history, not API totalSpendOnOrder\r\n//         let customerType = 'individual';\r\n//         const totalSpentFromOrders = customerOrders.reduce((sum, order) => sum + (order.total || 0), 0);\r\n        \r\n//         // Use actual order amounts to determine customer type\r\n//         if (totalSpentFromOrders > 500000) {\r\n//           customerType = 'corporate';\r\n//         } else if (totalSpentFromOrders > 200000) {\r\n//           customerType = 'small_business';\r\n//         } else {\r\n//           customerType = 'individual';\r\n//         }\r\n        \r\n//         // Set credit limit based on customer type\r\n//         let creditLimit = 25000; // Default for individual\r\n//         if (customerType === 'corporate') {\r\n//           creditLimit = 500000;\r\n//         } else if (customerType === 'small_business') {\r\n//           creditLimit = 100000;\r\n//         }\r\n        \r\n//         // Determine credit status based on payment behavior\r\n//         let creditStatus = 'good';\r\n//         if (totalOwed === 0) {\r\n//           creditStatus = 'excellent';\r\n//         } else if (totalOwed > creditLimit * 0.9) {\r\n//           creditStatus = 'hold'; // Hold means credit limit exceeded, stop further credit\r\n//         } else if (totalOwed > creditLimit * 0.7) {\r\n//           creditStatus = 'watch'; // Watch means monitor closely\r\n//         }\r\n        \r\n//         // Get last payment date from most recent paid order\r\n//         const paidOrders = customerOrders.filter(o => o.paid);\r\n//         const lastPayment = paidOrders.length > 0 ? \r\n//           paidOrders.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt))[0].createdAt.split('.').slice(0, 3).join('-') :\r\n//           'No payments';\r\n\r\n//         return {\r\n//           id: customer.id,\r\n//           name: customer.name,\r\n//           email: customer.email || 'No email provided',\r\n//           phone: customer.phoneNumber || 'No phone provided',\r\n//           address: customer.address && customer.address.length > 0 ? \r\n//             (typeof customer.address[0] === 'string' ? customer.address[0] : 'No address provided') : \r\n//             'No address provided',\r\n//           customerType: customerType,\r\n//           creditLimit: creditLimit,\r\n//           paymentTerms: customerType === 'corporate' ? 45 : (customerType === 'small_business' ? 30 : 15),\r\n//           totalOwed: totalOwed,\r\n//           overdueAmount: overdueAmount,\r\n//           lastPayment: lastPayment,\r\n//           creditStatus: creditStatus,\r\n//           accountBalance: -totalOwed,\r\n//           invoiceCount: invoiceCount,\r\n//           avgPaymentDays: 30, // Default estimate\r\n//           status: customer.status,\r\n//           totalSpendOnOrder: customer.totalSpendOnOrder || 0,\r\n//           averageOrderValue: customer.averageOrderValue || 0,\r\n//           numberOfOrders: customer.numberOfOrders || invoiceCount\r\n//         };\r\n//       });\r\n      \r\n//       // Also add walk-in customers (null customerId) as separate entries for each order\r\n//       const walkInOrders = allSalesData.filter(order => !order.customerId || order.customerId === 'null');\r\n//       walkInOrders.forEach((order, index) => {\r\n//         const guestNumber = index + 1;\r\n//         const guestTotalOwed = order.paid ? 0 : order.total;\r\n//         const guestLastPayment = order.paid ? \r\n//           order.createdAt.split('.').slice(0, 3).join('-') : \r\n//           'No payments';\r\n        \r\n//         // transformedCustomers.push({\r\n//         //   id: `guest-${order.orderId}`,\r\n//         //   name: `Guest Customer #${guestNumber}`,\r\n//         //   email: 'guest@pos.system',\r\n//         //   phone: '+000-000-0000',\r\n//         //   address: 'Walk-in Sale',\r\n//         //   customerType: 'cash',\r\n//         //   creditLimit: 0,\r\n//         //   paymentTerms: 0,\r\n//         //   totalOwed: guestTotalOwed,\r\n//         //   overdueAmount: guestTotalOwed,\r\n//         //   lastPayment: guestLastPayment,\r\n//         //   creditStatus: 'cash_only',\r\n//         //   accountBalance: -guestTotalOwed,\r\n//         //   invoiceCount: 1,\r\n//         //   avgPaymentDays: 0,\r\n//         //   status: 'Active',\r\n//         //   totalSpendOnOrder: order.total,\r\n//         //   averageOrderValue: order.total,\r\n//         //   numberOfOrders: 1,\r\n//         //   orderId: order.orderId // Store order ID for reference\r\n//         // });\r\n//       });\r\n      \r\n//       setCustomers({ loading: false, data: transformedCustomers, error: null });\r\n//     } catch (error) {\r\n//       console.error('Error fetching customers:', error);\r\n//       setCustomers({ loading: false, data: [], error: error.message });\r\n//     }\r\n//   };\r\n\r\n//   // Also add refresh button functionality to recalculate customer data\r\n//   const refreshAllData = async () => {\r\n//     await fetchSales();\r\n//     setTimeout(() => fetchCustomers(), 500);\r\n//   };\r\n\r\n//   // Load data on component mount\r\n//   useEffect(() => {\r\n//     const loadData = async () => {\r\n//       await fetchSales();\r\n//       // Fetch customers after sales data is loaded to calculate balances correctly\r\n//       setTimeout(() => fetchCustomers(), 500);\r\n//     };\r\n//     loadData();\r\n//   }, []);\r\n\r\n//   // Helper function to get customer name by ID\r\n//   const getCustomerName = (customerId) => {\r\n//     if (!customerId || customerId === 'null') return 'Guest Customer';\r\n//     const customer = customers.data.find(c => c.id === customerId);\r\n//     return customer ? customer.name : 'Unknown Customer';\r\n//   };\r\n\r\n//   // Helper function to get customer details by ID\r\n//   const getCustomerDetails = (customerId) => {\r\n//     if (!customerId || customerId === 'null') return null;\r\n//     return customers.data.find(c => c.id === customerId);\r\n//   };\r\n\r\n//   // Calculate AR summary\r\n//   const calculateARSummary = () => {\r\n//     const totalAR = customers.data.reduce((sum, customer) => sum + customer.totalOwed, 0);\r\n//     const totalOverdue = customers.data.reduce((sum, customer) => sum + customer.overdueAmount, 0);\r\n//     const customersWithBalance = customers.data.filter(customer => customer.totalOwed > 0).length;\r\n    \r\n//     // Calculate real average days outstanding from actual order data\r\n//     const allSalesData = window.allSalesData || [];\r\n//     let totalDaysOutstanding = 0;\r\n//     let orderCount = 0;\r\n    \r\n//     allSalesData.forEach(order => {\r\n//       // Convert order creation date from \"2025.08.18.10.08.54.569\" to proper date\r\n//       const orderDateStr = order.createdAt.split('.').slice(0, 3).join('-'); // \"2025-08-18\"\r\n//       const orderDate = new Date(orderDateStr);\r\n//       const today = new Date();\r\n      \r\n//       // Calculate days between order creation and today\r\n//       const timeDiff = today.getTime() - orderDate.getTime();\r\n//       const daysDiff = Math.floor(timeDiff / (1000 * 3600 * 24));\r\n      \r\n//       totalDaysOutstanding += daysDiff;\r\n//       orderCount++;\r\n//     });\r\n    \r\n//     const avgDaysOutstanding = orderCount > 0 ? Math.round(totalDaysOutstanding / orderCount) : 0;\r\n\r\n//     return {\r\n//       totalAR,\r\n//       totalOverdue,\r\n//       customersWithBalance,\r\n//       avgDaysOutstanding\r\n//     };\r\n//   };\r\n\r\n//   // Get aging data\r\n//   const getAgingData = () => {\r\n//     const aging = {\r\n//       current: 0,\r\n//       days30: 0,\r\n//       days60: 0,\r\n//       days90: 0,\r\n//       over90: 0\r\n//     };\r\n\r\n//     sales.data.forEach(order => {\r\n//       if (order.paid) return;\r\n      \r\n//       const daysPastDue = order.daysOverdue || 0;\r\n      \r\n//       if (daysPastDue <= 0) {\r\n//         aging.current += order.total;\r\n//       } else if (daysPastDue <= 30) {\r\n//         aging.days30 += order.total;\r\n//       } else if (daysPastDue <= 60) {\r\n//         aging.days60 += order.total;\r\n//       } else if (daysPastDue <= 90) {\r\n//         aging.days90 += order.total;\r\n//       } else {\r\n//         aging.over90 += order.total;\r\n//       }\r\n//     });\r\n\r\n//     return aging;\r\n//   };\r\n\r\n//   // // Filter customers\r\n//   // const getFilteredCustomers = () => {\r\n//   //   let filtered = [...customers.data];\r\n\r\n//   //   if (filters.customerType !== 'all') {\r\n//   //     filtered = filtered.filter(customer => customer.customerType === filters.customerType);\r\n//   //   }\r\n\r\n//   //   if (filters.status !== 'all') {\r\n//   //     filtered = filtered.filter(customer => {\r\n//   //       if (filters.status === 'overdue') return customer.overdueAmount > 0;\r\n//   //       if (filters.status === 'current') return customer.totalOwed > 0 && customer.overdueAmount === 0;\r\n//   //       if (filters.status === 'paid_up') return customer.totalOwed === 0;\r\n//   //       return true;\r\n//   //     });\r\n//   //   }\r\n\r\n//   //   if (filters.searchTerm) {\r\n//   //     const term = filters.searchTerm.toLowerCase();\r\n//   //     filtered = filtered.filter(customer =>\r\n//   //       customer.name.toLowerCase().includes(term) ||\r\n//   //       customer.email.toLowerCase().includes(term) ||\r\n//   //       customer.id.toLowerCase().includes(term)\r\n//   //     );\r\n//   //   }\r\n\r\n//   //   return filtered;\r\n//   // };\r\n//   // Filter customers - ONLY those with valid names\r\n// const getFilteredCustomers = () => {\r\n//   // First check if we have valid data\r\n//   if (!customers || !customers.data) {\r\n//     return [];\r\n//   }\r\n  \r\n//   // Start by filtering ONLY customers WITH names\r\n//   let filtered = customers.data.filter(customer => \r\n//     customer && \r\n//     customer.name && \r\n//     typeof customer.name === 'string' && \r\n//     customer.name.trim() !== ''\r\n//   );\r\n\r\n//   // Now apply the rest of the filters to our name-filtered list\r\n//   if (filters && filters.customerType && filters.customerType !== 'all') {\r\n//     filtered = filtered.filter(customer => customer.customerType === filters.customerType);\r\n//   }\r\n\r\n//   if (filters && filters.status && filters.status !== 'all') {\r\n//     filtered = filtered.filter(customer => {\r\n//       if (filters.status === 'overdue') return customer.overdueAmount > 0;\r\n//       if (filters.status === 'current') return customer.totalOwed > 0 && customer.overdueAmount === 0;\r\n//       if (filters.status === 'paid_up') return customer.totalOwed === 0;\r\n//       return true;\r\n//     });\r\n//   }\r\n\r\n//   if (filters && filters.searchTerm) {\r\n//     const term = filters.searchTerm.toLowerCase();\r\n//     filtered = filtered.filter(customer =>\r\n//       customer.name.toLowerCase().includes(term) ||\r\n//       (customer.email && customer.email.toLowerCase().includes(term)) ||\r\n//       (customer.id && customer.id.toLowerCase().includes(term))\r\n//     );\r\n//   }\r\n\r\n//   console.log(`Filtered to ${filtered.length} customers with valid names`);\r\n//   return filtered;\r\n// };\r\n\r\n// // ✅ Apply filters\r\n// const filteredOrders = sales.data.filter(order => {\r\n//   // Status filter\r\n//   if (filters.status === 'paid' && !order.paid) return false;\r\n//   if (filters.status === 'unpaid' && order.paid) return false;\r\n//   if (filters.status === 'fulfilled' && !order.fulfilled) return false;\r\n//   if (filters.status === 'unfulfilled' && order.fulfilled) return false;\r\n\r\n//   // Date filter (from / to)\r\n//   const orderDate = new Date(order.createdAt);\r\n//   if (filters.fromDate && orderDate < new Date(filters.fromDate)) return false;\r\n//   if (filters.toDate && orderDate > new Date(filters.toDate)) return false;\r\n\r\n//   return true;\r\n// });\r\n\r\n//   const getCreditStatusColor = (status) => {\r\n//     switch (status) {\r\n//       case 'excellent': return 'bg-green-100 text-green-800';\r\n//       case 'good': return 'bg-blue-100 text-blue-800';\r\n//       case 'watch': return 'bg-yellow-100 text-yellow-800';\r\n//       case 'hold': return 'bg-red-100 text-red-800';\r\n//       case 'cash_only': return 'bg-gray-100 text-gray-800';\r\n//       default: return 'bg-gray-100 text-gray-800';\r\n//     }\r\n//   };\r\n\r\n//   const getInvoiceStatusColor = (status) => {\r\n//     switch (status) {\r\n//       case 'paid': return 'bg-green-100 text-green-800';\r\n//       case 'outstanding': return 'bg-blue-100 text-blue-800';\r\n//       case 'overdue': return 'bg-red-100 text-red-800';\r\n//       case 'partial': return 'bg-yellow-100 text-yellow-800';\r\n//       default: return 'bg-gray-100 text-gray-800';\r\n//     }\r\n//   };\r\n\r\n//   const formatDate = (dateString) => {\r\n//     if (!dateString) return 'N/A';\r\n//     return dateString.split('.').slice(0, 3).join('/');\r\n//   };\r\n\r\n//   const formatCurrency = (amount) => {\r\n//     return new Intl.NumberFormat('en-US', {\r\n//       style: 'currency',\r\n//       currency: 'USD'\r\n//     }).format(amount);\r\n//   };\r\n\r\n//   const summary = calculateARSummary();\r\n//   const aging = getAgingData();\r\n//   const filteredCustomers = getFilteredCustomers();\r\n\r\n//   // Loading state\r\n//   if (sales.loading || customers.loading) {\r\n//     return (\r\n//       <div className=\"flex items-center justify-center min-h-screen\">\r\n//         <div className=\"flex items-center space-x-3\">\r\n//           <Loader className=\"animate-spin text-emerald-600\" size={24} />\r\n//           <span className=\"text-gray-600\">Loading data from API...</span>\r\n//         </div>\r\n//       </div>\r\n//     );\r\n//   }\r\n\r\n//   // Error state\r\n//   if (sales.error || customers.error) {\r\n//     return (\r\n//       <div className=\"max-w-7xl mx-auto p-6\">\r\n//         <div className=\"bg-red-50 border border-red-200 rounded-lg p-6\">\r\n//           <div className=\"flex items-center mb-4\">\r\n//             <AlertTriangle className=\"text-red-600 mr-2\" size={20} />\r\n//             <h3 className=\"font-medium text-red-800\">API Connection Error</h3>\r\n//           </div>\r\n//           <div className=\"text-red-700 mb-4\">\r\n//             {sales.error && <div>Sales API Error: {sales.error}</div>}\r\n//             {customers.error && <div>Customers API Error: {customers.error}</div>}\r\n//           </div>\r\n//           <button\r\n//             onClick={() => {\r\n//               fetchSales();\r\n//               fetchCustomers();\r\n//             }}\r\n//             className=\"px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 flex items-center space-x-2\"\r\n//           >\r\n//             <RefreshCw size={16} />\r\n//             <span>Retry Connection</span>\r\n//           </button>\r\n//         </div>\r\n//       </div>\r\n//     );\r\n//   }\r\n\r\n//   return (\r\n//     <div className=\"max-w-7xl mx-auto p-6 bg-white\">\r\n//       {/* Header */}\r\n//       <div className=\"mb-8\">\r\n//         <h1 className=\"text-3xl font-bold text-gray-900 mb-2 flex items-center\">\r\n//           <CreditCard className=\"mr-3 text-emerald-600\" />\r\n//           Accounts Receivable\r\n//         </h1>\r\n//         <p className=\"text-gray-600\">Manage customer invoicing, payments, and credit limits</p>\r\n//       </div>\r\n\r\n//       {/* Summary Cards */}\r\n//       <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\r\n//         <div className=\"bg-blue-50 p-6 rounded-lg border border-blue-200\">\r\n//           <div className=\"flex items-center justify-between\">\r\n//             <div>\r\n//               <p className=\"text-blue-600 text-sm font-medium\">Total A/R</p>\r\n//               <p className=\"text-2xl font-bold text-blue-900\">{formatCurrency(summary.totalAR)}</p>\r\n//             </div>\r\n//             <DollarSign className=\"text-blue-600\" size={24} />\r\n//           </div>\r\n//           <p className=\"text-sm text-blue-700 mt-2\">{summary.customersWithBalance} customers with balances</p>\r\n//         </div>\r\n\r\n//         <div className=\"bg-red-50 p-6 rounded-lg border border-red-200\">\r\n//           <div className=\"flex items-center justify-between\">\r\n//             <div>\r\n//               <p className=\"text-red-600 text-sm font-medium\">Overdue Amount</p>\r\n//               <p className=\"text-2xl font-bold text-red-900\">{formatCurrency(summary.totalOverdue)}</p>\r\n//             </div>\r\n//             <AlertTriangle className=\"text-red-600\" size={24} />\r\n//           </div>\r\n//           <p className=\"text-sm text-red-700 mt-2\">\r\n//             {summary.totalAR > 0 ? ((summary.totalOverdue / summary.totalAR) * 100).toFixed(1) : 0}% of total A/R\r\n//           </p>\r\n//         </div>\r\n\r\n//         <div className=\"bg-green-50 p-6 rounded-lg border border-green-200\">\r\n//           <div className=\"flex items-center justify-between\">\r\n//             <div>\r\n//               <p className=\"text-green-600 text-sm font-medium\">Avg. Days Outstanding</p>\r\n//               <p className=\"text-2xl font-bold text-green-900\">{summary.avgDaysOutstanding}</p>\r\n//             </div>\r\n//             <Clock className=\"text-green-600\" size={24} />\r\n//           </div>\r\n//           <p className=\"text-sm text-green-700 mt-2\">Collection performance</p>\r\n//         </div>\r\n\r\n//         <div className=\"bg-purple-50 p-6 rounded-lg border border-purple-200\">\r\n//           <div className=\"flex items-center justify-between\">\r\n//             <div>\r\n//               <p className=\"text-purple-600 text-sm font-medium\">Active Customers</p>\r\n//               <p className=\"text-2xl font-bold text-purple-900\">{customers.data.length}</p>\r\n//             </div>\r\n//             <Users className=\"text-purple-600\" size={24} />\r\n//           </div>\r\n//           <p className=\"text-sm text-purple-700 mt-2\">Total customer accounts</p>\r\n//         </div>\r\n//       </div>\r\n\r\n//       {/* Tabs */}\r\n//       <div className=\"mb-6\">\r\n//         <div className=\"border-b border-gray-200\">\r\n//           <nav className=\"-mb-px flex space-x-8\">\r\n//             {[\r\n//               { id: 'overview', name: 'Customer Overview', icon: Users },\r\n//               { id: 'invoices', name: 'Invoices', icon: FileText },\r\n//               { id: 'aging', name: 'Aging Report', icon: Clock },\r\n//               { id: 'payments', name: 'Payments', icon: CheckCircle }\r\n//             ].map((tab) => (\r\n//               <button\r\n//                 key={tab.id}\r\n//                 onClick={() => setActiveTab(tab.id)}\r\n//                 className={`flex items-center py-2 px-1 border-b-2 font-medium text-sm {\r\n//                   activeTab === tab.id\r\n//                     ? 'border-emerald-500 text-emerald-600'\r\n//                     : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\r\n//                 }`}\r\n//               >\r\n//                 <tab.icon className=\"mr-2\" size={16} />\r\n//                 {tab.name}\r\n//               </button>\r\n//             ))}\r\n//           </nav>\r\n//         </div>\r\n//       </div>\r\n\r\n//       {/* Tab Content */}\r\n//       {activeTab === 'overview' && (\r\n//         <div>\r\n//           {/* Filters */}\r\n        \r\n// <div className=\"flex flex-wrap items-center gap-4 mb-6\">\r\n//   {/* 🔍 Search */}\r\n//   <div className=\"relative\">\r\n//     <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" size={16} />\r\n//     <input\r\n//       type=\"text\"\r\n//       placeholder=\"Search customers...\"\r\n//       value={filters.searchTerm}\r\n//       onChange={(e) => setFilters({ ...filters, searchTerm: e.target.value })}\r\n//       className=\"pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\r\n//     />\r\n//   </div>\r\n\r\n//   {/* 📅 From Date */}\r\n//   <div>\r\n//     <label className=\"block text-xs text-gray-500 mb-1\">From</label>\r\n//     <input\r\n//       type=\"date\"\r\n//       value={filters.dateFrom || ''}\r\n//       onChange={(e) => setFilters({ ...filters, dateFrom: e.target.value })}\r\n//       className=\"px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\r\n//     />\r\n//   </div>\r\n\r\n//   {/* 📅 To Date */}\r\n//   <div>\r\n//     <label className=\"block text-xs text-gray-500 mb-1\">To</label>\r\n//     <input\r\n//       type=\"date\"\r\n//       value={filters.dateTo || ''}\r\n//       onChange={(e) => setFilters({ ...filters, dateTo: e.target.value })}\r\n//       className=\"px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\r\n//     />\r\n//   </div>\r\n\r\n  \r\n//   {/* Status */}\r\n//   <select\r\n//     value={filters.status}\r\n//     onChange={(e) => setFilters({ ...filters, status: e.target.value })}\r\n//     className=\"px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\r\n//   >\r\n//     <option value=\"all\">All Statuses</option>\r\n//     <option value=\"current\">Paid</option>\r\n//     <option value=\"overdue\">UnPaid</option>\r\n//     <option value=\"paid_up\">Fulfilled</option>\r\n//         <option value=\"paid_up\">UnFulfilled</option>\r\n\r\n//   </select>\r\n\r\n//   {/* ➕ New Invoice */}\r\n//   <button\r\n//     onClick={() => setShowInvoiceForm(true)}\r\n//     className=\"px-4 py-2 bg-emerald-600 text-white rounded-lg hover:bg-emerald-700 flex items-center space-x-2\"\r\n//   >\r\n//     <Plus size={16} />\r\n//     <span>New Invoice</span>\r\n//   </button>\r\n\r\n//   {/* Clear Dates Button */}\r\n//   {(filters.dateFrom || filters.dateTo) && (\r\n//     <button\r\n//       onClick={() => setFilters({ ...filters, dateFrom: '', dateTo: '' })}\r\n//       className=\"px-3 py-1 bg-gray-200 rounded-lg hover:bg-gray-300 text-sm\"\r\n//     >\r\n//       Clear Dates\r\n//     </button>\r\n//   )}\r\n// </div>\r\n\r\n\r\n//           {/* Customer List */}\r\n//           <div className=\"bg-white border border-gray-200 rounded-lg overflow-hidden\">\r\n//             <div className=\"overflow-x-auto\">\r\n//               <table className=\"w-full\">\r\n//                 <thead className=\"bg-gray-50\">\r\n//                   <tr>\r\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                       Customer\r\n//                     </th>\r\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                       Credit Limit\r\n//                     </th>\r\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                       Balance\r\n//                     </th>\r\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                       Overdue\r\n//                     </th>\r\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                       Credit Status\r\n//                     </th>\r\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                       Last Payment\r\n//                     </th>\r\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                       Sales Orders\r\n//                     </th>\r\n//                   </tr>\r\n//                 </thead>\r\n//                 <tbody className=\"bg-white divide-y divide-gray-200\">\r\n//                   {filteredCustomers.map((customer) => (\r\n//                     <tr key={customer.id} className=\"hover:bg-gray-50\">\r\n//                       <td className=\"px-6 py-4\">\r\n//                         <div>\r\n//                           <div className=\"text-sm font-medium text-gray-900\">{customer.name}</div>\r\n//                           <div className=\"text-sm text-gray-500\">{customer.id}</div>\r\n//                           <div className=\"text-xs text-gray-400 flex items-center mt-1\">\r\n//                             <Mail className=\"mr-1\" size={12} />\r\n//                             {customer.email}\r\n//                           </div>\r\n//                         </div>\r\n//                       </td>\r\n//                       <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\r\n//                         {formatCurrency(customer.creditLimit)}\r\n//                       </td>\r\n//                       <td className=\"px-6 py-4 whitespace-nowrap\">\r\n//                         <div className=\"text-sm font-medium text-gray-900\">\r\n//                           {formatCurrency(customer.totalOwed)}\r\n//                         </div>\r\n//                         <div className=\"text-xs text-gray-500\">\r\n//                           {customer.invoiceCount} invoices\r\n//                         </div>\r\n//                       </td>\r\n//                       <td className=\"px-6 py-4 whitespace-nowrap\">\r\n//                         {customer.overdueAmount > 0 ? (\r\n//                           <span className=\"text-red-600 font-medium\">\r\n//                             {formatCurrency(customer.overdueAmount)}\r\n//                           </span>\r\n//                         ) : (\r\n//                           <span className=\"text-green-600\">0.00</span>\r\n//                         )}\r\n//                       </td>\r\n//                       <td className=\"px-6 py-4 whitespace-nowrap\">\r\n//                         <span className={`px-2 py-1 text-xs font-medium rounded-full {getCreditStatusColor(customer.creditStatus)}`}>\r\n//                           {customer.creditStatus.replace('_', ' ')}\r\n//                         </span>\r\n//                       </td>\r\n//                       <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\r\n//                         {customer.lastPayment}\r\n//                       </td>\r\n//                       <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">\r\n//                         <button\r\n//                           onClick={() => setSelectedCustomer(customer)}\r\n//                           className=\"text-emerald-600 hover:text-emerald-900 mr-3\"\r\n//                         >\r\n//                           <Eye size={16} />\r\n//                         </button>\r\n//                         <button className=\"text-blue-600 hover:text-blue-900\">\r\n//                           <Edit size={16} />\r\n//                         </button>\r\n//                       </td>\r\n//                     </tr>\r\n//                   ))}\r\n//                 </tbody>\r\n//               </table>\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n\r\n//       {activeTab === 'aging' && (\r\n//         <div>\r\n//           <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\r\n//             {/* Aging Summary */}\r\n//             <div className=\"bg-white border border-gray-200 rounded-lg p-6\">\r\n//               <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Aging Summary</h3>\r\n//               <div className=\"space-y-4\">\r\n//                 <div className=\"flex justify-between items-center p-3 bg-green-50 rounded\">\r\n//                   <span className=\"font-medium text-green-800\">Current (0-30 days)</span>\r\n//                   <span className=\"font-bold text-green-900\">{formatCurrency(aging.current)}</span>\r\n//                 </div>\r\n//                 <div className=\"flex justify-between items-center p-3 bg-yellow-50 rounded\">\r\n//                   <span className=\"font-medium text-yellow-800\">31-60 days</span>\r\n//                   <span className=\"font-bold text-yellow-900\">{formatCurrency(aging.days30)}</span>\r\n//                 </div>\r\n//                 <div className=\"flex justify-between items-center p-3 bg-orange-50 rounded\">\r\n//                   <span className=\"font-medium text-orange-800\">61-90 days</span>\r\n//                   <span className=\"font-bold text-orange-900\">{formatCurrency(aging.days60)}</span>\r\n//                 </div>\r\n//                 <div className=\"flex justify-between items-center p-3 bg-red-50 rounded\">\r\n//                   <span className=\"font-medium text-red-800\">Over 90 days</span>\r\n//                   <span className=\"font-bold text-red-900\">{formatCurrency(aging.over90)}</span>\r\n//                 </div>\r\n//               </div>\r\n//               <div className=\"mt-4 pt-4 border-t\">\r\n//                 <div className=\"flex justify-between items-center\">\r\n//                   <span className=\"text-lg font-semibold text-gray-900\">Total Outstanding</span>\r\n//                   <span className=\"text-xl font-bold text-gray-900\">\r\n//                     {formatCurrency(aging.current + aging.days30 + aging.days60 + aging.days90 + aging.over90)}\r\n//                   </span>\r\n//                 </div>\r\n//               </div>\r\n//             </div>\r\n\r\n//             {/* Collection Priority */}\r\n//             <div className=\"bg-white border border-gray-200 rounded-lg p-6\">\r\n//               <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Collection Priority</h3>\r\n//               <div className=\"space-y-3\">\r\n//                 {customers.data\r\n//                   .filter(customer => customer.overdueAmount > 0)\r\n//                   .sort((a, b) => b.overdueAmount - a.overdueAmount)\r\n//                   .slice(0, 5)\r\n//                   .map((customer, index) => (\r\n//                     <div key={customer.id} className=\"flex items-center justify-between p-3 bg-red-50 rounded\">\r\n//                       <div>\r\n//                         <div className=\"font-medium text-gray-900\">{customer.name}</div>\r\n//                         <div className=\"text-sm text-gray-500\">\r\n//                           Last payment: {customer.lastPayment}\r\n//                         </div>\r\n//                       </div>\r\n//                       <div className=\"text-right\">\r\n//                         <div className=\"font-bold text-red-900\">{formatCurrency(customer.overdueAmount)}</div>\r\n//                         <div className=\"text-xs text-red-700\">#{index + 1} Priority</div>\r\n//                       </div>\r\n//                     </div>\r\n//                   ))}\r\n//               </div>\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n\r\n//      {activeTab === 'invoices' && (\r\n//   <div>\r\n//     <div className=\"bg-white border border-gray-200 rounded-lg overflow-hidden\">\r\n//       <div className=\"px-6 py-4 border-b border-gray-200\">\r\n//         <h3 className=\"text-lg font-semibold text-gray-900\">Outstanding Orders/Invoices</h3>\r\n//       </div>\r\n\r\n//       {/* 🔍 Filters Bar */}\r\n//       <div className=\"flex flex-wrap items-end gap-4 px-6 py-4 bg-gray-50 border-b border-gray-200\">\r\n//         {/* From Date */}\r\n//         <div>\r\n//           <label className=\"block text-xs font-medium text-gray-600 mb-1\">From</label>\r\n//           <input\r\n//             type=\"date\"\r\n//             value={filters.fromDate}\r\n//             onChange={(e) => setFilters({ ...filters, fromDate: e.target.value })}\r\n//             className=\"px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\r\n//           />\r\n//         </div>\r\n\r\n//         {/* To Date */}\r\n//         <div>\r\n//           <label className=\"block text-xs font-medium text-gray-600 mb-1\">To</label>\r\n//           <input\r\n//             type=\"date\"\r\n//             value={filters.toDate}\r\n//             onChange={(e) => setFilters({ ...filters, toDate: e.target.value })}\r\n//             className=\"px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\r\n//           />\r\n//         </div>\r\n\r\n//         {/* Status */}\r\n//         <div>\r\n//           <label className=\"block text-xs font-medium text-gray-600 mb-1\">Status</label>\r\n//           <select\r\n//             value={filters.status}\r\n//             onChange={(e) => setFilters({ ...filters, status: e.target.value })}\r\n//             className=\"px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\r\n//           >\r\n//             <option value=\"all\">All</option>\r\n//             <option value=\"paid\">Paid</option>\r\n//             <option value=\"unpaid\">Unpaid</option>\r\n//             <option value=\"fulfilled\">Fulfilled</option>\r\n//             <option value=\"unfulfilled\">Unfulfilled</option>\r\n//           </select>\r\n//         </div>\r\n\r\n//         {/* Search */}\r\n//         <div className=\"flex-1 min-w-[200px]\">\r\n//           <label className=\"block text-xs font-medium text-gray-600 mb-1\">Search</label>\r\n//           <input\r\n//             type=\"text\"\r\n//             placeholder=\"Search by Order # or Customer\"\r\n//             value={filters.searchTerm}\r\n//             onChange={(e) => setFilters({ ...filters, searchTerm: e.target.value })}\r\n//             className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\r\n//           />\r\n//         </div>\r\n//       </div>\r\n\r\n//       {/* Table */}\r\n//       <div className=\"overflow-x-auto\">\r\n//         <table className=\"w-full\">\r\n//           <thead className=\"bg-gray-50\">\r\n//             <tr>\r\n//               <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                 ORDERID\r\n//               </th>\r\n//               <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                 Customer\r\n//               </th>\r\n//               <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                 Date\r\n//               </th>\r\n//               <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                 Items\r\n//               </th>\r\n//               <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                 Amount\r\n//               </th>\r\n//               <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                 Payment Status\r\n//               </th>\r\n//               <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                 Fulfillment\r\n//               </th>\r\n//               <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                 Sales Order\r\n//               </th>\r\n//             </tr>\r\n//           </thead>\r\n//           <tbody className=\"bg-white divide-y divide-gray-200\">\r\n//             {filteredOrders.map((order) => (\r\n//               <tr key={order.orderId} className=\"hover:bg-gray-50\">\r\n//                 <td className=\"px-6 py-4 whitespace-nowrap\">\r\n//                   <div className=\"text-sm font-medium text-gray-900\">{order.orderId}</div>\r\n//                   <div className=\"text-xs text-gray-500\">{order.status}</div>\r\n//                 </td>\r\n//                 <td className=\"px-6 py-4\">\r\n//                   <div className=\"text-sm font-medium text-gray-900\">{getCustomerName(order.customerId)}</div>\r\n//                 </td>\r\n//                 <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\r\n//                   {formatDate(order.createdAt)}\r\n//                 </td>\r\n//                 <td className=\"px-6 py-4\">\r\n//                   <div className=\"text-sm text-gray-900\">\r\n//                     {order.lineItems.map((item, index) => (\r\n//                       <div key={index} className=\"mb-1\">\r\n//                         <span className=\"font-medium\">{item.productName}</span>\r\n//                         <span className=\"text-gray-500 ml-2\">x{item.quantity}</span>\r\n//                       </div>\r\n//                     ))}\r\n//                   </div>\r\n//                 </td>\r\n//                 <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\r\n//                   {formatCurrency(order.total)}\r\n//                 </td>\r\n//                 <td className=\"px-6 py-4 whitespace-nowrap\">\r\n//                   <span\r\n//                     className={`px-2 py-1 text-xs font-medium rounded-full ${\r\n//                       order.paid ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'\r\n//                     }`}\r\n//                   >\r\n//                     {order.paid ? 'Paid' : 'Unpaid'}\r\n//                   </span>\r\n//                 </td>\r\n//                 <td className=\"px-6 py-4 whitespace-nowrap\">\r\n//                   <span\r\n//                     className={`px-2 py-1 text-xs font-medium rounded-full ${\r\n//                       order.fulfilled ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'\r\n//                     }`}\r\n//                   >\r\n//                     {order.fulfilled ? 'Fulfilled' : 'Unfulfilled'}\r\n//                   </span>\r\n//                 </td>\r\n//                 <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">\r\n//                   <button\r\n//                     className=\"text-emerald-600 hover:text-emerald-900 mr-3\"\r\n//                     onClick={() => setViewInvoice(order)}\r\n//                   >\r\n//                     <Eye size={16} />\r\n//                   </button>\r\n//                   <button className=\"text-blue-600 hover:text-blue-900\">\r\n//                     <Download size={16} />\r\n//                   </button>\r\n//                 </td>\r\n//               </tr>\r\n//             ))}\r\n//           </tbody>\r\n//         </table>\r\n//       </div>\r\n//     </div>\r\n//   </div>\r\n// )}\r\n\r\n\r\n//       {activeTab === 'payments' && (\r\n//         <div>\r\n//           <div className=\"bg-white border border-gray-200 rounded-lg overflow-hidden\">\r\n//             <div className=\"px-6 py-4 border-b border-gray-200\">\r\n//               <h3 className=\"text-lg font-semibold text-gray-900\">Payment History</h3>\r\n//             </div>\r\n//             <div className=\"overflow-x-auto\">\r\n//               <table className=\"w-full\">\r\n//                 <thead className=\"bg-gray-50\">\r\n//                   <tr>\r\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                       Order ID\r\n//                     </th>\r\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                       Customer\r\n//                     </th>\r\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                       Date\r\n//                     </th>\r\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                       Amount\r\n//                     </th>\r\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                       Payment Status\r\n//                     </th>\r\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                       Fulfillment Status\r\n//                     </th>\r\n//                   </tr>\r\n//                 </thead>\r\n//                 <tbody className=\"bg-white divide-y divide-gray-200\">\r\n//   {window.allSalesData\r\n//     ?.filter(order => order.paid && order.fulfilled)\r\n//     .map((order) => (\r\n//       <tr key={order.orderId} className=\"hover:bg-gray-50\">\r\n//         <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\r\n//           #{order.orderId}\r\n//         </td>\r\n//         <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\r\n//           {/* show customer name if exists, otherwise fallback */}\r\n//           {getCustomerName(order.customerId) || 'Unknown / Guest'}\r\n//         </td>\r\n//         <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\r\n//           {formatDate(order.createdAt)}\r\n//         </td>\r\n//         <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\r\n//           {formatCurrency(order.total)}\r\n//         </td>\r\n//         <td className=\"px-6 py-4 whitespace-nowrap\">\r\n//           <span className=\"px-2 py-1 text-xs font-medium rounded-full bg-green-100 text-green-800\">\r\n//             Paid\r\n//           </span>\r\n//         </td>\r\n//         <td className=\"px-6 py-4 whitespace-nowrap\">\r\n//           <span className=\"px-2 py-1 text-xs font-medium rounded-full bg-green-100 text-green-800\">\r\n//             Fulfilled\r\n//           </span>\r\n//         </td>\r\n//       </tr>\r\n//     ))}\r\n\r\n//   {/* Show message when no qualifying orders are found */}\r\n//   {(!window.allSalesData ||\r\n//     window.allSalesData.filter(order => order.paid && order.fulfilled).length === 0) && (\r\n//     <tr>\r\n//       <td colSpan={6} className=\"px-6 py-4 text-center text-gray-500\">\r\n//         No paid & fulfilled orders found.\r\n//       </td>\r\n//     </tr>\r\n//   )}\r\n// </tbody>\r\n\r\n//               </table>\r\n//             </div>\r\n            \r\n//             {(!window.allSalesData?.filter(order => order.paid).length || window.allSalesData?.filter(order => order.paid).length === 0) && (\r\n//               <div className=\"text-center py-12\">\r\n//                 <div className=\"text-gray-500 text-lg\">No payments found</div>\r\n//                 <p className=\"text-gray-400 mt-2\">All orders are currently unpaid</p>\r\n//               </div>\r\n//             )}\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n\r\n//       {/* Customer Detail Modal */}\r\n//       {selectedCustomer && (\r\n//         <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center p-4 z-50\">\r\n//           <div className=\"bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-y-auto\">\r\n//             <div className=\"px-6 py-4 border-b border-gray-200\">\r\n//               <div className=\"flex items-center justify-between\">\r\n//                 <h3 className=\"text-lg font-semibold text-gray-900\">\r\n//                   Customer Details - {selectedCustomer.name}\r\n//                 </h3>\r\n//                 <button\r\n//                   onClick={() => setSelectedCustomer(null)}\r\n//                   className=\"text-gray-400 hover:text-gray-600\"\r\n//                 >\r\n//                   <XCircle size={20} />\r\n//                 </button>\r\n//               </div>\r\n//             </div>\r\n            \r\n//             <div className=\"px-6 py-4\">\r\n//               {/* Customer Info Grid */}\r\n//               <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-6\">\r\n//                 <div className=\"space-y-4\">\r\n//                   <div>\r\n//                     <label className=\"text-sm font-medium text-gray-500\">Customer ID</label>\r\n//                     <p className=\"text-sm text-gray-900\">{selectedCustomer.id}</p>\r\n//                   </div>\r\n//                   <div>\r\n//                     <label className=\"text-sm font-medium text-gray-500\">Email</label>\r\n//                     <p className=\"text-sm text-gray-900\">{selectedCustomer.email}</p>\r\n//                   </div>\r\n//                   <div>\r\n//                     <label className=\"text-sm font-medium text-gray-500\">Phone</label>\r\n//                     <p className=\"text-sm text-gray-900\">{selectedCustomer.phone}</p>\r\n//                   </div>\r\n//                   <div>\r\n//                     <label className=\"text-sm font-medium text-gray-500\">Address</label>\r\n//                     <p className=\"text-sm text-gray-900\">{selectedCustomer.address}</p>\r\n//                   </div>\r\n//                 </div>\r\n                \r\n//                 <div className=\"space-y-4\">\r\n//                   <div>\r\n//                     <label className=\"text-sm font-medium text-gray-500\">Customer Type</label>\r\n//                     <p className=\"text-sm text-gray-900\">{selectedCustomer.customerType.replace('_', ' ')}</p>\r\n//                   </div>\r\n//                   <div>\r\n//                     <label className=\"text-sm font-medium text-gray-500\">Credit Limit</label>\r\n//                     <p className=\"text-sm text-gray-900\">{formatCurrency(selectedCustomer.creditLimit)}</p>\r\n//                   </div>\r\n//                   <div>\r\n//                     <label className=\"text-sm font-medium text-gray-500\">Payment Terms</label>\r\n//                     <p className=\"text-sm text-gray-900\">{selectedCustomer.paymentTerms} days</p>\r\n//                   </div>\r\n//                   <div>\r\n//                     <label className=\"text-sm font-medium text-gray-500\">Credit Status</label>\r\n//                     <span className={`px-2 py-1 text-xs font-medium rounded-full {getCreditStatusColor(selectedCustomer.creditStatus)}`}>\r\n//                       {selectedCustomer.creditStatus.replace('_', ' ')}\r\n//                     </span>\r\n//                   </div>\r\n//                 </div>\r\n//               </div>\r\n\r\n//               {/* Financial Summary */}\r\n//               <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\r\n//                 <div className=\"bg-blue-50 p-4 rounded-lg\">\r\n//                   <div className=\"text-sm font-medium text-blue-600\">Current Balance</div>\r\n//                   <div className=\"text-xl font-bold text-blue-900\">\r\n//                     {formatCurrency(selectedCustomer.totalOwed)}\r\n//                   </div>\r\n//                 </div>\r\n//                 <div className=\"bg-red-50 p-4 rounded-lg\">\r\n//                   <div className=\"text-sm font-medium text-red-600\">Overdue Amount</div>\r\n//                   <div className=\"text-xl font-bold text-red-900\">\r\n//                     {formatCurrency(selectedCustomer.overdueAmount)}\r\n//                   </div>\r\n//                 </div>\r\n//                 <div className=\"bg-green-50 p-4 rounded-lg\">\r\n//                   <div className=\"text-sm font-medium text-green-600\">Credit Available</div>\r\n//                   <div className=\"text-xl font-bold text-green-900\">\r\n//                     {formatCurrency(selectedCustomer.creditLimit - selectedCustomer.totalOwed)}\r\n//                   </div>\r\n//                 </div>\r\n//                 <div className=\"bg-purple-50 p-4 rounded-lg\">\r\n//                   <div className=\"text-sm font-medium text-purple-600\">Avg Payment Days</div>\r\n//                   <div className=\"text-xl font-bold text-purple-900\">\r\n//                     {selectedCustomer.avgPaymentDays}\r\n//                   </div>\r\n//                 </div>\r\n//               </div>\r\n\r\n//               {/* Customer Orders */}\r\n//               <div className=\"mb-6\">\r\n//                 <h4 className=\"text-md font-semibold text-gray-900 mb-3\">Customer Orders</h4>\r\n//                 <div className=\"overflow-x-auto\">\r\n//                   <table className=\"w-full border border-gray-200 rounded\">\r\n//                     <thead className=\"bg-gray-50\">\r\n//                       <tr>\r\n//                         <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500\">Order Id</th>\r\n//                         <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500\">Date</th>\r\n//                         <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500\">Items</th>\r\n//                         <th className=\"px-4 py-2 text-right text-xs font-medium text-gray-500\">Amount</th>\r\n//                         <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500\">Payment</th>\r\n//                         <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500\">Fulfillment</th>\r\n//                       </tr>\r\n//                     </thead>\r\n//                     <tbody className=\"divide-y divide-gray-200\">\r\n//                       {(window.allSalesData || [])\r\n//                         .filter(order => {\r\n//                           if (selectedCustomer.id.startsWith('guest-')) {\r\n//                             return order.orderId === selectedCustomer.orderId;\r\n//                           }\r\n//                           return order.customerId === selectedCustomer.id;\r\n//                         })\r\n//                         .map((order) => (\r\n//                           <tr key={order.orderId}>\r\n//                             <td className=\"px-4 py-2 text-sm text-gray-900\">{order.orderId}</td>\r\n//                             <td className=\"px-4 py-2 text-sm text-gray-900\">{formatDate(order.createdAt)}</td>\r\n//                             <td className=\"px-4 py-2 text-sm text-gray-900\">\r\n//                               {order.lineItems.map(item => item.productName).join(', ')}\r\n//                             </td>\r\n//                             <td className=\"px-4 py-2 text-sm text-gray-900 text-right\">{formatCurrency(order.total)}</td>\r\n//                             <td className=\"px-4 py-2\">\r\n//                               <span className={`px-2 py-1 text-xs font-medium rounded-full {\r\n//                                 order.paid ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'\r\n//                               }`}>\r\n//                                 {order.paid ? 'Paid' : 'Unpaid'}\r\n//                               </span>\r\n//                             </td>\r\n//                             <td className=\"px-4 py-2\">\r\n//                               <span className={`px-2 py-1 text-xs font-medium rounded-full {\r\n//                                 order.fulfilled ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'\r\n//                               }`}>\r\n//                                 {order.fulfilled ? 'Fulfilled' : 'UnFulfillment'}\r\n//                               </span>\r\n//                             </td>\r\n//                           </tr>\r\n//                         ))}\r\n//                     </tbody>\r\n//                   </table>\r\n//                 </div>\r\n                \r\n//                 {(window.allSalesData || [])\r\n//                   .filter(order => {\r\n//                     if (selectedCustomer.id.startsWith('guest-')) {\r\n//                       return order.orderId === selectedCustomer.orderId;\r\n//                     }\r\n//                     return order.customerId === selectedCustomer.id;\r\n//                   }).length === 0 && (\r\n//                     <div className=\"text-center py-4 text-gray-500\">\r\n//                       No orders found for this customer\r\n//                     </div>\r\n//                   )}\r\n//               </div>\r\n\r\n//               {/* Action Buttons */}\r\n//               <div className=\"flex space-x-3\">\r\n//                 <button className=\"px-4 py-2 bg-emerald-600 text-white rounded-lg hover:bg-emerald-700 flex items-center space-x-2\">\r\n//                   <Plus size={16} />\r\n//                   <span>New Invoice</span>\r\n//                 </button>\r\n//                 <button className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center space-x-2\">\r\n//                   <CheckCircle size={16} />\r\n//                   <span>Record Payment</span>\r\n//                 </button>\r\n//                 <button className=\"px-4 py-2 bg-yellow-600 text-white rounded-lg hover:bg-yellow-700 flex items-center space-x-2\">\r\n//                   <Mail size={16} />\r\n//                   <span>Send Statement</span>\r\n//                 </button>\r\n//               </div>\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n\r\n//       {/* Order/Invoice Detail Modal */}\r\n//       {viewInvoice && (\r\n//         <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center p-4 z-50\">\r\n//           <div className=\"bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-y-auto\">\r\n//             <div className=\"px-6 py-4 border-b border-gray-200\">\r\n//               <div className=\"flex items-center justify-between\">\r\n//                 <h3 className=\"text-lg font-semibold text-gray-900\">\r\n//                   Order Details - #{viewInvoice.orderId}\r\n//                 </h3>\r\n//                 <button\r\n//                   onClick={() => setViewInvoice(null)}\r\n//                   className=\"text-gray-400 hover:text-gray-600\"\r\n//                 >\r\n//                   <XCircle size={20} />\r\n//                 </button>\r\n//               </div>\r\n//             </div>\r\n            \r\n//             <div className=\"px-6 py-4\">\r\n//               {/* Order Info */}\r\n//               <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-6\">\r\n//                 <div className=\"space-y-4\">\r\n//                   <div>\r\n//                     <label className=\"text-sm font-medium text-gray-500\">Order ID</label>\r\n//                     <p className=\"text-sm text-gray-900\">{viewInvoice.orderId}</p>\r\n//                   </div>\r\n//                   <div>\r\n//                     <label className=\"text-sm font-medium text-gray-500\">Customer</label>\r\n//                     <p className=\"text-sm text-gray-900\">{getCustomerName(viewInvoice.customerId)}</p>\r\n//                   </div>\r\n//                   <div>\r\n//                     <label className=\"text-sm font-medium text-gray-500\">Created Date</label>\r\n//                     <p className=\"text-sm text-gray-900\">{formatDate(viewInvoice.createdAt)}</p>\r\n//                   </div>\r\n//                   <div>\r\n//                     <label className=\"text-sm font-medium text-gray-500\">Status</label>\r\n//                     <p className=\"text-sm text-gray-900\">{viewInvoice.status}</p>\r\n//                   </div>\r\n//                 </div>\r\n                \r\n//                 <div className=\"space-y-4\">\r\n//                   <div>\r\n//                     <label className=\"text-sm font-medium text-gray-500\">Payment Status</label>\r\n//                     <div>\r\n//                       <span className={`px-2 py-1 text-xs font-medium rounded-full {\r\n//                         viewInvoice.paid ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'\r\n//                       }`}>\r\n//                         {viewInvoice.paid ? 'Paid' : 'Unpaid'}\r\n//                       </span>\r\n//                     </div>\r\n//                   </div>\r\n//                   <div>\r\n//                     <label className=\"text-sm font-medium text-gray-500\">Fulfillment Status</label>\r\n//                     <div>\r\n//                       <span className={`px-2 py-1 text-xs font-medium rounded-full {\r\n//                         viewInvoice.fulfilled ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'\r\n//                       }`}>\r\n//                         {viewInvoice.fulfilled ? 'Fulfilled' : 'Pending'}\r\n//                       </span>\r\n//                     </div>\r\n//                   </div>\r\n//                   <div>\r\n//                     <label className=\"text-sm font-medium text-gray-500\">Total Amount</label>\r\n//                     <p className=\"text-lg font-bold text-gray-900\">{formatCurrency(viewInvoice.total)}</p>\r\n//                   </div>\r\n//                   <div>\r\n//                     <label className=\"text-sm font-medium text-gray-500\">Payable Amount</label>\r\n//                     <p className=\"text-sm text-gray-900\">{formatCurrency(viewInvoice.payableAmount)}</p>\r\n//                   </div>\r\n//                 </div>\r\n//               </div>\r\n\r\n//               {/* Line Items */}\r\n//               <div className=\"mb-6\">\r\n//                 <h4 className=\"text-md font-semibold text-gray-900 mb-3\">Order Items</h4>\r\n//                 <div className=\"overflow-x-auto\">\r\n//                   <table className=\"w-full border border-gray-200 rounded\">\r\n//                     <thead className=\"bg-gray-50\">\r\n//                       <tr>\r\n//                         <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500\">Product</th>\r\n//                         <th className=\"px-4 py-2 text-right text-xs font-medium text-gray-500\">Quantity</th>\r\n//                         <th className=\"px-4 py-2 text-right text-xs font-medium text-gray-500\">Unit Price</th>\r\n//                         <th className=\"px-4 py-2 text-right text-xs font-medium text-gray-500\">Total</th>\r\n//                         <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500\">Status</th>\r\n//                       </tr>\r\n//                     </thead>\r\n//                     <tbody className=\"divide-y divide-gray-200\">\r\n//                       {viewInvoice.lineItems.map((item, index) => (\r\n//                         <tr key={index}>\r\n//                           <td className=\"px-4 py-2 text-sm text-gray-900\">{item.productName}</td>\r\n//                           <td className=\"px-4 py-2 text-sm text-gray-900 text-right\">{item.quantity}</td>\r\n//                           <td className=\"px-4 py-2 text-sm text-gray-900 text-right\">{formatCurrency(item.price)}</td>\r\n//                           <td className=\"px-4 py-2 text-sm font-medium text-gray-900 text-right\">{formatCurrency(item.total)}</td>\r\n//                           <td className=\"px-4 py-2\">\r\n//                             <span className={`px-2 py-1 text-xs font-medium rounded-full {\r\n//                               item.fulfilled ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'\r\n//                             }`}>\r\n//                               {item.status}\r\n//                             </span>\r\n//                           </td>\r\n//                         </tr>\r\n//                       ))}\r\n//                     </tbody>\r\n//                   </table>\r\n//                 </div>\r\n//               </div>\r\n\r\n//               {/* Totals */}\r\n//               <div className=\"bg-gray-50 p-4 rounded-lg\">\r\n//                 <div className=\"space-y-2\">\r\n//                   <div className=\"flex justify-between\">\r\n//                     <span className=\"text-sm text-gray-600\">Subtotal:</span>\r\n//                     <span className=\"text-sm text-gray-900\">{formatCurrency(viewInvoice.subTotal)}</span>\r\n//                   </div>\r\n//                   <div className=\"flex justify-between\">\r\n//                     <span className=\"text-sm text-gray-600\">Tax ({viewInvoice.taxRate}%):</span>\r\n//                     <span className=\"text-sm text-gray-900\">{formatCurrency(viewInvoice.taxAmount)}</span>\r\n//                   </div>\r\n//                   {viewInvoice.discountAmount > 0 && (\r\n//                     <div className=\"flex justify-between\">\r\n//                       <span className=\"text-sm text-gray-600\">Discount:</span>\r\n//                       <span className=\"text-sm text-red-600\">-{formatCurrency(viewInvoice.discountAmount)}</span>\r\n//                     </div>\r\n//                   )}\r\n//                   <div className=\"flex justify-between font-bold text-lg border-t pt-2\">\r\n//                     <span>Total:</span>\r\n//                     <span>{formatCurrency(viewInvoice.total)}</span>\r\n//                   </div>\r\n//                 </div>\r\n//               </div>\r\n\r\n//               {/* Action Buttons */}\r\n//               <div className=\"flex space-x-3 mt-6\">\r\n//                 {!viewInvoice.paid && (\r\n//                   <button className=\"px-4 py-2 bg-emerald-600 text-white rounded-lg hover:bg-emerald-700 flex items-center space-x-2\">\r\n//                     <CheckCircle size={16} />\r\n//                     <span>Mark as Paid</span>\r\n//                   </button>\r\n//                 )}\r\n//                 {!viewInvoice.fulfilled && (\r\n//                   <button className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center space-x-2\">\r\n//                     <FileText size={16} />\r\n//                     <span>Mark as Fulfilled</span>\r\n//                   </button>\r\n//                 )}\r\n//                 <button className=\"px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 flex items-center space-x-2\">\r\n//                   <Download size={16} />\r\n//                   <span>Download Invoice</span>\r\n//                 </button>\r\n//               </div>\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n\r\n//       {/* API Integration Status */}\r\n//       <div className=\"mt-8 p-6 bg-green-50 border border-green-200 rounded-lg\">\r\n//         <div className=\"flex items-center mb-4\">\r\n//           <CheckCircle className=\"text-green-600 mr-2\" size={20} />\r\n//           <h3 className=\"font-medium text-green-800\">POS Integration Active</h3>\r\n//         </div>\r\n//         <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm text-green-700\">\r\n//           <div>\r\n//             <strong>Sales Orders:</strong> {sales.data.length} outstanding orders from POS system\r\n//           </div>\r\n//           <div>\r\n//             <strong>Customers:</strong> {customers.data.length} active customers synchronized\r\n//           </div>\r\n//           <div>\r\n//             <strong>Real-time Updates:</strong> Data refreshes automatically with POS transactions\r\n//           </div>\r\n//         </div>\r\n//         <div className=\"mt-4 text-xs text-green-600\">\r\n//           <strong>Note:</strong> Only showing unpaid or unfulfilled orders. Replace Bearer token for live data connection.\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default AccountsReceivable;\r\n\r\n\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { RefreshCw } from 'lucide-react';\r\nimport { fetchSales, fetchCustomers } from '../Hook/useAPData';\r\nimport { getFilteredCustomers } from '../Utility/apCalculations';\r\nimport { parseLocalDate } from '../Utility/formatters';\r\n\r\nimport APHeader from '../components/AccountsReceivable/APHeader';\r\nimport APSummaryCards from '../components/AccountsReceivable/APSummaryCards';\r\nimport APTabs from '../components/AccountsReceivable/APTabs';\r\nimport APOverviewTab from '../components/AccountsReceivable/APOverviewTab';\r\nimport APAgingTab from '../components/AccountsReceivable/APAgingTab';\r\nimport APInvoicesTab from '../components/AccountsReceivable/APInvoicesTab';\r\nimport APPaymentsTab from '../components/AccountsReceivable/APPaymentsTab';\r\nimport CustomerDetailModal from '../modals/CustomerDetailModal';\r\nimport InvoiceDetailModal from '../modals/InvoiceDetailModal';\r\nimport APIStatusBadge from '../components/AccountsReceivable/APIStatusBadge';\r\nimport LoadingState from '../components/AccountsReceivable/LoadingState';\r\nimport ErrorState from '../components/AccountsReceivable/ErrorState';\r\n\r\nconst AccountsReceivable = () => {\r\n  // State management\r\n  const [sales, setSales] = useState({ loading: false, data: [], error: null });\r\n  const [customers, setCustomers] = useState({ loading: false, data: [], error: null });\r\n  const [activeTab, setActiveTab] = useState('overview');\r\n  const [selectedCustomer, setSelectedCustomer] = useState(null);\r\n  const [viewInvoice, setViewInvoice] = useState(null);\r\n  const [showInvoiceForm, setShowInvoiceForm] = useState(false);\r\n  const [filters, setFilters] = useState({\r\n    customerType: 'all',\r\n    status: 'all',\r\n    dateRange: '30',\r\n    searchTerm: '',\r\n    fromDate: '',\r\n    toDate: ''\r\n  });\r\n\r\n  // Load data on component mount\r\n  useEffect(() => {\r\n    const loadData = async () => {\r\n      const salesData = await fetchSales(setSales);\r\n      if (salesData) {\r\n        window.allSalesData = salesData;\r\n        setTimeout(() => fetchCustomers(setCustomers, salesData), 500);\r\n      }\r\n    };\r\n    loadData();\r\n  }, []);\r\n\r\n  // Refresh functionality\r\n  const refreshAllData = async () => {\r\n    const salesData = await fetchSales(setSales);\r\n    if (salesData) {\r\n      window.allSalesData = salesData;\r\n      setTimeout(() => fetchCustomers(setCustomers, salesData), 500);\r\n    }\r\n  };\r\n\r\n  // Helper function to get customer name by ID\r\n  const getCustomerName = (customerId) => {\r\n    if (!customerId || customerId === 'null') return 'Guest Customer';\r\n    const customer = customers.data.find(c => c.id === customerId);\r\n    return customer ? customer.name : 'Unknown Customer';\r\n  };\r\n\r\n  // Loading state\r\n  if (sales.loading || customers.loading) {\r\n    return <LoadingState />;\r\n  }\r\n\r\n  // Error state\r\n  if (sales.error || customers.error) {\r\n    return (\r\n      <ErrorState \r\n        salesError={sales.error} \r\n        customersError={customers.error}\r\n        onRetry={refreshAllData}\r\n      />\r\n    );\r\n  }\r\n\r\n  // Filter customers\r\n  const filteredCustomers = getFilteredCustomers(customers.data, filters);\r\n\r\n  // Filter orders\r\n// Filter orders\r\nconst filteredOrders = sales.data.filter(order => {\r\n  if (filters.status === 'paid' && !order.paid) return false;\r\n  if (filters.status === 'unpaid' && order.paid) return false;\r\n  if (filters.status === 'fulfilled' && !order.fulfilled) return false;\r\n  if (filters.status === 'unfulfilled' && order.fulfilled) return false;\r\n\r\n  const orderDate = new Date(order.createdAt);\r\n  const from = parseLocalDate(filters.fromDate);\r\n  const to = parseLocalDate(filters.toDate);\r\n\r\n  if (from && orderDate < from) return false;\r\n  if (to) {\r\n    // include whole \"to\" day by setting it to end of day\r\n    const endOfTo = new Date(to);\r\n    endOfTo.setHours(23, 59, 59, 999);\r\n    if (orderDate > endOfTo) return false;\r\n  }\r\n\r\n  return true;\r\n});\r\n\r\n\r\n  return (\r\n    <div className=\"max-w-7xl mx-auto p-6 bg-white\">\r\n      <APHeader />\r\n      <APSummaryCards customers={customers.data} allSalesData={window.allSalesData} />\r\n      <APTabs activeTab={activeTab} setActiveTab={setActiveTab} />\r\n\r\n      {/* Tab Content */}\r\n      {activeTab === 'overview' && (\r\n        <APOverviewTab\r\n          filters={filters}\r\n          setFilters={setFilters}\r\n          filteredCustomers={filteredCustomers}\r\n          setSelectedCustomer={setSelectedCustomer}\r\n          setShowInvoiceForm={setShowInvoiceForm}\r\n        />\r\n      )}\r\n\r\n      {activeTab === 'aging' && (\r\n        <APAgingTab \r\n          salesData={sales.data} \r\n          customers={customers.data} \r\n        />\r\n      )}\r\n\r\n      {activeTab === 'invoices' && (\r\n        <APInvoicesTab\r\n          filters={filters}\r\n          setFilters={setFilters}\r\n          filteredOrders={filteredOrders}\r\n          getCustomerName={getCustomerName}\r\n          setViewInvoice={setViewInvoice}\r\n        />\r\n      )}\r\n\r\n      {activeTab === 'payments' && (\r\n        <APPaymentsTab\r\n          allSalesData={window.allSalesData}\r\n          getCustomerName={getCustomerName}\r\n        />\r\n      )}\r\n\r\n      {/* Modals */}\r\n      {selectedCustomer && (\r\n        <CustomerDetailModal\r\n          customer={selectedCustomer}\r\n          onClose={() => setSelectedCustomer(null)}\r\n          allSalesData={window.allSalesData}\r\n        />\r\n      )}\r\n\r\n      {viewInvoice && (\r\n        <InvoiceDetailModal\r\n          invoice={viewInvoice}\r\n          onClose={() => setViewInvoice(null)}\r\n          getCustomerName={getCustomerName}\r\n        />\r\n      )}\r\n\r\n      <APIStatusBadge \r\n        salesCount={sales.data.length} \r\n        customersCount={customers.data.length} \r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AccountsReceivable;"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,cAAc;AACxC,SAASC,UAAU,EAAEC,cAAc,QAAQ,mBAAmB;AAC9D,SAASC,oBAAoB,QAAQ,2BAA2B;AAChE,SAASC,cAAc,QAAQ,uBAAuB;AAEtD,OAAOC,QAAQ,MAAM,2CAA2C;AAChE,OAAOC,cAAc,MAAM,iDAAiD;AAC5E,OAAOC,MAAM,MAAM,yCAAyC;AAC5D,OAAOC,aAAa,MAAM,gDAAgD;AAC1E,OAAOC,UAAU,MAAM,6CAA6C;AACpE,OAAOC,aAAa,MAAM,gDAAgD;AAC1E,OAAOC,aAAa,MAAM,gDAAgD;AAC1E,OAAOC,mBAAmB,MAAM,+BAA+B;AAC/D,OAAOC,kBAAkB,MAAM,8BAA8B;AAC7D,OAAOC,cAAc,MAAM,iDAAiD;AAC5E,OAAOC,YAAY,MAAM,+CAA+C;AACxE,OAAOC,UAAU,MAAM,6CAA6C;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErE,MAAMC,kBAAkB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC/B;EACA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGxB,QAAQ,CAAC;IAAEyB,OAAO,EAAE,KAAK;IAAEC,IAAI,EAAE,EAAE;IAAEC,KAAK,EAAE;EAAK,CAAC,CAAC;EAC7E,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAG7B,QAAQ,CAAC;IAAEyB,OAAO,EAAE,KAAK;IAAEC,IAAI,EAAE,EAAE;IAAEC,KAAK,EAAE;EAAK,CAAC,CAAC;EACrF,MAAM,CAACG,SAAS,EAAEC,YAAY,CAAC,GAAG/B,QAAQ,CAAC,UAAU,CAAC;EACtD,MAAM,CAACgC,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGjC,QAAQ,CAAC,IAAI,CAAC;EAC9D,MAAM,CAACkC,WAAW,EAAEC,cAAc,CAAC,GAAGnC,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACoC,eAAe,EAAEC,kBAAkB,CAAC,GAAGrC,QAAQ,CAAC,KAAK,CAAC;EAC7D,MAAM,CAACsC,OAAO,EAAEC,UAAU,CAAC,GAAGvC,QAAQ,CAAC;IACrCwC,YAAY,EAAE,KAAK;IACnBC,MAAM,EAAE,KAAK;IACbC,SAAS,EAAE,IAAI;IACfC,UAAU,EAAE,EAAE;IACdC,QAAQ,EAAE,EAAE;IACZC,MAAM,EAAE;EACV,CAAC,CAAC;;EAEF;EACA5C,SAAS,CAAC,MAAM;IACd,MAAM6C,QAAQ,GAAG,MAAAA,CAAA,KAAY;MAC3B,MAAMC,SAAS,GAAG,MAAM5C,UAAU,CAACqB,QAAQ,CAAC;MAC5C,IAAIuB,SAAS,EAAE;QACbC,MAAM,CAACC,YAAY,GAAGF,SAAS;QAC/BG,UAAU,CAAC,MAAM9C,cAAc,CAACyB,YAAY,EAAEkB,SAAS,CAAC,EAAE,GAAG,CAAC;MAChE;IACF,CAAC;IACDD,QAAQ,CAAC,CAAC;EACZ,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMK,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,MAAMJ,SAAS,GAAG,MAAM5C,UAAU,CAACqB,QAAQ,CAAC;IAC5C,IAAIuB,SAAS,EAAE;MACbC,MAAM,CAACC,YAAY,GAAGF,SAAS;MAC/BG,UAAU,CAAC,MAAM9C,cAAc,CAACyB,YAAY,EAAEkB,SAAS,CAAC,EAAE,GAAG,CAAC;IAChE;EACF,CAAC;;EAED;EACA,MAAMK,eAAe,GAAIC,UAAU,IAAK;IACtC,IAAI,CAACA,UAAU,IAAIA,UAAU,KAAK,MAAM,EAAE,OAAO,gBAAgB;IACjE,MAAMC,QAAQ,GAAG1B,SAAS,CAACF,IAAI,CAAC6B,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKJ,UAAU,CAAC;IAC9D,OAAOC,QAAQ,GAAGA,QAAQ,CAACI,IAAI,GAAG,kBAAkB;EACtD,CAAC;;EAED;EACA,IAAInC,KAAK,CAACE,OAAO,IAAIG,SAAS,CAACH,OAAO,EAAE;IACtC,oBAAOL,OAAA,CAACH,YAAY;MAAA0C,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACzB;;EAEA;EACA,IAAIvC,KAAK,CAACI,KAAK,IAAIC,SAAS,CAACD,KAAK,EAAE;IAClC,oBACEP,OAAA,CAACF,UAAU;MACT6C,UAAU,EAAExC,KAAK,CAACI,KAAM;MACxBqC,cAAc,EAAEpC,SAAS,CAACD,KAAM;MAChCsC,OAAO,EAAEd;IAAe;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzB,CAAC;EAEN;;EAEA;EACA,MAAMI,iBAAiB,GAAG7D,oBAAoB,CAACuB,SAAS,CAACF,IAAI,EAAEY,OAAO,CAAC;;EAEvE;EACF;EACA,MAAM6B,cAAc,GAAG5C,KAAK,CAACG,IAAI,CAAC0C,MAAM,CAACC,KAAK,IAAI;IAChD,IAAI/B,OAAO,CAACG,MAAM,KAAK,MAAM,IAAI,CAAC4B,KAAK,CAACC,IAAI,EAAE,OAAO,KAAK;IAC1D,IAAIhC,OAAO,CAACG,MAAM,KAAK,QAAQ,IAAI4B,KAAK,CAACC,IAAI,EAAE,OAAO,KAAK;IAC3D,IAAIhC,OAAO,CAACG,MAAM,KAAK,WAAW,IAAI,CAAC4B,KAAK,CAACE,SAAS,EAAE,OAAO,KAAK;IACpE,IAAIjC,OAAO,CAACG,MAAM,KAAK,aAAa,IAAI4B,KAAK,CAACE,SAAS,EAAE,OAAO,KAAK;IAErE,MAAMC,SAAS,GAAG,IAAIC,IAAI,CAACJ,KAAK,CAACK,SAAS,CAAC;IAC3C,MAAMC,IAAI,GAAGrE,cAAc,CAACgC,OAAO,CAACM,QAAQ,CAAC;IAC7C,MAAMgC,EAAE,GAAGtE,cAAc,CAACgC,OAAO,CAACO,MAAM,CAAC;IAEzC,IAAI8B,IAAI,IAAIH,SAAS,GAAGG,IAAI,EAAE,OAAO,KAAK;IAC1C,IAAIC,EAAE,EAAE;MACN;MACA,MAAMC,OAAO,GAAG,IAAIJ,IAAI,CAACG,EAAE,CAAC;MAC5BC,OAAO,CAACC,QAAQ,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;MACjC,IAAIN,SAAS,GAAGK,OAAO,EAAE,OAAO,KAAK;IACvC;IAEA,OAAO,IAAI;EACb,CAAC,CAAC;EAGA,oBACEzD,OAAA;IAAK2D,SAAS,EAAC,gCAAgC;IAAAC,QAAA,gBAC7C5D,OAAA,CAACb,QAAQ;MAAAoD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACZ1C,OAAA,CAACZ,cAAc;MAACoB,SAAS,EAAEA,SAAS,CAACF,IAAK;MAACuB,YAAY,EAAED,MAAM,CAACC;IAAa;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAChF1C,OAAA,CAACX,MAAM;MAACqB,SAAS,EAAEA,SAAU;MAACC,YAAY,EAAEA;IAAa;MAAA4B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAG3DhC,SAAS,KAAK,UAAU,iBACvBV,OAAA,CAACV,aAAa;MACZ4B,OAAO,EAAEA,OAAQ;MACjBC,UAAU,EAAEA,UAAW;MACvB2B,iBAAiB,EAAEA,iBAAkB;MACrCjC,mBAAmB,EAAEA,mBAAoB;MACzCI,kBAAkB,EAAEA;IAAmB;MAAAsB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxC,CACF,EAEAhC,SAAS,KAAK,OAAO,iBACpBV,OAAA,CAACT,UAAU;MACToC,SAAS,EAAExB,KAAK,CAACG,IAAK;MACtBE,SAAS,EAAEA,SAAS,CAACF;IAAK;MAAAiC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3B,CACF,EAEAhC,SAAS,KAAK,UAAU,iBACvBV,OAAA,CAACR,aAAa;MACZ0B,OAAO,EAAEA,OAAQ;MACjBC,UAAU,EAAEA,UAAW;MACvB4B,cAAc,EAAEA,cAAe;MAC/Bf,eAAe,EAAEA,eAAgB;MACjCjB,cAAc,EAAEA;IAAe;MAAAwB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChC,CACF,EAEAhC,SAAS,KAAK,UAAU,iBACvBV,OAAA,CAACP,aAAa;MACZoC,YAAY,EAAED,MAAM,CAACC,YAAa;MAClCG,eAAe,EAAEA;IAAgB;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClC,CACF,EAGA9B,gBAAgB,iBACfZ,OAAA,CAACN,mBAAmB;MAClBwC,QAAQ,EAAEtB,gBAAiB;MAC3BiD,OAAO,EAAEA,CAAA,KAAMhD,mBAAmB,CAAC,IAAI,CAAE;MACzCgB,YAAY,EAAED,MAAM,CAACC;IAAa;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnC,CACF,EAEA5B,WAAW,iBACVd,OAAA,CAACL,kBAAkB;MACjBmE,OAAO,EAAEhD,WAAY;MACrB+C,OAAO,EAAEA,CAAA,KAAM9C,cAAc,CAAC,IAAI,CAAE;MACpCiB,eAAe,EAAEA;IAAgB;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClC,CACF,eAED1C,OAAA,CAACJ,cAAc;MACbmE,UAAU,EAAE5D,KAAK,CAACG,IAAI,CAAC0D,MAAO;MAC9BC,cAAc,EAAEzD,SAAS,CAACF,IAAI,CAAC0D;IAAO;MAAAzB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACxC,EAAA,CAxJID,kBAAkB;AAAAiE,EAAA,GAAlBjE,kBAAkB;AA0JxB,eAAeA,kBAAkB;AAAC,IAAAiE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}