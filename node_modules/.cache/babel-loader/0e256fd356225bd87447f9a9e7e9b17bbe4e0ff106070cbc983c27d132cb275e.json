{"ast":null,"code":"// src/utils/apCalculations.js\n\nexport const combineVendorsWithPurchaseOrders = (vendors, purchaseOrders) => {\n  console.log(\"Starting combineVendorsWithPurchaseOrders function...\");\n\n  // Create a map for quick vendor lookup\n  const vendorMap = new Map();\n\n  // First, add all vendors with valid names to the map\n  if (vendors && vendors.data && Array.isArray(vendors.data)) {\n    vendors.data.forEach(vendor => {\n      // Only include vendors with valid names (not null, undefined, empty, or \"null\")\n      if (vendor.name && vendor.name.trim() !== '' && vendor.name !== 'null') {\n        vendorMap.set(vendor.id, {\n          ...vendor,\n          purchaseOrders: []\n        });\n      }\n    });\n  }\n\n  // Process all valid purchase orders\n  if (purchaseOrders && Array.isArray(purchaseOrders)) {\n    purchaseOrders.forEach(po => {\n      // Handle both string \"null\" and actual null values\n      const vendorId = po.Vendor_Id || po.vendor_Id;\n\n      // Only process POs with valid vendor_Id (not null, undefined, empty, or \"null\")\n      if (vendorId && vendorId !== 'null') {\n        if (vendorMap.has(vendorId)) {\n          // Add PO to existing vendor\n          vendorMap.get(vendorId).purchaseOrders.push(po);\n        } else {\n          // If vendor with valid name doesn't exist, create a placeholder\n          const uniqueKey = `${vendorId}_${po.POID || po.id}`;\n          vendorMap.set(uniqueKey, {\n            id: vendorId,\n            name: `Vendor ${vendorId}`,\n            email: 'unknown@vendor.system',\n            phone: '+000-000-0000',\n            address: 'Unknown Address',\n            vendorType: 'unknown',\n            creditLimit: 0,\n            paymentTerms: 0,\n            lastPayment: 'No payments',\n            creditStatus: 'unknown',\n            billCount: 1,\n            avgPaymentDays: 0,\n            status: 'pending',\n            type: 'Unknown',\n            poId: po.id,\n            purchaseOrders: [po]\n          });\n        }\n      }\n    });\n  }\n\n  // Convert the map back to an array and filter to only include vendors with names\n  const allVendors = Array.from(vendorMap.values());\n  const vendorsWithNames = allVendors.filter(vendor => vendor.name && vendor.name.trim() !== '' && vendor.name !== 'null');\n  return vendorsWithNames;\n};\nexport const createVendorPOMapping = (purchaseOrders, vendors) => {\n  console.log('Starting createVendorPOMapping function');\n  console.log('Input vendors:', vendors);\n  console.log('Input purchaseOrders:', purchaseOrders);\n  const vendorPOMap = new Map();\n\n  // Only initialize vendors with valid names\n  if (vendors && vendors.data && Array.isArray(vendors.data)) {\n    console.log(`Processing ${vendors.data.length} vendors`);\n    let validVendorCount = 0;\n    let invalidVendorCount = 0;\n    vendors.data.forEach(vendor => {\n      // Check if vendor has a valid name (not null, undefined, or empty)\n      if (vendor.name && vendor.name.trim() !== '') {\n        vendorPOMap.set(vendor.id, {\n          vendor,\n          purchaseOrders: []\n        });\n        validVendorCount++;\n        console.log(`Added vendor: ID=${vendor.id}, Name=${vendor.name}`);\n      } else {\n        invalidVendorCount++;\n        console.log(`Skipped vendor with invalid name: ID=${vendor.id}, Name=${vendor.name}`);\n      }\n    });\n    console.log(`Valid vendors added: ${validVendorCount}`);\n    console.log(`Invalid vendors skipped: ${invalidVendorCount}`);\n  } else {\n    console.warn('No valid vendors data found');\n  }\n\n  // Process purchase orders and assign them to vendors with valid names\n  if (purchaseOrders && purchaseOrders.data && Array.isArray(purchaseOrders.data)) {\n    console.log(`Processing ${purchaseOrders.data.length} purchase orders`);\n    let assignedPOCount = 0;\n    let skippedPOCount = 0;\n    purchaseOrders.data.forEach(po => {\n      // Only process POs with a valid vendor_Id that maps to a vendor with a name\n      if (po.vendor_Id && vendorPOMap.has(po.vendor_Id)) {\n        vendorPOMap.get(po.vendor_Id).purchaseOrders.push(po);\n        assignedPOCount++;\n        console.log(`Assigned PO ${po.id || po.POID} to vendor ${po.vendor_Id}`);\n      } else {\n        skippedPOCount++;\n        console.log(`Skipped PO ${po.id || po.POID}, vendor_Id=${po.vendor_Id} (not found in valid vendors)`);\n      }\n    });\n    console.log(`POs assigned to vendors: ${assignedPOCount}`);\n    console.log(`POs skipped: ${skippedPOCount}`);\n  } else {\n    console.warn('No valid purchase orders data found');\n  }\n\n  // Convert the map to an array of vendor-PO pairs\n  const result = Array.from(vendorPOMap.values());\n  console.log(`\\nFinal result: ${result.length} vendor entries with their purchase orders`);\n  return result;\n};\nexport const calculateAPSummary = (vendors, purchaseOrders) => {\n  console.log(\"Starting AP Summary calculation...\");\n\n  // Get all vendors with their purchase orders (including applied ones)\n  const allVendorsWithPOs = combineVendorsWithPurchaseOrders(vendors, purchaseOrders.data);\n  console.log(`Total vendors: ${allVendorsWithPOs.length}`);\n\n  // Calculate total amounts from purchase orders\n  console.log(\"Calculating total AP from purchase orders...\");\n  let totalAP = 0;\n  let totalOverdue = 0;\n  let vendorsWithBalance = 0;\n  allVendorsWithPOs.forEach(vendor => {\n    console.log(`Processing vendor: ${vendor.name || 'Unknown Vendor'}`);\n\n    // Calculate vendor's pending amount (only from pending items using quantity × unit price)\n    const vendorPending = vendor.purchaseOrders.reduce((sum, po) => {\n      const overallStatus = getPOOverallStatus(po);\n      if (overallStatus === 'applied') {\n        // Skip fully applied POs\n        return sum;\n      } else if (overallStatus === 'partial') {\n        // For partial POs, only calculate pending items using quantity × unit price\n        const pendingItemsTotal = po.purchaseOrderItems.reduce((itemSum, item) => {\n          if (item.status !== 'applied') {\n            const itemTotal = (item.quantity || 0) * (item.pricePerUnit || 0);\n            console.log(`PO ${po.POID || po.id} - pending item: ${item.quantity} × ${item.pricePerUnit} = ${itemTotal}`);\n            return itemSum + itemTotal;\n          }\n          return itemSum;\n        }, 0);\n        console.log(`PO ${po.POID || po.id} (partial) - pending items total: ${pendingItemsTotal}`);\n        return sum + pendingItemsTotal;\n      } else {\n        // For fully pending POs, calculate all items using quantity × unit price\n        const poTotal = po.purchaseOrderItems.reduce((poSum, item) => {\n          const itemTotal = (item.quantity || 0) * (item.pricePerUnit || 0);\n          console.log(`PO ${po.POID || po.id} - pending item: ${item.quantity} × ${item.pricePerUnit} = ${itemTotal}`);\n          return poSum + itemTotal;\n        }, 0);\n        console.log(`PO ${po.POID || po.id} (${overallStatus}) - full PO total: ${poTotal}`);\n        return sum + poTotal;\n      }\n    }, 0);\n    console.log(`Vendor ${vendor.name} pending amount: ${vendorPending}`);\n\n    // Add to total AP (which represents total pending)\n    totalAP += vendorPending;\n\n    // For overdue calculation, use a percentage of pending orders\n    const overdueAmount = vendorPending * 0.1; // Example: 10% of pending is overdue\n    totalOverdue += overdueAmount;\n    if (vendorPending > 0) {\n      vendorsWithBalance++;\n    }\n  });\n  console.log(`Total A/P (pending amounts): ${totalAP}`);\n  console.log(`Total overdue: ${totalOverdue}`);\n  console.log(`Vendors with pending balance: ${vendorsWithBalance}`);\n\n  // Calculate average days outstanding from ALL purchase orders\n  console.log(\"Calculating average days outstanding...\");\n  let totalDaysOutstanding = 0;\n  let poCount = 0;\n  allVendorsWithPOs.forEach(vendor => {\n    vendor.purchaseOrders.forEach(po => {\n      console.log(`Processing PO: ${po.POID || po.id}`);\n      const overallStatus = getPOOverallStatus(po);\n      console.log(`Overall status: ${overallStatus}`);\n      // Calculate days based on overall status\n      let days = 0;\n      switch (overallStatus) {\n        case 'pending':\n          days = 5;\n          break;\n        case 'Processing':\n          days = 10;\n          break;\n        case 'Shipped':\n          days = 20;\n          break;\n        case 'Delivered':\n          days = 30;\n          break;\n        case 'applied':\n          days = 0; // Applied orders don't contribute to days outstanding\n          break;\n        case 'partial':\n          days = 3; // Partially applied orders have fewer outstanding days\n          break;\n        default:\n          days = 15;\n      }\n      console.log(`Adding ${days} days for PO ${po.POID || po.id} with status ${overallStatus}`);\n      totalDaysOutstanding += days;\n      if (days > 0) poCount++; // Only count POs that contribute to days outstanding\n    });\n  });\n  const avgDaysOutstanding = poCount > 0 ? Math.round(totalDaysOutstanding / poCount) : 0;\n  console.log(`Average days outstanding: ${avgDaysOutstanding}`);\n  console.log(\"AP Summary calculation completed\");\n  return {\n    totalAP,\n    totalOverdue,\n    vendorsWithBalance,\n    avgDaysOutstanding\n  };\n};\nexport const getProductDetails = productId => {\n  if (!productId) return {\n    name: 'Unknown Product',\n    description: '',\n    price: 0\n  };\n  const product = (window.productsData || []).find(p => p.id === productId || p.id === String(productId));\n  if (product) {\n    return {\n      name: product.name || 'Unknown Product',\n      description: product.description || '',\n      price: product.price || 0,\n      costPrice: product.costPrice || 0,\n      quantity: product.quantity || 0\n    };\n  }\n  return {\n    name: `Product #${productId}`,\n    description: '',\n    price: 0\n  };\n};\nexport const getVendorName = (vendorId, vendorsData) => {\n  if (!vendorId || vendorId === 'null') return 'Unknown Vendor';\n  const vendor = vendorsData.find(v => v.id === vendorId);\n  return vendor ? vendor.name : 'Unknown Vendor';\n};\nexport const getCreditStatusColor = status => {\n  switch (status) {\n    case 'excellent':\n      return 'bg-green-100 text-green-800';\n    case 'good':\n      return 'bg-blue-100 text-blue-800';\n    case 'watch':\n      return 'bg-yellow-100 text-yellow-800';\n    case 'hold':\n      return 'bg-red-100 text-red-800';\n    case 'unknown':\n      return 'bg-gray-100 text-gray-800';\n    default:\n      return 'bg-gray-100 text-gray-800';\n  }\n};\nexport const getPOStatusColor = status => {\n  switch (status) {\n    case 'applied':\n      return 'bg-green-100 text-green-800';\n    case 'pending':\n      return 'bg-yellow-100 text-yellow-800';\n    case 'cancelled':\n      return 'bg-red-100 text-red-800';\n    case 'partial':\n      return 'bg-blue-100 text-blue-800';\n    default:\n      return 'bg-gray-100 text-gray-800';\n  }\n};\nexport const getPOOverallStatus = purchaseOrder => {\n  if (!purchaseOrder.purchaseOrderItems || purchaseOrder.purchaseOrderItems.length === 0) {\n    return purchaseOrder.status || 'pending';\n  }\n\n  // Check if all items are applied\n  const allItemsApplied = purchaseOrder.purchaseOrderItems.every(item => item.status === 'applied');\n  if (allItemsApplied) {\n    return 'applied';\n  }\n\n  // Check if any items are applied (mixed status)\n  const someItemsApplied = purchaseOrder.purchaseOrderItems.some(item => item.status === 'applied');\n  if (someItemsApplied) {\n    return 'partial'; // You can create a new status for partially applied POs\n  }\n\n  // Default to the PO level status or pending\n  return purchaseOrder.status || 'pending';\n};\nexport const formatCurrency = amount => {\n  return new Intl.NumberFormat('en-PK', {\n    style: 'currency',\n    currency: 'PKR',\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0\n  }).format(amount);\n};","map":{"version":3,"names":["combineVendorsWithPurchaseOrders","vendors","purchaseOrders","console","log","vendorMap","Map","data","Array","isArray","forEach","vendor","name","trim","set","id","po","vendorId","Vendor_Id","vendor_Id","has","get","push","uniqueKey","POID","email","phone","address","vendorType","creditLimit","paymentTerms","lastPayment","creditStatus","billCount","avgPaymentDays","status","type","poId","allVendors","from","values","vendorsWithNames","filter","createVendorPOMapping","vendorPOMap","length","validVendorCount","invalidVendorCount","warn","assignedPOCount","skippedPOCount","result","calculateAPSummary","allVendorsWithPOs","totalAP","totalOverdue","vendorsWithBalance","vendorPending","reduce","sum","overallStatus","getPOOverallStatus","pendingItemsTotal","purchaseOrderItems","itemSum","item","itemTotal","quantity","pricePerUnit","poTotal","poSum","overdueAmount","totalDaysOutstanding","poCount","days","avgDaysOutstanding","Math","round","getProductDetails","productId","description","price","product","window","productsData","find","p","String","costPrice","getVendorName","vendorsData","v","getCreditStatusColor","getPOStatusColor","purchaseOrder","allItemsApplied","every","someItemsApplied","some","formatCurrency","amount","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits","format"],"sources":["C:/Users/Logic-Unit/my-account/src/utils/apCalculations.jsx"],"sourcesContent":["// src/utils/apCalculations.js\r\n\r\nexport const combineVendorsWithPurchaseOrders = (vendors, purchaseOrders) => {\r\n  console.log(\"Starting combineVendorsWithPurchaseOrders function...\");\r\n  \r\n  // Create a map for quick vendor lookup\r\n  const vendorMap = new Map();\r\n  \r\n  // First, add all vendors with valid names to the map\r\n  if (vendors && vendors.data && Array.isArray(vendors.data)) {\r\n    vendors.data.forEach(vendor => {\r\n      // Only include vendors with valid names (not null, undefined, empty, or \"null\")\r\n      if (vendor.name && vendor.name.trim() !== '' && vendor.name !== 'null') {\r\n        vendorMap.set(vendor.id, {\r\n          ...vendor,\r\n          purchaseOrders: []\r\n        });\r\n      }\r\n    });\r\n  }\r\n  \r\n  // Process all valid purchase orders\r\n  if (purchaseOrders && Array.isArray(purchaseOrders)) {\r\n    purchaseOrders.forEach(po => {\r\n      // Handle both string \"null\" and actual null values\r\n      const vendorId = po.Vendor_Id || po.vendor_Id;\r\n      \r\n      // Only process POs with valid vendor_Id (not null, undefined, empty, or \"null\")\r\n      if (vendorId && vendorId !== 'null') {\r\n        if (vendorMap.has(vendorId)) {\r\n          // Add PO to existing vendor\r\n          vendorMap.get(vendorId).purchaseOrders.push(po);\r\n        } else {\r\n          // If vendor with valid name doesn't exist, create a placeholder\r\n          const uniqueKey = `${vendorId}_${po.POID || po.id}`;\r\n          \r\n          vendorMap.set(uniqueKey, {\r\n            id: vendorId,\r\n            name: `Vendor ${vendorId}`,\r\n            email: 'unknown@vendor.system',\r\n            phone: '+000-000-0000',\r\n            address: 'Unknown Address',\r\n            vendorType: 'unknown',\r\n            creditLimit: 0,\r\n            paymentTerms: 0,\r\n            lastPayment: 'No payments',\r\n            creditStatus: 'unknown',\r\n            billCount: 1,\r\n            avgPaymentDays: 0,\r\n            status: 'pending',\r\n            type: 'Unknown',\r\n            poId: po.id,\r\n            purchaseOrders: [po]\r\n          });\r\n        }\r\n      }\r\n    });\r\n  }\r\n  \r\n  // Convert the map back to an array and filter to only include vendors with names\r\n  const allVendors = Array.from(vendorMap.values());\r\n  const vendorsWithNames = allVendors.filter(vendor => \r\n    vendor.name && vendor.name.trim() !== '' && vendor.name !== 'null'\r\n  );\r\n  \r\n  return vendorsWithNames;\r\n};\r\n\r\nexport const createVendorPOMapping = (purchaseOrders, vendors) => {\r\n  console.log('Starting createVendorPOMapping function');\r\n  console.log('Input vendors:', vendors);\r\n  console.log('Input purchaseOrders:', purchaseOrders);\r\n  \r\n  const vendorPOMap = new Map();\r\n  \r\n  // Only initialize vendors with valid names\r\n  if (vendors && vendors.data && Array.isArray(vendors.data)) {\r\n    console.log(`Processing ${vendors.data.length} vendors`);\r\n    \r\n    let validVendorCount = 0;\r\n    let invalidVendorCount = 0;\r\n    \r\n    vendors.data.forEach(vendor => {\r\n      // Check if vendor has a valid name (not null, undefined, or empty)\r\n      if (vendor.name && vendor.name.trim() !== '') {\r\n        vendorPOMap.set(vendor.id, {\r\n          vendor,\r\n          purchaseOrders: []\r\n        });\r\n        validVendorCount++;\r\n        console.log(`Added vendor: ID=${vendor.id}, Name=${vendor.name}`);\r\n      } else {\r\n        invalidVendorCount++;\r\n        console.log(`Skipped vendor with invalid name: ID=${vendor.id}, Name=${vendor.name}`);\r\n      }\r\n    });\r\n    \r\n    console.log(`Valid vendors added: ${validVendorCount}`);\r\n    console.log(`Invalid vendors skipped: ${invalidVendorCount}`);\r\n  } else {\r\n    console.warn('No valid vendors data found');\r\n  }\r\n  \r\n  // Process purchase orders and assign them to vendors with valid names\r\n  if (purchaseOrders && purchaseOrders.data && Array.isArray(purchaseOrders.data)) {\r\n    console.log(`Processing ${purchaseOrders.data.length} purchase orders`);\r\n    \r\n    let assignedPOCount = 0;\r\n    let skippedPOCount = 0;\r\n    \r\n    purchaseOrders.data.forEach(po => {\r\n      // Only process POs with a valid vendor_Id that maps to a vendor with a name\r\n      if (po.vendor_Id && vendorPOMap.has(po.vendor_Id)) {\r\n        vendorPOMap.get(po.vendor_Id).purchaseOrders.push(po);\r\n        assignedPOCount++;\r\n        console.log(`Assigned PO ${po.id || po.POID} to vendor ${po.vendor_Id}`);\r\n      } else {\r\n        skippedPOCount++;\r\n        console.log(`Skipped PO ${po.id || po.POID}, vendor_Id=${po.vendor_Id} (not found in valid vendors)`);\r\n      }\r\n    });\r\n    \r\n    console.log(`POs assigned to vendors: ${assignedPOCount}`);\r\n    console.log(`POs skipped: ${skippedPOCount}`);\r\n  } else {\r\n    console.warn('No valid purchase orders data found');\r\n  }\r\n  \r\n  // Convert the map to an array of vendor-PO pairs\r\n  const result = Array.from(vendorPOMap.values());\r\n  console.log(`\\nFinal result: ${result.length} vendor entries with their purchase orders`);\r\n  \r\n  return result;\r\n};\r\n\r\nexport const calculateAPSummary = (vendors, purchaseOrders) => {\r\n  console.log(\"Starting AP Summary calculation...\");\r\n  \r\n  // Get all vendors with their purchase orders (including applied ones)\r\n  const allVendorsWithPOs = combineVendorsWithPurchaseOrders(vendors, purchaseOrders.data);\r\n  console.log(`Total vendors: ${allVendorsWithPOs.length}`);\r\n  \r\n  // Calculate total amounts from purchase orders\r\n  console.log(\"Calculating total AP from purchase orders...\");\r\n  let totalAP = 0;\r\n  let totalOverdue = 0;\r\n  let vendorsWithBalance = 0;\r\n  \r\n  allVendorsWithPOs.forEach(vendor => {\r\n    console.log(`Processing vendor: ${vendor.name || 'Unknown Vendor'}`);\r\n    \r\n    // Calculate vendor's pending amount (only from pending items using quantity × unit price)\r\n    const vendorPending = vendor.purchaseOrders.reduce((sum, po) => {\r\n      const overallStatus = getPOOverallStatus(po);\r\n      \r\n      if (overallStatus === 'applied') {\r\n        // Skip fully applied POs\r\n        return sum;\r\n      } else if (overallStatus === 'partial') {\r\n        // For partial POs, only calculate pending items using quantity × unit price\r\n        const pendingItemsTotal = po.purchaseOrderItems.reduce((itemSum, item) => {\r\n          if (item.status !== 'applied') {\r\n            const itemTotal = (item.quantity || 0) * (item.pricePerUnit || 0);\r\n            console.log(`PO ${po.POID || po.id} - pending item: ${item.quantity} × ${item.pricePerUnit} = ${itemTotal}`);\r\n            return itemSum + itemTotal;\r\n          }\r\n          return itemSum;\r\n        }, 0);\r\n        console.log(`PO ${po.POID || po.id} (partial) - pending items total: ${pendingItemsTotal}`);\r\n        return sum + pendingItemsTotal;\r\n      } else {\r\n        // For fully pending POs, calculate all items using quantity × unit price\r\n        const poTotal = po.purchaseOrderItems.reduce((poSum, item) => {\r\n          const itemTotal = (item.quantity || 0) * (item.pricePerUnit || 0);\r\n          console.log(`PO ${po.POID || po.id} - pending item: ${item.quantity} × ${item.pricePerUnit} = ${itemTotal}`);\r\n          return poSum + itemTotal;\r\n        }, 0);\r\n        console.log(`PO ${po.POID || po.id} (${overallStatus}) - full PO total: ${poTotal}`);\r\n        return sum + poTotal;\r\n      }\r\n    }, 0);\r\n    \r\n    console.log(`Vendor ${vendor.name} pending amount: ${vendorPending}`);\r\n    \r\n    // Add to total AP (which represents total pending)\r\n    totalAP += vendorPending;\r\n    \r\n    // For overdue calculation, use a percentage of pending orders\r\n    const overdueAmount = vendorPending * 0.1; // Example: 10% of pending is overdue\r\n    totalOverdue += overdueAmount;\r\n    \r\n    if (vendorPending > 0) {\r\n      vendorsWithBalance++;\r\n    }\r\n  });\r\n  \r\n  console.log(`Total A/P (pending amounts): ${totalAP}`);\r\n  console.log(`Total overdue: ${totalOverdue}`);\r\n  console.log(`Vendors with pending balance: ${vendorsWithBalance}`);\r\n\r\n  // Calculate average days outstanding from ALL purchase orders\r\n  console.log(\"Calculating average days outstanding...\");\r\n  let totalDaysOutstanding = 0;\r\n  let poCount = 0;\r\n  \r\n  allVendorsWithPOs.forEach(vendor => {\r\n    vendor.purchaseOrders.forEach(po => {\r\n      console.log(`Processing PO: ${po.POID || po.id}`);\r\n      const overallStatus = getPOOverallStatus(po);\r\n      console.log(`Overall status: ${overallStatus}`)\r\n      // Calculate days based on overall status\r\n      let days = 0;\r\n      switch(overallStatus) {\r\n        case 'pending':\r\n          days = 5;\r\n          break;\r\n        case 'Processing':\r\n          days = 10;\r\n          break;\r\n        case 'Shipped':\r\n          days = 20;\r\n          break;\r\n        case 'Delivered':\r\n          days = 30;\r\n          break;\r\n        case 'applied':\r\n          days = 0; // Applied orders don't contribute to days outstanding\r\n          break;\r\n        case 'partial':\r\n          days = 3; // Partially applied orders have fewer outstanding days\r\n          break;\r\n        default:\r\n          days = 15;\r\n      }\r\n      \r\n      console.log(`Adding ${days} days for PO ${po.POID || po.id} with status ${overallStatus}`);\r\n      totalDaysOutstanding += days;\r\n      if (days > 0) poCount++; // Only count POs that contribute to days outstanding\r\n    });\r\n  });\r\n  \r\n  const avgDaysOutstanding = poCount > 0 ? Math.round(totalDaysOutstanding / poCount) : 0;\r\n  console.log(`Average days outstanding: ${avgDaysOutstanding}`);\r\n\r\n  console.log(\"AP Summary calculation completed\");\r\n  \r\n  return {\r\n    totalAP,\r\n    totalOverdue,\r\n    vendorsWithBalance,\r\n    avgDaysOutstanding\r\n  };\r\n};\r\n\r\nexport const getProductDetails = (productId) => {\r\n  if (!productId) return { name: 'Unknown Product', description: '', price: 0 };\r\n  \r\n  const product = (window.productsData || []).find(p => \r\n    p.id === productId || p.id === String(productId)\r\n  );\r\n  \r\n  if (product) {\r\n    return {\r\n      name: product.name || 'Unknown Product',\r\n      description: product.description || '',\r\n      price: product.price || 0,\r\n      costPrice: product.costPrice || 0,\r\n      quantity: product.quantity || 0\r\n    };\r\n  }\r\n  \r\n  return { name: `Product #${productId}`, description: '', price: 0 };\r\n};\r\n\r\nexport const getVendorName = (vendorId, vendorsData) => {\r\n  if (!vendorId || vendorId === 'null') return 'Unknown Vendor';\r\n  const vendor = vendorsData.find(v => v.id === vendorId);\r\n  return vendor ? vendor.name : 'Unknown Vendor';\r\n};\r\n\r\nexport const getCreditStatusColor = (status) => {\r\n  switch (status) {\r\n    case 'excellent': return 'bg-green-100 text-green-800';\r\n    case 'good': return 'bg-blue-100 text-blue-800';\r\n    case 'watch': return 'bg-yellow-100 text-yellow-800';\r\n    case 'hold': return 'bg-red-100 text-red-800';\r\n    case 'unknown': return 'bg-gray-100 text-gray-800';\r\n    default: return 'bg-gray-100 text-gray-800';\r\n  }\r\n};\r\n\r\nexport const getPOStatusColor = (status) => {\r\n  switch (status) {\r\n    case 'applied': return 'bg-green-100 text-green-800';\r\n    case 'pending': return 'bg-yellow-100 text-yellow-800';\r\n    case 'cancelled': return 'bg-red-100 text-red-800';\r\n    case 'partial': return 'bg-blue-100 text-blue-800';\r\n    default: return 'bg-gray-100 text-gray-800';\r\n  }\r\n};\r\n\r\nexport const getPOOverallStatus = (purchaseOrder) => {\r\n  if (!purchaseOrder.purchaseOrderItems || purchaseOrder.purchaseOrderItems.length === 0) {\r\n    return purchaseOrder.status || 'pending';\r\n  }\r\n  \r\n  // Check if all items are applied\r\n  const allItemsApplied = purchaseOrder.purchaseOrderItems.every(item => \r\n    item.status === 'applied'\r\n  );\r\n  \r\n  if (allItemsApplied) {\r\n    return 'applied';\r\n  }\r\n  \r\n  // Check if any items are applied (mixed status)\r\n  const someItemsApplied = purchaseOrder.purchaseOrderItems.some(item => \r\n    item.status === 'applied'\r\n  );\r\n  \r\n  if (someItemsApplied) {\r\n    return 'partial'; // You can create a new status for partially applied POs\r\n  }\r\n  \r\n  // Default to the PO level status or pending\r\n  return purchaseOrder.status || 'pending';\r\n};\r\n\r\nexport const formatCurrency = (amount) => {\r\n  return new Intl.NumberFormat('en-PK', {\r\n    style: 'currency',\r\n    currency: 'PKR',\r\n    minimumFractionDigits: 0,\r\n    maximumFractionDigits: 0\r\n  }).format(amount);\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}