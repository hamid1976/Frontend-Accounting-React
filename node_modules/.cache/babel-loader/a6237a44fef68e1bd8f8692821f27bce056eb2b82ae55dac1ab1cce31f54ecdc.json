{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Logic-Unit\\\\my-account\\\\src\\\\components\\\\AccountsReceivable\\\\RecordPaymentModal.jsx\",\n  _s = $RefreshSig$();\n// import { useState, useEffect } from 'react';\n// import { Modal, DatePicker, Input, Select, Button, message } from 'antd';\n// import { formatCurrency } from './AccountsReceivableUtils/formatters';\n\n// // Properly destructure all needed components from Select\n// const { Option, OptGroup } = Select;\n\n// const RecordPaymentModal = ({ invoiceId, amount, onClose, onSubmit }) => {\n//   console.log('RecordPaymentModal props:', { invoiceId, amount, onClose, onSubmit });\n//   const [date, setDate] = useState(null);  \n//   const [enteredAmount, setEnteredAmount] = useState('');\n//   const [method, setMethod] = useState('');\n//   const [account, setAccount] = useState('');\n//   const [memo, setMemo] = useState('');\n//   const [accounts, setAccounts] = useState([]);\n//   const [loading, setLoading] = useState(false);\n//   const [showConfirmation, setShowConfirmation] = useState(false);\n\n//   useEffect(() => {\n//     setEnteredAmount(amount.toString());\n//   }, [amount]);\n\n//   // Fetch accounts as before\n//   useEffect(() => {\n//     const fetchAccounts = async () => {\n//       try {\n//         const response = await fetch('http://localhost:8080/api/accounts');\n//         const data = await response.json();\n\n//         // Only asset accounts\n//         const assetAccounts = data.filter(acct => acct.type === 'assets');\n\n//         // Build parent-child map\n//         const accountMap = {};\n//         assetAccounts.forEach(acct => accountMap[acct.id] = { ...acct, children: [] });\n\n//         assetAccounts.forEach(acct => {\n//           if (acct.parentId && accountMap[acct.parentId]) {\n//             accountMap[acct.parentId].children.push(accountMap[acct.id]);\n//           }\n//         });\n\n//         // Top-level accounts\n//         const tree = assetAccounts.filter(acct => !acct.parentId || !accountMap[acct.parentId]);\n//         setAccounts(tree);\n//       } catch (err) {\n//         console.error('Failed to fetch accounts:', err);\n//       }\n//     };\n\n//     fetchAccounts();\n//   }, []);\n\n//   const handleSubmit = async () => {\n//     if (!date || !enteredAmount || !method || !account) return;\n\n//     // Show confirmation modal instead of directly submitting\n//     setShowConfirmation(true);\n//   };\n\n//   const confirmPayment = async () => {\n//     setLoading(true);\n//     setShowConfirmation(false);\n\n//     try {\n//       const paymentAmount = parseFloat(enteredAmount);\n//       const isFullPayment = paymentAmount >= amount;\n\n//       // Create payment data object\n//       const paymentData = {\n//         id: Date.now(), // Generate a unique ID\n//         invoiceId,\n//         date: date.format('YYYY-MM-DD'),\n//         amount: paymentAmount,\n//         paymentMethod: method,\n//         accountId: account,\n//         memo,\n//         status: isFullPayment ? 'completed' : 'partial',\n//         createdAt: new Date().toISOString()\n//       };\n\n//       // Save to localStorage (temporary solution)\n//       const existingPayments = JSON.parse(localStorage.getItem('payments') || '[]');\n//       const updatedPayments = [...existingPayments, paymentData];\n//       localStorage.setItem('payments', JSON.stringify(updatedPayments));\n\n//       // Also update the order status in localStorage\n//       const existingOrders = JSON.parse(localStorage.getItem('orders') || '[]');\n//       const orderIndex = existingOrders.findIndex(order => \n//         order.orderId === invoiceId || order.id === invoiceId\n//       );\n\n//       if (orderIndex !== -1) {\n//         const updatedOrder = { ...existingOrders[orderIndex] };\n\n//         // Update payment status based on amount paid\n//         if (isFullPayment) {\n//           updatedOrder.paid = true;\n//           updatedOrder.paymentStatus = 'paid';\n//         } else {\n//           updatedOrder.paid = false;\n//           updatedOrder.paymentStatus = 'partial';\n//           // Calculate remaining amount\n//           updatedOrder.remainingAmount = (updatedOrder.total || updatedOrder.amount) - paymentAmount;\n//         }\n\n//         updatedOrder.paymentDate = paymentData.date;\n//         updatedOrder.lastPaymentAmount = paymentAmount;\n\n//         existingOrders[orderIndex] = updatedOrder;\n//         localStorage.setItem('orders', JSON.stringify(existingOrders));\n//       }\n\n//       message.success(isFullPayment ? 'Payment completed successfully!' : 'Partial payment recorded successfully!');\n\n//       // Call the onSubmit callback with the payment data and full payment status\n//       onSubmit(date, paymentAmount, method, account, memo, paymentData, isFullPayment);\n\n//       onClose();\n//     } catch (error) {\n//       console.error('Error recording payment:', error);\n//       message.error('Failed to record payment. Please try again.');\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const cancelPayment = () => {\n//     setShowConfirmation(false);\n//   };\n\n//   // Calculate if this is a full payment\n//   const isFullPayment = parseFloat(enteredAmount) >= amount;\n\n//   return (\n//     <>\n//       <Modal\n//         title={`Record Payment for Invoice ${invoiceId}`}\n//         open={true}\n//         onCancel={onClose}\n//         footer={[\n//           <Button key=\"cancel\" onClick={onClose}>\n//             Close\n//           </Button>\n//         ]}\n//       >\n//         <div className=\"space-y-4\">\n//           <div>\n//             <label className=\"text-gray-700\">Date</label>\n//             <DatePicker \n//               className=\"w-full\"\n//               value={date}\n//               onChange={(val) => setDate(val)}\n//             />\n//           </div>\n//           <div>\n//             <label className=\"text-gray-700\">Amount</label>\n//             <Input\n//               value={enteredAmount} \n//               onChange={(e) => setEnteredAmount(e.target.value)}\n//               prefix={<span className=\"text-gray-500\">Rs</span>}\n//             />\n//             <div className=\"text-sm text-gray-500\">\n//               Invoice amount: {formatCurrency(amount)} <br />\n//               Remaining amount: {formatCurrency(amount - (parseFloat(enteredAmount) || 0))}\n//               {isFullPayment && (\n//                 <div className=\"text-green-600 font-semibold mt-1\">\n//                   This payment will complete the invoice.\n//                 </div>\n//               )}\n//             </div>\n//           </div>\n\n//           <div>\n//             <label className=\"text-gray-700\">Payment Method</label>\n//             <Select value={method} onChange={setMethod} className=\"w-full\">\n//               <Option value=\"cash\">Cash</Option>\n//               <Option value=\"check\">Check</Option>\n//               <Option value=\"eft\">Bank/Electronic Funds</Option>\n//               <Option value=\"credit\">Credit Card</Option> \n//             </Select>\n//           </div>\n//           <div>\n//             <label className=\"text-gray-700\">Deposit Account</label>\n//             <Select\n//               value={account}\n//               onChange={setAccount}\n//               showSearch\n//               filterOption={(input, option) =>\n//                 (option?.children ?? '').toLowerCase().includes(input.toLowerCase())\n//               }\n//               className=\"w-full\"\n//             >\n//               {accounts.map(parent =>\n//                 parent.children.length > 0 ? (\n//                   <OptGroup key={parent.id} label={`${parent.code} - ${parent.name}`}>\n//                     {parent.children.map(child => (\n//                       <Option key={child.id} value={child.id}>\n//                         {child.code} - {child.name}\n//                       </Option>\n//                     ))}\n//                   </OptGroup>\n//                 ) : (\n//                   <Option key={parent.id} value={parent.id}>\n//                     {parent.code} - {parent.name}\n//                   </Option>\n//                 )\n//               )}\n//             </Select>\n//           </div>\n//           <div>\n//             <label className=\"text-gray-700\">Memo</label>\n//             <Input.TextArea value={memo} onChange={(e) => setMemo(e.target.value)} />\n//           </div>\n\n//           <Button \n//             type=\"primary\"\n//             className=\"mt-6\"\n//             disabled={!date || !enteredAmount || !method || !account}\n//             onClick={handleSubmit}\n//             loading={loading}\n//           >\n//             {isFullPayment ? 'Complete Payment' : 'Record Payment'}\n//           </Button>\n//         </div>\n//       </Modal>\n\n//       {/* Confirmation Modal */}\n//       <Modal\n//         title={isFullPayment ? \"Complete Payment\" : \"Record Payment\"}\n//         open={showConfirmation}\n//         onOk={confirmPayment}\n//         onCancel={cancelPayment}\n//         okText={isFullPayment ? \"Complete Payment\" : \"Record Payment\"}\n//         cancelText=\"Cancel\"\n//       >\n//         <div className=\"space-y-4\">\n//           <p>Are you sure you want to {isFullPayment ? 'complete' : 'record'} this payment?</p>\n//           <div className=\"bg-gray-50 p-3 rounded\">\n//             <p><strong>Invoice:</strong> #{invoiceId}</p>\n//             <p><strong>Amount:</strong> {formatCurrency(parseFloat(enteredAmount))}</p>\n//             <p><strong>Method:</strong> {method}</p>\n//             <p><strong>Date:</strong> {date ? date.format('YYYY-MM-DD') : 'N/A'}</p>\n//             {isFullPayment && (\n//               <p className=\"text-green-600 font-semibold\">\n//                 This payment will mark the invoice as fully paid.\n//               </p>\n//             )}\n//           </div>\n//           <p className=\"text-sm text-gray-500\">This action cannot be undone.</p>\n//         </div>\n//       </Modal>\n//     </>\n//   );\n// };\n\n// export default RecordPaymentModal;\n\n// import React, { useState, useEffect } from 'react';\n// import { X, Calendar, DollarSign, CreditCard, FileText, AlertCircle } from 'lucide-react';\n// import { formatCurrency } from './AccountsReceivableUtils/formatters';\n\n// const RecordPaymentModal = ({ invoiceId, amount, onClose, onSubmit, onPaymentComplete }) => {\n//   const [formData, setFormData] = useState({\n//     date: new Date().toISOString().split('T')[0],\n//     amount: amount?.toString() || '',\n//     method: '',\n//     account: '',\n//     memo: ''\n//   });\n\n//   const [accounts, setAccounts] = useState([]);\n//   const [loading, setLoading] = useState(false);\n//   const [errors, setErrors] = useState({});\n\n//   // Fetch accounts on mount\n//   useEffect(() => {\n//     fetchAccounts();\n//   }, []);\n\n//   // Set initial amount\n//   useEffect(() => {\n//     if (amount) {\n//       setFormData(prev => ({ ...prev, amount: amount.toString() }));\n//     }\n//   }, [amount]);\n\n//   const fetchAccounts = async () => {\n//     try {\n//       const response = await fetch('http://localhost:8080/api/accounts');\n//       const data = await response.json();\n\n//       // Filter only asset accounts that can receive payments\n//       const paymentAccounts = data.filter(acct => \n//         acct.type === 'assets' && \n//         acct.category === 'account' &&\n//         (acct.name.toLowerCase().includes('bank') || \n//          acct.name.toLowerCase().includes('cash') ||\n//          acct.name.toLowerCase().includes('checking') ||\n//          acct.name.toLowerCase().includes('savings'))\n//       );\n\n//       setAccounts(paymentAccounts);\n//     } catch (err) {\n//       console.error('Failed to fetch accounts:', err);\n//     }\n//   };\n\n//   const handleChange = (field, value) => {\n//     setFormData(prev => ({ ...prev, [field]: value }));\n//     // Clear error for this field when user starts typing\n//     if (errors[field]) {\n//       setErrors(prev => ({ ...prev, [field]: '' }));\n//     }\n//   };\n\n//   const validateForm = () => {\n//     const newErrors = {};\n\n//     if (!formData.date) {\n//       newErrors.date = 'Payment date is required';\n//     }\n\n//     if (!formData.amount || parseFloat(formData.amount) <= 0) {\n//       newErrors.amount = 'Valid payment amount is required';\n//     }\n\n//     if (!formData.method) {\n//       newErrors.method = 'Payment method is required';\n//     }\n\n//     if (!formData.account) {\n//       newErrors.account = 'Deposit account is required';\n//     }\n\n//     setErrors(newErrors);\n//     return Object.keys(newErrors).length === 0;\n//   };\n\n//   const handleSubmit = async () => {\n//     if (!validateForm()) return;\n\n//     setLoading(true);\n\n//     try {\n//       const paymentAmount = parseFloat(formData.amount);\n//       const remainingAmount = amount - paymentAmount;\n//       const isFullPayment = remainingAmount <= 0;\n//       const paymentStatus = isFullPayment ? 'paid' : 'partial';\n\n//       // Create payment record\n//       const paymentData = {\n//         id: `PAY-${Date.now()}`,\n//         invoiceId,\n//         orderId: invoiceId,\n//         date: formData.date,\n//         amount: paymentAmount,\n//         paymentMethod: formData.method,\n//         accountId: formData.account,\n//         accountName: accounts.find(a => a.id === formData.account)?.name || 'Unknown Account',\n//         memo: formData.memo,\n//         status: paymentStatus,\n//         remainingAmount: Math.max(0, remainingAmount),\n//         createdAt: new Date().toISOString(),\n//         createdBy: 'current_user' // Replace with actual user\n//       };\n\n//       // Save payment to localStorage\n//       const existingPayments = JSON.parse(localStorage.getItem('payments') || '[]');\n//       const updatedPayments = [...existingPayments, paymentData];\n//       localStorage.setItem('payments', JSON.stringify(updatedPayments));\n\n//       // Update the invoice/order status\n//       const existingOrders = JSON.parse(localStorage.getItem('orders') || '[]');\n//       const orderIndex = existingOrders.findIndex(order => \n//         order.orderId === invoiceId || order.id === invoiceId\n//       );\n\n//       if (orderIndex !== -1) {\n//         existingOrders[orderIndex] = {\n//           ...existingOrders[orderIndex],\n//           paid: isFullPayment,\n//           paymentStatus: paymentStatus,\n//           lastPaymentDate: formData.date,\n//           lastPaymentAmount: paymentAmount,\n//           remainingAmount: Math.max(0, remainingAmount),\n//           paymentHistory: [\n//             ...(existingOrders[orderIndex].paymentHistory || []),\n//             paymentData.id\n//           ]\n//         };\n\n//         localStorage.setItem('orders', JSON.stringify(existingOrders));\n//       }\n\n//       // Call the callback with payment details\n//       if (onSubmit) {\n//         onSubmit(paymentData, isFullPayment);\n//       }\n\n//       // Trigger any additional completion actions\n//       if (onPaymentComplete) {\n//         onPaymentComplete(paymentData, isFullPayment);\n//       }\n\n//       // Show success message and close\n//       const message = isFullPayment \n//         ? 'Payment recorded successfully. Invoice is now fully paid.'\n//         : `Partial payment of ${formatCurrency(paymentAmount)} recorded. Remaining balance: ${formatCurrency(remainingAmount)}`;\n\n//       // You can show this message using a toast notification if available\n//       console.log(message);\n\n//       onClose();\n//     } catch (error) {\n//       console.error('Error recording payment:', error);\n//       setErrors({ general: 'Failed to record payment. Please try again.' });\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const paymentAmount = parseFloat(formData.amount) || 0;\n//   const remainingAmount = amount - paymentAmount;\n//   const isFullPayment = paymentAmount >= amount;\n\n//   return (\n//     <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n//       <div className=\"bg-white rounded-xl shadow-2xl max-w-md w-full\">\n//         {/* Header */}\n//         <div className=\"px-6 py-4 border-b border-gray-200\">\n//           <div className=\"flex items-center justify-between\">\n//             <h2 className=\"text-xl font-semibold text-gray-900\">\n//               Record a payment for this invoice\n//             </h2>\n//             <button\n//               onClick={onClose}\n//               className=\"text-gray-400 hover:text-gray-600 transition-colors\"\n//             >\n//               <X size={24} />\n//             </button>\n//           </div>\n//         </div>\n\n//         {/* Form Body */}\n//         <div className=\"px-6 py-4 space-y-5\">\n//           {errors.general && (\n//             <div className=\"p-3 bg-red-50 border border-red-200 rounded-lg flex items-start gap-2\">\n//               <AlertCircle size={20} className=\"text-red-600 flex-shrink-0 mt-0.5\" />\n//               <span className=\"text-sm text-red-700\">{errors.general}</span>\n//             </div>\n//           )}\n\n//           {/* Date Field */}\n//           <div>\n//             <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\">\n//               <Calendar size={16} />\n//               Date\n//             </label>\n//             <input\n//               type=\"date\"\n//               value={formData.date}\n//               onChange={(e) => handleChange('date', e.target.value)}\n//               className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\n//                 errors.date ? 'border-red-500' : 'border-gray-300'\n//               }`}\n//             />\n//             {errors.date && <span className=\"text-xs text-red-600 mt-1\">{errors.date}</span>}\n//           </div>\n\n//           {/* Amount Field */}\n//           <div>\n//             <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\">\n//               <DollarSign size={16} />\n//               Amount\n//             </label>\n//             <div className=\"relative\">\n//               <span className=\"absolute left-3 top-1/2 -translate-y-1/2 text-gray-500 font-medium\">\n//                 Rs\n//               </span>\n//               <input\n//                 type=\"number\"\n//                 step=\"0.01\"\n//                 value={formData.amount}\n//                 onChange={(e) => handleChange('amount', e.target.value)}\n//                 className={`w-full pl-10 pr-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\n//                   errors.amount ? 'border-red-500' : 'border-gray-300'\n//                 }`}\n//                 placeholder=\"0.00\"\n//               />\n//             </div>\n//             {errors.amount && <span className=\"text-xs text-red-600 mt-1\">{errors.amount}</span>}\n\n//             {paymentAmount > 0 && (\n//               <div className=\"mt-2 text-sm\">\n//                 {isFullPayment ? (\n//                   <span className=\"text-green-600 font-medium\">Invoice will be fully paid</span>\n//                 ) : (\n//                   <span className=\"text-orange-600\">\n//                     Partial payment - Remaining: {formatCurrency(remainingAmount)}\n//                   </span>\n//                 )}\n//               </div>\n//             )}\n//           </div>\n\n//           {/* Payment Method */}\n//           <div>\n//             <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\">\n//               <CreditCard size={16} />\n//               Method\n//             </label>\n//             <select\n//               value={formData.method}\n//               onChange={(e) => handleChange('method', e.target.value)}\n//               className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\n//                 errors.method ? 'border-red-500' : 'border-gray-300'\n//               }`}\n//             >\n//               <option value=\"\">Select a payment method...</option>\n//               <option value=\"cash\">Cash</option>\n//               <option value=\"check\">Check</option>\n//               <option value=\"bank_transfer\">Bank Transfer</option>\n//               <option value=\"credit_card\">Credit Card</option>\n//               <option value=\"debit_card\">Debit Card</option>\n//               <option value=\"online\">Online Payment</option>\n//             </select>\n//             {errors.method && <span className=\"text-xs text-red-600 mt-1\">{errors.method}</span>}\n//           </div>\n\n//           {/* Account */}\n//           <div>\n//             <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\">\n//               <FileText size={16} />\n//               Account\n//             </label>\n//             <select\n//               value={formData.account}\n//               onChange={(e) => handleChange('account', e.target.value)}\n//               className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\n//                 errors.account ? 'border-red-500' : 'border-gray-300'\n//               }`}\n//             >\n//               <option value=\"\">Select a payment account...</option>\n//               {accounts.map(account => (\n//                 <option key={account.id} value={account.id}>\n//                   {account.code} - {account.name}\n//                 </option>\n//               ))}\n//             </select>\n//             {errors.account && <span className=\"text-xs text-red-600 mt-1\">{errors.account}</span>}\n//             <p className=\"text-xs text-gray-500 mt-1\">\n//               Any account into which you deposit and withdraw funds from.{' '}\n//               <a href=\"#\" className=\"text-blue-600 hover:text-blue-700\">Learn more</a>\n//             </p>\n//           </div>\n\n//           {/* Memo */}\n//           <div>\n//             <label className=\"text-sm font-medium text-gray-700 mb-1 block\">\n//               Memo / notes\n//             </label>\n//             <textarea\n//               value={formData.memo}\n//               onChange={(e) => handleChange('memo', e.target.value)}\n//               rows={3}\n//               className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n//               placeholder=\"Add any additional notes...\"\n//             />\n//           </div>\n//         </div>\n\n//         {/* Footer */}\n//         <div className=\"px-6 py-4 border-t border-gray-200 flex items-center justify-end gap-3\">\n//           <button\n//             onClick={onClose}\n//             className=\"px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors\"\n//           >\n//             Cancel\n//           </button>\n//           <button\n//             onClick={handleSubmit}\n//             disabled={loading || !formData.amount || parseFloat(formData.amount) <= 0}\n//             className={`px-6 py-2 rounded-lg font-medium transition-colors ${\n//               loading || !formData.amount || parseFloat(formData.amount) <= 0\n//                 ? 'bg-gray-300 text-gray-500 cursor-not-allowed'\n//                 : 'bg-blue-600 text-white hover:bg-blue-700'\n//             }`}\n//           >\n//             {loading ? 'Processing...' : 'Submit'}\n//           </button>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default RecordPaymentModal;\n\nimport React, { useState, useEffect } from 'react';\nimport { X, Calendar, DollarSign, CreditCard, FileText, AlertCircle } from 'lucide-react';\nimport { formatCurrency } from './AccountsReceivableUtils/formatters';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RecordPaymentModal = ({\n  invoiceId,\n  amount,\n  onClose,\n  onSubmit,\n  onPaymentComplete\n}) => {\n  _s();\n  const [formData, setFormData] = useState({\n    date: new Date().toISOString().split('T')[0],\n    amount: (amount === null || amount === void 0 ? void 0 : amount.toString()) || '',\n    method: '',\n    account: '',\n    memo: ''\n  });\n  const [accounts, setAccounts] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [errors, setErrors] = useState({});\n\n  // Fetch accounts on mount\n  useEffect(() => {\n    fetchAccounts();\n  }, []);\n\n  // Set initial amount\n  useEffect(() => {\n    if (amount) {\n      setFormData(prev => ({\n        ...prev,\n        amount: amount.toString()\n      }));\n    }\n  }, [amount]);\n  const fetchAccounts = async () => {\n    try {\n      const response = await fetch('http://localhost:8080/api/accounts');\n      const data = await response.json();\n\n      // Filter only asset accounts (like the commented code)\n      const assetAccounts = data.filter(acct => acct.type === 'assets');\n\n      // Build parent-child map (like the commented code)\n      const accountMap = {};\n      assetAccounts.forEach(acct => accountMap[acct.id] = {\n        ...acct,\n        children: []\n      });\n      assetAccounts.forEach(acct => {\n        if (acct.parentId && accountMap[acct.parentId]) {\n          accountMap[acct.parentId].children.push(accountMap[acct.id]);\n        }\n      });\n\n      // Top-level accounts (like the commented code)\n      const tree = assetAccounts.filter(acct => !acct.parentId || !accountMap[acct.parentId]);\n      setAccounts(tree);\n    } catch (err) {\n      console.error('Failed to fetch accounts:', err);\n    }\n  };\n  const handleChange = (field, value) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n    // Clear error for this field when user starts typing\n    if (errors[field]) {\n      setErrors(prev => ({\n        ...prev,\n        [field]: ''\n      }));\n    }\n  };\n  const validateForm = () => {\n    const newErrors = {};\n    if (!formData.date) {\n      newErrors.date = 'Payment date is required';\n    }\n    if (!formData.amount || parseFloat(formData.amount) <= 0) {\n      newErrors.amount = 'Valid payment amount is required';\n    }\n    if (!formData.method) {\n      newErrors.method = 'Payment method is required';\n    }\n    if (!formData.account) {\n      newErrors.account = 'Deposit account is required';\n    }\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n  const handleSubmit = async () => {\n    if (!validateForm()) return;\n    setLoading(true);\n    try {\n      const paymentAmount = parseFloat(formData.amount);\n      const remainingAmount = amount - paymentAmount;\n      const isFullPayment = remainingAmount <= 0;\n      const paymentStatus = isFullPayment ? 'paid' : 'partial';\n\n      // Create payment record\n      const paymentData = {\n        id: `PAY-${Date.now()}`,\n        invoiceId,\n        orderId: invoiceId,\n        date: formData.date,\n        amount: paymentAmount,\n        paymentMethod: formData.method,\n        accountId: formData.account,\n        // Get account name from the hierarchical structure\n        accountName: getAccountNameById(formData.account, accounts) || 'Unknown Account',\n        memo: formData.memo,\n        status: paymentStatus,\n        remainingAmount: Math.max(0, remainingAmount),\n        createdAt: new Date().toISOString(),\n        createdBy: 'current_user' // Replace with actual user\n      };\n\n      // Save payment to localStorage\n      const existingPayments = JSON.parse(localStorage.getItem('payments') || '[]');\n      const updatedPayments = [...existingPayments, paymentData];\n      localStorage.setItem('payments', JSON.stringify(updatedPayments));\n\n      // Update the invoice/order status\n      const existingOrders = JSON.parse(localStorage.getItem('orders') || '[]');\n      const orderIndex = existingOrders.findIndex(order => order.orderId === invoiceId || order.id === invoiceId);\n      if (orderIndex !== -1) {\n        existingOrders[orderIndex] = {\n          ...existingOrders[orderIndex],\n          paid: isFullPayment,\n          paymentStatus: paymentStatus,\n          lastPaymentDate: formData.date,\n          lastPaymentAmount: paymentAmount,\n          remainingAmount: Math.max(0, remainingAmount),\n          paymentHistory: [...(existingOrders[orderIndex].paymentHistory || []), paymentData.id]\n        };\n        localStorage.setItem('orders', JSON.stringify(existingOrders));\n      }\n\n      // Call the callback with payment details\n      if (onSubmit) {\n        onSubmit(paymentData, isFullPayment);\n      }\n\n      // Trigger any additional completion actions\n      if (onPaymentComplete) {\n        onPaymentComplete(paymentData, isFullPayment);\n      }\n\n      // Show success message and close\n      const message = isFullPayment ? 'Payment recorded successfully. Invoice is now fully paid.' : `Partial payment of ${formatCurrency(paymentAmount)} recorded. Remaining balance: ${formatCurrency(remainingAmount)}`;\n\n      // You can show this message using a toast notification if available\n      console.log(message);\n      onClose();\n    } catch (error) {\n      console.error('Error recording payment:', error);\n      setErrors({\n        general: 'Failed to record payment. Please try again.'\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Helper function to find account name by ID in hierarchical structure\n  const getAccountNameById = (accountId, accountList) => {\n    for (const account of accountList) {\n      if (account.id === accountId) {\n        return account.name;\n      }\n      if (account.children && account.children.length > 0) {\n        const foundInChildren = getAccountNameById(accountId, account.children);\n        if (foundInChildren) return foundInChildren;\n      }\n    }\n    return null;\n  };\n\n  // Helper function to render account options recursively\n  const renderAccountOptions = (accountList, level = 0) => {\n    return accountList.map(account => /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: account.id,\n        children: ['-'.repeat(level * 2), \" \", account.code, \" - \", account.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 793,\n        columnNumber: 9\n      }, this), account.children && account.children.length > 0 && renderAccountOptions(account.children, level + 1)]\n    }, account.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 792,\n      columnNumber: 7\n    }, this));\n  };\n  const paymentAmount = parseFloat(formData.amount) || 0;\n  const remainingAmount = amount - paymentAmount;\n  const isFullPayment = paymentAmount >= amount;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-white rounded-xl shadow-2xl max-w-md w-full\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"px-6 py-4 border-b border-gray-200\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center justify-between\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"text-xl font-semibold text-gray-900\",\n            children: \"Record a payment for this invoice\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 813,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: onClose,\n            className: \"text-gray-400 hover:text-gray-600 transition-colors\",\n            children: /*#__PURE__*/_jsxDEV(X, {\n              size: 24\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 820,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 816,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 812,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 811,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"px-6 py-4 space-y-5\",\n        children: [errors.general && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"p-3 bg-red-50 border border-red-200 rounded-lg flex items-start gap-2\",\n          children: [/*#__PURE__*/_jsxDEV(AlertCircle, {\n            size: 20,\n            className: \"text-red-600 flex-shrink-0 mt-0.5\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 829,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-sm text-red-700\",\n            children: errors.general\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 830,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 828,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\",\n            children: [/*#__PURE__*/_jsxDEV(Calendar, {\n              size: 16\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 837,\n              columnNumber: 15\n            }, this), \"Date\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 836,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"date\",\n            value: formData.date,\n            onChange: e => handleChange('date', e.target.value),\n            className: `w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${errors.date ? 'border-red-500' : 'border-gray-300'}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 840,\n            columnNumber: 13\n          }, this), errors.date && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-xs text-red-600 mt-1\",\n            children: errors.date\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 848,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 835,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\",\n            children: [/*#__PURE__*/_jsxDEV(DollarSign, {\n              size: 16\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 854,\n              columnNumber: 15\n            }, this), \"Amount\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 853,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"relative\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"absolute left-3 top-1/2 -translate-y-1/2 text-gray-500 font-medium\",\n              children: \"Rs\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 858,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              step: \"0.01\",\n              value: formData.amount,\n              onChange: e => handleChange('amount', e.target.value),\n              className: `w-full pl-10 pr-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${errors.amount ? 'border-red-500' : 'border-gray-300'}`,\n              placeholder: \"0.00\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 861,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 857,\n            columnNumber: 13\n          }, this), errors.amount && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-xs text-red-600 mt-1\",\n            children: errors.amount\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 872,\n            columnNumber: 31\n          }, this), paymentAmount > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mt-2 text-sm\",\n            children: isFullPayment ? /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"text-green-600 font-medium\",\n              children: \"Invoice will be fully paid\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 877,\n              columnNumber: 19\n            }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"text-orange-600\",\n              children: [\"Partial payment - Remaining: \", formatCurrency(remainingAmount)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 879,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 875,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 852,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\",\n            children: [/*#__PURE__*/_jsxDEV(CreditCard, {\n              size: 16\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 890,\n              columnNumber: 15\n            }, this), \"Method\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 889,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: formData.method,\n            onChange: e => handleChange('method', e.target.value),\n            className: `w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${errors.method ? 'border-red-500' : 'border-gray-300'}`,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select a payment method...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 900,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"cash\",\n              children: \"Cash\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 901,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"check\",\n              children: \"Check\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 902,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"bank_transfer\",\n              children: \"Bank Transfer\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 903,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"credit_card\",\n              children: \"Credit Card\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 904,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"debit_card\",\n              children: \"Debit Card\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 905,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"online\",\n              children: \"Online Payment\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 906,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 893,\n            columnNumber: 13\n          }, this), errors.method && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-xs text-red-600 mt-1\",\n            children: errors.method\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 908,\n            columnNumber: 31\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 888,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\",\n            children: [/*#__PURE__*/_jsxDEV(FileText, {\n              size: 16\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 914,\n              columnNumber: 15\n            }, this), \"Account\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 913,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: formData.account,\n            onChange: e => handleChange('account', e.target.value),\n            className: `w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${errors.account ? 'border-red-500' : 'border-gray-300'}`,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select a payment account...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 924,\n              columnNumber: 15\n            }, this), renderAccountOptions(accounts)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 917,\n            columnNumber: 13\n          }, this), errors.account && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-xs text-red-600 mt-1\",\n            children: errors.account\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 927,\n            columnNumber: 32\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-xs text-gray-500 mt-1\",\n            children: [\"Any account into which you deposit and withdraw funds from.\", ' ', /*#__PURE__*/_jsxDEV(\"a\", {\n              href: \"#\",\n              className: \"text-blue-600 hover:text-blue-700\",\n              children: \"Learn more\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 930,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 928,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 912,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"text-sm font-medium text-gray-700 mb-1 block\",\n            children: \"Memo / notes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 936,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            value: formData.memo,\n            onChange: e => handleChange('memo', e.target.value),\n            rows: 3,\n            className: \"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\",\n            placeholder: \"Add any additional notes...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 939,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 935,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 826,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"px-6 py-4 border-t border-gray-200 flex items-center justify-end gap-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: onClose,\n          className: \"px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors\",\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 951,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSubmit,\n          disabled: loading || !formData.amount || parseFloat(formData.amount) <= 0,\n          className: `px-6 py-2 rounded-lg font-medium transition-colors ${loading || !formData.amount || parseFloat(formData.amount) <= 0 ? 'bg-gray-300 text-gray-500 cursor-not-allowed' : 'bg-blue-600 text-white hover:bg-blue-700'}`,\n          children: loading ? 'Processing...' : 'Submit'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 957,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 950,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 809,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 808,\n    columnNumber: 5\n  }, this);\n};\n_s(RecordPaymentModal, \"CXE+5qr6AmO5uMEA0es11m+UsWE=\");\n_c = RecordPaymentModal;\nexport default RecordPaymentModal;\nvar _c;\n$RefreshReg$(_c, \"RecordPaymentModal\");","map":{"version":3,"names":["React","useState","useEffect","X","Calendar","DollarSign","CreditCard","FileText","AlertCircle","formatCurrency","jsxDEV","_jsxDEV","RecordPaymentModal","invoiceId","amount","onClose","onSubmit","onPaymentComplete","_s","formData","setFormData","date","Date","toISOString","split","toString","method","account","memo","accounts","setAccounts","loading","setLoading","errors","setErrors","fetchAccounts","prev","response","fetch","data","json","assetAccounts","filter","acct","type","accountMap","forEach","id","children","parentId","push","tree","err","console","error","handleChange","field","value","validateForm","newErrors","parseFloat","Object","keys","length","handleSubmit","paymentAmount","remainingAmount","isFullPayment","paymentStatus","paymentData","now","orderId","paymentMethod","accountId","accountName","getAccountNameById","status","Math","max","createdAt","createdBy","existingPayments","JSON","parse","localStorage","getItem","updatedPayments","setItem","stringify","existingOrders","orderIndex","findIndex","order","paid","lastPaymentDate","lastPaymentAmount","paymentHistory","message","log","general","accountList","name","foundInChildren","renderAccountOptions","level","map","Fragment","repeat","code","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","size","onChange","e","target","step","placeholder","href","rows","disabled","_c","$RefreshReg$"],"sources":["C:/Users/Logic-Unit/my-account/src/components/AccountsReceivable/RecordPaymentModal.jsx"],"sourcesContent":["// import { useState, useEffect } from 'react';\r\n// import { Modal, DatePicker, Input, Select, Button, message } from 'antd';\r\n// import { formatCurrency } from './AccountsReceivableUtils/formatters';\r\n\r\n// // Properly destructure all needed components from Select\r\n// const { Option, OptGroup } = Select;\r\n\r\n// const RecordPaymentModal = ({ invoiceId, amount, onClose, onSubmit }) => {\r\n//   console.log('RecordPaymentModal props:', { invoiceId, amount, onClose, onSubmit });\r\n//   const [date, setDate] = useState(null);  \r\n//   const [enteredAmount, setEnteredAmount] = useState('');\r\n//   const [method, setMethod] = useState('');\r\n//   const [account, setAccount] = useState('');\r\n//   const [memo, setMemo] = useState('');\r\n//   const [accounts, setAccounts] = useState([]);\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [showConfirmation, setShowConfirmation] = useState(false);\r\n\r\n//   useEffect(() => {\r\n//     setEnteredAmount(amount.toString());\r\n//   }, [amount]);\r\n\r\n//   // Fetch accounts as before\r\n//   useEffect(() => {\r\n//     const fetchAccounts = async () => {\r\n//       try {\r\n//         const response = await fetch('http://localhost:8080/api/accounts');\r\n//         const data = await response.json();\r\n\r\n//         // Only asset accounts\r\n//         const assetAccounts = data.filter(acct => acct.type === 'assets');\r\n\r\n//         // Build parent-child map\r\n//         const accountMap = {};\r\n//         assetAccounts.forEach(acct => accountMap[acct.id] = { ...acct, children: [] });\r\n\r\n//         assetAccounts.forEach(acct => {\r\n//           if (acct.parentId && accountMap[acct.parentId]) {\r\n//             accountMap[acct.parentId].children.push(accountMap[acct.id]);\r\n//           }\r\n//         });\r\n\r\n//         // Top-level accounts\r\n//         const tree = assetAccounts.filter(acct => !acct.parentId || !accountMap[acct.parentId]);\r\n//         setAccounts(tree);\r\n//       } catch (err) {\r\n//         console.error('Failed to fetch accounts:', err);\r\n//       }\r\n//     };\r\n\r\n//     fetchAccounts();\r\n//   }, []);\r\n\r\n//   const handleSubmit = async () => {\r\n//     if (!date || !enteredAmount || !method || !account) return;\r\n    \r\n//     // Show confirmation modal instead of directly submitting\r\n//     setShowConfirmation(true);\r\n//   };\r\n\r\n//   const confirmPayment = async () => {\r\n//     setLoading(true);\r\n//     setShowConfirmation(false);\r\n    \r\n//     try {\r\n//       const paymentAmount = parseFloat(enteredAmount);\r\n//       const isFullPayment = paymentAmount >= amount;\r\n      \r\n//       // Create payment data object\r\n//       const paymentData = {\r\n//         id: Date.now(), // Generate a unique ID\r\n//         invoiceId,\r\n//         date: date.format('YYYY-MM-DD'),\r\n//         amount: paymentAmount,\r\n//         paymentMethod: method,\r\n//         accountId: account,\r\n//         memo,\r\n//         status: isFullPayment ? 'completed' : 'partial',\r\n//         createdAt: new Date().toISOString()\r\n//       };\r\n\r\n//       // Save to localStorage (temporary solution)\r\n//       const existingPayments = JSON.parse(localStorage.getItem('payments') || '[]');\r\n//       const updatedPayments = [...existingPayments, paymentData];\r\n//       localStorage.setItem('payments', JSON.stringify(updatedPayments));\r\n\r\n//       // Also update the order status in localStorage\r\n//       const existingOrders = JSON.parse(localStorage.getItem('orders') || '[]');\r\n//       const orderIndex = existingOrders.findIndex(order => \r\n//         order.orderId === invoiceId || order.id === invoiceId\r\n//       );\r\n      \r\n//       if (orderIndex !== -1) {\r\n//         const updatedOrder = { ...existingOrders[orderIndex] };\r\n        \r\n//         // Update payment status based on amount paid\r\n//         if (isFullPayment) {\r\n//           updatedOrder.paid = true;\r\n//           updatedOrder.paymentStatus = 'paid';\r\n//         } else {\r\n//           updatedOrder.paid = false;\r\n//           updatedOrder.paymentStatus = 'partial';\r\n//           // Calculate remaining amount\r\n//           updatedOrder.remainingAmount = (updatedOrder.total || updatedOrder.amount) - paymentAmount;\r\n//         }\r\n        \r\n//         updatedOrder.paymentDate = paymentData.date;\r\n//         updatedOrder.lastPaymentAmount = paymentAmount;\r\n        \r\n//         existingOrders[orderIndex] = updatedOrder;\r\n//         localStorage.setItem('orders', JSON.stringify(existingOrders));\r\n//       }\r\n\r\n//       message.success(isFullPayment ? 'Payment completed successfully!' : 'Partial payment recorded successfully!');\r\n      \r\n//       // Call the onSubmit callback with the payment data and full payment status\r\n//       onSubmit(date, paymentAmount, method, account, memo, paymentData, isFullPayment);\r\n      \r\n//       onClose();\r\n//     } catch (error) {\r\n//       console.error('Error recording payment:', error);\r\n//       message.error('Failed to record payment. Please try again.');\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   const cancelPayment = () => {\r\n//     setShowConfirmation(false);\r\n//   };\r\n\r\n//   // Calculate if this is a full payment\r\n//   const isFullPayment = parseFloat(enteredAmount) >= amount;\r\n\r\n//   return (\r\n//     <>\r\n//       <Modal\r\n//         title={`Record Payment for Invoice ${invoiceId}`}\r\n//         open={true}\r\n//         onCancel={onClose}\r\n//         footer={[\r\n//           <Button key=\"cancel\" onClick={onClose}>\r\n//             Close\r\n//           </Button>\r\n//         ]}\r\n//       >\r\n//         <div className=\"space-y-4\">\r\n//           <div>\r\n//             <label className=\"text-gray-700\">Date</label>\r\n//             <DatePicker \r\n//               className=\"w-full\"\r\n//               value={date}\r\n//               onChange={(val) => setDate(val)}\r\n//             />\r\n//           </div>\r\n//           <div>\r\n//             <label className=\"text-gray-700\">Amount</label>\r\n//             <Input\r\n//               value={enteredAmount} \r\n//               onChange={(e) => setEnteredAmount(e.target.value)}\r\n//               prefix={<span className=\"text-gray-500\">Rs</span>}\r\n//             />\r\n//             <div className=\"text-sm text-gray-500\">\r\n//               Invoice amount: {formatCurrency(amount)} <br />\r\n//               Remaining amount: {formatCurrency(amount - (parseFloat(enteredAmount) || 0))}\r\n//               {isFullPayment && (\r\n//                 <div className=\"text-green-600 font-semibold mt-1\">\r\n//                   This payment will complete the invoice.\r\n//                 </div>\r\n//               )}\r\n//             </div>\r\n//           </div>\r\n\r\n//           <div>\r\n//             <label className=\"text-gray-700\">Payment Method</label>\r\n//             <Select value={method} onChange={setMethod} className=\"w-full\">\r\n//               <Option value=\"cash\">Cash</Option>\r\n//               <Option value=\"check\">Check</Option>\r\n//               <Option value=\"eft\">Bank/Electronic Funds</Option>\r\n//               <Option value=\"credit\">Credit Card</Option> \r\n//             </Select>\r\n//           </div>\r\n//           <div>\r\n//             <label className=\"text-gray-700\">Deposit Account</label>\r\n//             <Select\r\n//               value={account}\r\n//               onChange={setAccount}\r\n//               showSearch\r\n//               filterOption={(input, option) =>\r\n//                 (option?.children ?? '').toLowerCase().includes(input.toLowerCase())\r\n//               }\r\n//               className=\"w-full\"\r\n//             >\r\n//               {accounts.map(parent =>\r\n//                 parent.children.length > 0 ? (\r\n//                   <OptGroup key={parent.id} label={`${parent.code} - ${parent.name}`}>\r\n//                     {parent.children.map(child => (\r\n//                       <Option key={child.id} value={child.id}>\r\n//                         {child.code} - {child.name}\r\n//                       </Option>\r\n//                     ))}\r\n//                   </OptGroup>\r\n//                 ) : (\r\n//                   <Option key={parent.id} value={parent.id}>\r\n//                     {parent.code} - {parent.name}\r\n//                   </Option>\r\n//                 )\r\n//               )}\r\n//             </Select>\r\n//           </div>\r\n//           <div>\r\n//             <label className=\"text-gray-700\">Memo</label>\r\n//             <Input.TextArea value={memo} onChange={(e) => setMemo(e.target.value)} />\r\n//           </div>\r\n          \r\n//           <Button \r\n//             type=\"primary\"\r\n//             className=\"mt-6\"\r\n//             disabled={!date || !enteredAmount || !method || !account}\r\n//             onClick={handleSubmit}\r\n//             loading={loading}\r\n//           >\r\n//             {isFullPayment ? 'Complete Payment' : 'Record Payment'}\r\n//           </Button>\r\n//         </div>\r\n//       </Modal>\r\n\r\n//       {/* Confirmation Modal */}\r\n//       <Modal\r\n//         title={isFullPayment ? \"Complete Payment\" : \"Record Payment\"}\r\n//         open={showConfirmation}\r\n//         onOk={confirmPayment}\r\n//         onCancel={cancelPayment}\r\n//         okText={isFullPayment ? \"Complete Payment\" : \"Record Payment\"}\r\n//         cancelText=\"Cancel\"\r\n//       >\r\n//         <div className=\"space-y-4\">\r\n//           <p>Are you sure you want to {isFullPayment ? 'complete' : 'record'} this payment?</p>\r\n//           <div className=\"bg-gray-50 p-3 rounded\">\r\n//             <p><strong>Invoice:</strong> #{invoiceId}</p>\r\n//             <p><strong>Amount:</strong> {formatCurrency(parseFloat(enteredAmount))}</p>\r\n//             <p><strong>Method:</strong> {method}</p>\r\n//             <p><strong>Date:</strong> {date ? date.format('YYYY-MM-DD') : 'N/A'}</p>\r\n//             {isFullPayment && (\r\n//               <p className=\"text-green-600 font-semibold\">\r\n//                 This payment will mark the invoice as fully paid.\r\n//               </p>\r\n//             )}\r\n//           </div>\r\n//           <p className=\"text-sm text-gray-500\">This action cannot be undone.</p>\r\n//         </div>\r\n//       </Modal>\r\n//     </>\r\n//   );\r\n// };\r\n\r\n// export default RecordPaymentModal;\r\n\r\n\r\n\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import { X, Calendar, DollarSign, CreditCard, FileText, AlertCircle } from 'lucide-react';\r\n// import { formatCurrency } from './AccountsReceivableUtils/formatters';\r\n\r\n// const RecordPaymentModal = ({ invoiceId, amount, onClose, onSubmit, onPaymentComplete }) => {\r\n//   const [formData, setFormData] = useState({\r\n//     date: new Date().toISOString().split('T')[0],\r\n//     amount: amount?.toString() || '',\r\n//     method: '',\r\n//     account: '',\r\n//     memo: ''\r\n//   });\r\n  \r\n//   const [accounts, setAccounts] = useState([]);\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [errors, setErrors] = useState({});\r\n\r\n//   // Fetch accounts on mount\r\n//   useEffect(() => {\r\n//     fetchAccounts();\r\n//   }, []);\r\n\r\n//   // Set initial amount\r\n//   useEffect(() => {\r\n//     if (amount) {\r\n//       setFormData(prev => ({ ...prev, amount: amount.toString() }));\r\n//     }\r\n//   }, [amount]);\r\n\r\n//   const fetchAccounts = async () => {\r\n//     try {\r\n//       const response = await fetch('http://localhost:8080/api/accounts');\r\n//       const data = await response.json();\r\n\r\n//       // Filter only asset accounts that can receive payments\r\n//       const paymentAccounts = data.filter(acct => \r\n//         acct.type === 'assets' && \r\n//         acct.category === 'account' &&\r\n//         (acct.name.toLowerCase().includes('bank') || \r\n//          acct.name.toLowerCase().includes('cash') ||\r\n//          acct.name.toLowerCase().includes('checking') ||\r\n//          acct.name.toLowerCase().includes('savings'))\r\n//       );\r\n\r\n//       setAccounts(paymentAccounts);\r\n//     } catch (err) {\r\n//       console.error('Failed to fetch accounts:', err);\r\n//     }\r\n//   };\r\n\r\n//   const handleChange = (field, value) => {\r\n//     setFormData(prev => ({ ...prev, [field]: value }));\r\n//     // Clear error for this field when user starts typing\r\n//     if (errors[field]) {\r\n//       setErrors(prev => ({ ...prev, [field]: '' }));\r\n//     }\r\n//   };\r\n\r\n//   const validateForm = () => {\r\n//     const newErrors = {};\r\n    \r\n//     if (!formData.date) {\r\n//       newErrors.date = 'Payment date is required';\r\n//     }\r\n    \r\n//     if (!formData.amount || parseFloat(formData.amount) <= 0) {\r\n//       newErrors.amount = 'Valid payment amount is required';\r\n//     }\r\n    \r\n//     if (!formData.method) {\r\n//       newErrors.method = 'Payment method is required';\r\n//     }\r\n    \r\n//     if (!formData.account) {\r\n//       newErrors.account = 'Deposit account is required';\r\n//     }\r\n\r\n//     setErrors(newErrors);\r\n//     return Object.keys(newErrors).length === 0;\r\n//   };\r\n\r\n//   const handleSubmit = async () => {\r\n//     if (!validateForm()) return;\r\n\r\n//     setLoading(true);\r\n    \r\n//     try {\r\n//       const paymentAmount = parseFloat(formData.amount);\r\n//       const remainingAmount = amount - paymentAmount;\r\n//       const isFullPayment = remainingAmount <= 0;\r\n//       const paymentStatus = isFullPayment ? 'paid' : 'partial';\r\n      \r\n//       // Create payment record\r\n//       const paymentData = {\r\n//         id: `PAY-${Date.now()}`,\r\n//         invoiceId,\r\n//         orderId: invoiceId,\r\n//         date: formData.date,\r\n//         amount: paymentAmount,\r\n//         paymentMethod: formData.method,\r\n//         accountId: formData.account,\r\n//         accountName: accounts.find(a => a.id === formData.account)?.name || 'Unknown Account',\r\n//         memo: formData.memo,\r\n//         status: paymentStatus,\r\n//         remainingAmount: Math.max(0, remainingAmount),\r\n//         createdAt: new Date().toISOString(),\r\n//         createdBy: 'current_user' // Replace with actual user\r\n//       };\r\n\r\n//       // Save payment to localStorage\r\n//       const existingPayments = JSON.parse(localStorage.getItem('payments') || '[]');\r\n//       const updatedPayments = [...existingPayments, paymentData];\r\n//       localStorage.setItem('payments', JSON.stringify(updatedPayments));\r\n\r\n//       // Update the invoice/order status\r\n//       const existingOrders = JSON.parse(localStorage.getItem('orders') || '[]');\r\n//       const orderIndex = existingOrders.findIndex(order => \r\n//         order.orderId === invoiceId || order.id === invoiceId\r\n//       );\r\n      \r\n//       if (orderIndex !== -1) {\r\n//         existingOrders[orderIndex] = {\r\n//           ...existingOrders[orderIndex],\r\n//           paid: isFullPayment,\r\n//           paymentStatus: paymentStatus,\r\n//           lastPaymentDate: formData.date,\r\n//           lastPaymentAmount: paymentAmount,\r\n//           remainingAmount: Math.max(0, remainingAmount),\r\n//           paymentHistory: [\r\n//             ...(existingOrders[orderIndex].paymentHistory || []),\r\n//             paymentData.id\r\n//           ]\r\n//         };\r\n        \r\n//         localStorage.setItem('orders', JSON.stringify(existingOrders));\r\n//       }\r\n\r\n//       // Call the callback with payment details\r\n//       if (onSubmit) {\r\n//         onSubmit(paymentData, isFullPayment);\r\n//       }\r\n      \r\n//       // Trigger any additional completion actions\r\n//       if (onPaymentComplete) {\r\n//         onPaymentComplete(paymentData, isFullPayment);\r\n//       }\r\n\r\n//       // Show success message and close\r\n//       const message = isFullPayment \r\n//         ? 'Payment recorded successfully. Invoice is now fully paid.'\r\n//         : `Partial payment of ${formatCurrency(paymentAmount)} recorded. Remaining balance: ${formatCurrency(remainingAmount)}`;\r\n      \r\n//       // You can show this message using a toast notification if available\r\n//       console.log(message);\r\n      \r\n//       onClose();\r\n//     } catch (error) {\r\n//       console.error('Error recording payment:', error);\r\n//       setErrors({ general: 'Failed to record payment. Please try again.' });\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   const paymentAmount = parseFloat(formData.amount) || 0;\r\n//   const remainingAmount = amount - paymentAmount;\r\n//   const isFullPayment = paymentAmount >= amount;\r\n\r\n//   return (\r\n//     <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\r\n//       <div className=\"bg-white rounded-xl shadow-2xl max-w-md w-full\">\r\n//         {/* Header */}\r\n//         <div className=\"px-6 py-4 border-b border-gray-200\">\r\n//           <div className=\"flex items-center justify-between\">\r\n//             <h2 className=\"text-xl font-semibold text-gray-900\">\r\n//               Record a payment for this invoice\r\n//             </h2>\r\n//             <button\r\n//               onClick={onClose}\r\n//               className=\"text-gray-400 hover:text-gray-600 transition-colors\"\r\n//             >\r\n//               <X size={24} />\r\n//             </button>\r\n//           </div>\r\n//         </div>\r\n\r\n//         {/* Form Body */}\r\n//         <div className=\"px-6 py-4 space-y-5\">\r\n//           {errors.general && (\r\n//             <div className=\"p-3 bg-red-50 border border-red-200 rounded-lg flex items-start gap-2\">\r\n//               <AlertCircle size={20} className=\"text-red-600 flex-shrink-0 mt-0.5\" />\r\n//               <span className=\"text-sm text-red-700\">{errors.general}</span>\r\n//             </div>\r\n//           )}\r\n\r\n//           {/* Date Field */}\r\n//           <div>\r\n//             <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\">\r\n//               <Calendar size={16} />\r\n//               Date\r\n//             </label>\r\n//             <input\r\n//               type=\"date\"\r\n//               value={formData.date}\r\n//               onChange={(e) => handleChange('date', e.target.value)}\r\n//               className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\r\n//                 errors.date ? 'border-red-500' : 'border-gray-300'\r\n//               }`}\r\n//             />\r\n//             {errors.date && <span className=\"text-xs text-red-600 mt-1\">{errors.date}</span>}\r\n//           </div>\r\n\r\n//           {/* Amount Field */}\r\n//           <div>\r\n//             <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\">\r\n//               <DollarSign size={16} />\r\n//               Amount\r\n//             </label>\r\n//             <div className=\"relative\">\r\n//               <span className=\"absolute left-3 top-1/2 -translate-y-1/2 text-gray-500 font-medium\">\r\n//                 Rs\r\n//               </span>\r\n//               <input\r\n//                 type=\"number\"\r\n//                 step=\"0.01\"\r\n//                 value={formData.amount}\r\n//                 onChange={(e) => handleChange('amount', e.target.value)}\r\n//                 className={`w-full pl-10 pr-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\r\n//                   errors.amount ? 'border-red-500' : 'border-gray-300'\r\n//                 }`}\r\n//                 placeholder=\"0.00\"\r\n//               />\r\n//             </div>\r\n//             {errors.amount && <span className=\"text-xs text-red-600 mt-1\">{errors.amount}</span>}\r\n            \r\n//             {paymentAmount > 0 && (\r\n//               <div className=\"mt-2 text-sm\">\r\n//                 {isFullPayment ? (\r\n//                   <span className=\"text-green-600 font-medium\">Invoice will be fully paid</span>\r\n//                 ) : (\r\n//                   <span className=\"text-orange-600\">\r\n//                     Partial payment - Remaining: {formatCurrency(remainingAmount)}\r\n//                   </span>\r\n//                 )}\r\n//               </div>\r\n//             )}\r\n//           </div>\r\n\r\n//           {/* Payment Method */}\r\n//           <div>\r\n//             <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\">\r\n//               <CreditCard size={16} />\r\n//               Method\r\n//             </label>\r\n//             <select\r\n//               value={formData.method}\r\n//               onChange={(e) => handleChange('method', e.target.value)}\r\n//               className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\r\n//                 errors.method ? 'border-red-500' : 'border-gray-300'\r\n//               }`}\r\n//             >\r\n//               <option value=\"\">Select a payment method...</option>\r\n//               <option value=\"cash\">Cash</option>\r\n//               <option value=\"check\">Check</option>\r\n//               <option value=\"bank_transfer\">Bank Transfer</option>\r\n//               <option value=\"credit_card\">Credit Card</option>\r\n//               <option value=\"debit_card\">Debit Card</option>\r\n//               <option value=\"online\">Online Payment</option>\r\n//             </select>\r\n//             {errors.method && <span className=\"text-xs text-red-600 mt-1\">{errors.method}</span>}\r\n//           </div>\r\n\r\n//           {/* Account */}\r\n//           <div>\r\n//             <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\">\r\n//               <FileText size={16} />\r\n//               Account\r\n//             </label>\r\n//             <select\r\n//               value={formData.account}\r\n//               onChange={(e) => handleChange('account', e.target.value)}\r\n//               className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\r\n//                 errors.account ? 'border-red-500' : 'border-gray-300'\r\n//               }`}\r\n//             >\r\n//               <option value=\"\">Select a payment account...</option>\r\n//               {accounts.map(account => (\r\n//                 <option key={account.id} value={account.id}>\r\n//                   {account.code} - {account.name}\r\n//                 </option>\r\n//               ))}\r\n//             </select>\r\n//             {errors.account && <span className=\"text-xs text-red-600 mt-1\">{errors.account}</span>}\r\n//             <p className=\"text-xs text-gray-500 mt-1\">\r\n//               Any account into which you deposit and withdraw funds from.{' '}\r\n//               <a href=\"#\" className=\"text-blue-600 hover:text-blue-700\">Learn more</a>\r\n//             </p>\r\n//           </div>\r\n\r\n//           {/* Memo */}\r\n//           <div>\r\n//             <label className=\"text-sm font-medium text-gray-700 mb-1 block\">\r\n//               Memo / notes\r\n//             </label>\r\n//             <textarea\r\n//               value={formData.memo}\r\n//               onChange={(e) => handleChange('memo', e.target.value)}\r\n//               rows={3}\r\n//               className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\r\n//               placeholder=\"Add any additional notes...\"\r\n//             />\r\n//           </div>\r\n//         </div>\r\n\r\n//         {/* Footer */}\r\n//         <div className=\"px-6 py-4 border-t border-gray-200 flex items-center justify-end gap-3\">\r\n//           <button\r\n//             onClick={onClose}\r\n//             className=\"px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors\"\r\n//           >\r\n//             Cancel\r\n//           </button>\r\n//           <button\r\n//             onClick={handleSubmit}\r\n//             disabled={loading || !formData.amount || parseFloat(formData.amount) <= 0}\r\n//             className={`px-6 py-2 rounded-lg font-medium transition-colors ${\r\n//               loading || !formData.amount || parseFloat(formData.amount) <= 0\r\n//                 ? 'bg-gray-300 text-gray-500 cursor-not-allowed'\r\n//                 : 'bg-blue-600 text-white hover:bg-blue-700'\r\n//             }`}\r\n//           >\r\n//             {loading ? 'Processing...' : 'Submit'}\r\n//           </button>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default RecordPaymentModal;\r\n\r\n\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { X, Calendar, DollarSign, CreditCard, FileText, AlertCircle } from 'lucide-react';\r\nimport { formatCurrency } from './AccountsReceivableUtils/formatters';\r\n\r\nconst RecordPaymentModal = ({ invoiceId, amount, onClose, onSubmit, onPaymentComplete }) => {\r\n  const [formData, setFormData] = useState({\r\n    date: new Date().toISOString().split('T')[0],\r\n    amount: amount?.toString() || '',\r\n    method: '',\r\n    account: '',\r\n    memo: ''\r\n  });\r\n  \r\n  const [accounts, setAccounts] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [errors, setErrors] = useState({});\r\n\r\n  // Fetch accounts on mount\r\n  useEffect(() => {\r\n    fetchAccounts();\r\n  }, []);\r\n\r\n  // Set initial amount\r\n  useEffect(() => {\r\n    if (amount) {\r\n      setFormData(prev => ({ ...prev, amount: amount.toString() }));\r\n    }\r\n  }, [amount]);\r\n\r\n  const fetchAccounts = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:8080/api/accounts');\r\n      const data = await response.json();\r\n\r\n      // Filter only asset accounts (like the commented code)\r\n      const assetAccounts = data.filter(acct => acct.type === 'assets');\r\n\r\n      // Build parent-child map (like the commented code)\r\n      const accountMap = {};\r\n      assetAccounts.forEach(acct => accountMap[acct.id] = { ...acct, children: [] });\r\n\r\n      assetAccounts.forEach(acct => {\r\n        if (acct.parentId && accountMap[acct.parentId]) {\r\n          accountMap[acct.parentId].children.push(accountMap[acct.id]);\r\n        }\r\n      });\r\n\r\n      // Top-level accounts (like the commented code)\r\n      const tree = assetAccounts.filter(acct => !acct.parentId || !accountMap[acct.parentId]);\r\n      setAccounts(tree);\r\n    } catch (err) {\r\n      console.error('Failed to fetch accounts:', err);\r\n    }\r\n  };\r\n\r\n  const handleChange = (field, value) => {\r\n    setFormData(prev => ({ ...prev, [field]: value }));\r\n    // Clear error for this field when user starts typing\r\n    if (errors[field]) {\r\n      setErrors(prev => ({ ...prev, [field]: '' }));\r\n    }\r\n  };\r\n\r\n  const validateForm = () => {\r\n    const newErrors = {};\r\n    \r\n    if (!formData.date) {\r\n      newErrors.date = 'Payment date is required';\r\n    }\r\n    \r\n    if (!formData.amount || parseFloat(formData.amount) <= 0) {\r\n      newErrors.amount = 'Valid payment amount is required';\r\n    }\r\n    \r\n    if (!formData.method) {\r\n      newErrors.method = 'Payment method is required';\r\n    }\r\n    \r\n    if (!formData.account) {\r\n      newErrors.account = 'Deposit account is required';\r\n    }\r\n\r\n    setErrors(newErrors);\r\n    return Object.keys(newErrors).length === 0;\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    if (!validateForm()) return;\r\n\r\n    setLoading(true);\r\n    \r\n    try {\r\n      const paymentAmount = parseFloat(formData.amount);\r\n      const remainingAmount = amount - paymentAmount;\r\n      const isFullPayment = remainingAmount <= 0;\r\n      const paymentStatus = isFullPayment ? 'paid' : 'partial';\r\n      \r\n      // Create payment record\r\n      const paymentData = {\r\n        id: `PAY-${Date.now()}`,\r\n        invoiceId,\r\n        orderId: invoiceId,\r\n        date: formData.date,\r\n        amount: paymentAmount,\r\n        paymentMethod: formData.method,\r\n        accountId: formData.account,\r\n        // Get account name from the hierarchical structure\r\n        accountName: getAccountNameById(formData.account, accounts) || 'Unknown Account',\r\n        memo: formData.memo,\r\n        status: paymentStatus,\r\n        remainingAmount: Math.max(0, remainingAmount),\r\n        createdAt: new Date().toISOString(),\r\n        createdBy: 'current_user' // Replace with actual user\r\n      };\r\n\r\n      // Save payment to localStorage\r\n      const existingPayments = JSON.parse(localStorage.getItem('payments') || '[]');\r\n      const updatedPayments = [...existingPayments, paymentData];\r\n      localStorage.setItem('payments', JSON.stringify(updatedPayments));\r\n\r\n      // Update the invoice/order status\r\n      const existingOrders = JSON.parse(localStorage.getItem('orders') || '[]');\r\n      const orderIndex = existingOrders.findIndex(order => \r\n        order.orderId === invoiceId || order.id === invoiceId\r\n      );\r\n      \r\n      if (orderIndex !== -1) {\r\n        existingOrders[orderIndex] = {\r\n          ...existingOrders[orderIndex],\r\n          paid: isFullPayment,\r\n          paymentStatus: paymentStatus,\r\n          lastPaymentDate: formData.date,\r\n          lastPaymentAmount: paymentAmount,\r\n          remainingAmount: Math.max(0, remainingAmount),\r\n          paymentHistory: [\r\n            ...(existingOrders[orderIndex].paymentHistory || []),\r\n            paymentData.id\r\n          ]\r\n        };\r\n        \r\n        localStorage.setItem('orders', JSON.stringify(existingOrders));\r\n      }\r\n\r\n      // Call the callback with payment details\r\n      if (onSubmit) {\r\n        onSubmit(paymentData, isFullPayment);\r\n      }\r\n      \r\n      // Trigger any additional completion actions\r\n      if (onPaymentComplete) {\r\n        onPaymentComplete(paymentData, isFullPayment);\r\n      }\r\n\r\n      // Show success message and close\r\n      const message = isFullPayment \r\n        ? 'Payment recorded successfully. Invoice is now fully paid.'\r\n        : `Partial payment of ${formatCurrency(paymentAmount)} recorded. Remaining balance: ${formatCurrency(remainingAmount)}`;\r\n      \r\n      // You can show this message using a toast notification if available\r\n      console.log(message);\r\n      \r\n      onClose();\r\n    } catch (error) {\r\n      console.error('Error recording payment:', error);\r\n      setErrors({ general: 'Failed to record payment. Please try again.' });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Helper function to find account name by ID in hierarchical structure\r\n  const getAccountNameById = (accountId, accountList) => {\r\n    for (const account of accountList) {\r\n      if (account.id === accountId) {\r\n        return account.name;\r\n      }\r\n      if (account.children && account.children.length > 0) {\r\n        const foundInChildren = getAccountNameById(accountId, account.children);\r\n        if (foundInChildren) return foundInChildren;\r\n      }\r\n    }\r\n    return null;\r\n  };\r\n\r\n  // Helper function to render account options recursively\r\n  const renderAccountOptions = (accountList, level = 0) => {\r\n    return accountList.map(account => (\r\n      <React.Fragment key={account.id}>\r\n        <option value={account.id}>\r\n          {'-'.repeat(level * 2)} {account.code} - {account.name}\r\n        </option>\r\n        {account.children && account.children.length > 0 && (\r\n          renderAccountOptions(account.children, level + 1)\r\n        )}\r\n      </React.Fragment>\r\n    ));\r\n  };\r\n\r\n  const paymentAmount = parseFloat(formData.amount) || 0;\r\n  const remainingAmount = amount - paymentAmount;\r\n  const isFullPayment = paymentAmount >= amount;\r\n\r\n  return (\r\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\r\n      <div className=\"bg-white rounded-xl shadow-2xl max-w-md w-full\">\r\n        {/* Header */}\r\n        <div className=\"px-6 py-4 border-b border-gray-200\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <h2 className=\"text-xl font-semibold text-gray-900\">\r\n              Record a payment for this invoice\r\n            </h2>\r\n            <button\r\n              onClick={onClose}\r\n              className=\"text-gray-400 hover:text-gray-600 transition-colors\"\r\n            >\r\n              <X size={24} />\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Form Body */}\r\n        <div className=\"px-6 py-4 space-y-5\">\r\n          {errors.general && (\r\n            <div className=\"p-3 bg-red-50 border border-red-200 rounded-lg flex items-start gap-2\">\r\n              <AlertCircle size={20} className=\"text-red-600 flex-shrink-0 mt-0.5\" />\r\n              <span className=\"text-sm text-red-700\">{errors.general}</span>\r\n            </div>\r\n          )}\r\n\r\n          {/* Date Field */}\r\n          <div>\r\n            <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\">\r\n              <Calendar size={16} />\r\n              Date\r\n            </label>\r\n            <input\r\n              type=\"date\"\r\n              value={formData.date}\r\n              onChange={(e) => handleChange('date', e.target.value)}\r\n              className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\r\n                errors.date ? 'border-red-500' : 'border-gray-300'\r\n              }`}\r\n            />\r\n            {errors.date && <span className=\"text-xs text-red-600 mt-1\">{errors.date}</span>}\r\n          </div>\r\n\r\n          {/* Amount Field */}\r\n          <div>\r\n            <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\">\r\n              <DollarSign size={16} />\r\n              Amount\r\n            </label>\r\n            <div className=\"relative\">\r\n              <span className=\"absolute left-3 top-1/2 -translate-y-1/2 text-gray-500 font-medium\">\r\n                Rs\r\n              </span>\r\n              <input\r\n                type=\"number\"\r\n                step=\"0.01\"\r\n                value={formData.amount}\r\n                onChange={(e) => handleChange('amount', e.target.value)}\r\n                className={`w-full pl-10 pr-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\r\n                  errors.amount ? 'border-red-500' : 'border-gray-300'\r\n                }`}\r\n                placeholder=\"0.00\"\r\n              />\r\n            </div>\r\n            {errors.amount && <span className=\"text-xs text-red-600 mt-1\">{errors.amount}</span>}\r\n            \r\n            {paymentAmount > 0 && (\r\n              <div className=\"mt-2 text-sm\">\r\n                {isFullPayment ? (\r\n                  <span className=\"text-green-600 font-medium\">Invoice will be fully paid</span>\r\n                ) : (\r\n                  <span className=\"text-orange-600\">\r\n                    Partial payment - Remaining: {formatCurrency(remainingAmount)}\r\n                  </span>\r\n                )}\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          {/* Payment Method */}\r\n          <div>\r\n            <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\">\r\n              <CreditCard size={16} />\r\n              Method\r\n            </label>\r\n            <select\r\n              value={formData.method}\r\n              onChange={(e) => handleChange('method', e.target.value)}\r\n              className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\r\n                errors.method ? 'border-red-500' : 'border-gray-300'\r\n              }`}\r\n            >\r\n              <option value=\"\">Select a payment method...</option>\r\n              <option value=\"cash\">Cash</option>\r\n              <option value=\"check\">Check</option>\r\n              <option value=\"bank_transfer\">Bank Transfer</option>\r\n              <option value=\"credit_card\">Credit Card</option>\r\n              <option value=\"debit_card\">Debit Card</option>\r\n              <option value=\"online\">Online Payment</option>\r\n            </select>\r\n            {errors.method && <span className=\"text-xs text-red-600 mt-1\">{errors.method}</span>}\r\n          </div>\r\n\r\n          {/* Account */}\r\n          <div>\r\n            <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\">\r\n              <FileText size={16} />\r\n              Account\r\n            </label>\r\n            <select\r\n              value={formData.account}\r\n              onChange={(e) => handleChange('account', e.target.value)}\r\n              className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\r\n                errors.account ? 'border-red-500' : 'border-gray-300'\r\n              }`}\r\n            >\r\n              <option value=\"\">Select a payment account...</option>\r\n              {renderAccountOptions(accounts)}\r\n            </select>\r\n            {errors.account && <span className=\"text-xs text-red-600 mt-1\">{errors.account}</span>}\r\n            <p className=\"text-xs text-gray-500 mt-1\">\r\n              Any account into which you deposit and withdraw funds from.{' '}\r\n              <a href=\"#\" className=\"text-blue-600 hover:text-blue-700\">Learn more</a>\r\n            </p>\r\n          </div>\r\n\r\n          {/* Memo */}\r\n          <div>\r\n            <label className=\"text-sm font-medium text-gray-700 mb-1 block\">\r\n              Memo / notes\r\n            </label>\r\n            <textarea\r\n              value={formData.memo}\r\n              onChange={(e) => handleChange('memo', e.target.value)}\r\n              rows={3}\r\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\r\n              placeholder=\"Add any additional notes...\"\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        {/* Footer */}\r\n        <div className=\"px-6 py-4 border-t border-gray-200 flex items-center justify-end gap-3\">\r\n          <button\r\n            onClick={onClose}\r\n            className=\"px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors\"\r\n          >\r\n            Cancel\r\n          </button>\r\n          <button\r\n            onClick={handleSubmit}\r\n            disabled={loading || !formData.amount || parseFloat(formData.amount) <= 0}\r\n            className={`px-6 py-2 rounded-lg font-medium transition-colors ${\r\n              loading || !formData.amount || parseFloat(formData.amount) <= 0\r\n                ? 'bg-gray-300 text-gray-500 cursor-not-allowed'\r\n                : 'bg-blue-600 text-white hover:bg-blue-700'\r\n            }`}\r\n          >\r\n            {loading ? 'Processing...' : 'Submit'}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RecordPaymentModal;"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAKA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}