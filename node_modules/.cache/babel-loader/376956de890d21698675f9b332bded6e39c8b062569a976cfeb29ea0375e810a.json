{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback } from 'react';\nimport { API_BASE_URL } from '../utils/apiConfig';\nexport const useAccounts = showToast => {\n  _s();\n  const [accounts, setAccounts] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Fetch accounts from API\n  const fetchAccounts = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await fetch(API_BASE_URL);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      setAccounts(data);\n      return data;\n    } catch (err) {\n      const errorMsg = 'Failed to fetch accounts: ' + err.message;\n      setError(errorMsg);\n      showToast(errorMsg, 'error');\n      console.error('Error fetching accounts:', err);\n      return [];\n    } finally {\n      setLoading(false);\n    }\n  }, [showToast]);\n\n  // Create account\n  const createAccount = useCallback(async accountData => {\n    try {\n      setLoading(true);\n      const response = await fetch(API_BASE_URL, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(accountData)\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(errorText || `HTTP error! status: ${response.status}`);\n      }\n      const result = await response.text();\n      showToast(result || 'Account created successfully!', 'success');\n      await fetchAccounts(); // Refresh the list\n      return true;\n    } catch (err) {\n      const errorMsg = 'Failed to create account: ' + err.message;\n      setError(errorMsg);\n      showToast(errorMsg, 'error');\n      console.error('Error creating account:', err);\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  }, [showToast, fetchAccounts]);\n\n  // Update account\n  const updateAccount = useCallback(async (accountId, accountData) => {\n    try {\n      setLoading(true);\n      const response = await fetch(`${API_BASE_URL}/${accountId}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(accountData)\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(errorText || `HTTP error! status: ${response.status}`);\n      }\n      const result = await response.text();\n      showToast(result || 'Account updated successfully!', 'success');\n      await fetchAccounts(); // Refresh the list\n      return true;\n    } catch (err) {\n      const errorMsg = 'Failed to update account: ' + err.message;\n      setError(errorMsg);\n      showToast(errorMsg, 'error');\n      console.error('Error updating account:', err);\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  }, [showToast, fetchAccounts]);\n\n  // Delete account\n  const deleteAccount = useCallback(async accountId => {\n    try {\n      setLoading(true);\n      const response = await fetch(`${API_BASE_URL}/${accountId}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(errorText || `HTTP error! status: ${response.status}`);\n      }\n      const result = await response.text();\n      showToast(result || 'Account deleted successfully!', 'success');\n      await fetchAccounts(); // Refresh the list\n      return true;\n    } catch (err) {\n      const errorMsg = 'Failed to delete account: ' + err.message;\n      setError(errorMsg);\n      showToast(errorMsg, 'error');\n      console.error('Error deleting account:', err);\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  }, [showToast, fetchAccounts]);\n  return {\n    accounts,\n    loading,\n    error,\n    setError,\n    fetchAccounts,\n    createAccount,\n    updateAccount,\n    deleteAccount\n  };\n};\n_s(useAccounts, \"5aD5oZ0DKGp0JQVoSvUpl2JM1Fg=\");","map":{"version":3,"names":["useState","useCallback","API_BASE_URL","useAccounts","showToast","_s","accounts","setAccounts","loading","setLoading","error","setError","fetchAccounts","response","fetch","ok","Error","status","data","json","err","errorMsg","message","console","createAccount","accountData","method","headers","body","JSON","stringify","errorText","text","result","updateAccount","accountId","deleteAccount"],"sources":["C:/Users/Logic-Unit/my-account/src/ChartsOfAccountsHook/useAccounts.js"],"sourcesContent":["import { useState, useCallback } from 'react';\r\nimport { API_BASE_URL } from '../utils/apiConfig';\r\n\r\nexport const useAccounts = (showToast) => {\r\n  const [accounts, setAccounts] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Fetch accounts from API\r\n  const fetchAccounts = useCallback(async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      const response = await fetch(API_BASE_URL);\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n      \r\n      const data = await response.json();\r\n      setAccounts(data);\r\n      return data;\r\n      \r\n    } catch (err) {\r\n      const errorMsg = 'Failed to fetch accounts: ' + err.message;\r\n      setError(errorMsg);\r\n      showToast(errorMsg, 'error');\r\n      console.error('Error fetching accounts:', err);\r\n      return [];\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [showToast]);\r\n\r\n  // Create account\r\n  const createAccount = useCallback(async (accountData) => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await fetch(API_BASE_URL, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(accountData)\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorText = await response.text();\r\n        throw new Error(errorText || `HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      const result = await response.text();\r\n      showToast(result || 'Account created successfully!', 'success');\r\n      await fetchAccounts(); // Refresh the list\r\n      return true;\r\n    } catch (err) {\r\n      const errorMsg = 'Failed to create account: ' + err.message;\r\n      setError(errorMsg);\r\n      showToast(errorMsg, 'error');\r\n      console.error('Error creating account:', err);\r\n      return false;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [showToast, fetchAccounts]);\r\n\r\n  // Update account\r\n  const updateAccount = useCallback(async (accountId, accountData) => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await fetch(`${API_BASE_URL}/${accountId}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(accountData)\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorText = await response.text();\r\n        throw new Error(errorText || `HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      const result = await response.text();\r\n      showToast(result || 'Account updated successfully!', 'success');\r\n      await fetchAccounts(); // Refresh the list\r\n      return true;\r\n    } catch (err) {\r\n      const errorMsg = 'Failed to update account: ' + err.message;\r\n      setError(errorMsg);\r\n      showToast(errorMsg, 'error');\r\n      console.error('Error updating account:', err);\r\n      return false;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [showToast, fetchAccounts]);\r\n\r\n  // Delete account\r\n  const deleteAccount = useCallback(async (accountId) => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await fetch(`${API_BASE_URL}/${accountId}`, {\r\n        method: 'DELETE'\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorText = await response.text();\r\n        throw new Error(errorText || `HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      const result = await response.text();\r\n      showToast(result || 'Account deleted successfully!', 'success');\r\n      await fetchAccounts(); // Refresh the list\r\n      return true;\r\n    } catch (err) {\r\n      const errorMsg = 'Failed to delete account: ' + err.message;\r\n      setError(errorMsg);\r\n      showToast(errorMsg, 'error');\r\n      console.error('Error deleting account:', err);\r\n      return false;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [showToast, fetchAccounts]);\r\n\r\n  return {\r\n    accounts,\r\n    loading,\r\n    error,\r\n    setError,\r\n    fetchAccounts,\r\n    createAccount,\r\n    updateAccount,\r\n    deleteAccount\r\n  };\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}