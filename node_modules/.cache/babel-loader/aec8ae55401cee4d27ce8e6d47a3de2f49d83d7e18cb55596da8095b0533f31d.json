{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Logic-Unit\\\\my-account\\\\src\\\\pages\\\\ChartOfAccounts.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import { ChevronDown, ChevronRight, Plus, Edit, Trash2, Save, X, Search, Filter } from 'lucide-react';\n\n// const ChartOfAccounts = () => {\n//   const [accounts, setAccounts] = useState([]);\n//   const [expandedNodes, setExpandedNodes] = useState(new Set());\n//   const [searchTerm, setSearchTerm] = useState('');\n//   const [selectedCategory, setSelectedCategory] = useState('all');\n//   const [isAddingAccount, setIsAddingAccount] = useState(false);\n//   const [editingAccount, setEditingAccount] = useState(null);\n//   const [formData, setFormData] = useState({\n//     code: '',\n//     name: '',\n//     type: 'assets',\n//     category: 'account',\n//     parentId: null,\n//     description: '',\n//     isActive: true\n//   });\n\n//   // Initialize with default account structure\n//   useEffect(() => {\n//     const defaultAccounts = [\n//       // Assets\n//       { id: '1000', code: '1000', name: 'Assets', type: 'assets', category: 'header', parentId: null, level: 0, isActive: true, description: 'All company assets' },\n//       { id: '1100', code: '1100', name: 'Current Assets', type: 'assets', category: 'group', parentId: '1000', level: 1, isActive: true, description: 'Assets expected to be converted to cash within one year' },\n//       { id: '1110', code: '1110', name: 'Cash and Cash Equivalents', type: 'assets', category: 'account', parentId: '1100', level: 2, isActive: true, description: 'Cash in hand and bank accounts' },\n//       { id: '1111', code: '1111', name: 'Petty Cash', type: 'assets', category: 'account', parentId: '1110', level: 3, isActive: true, description: 'Small cash amounts for daily expenses' },\n//       { id: '1112', code: '1112', name: 'Bank - Main Account', type: 'assets', category: 'account', parentId: '1110', level: 3, isActive: true, description: 'Primary business bank account' },\n//       { id: '1120', code: '1120', name: 'Accounts Receivable', type: 'assets', category: 'account', parentId: '1100', level: 2, isActive: true, description: 'Money owed by customers' },\n//       { id: '1130', code: '1130', name: 'Inventory', type: 'assets', category: 'account', parentId: '1100', level: 2, isActive: true, description: 'Products held for sale' },\n//       { id: '1200', code: '1200', name: 'Fixed Assets', type: 'assets', category: 'group', parentId: '1000', level: 1, isActive: true, description: 'Long-term assets used in business operations' },\n//       { id: '1210', code: '1210', name: 'Equipment', type: 'assets', category: 'account', parentId: '1200', level: 2, isActive: true, description: 'Business equipment and machinery' },\n//       { id: '1220', code: '1220', name: 'Accumulated Depreciation - Equipment', type: 'assets', category: 'account', parentId: '1200', level: 2, isActive: true, description: 'Accumulated depreciation on equipment' },\n\n//       // Liabilities\n//       { id: '2000', code: '2000', name: 'Liabilities', type: 'liabilities', category: 'header', parentId: null, level: 0, isActive: true, description: 'All company liabilities' },\n//       { id: '2100', code: '2100', name: 'Current Liabilities', type: 'liabilities', category: 'group', parentId: '2000', level: 1, isActive: true, description: 'Debts due within one year' },\n//       { id: '2110', code: '2110', name: 'Accounts Payable', type: 'liabilities', category: 'account', parentId: '2100', level: 2, isActive: true, description: 'Money owed to suppliers' },\n//       { id: '2120', code: '2120', name: 'Accrued Expenses', type: 'liabilities', category: 'account', parentId: '2100', level: 2, isActive: true, description: 'Expenses incurred but not yet paid' },\n//       { id: '2130', code: '2130', name: 'Sales Tax Payable', type: 'liabilities', category: 'account', parentId: '2100', level: 2, isActive: true, description: 'Sales tax collected from customers' },\n\n//       // Equity\n//       { id: '3000', code: '3000', name: 'Equity', type: 'equity', category: 'header', parentId: null, level: 0, isActive: true, description: 'Owner equity in the business' },\n//       { id: '3100', code: '3100', name: 'Owner Equity', type: 'equity', category: 'account', parentId: '3000', level: 1, isActive: true, description: 'Owner investment in business' },\n//       { id: '3200', code: '3200', name: 'Retained Earnings', type: 'equity', category: 'account', parentId: '3000', level: 1, isActive: true, description: 'Accumulated profits retained in business' },\n\n//       // Revenue\n//       { id: '4000', code: '4000', name: 'Revenue', type: 'revenue', category: 'header', parentId: null, level: 0, isActive: true, description: 'All company revenue' },\n//       { id: '4100', code: '4100', name: 'Sales Revenue', type: 'revenue', category: 'account', parentId: '4000', level: 1, isActive: true, description: 'Revenue from product sales' },\n//       { id: '4200', code: '4200', name: 'Service Revenue', type: 'revenue', category: 'account', parentId: '4000', level: 1, isActive: true, description: 'Revenue from services provided' },\n\n//       // Expenses\n//       { id: '5000', code: '5000', name: 'Expenses', type: 'expenses', category: 'header', parentId: null, level: 0, isActive: true, description: 'All company expenses' },\n//       { id: '5100', code: '5100', name: 'Cost of Goods Sold', type: 'expenses', category: 'account', parentId: '5000', level: 1, isActive: true, description: 'Direct costs of products sold' },\n//       { id: '5200', code: '5200', name: 'Operating Expenses', type: 'expenses', category: 'group', parentId: '5000', level: 1, isActive: true, description: 'Day-to-day business operating expenses' },\n//       { id: '5210', code: '5210', name: 'Rent Expense', type: 'expenses', category: 'account', parentId: '5200', level: 2, isActive: true, description: 'Monthly rent payments' },\n//       { id: '5220', code: '5220', name: 'Utilities Expense', type: 'expenses', category: 'account', parentId: '5200', level: 2, isActive: true, description: 'Electricity, water, internet costs' },\n//       { id: '5230', code: '5230', name: 'Salaries and Wages', type: 'expenses', category: 'account', parentId: '5200', level: 2, isActive: true, description: 'Employee compensation' },\n//     ];\n\n//     setAccounts(defaultAccounts);\n//     // Expand main categories by default\n//     setExpandedNodes(new Set(['1000', '2000', '3000', '4000', '5000']));\n//   }, []);\n\n//   const accountTypes = {\n//     assets: { label: 'Assets', color: 'bg-green-100 text-green-800', codeRange: '1000-1999' },\n//     liabilities: { label: 'Liabilities', color: 'bg-red-100 text-red-800', codeRange: '2000-2999' },\n//     equity: { label: 'Equity', color: 'bg-blue-100 text-blue-800', codeRange: '3000-3999' },\n//     revenue: { label: 'Revenue', color: 'bg-purple-100 text-purple-800', codeRange: '4000-4999' },\n//     expenses: { label: 'Expenses', color: 'bg-orange-100 text-orange-800', codeRange: '5000-5999' }\n//   };\n\n//   const getFilteredAccounts = () => {\n//     let filtered = accounts;\n\n//     if (searchTerm) {\n//       filtered = filtered.filter(account => \n//         account.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n//         account.code.includes(searchTerm) ||\n//         account.description.toLowerCase().includes(searchTerm.toLowerCase())\n//       );\n//     }\n\n//     if (selectedCategory !== 'all') {\n//       filtered = filtered.filter(account => account.type === selectedCategory);\n//     }\n\n//     return filtered;\n//   };\n\n//   const buildHierarchy = (accounts, parentId = null) => {\n//     return accounts\n//       .filter(account => account.parentId === parentId)\n//       .sort((a, b) => a.code.localeCompare(b.code))\n//       .map(account => ({\n//         ...account,\n//         children: buildHierarchy(accounts, account.id)\n//       }));\n//   };\n\n//   const toggleExpand = (nodeId) => {\n//     const newExpanded = new Set(expandedNodes);\n//     if (newExpanded.has(nodeId)) {\n//       newExpanded.delete(nodeId);\n//     } else {\n//       newExpanded.add(nodeId);\n//     }\n//     setExpandedNodes(newExpanded);\n//   };\n\n//   const handleAddAccount = (parentId = null) => {\n//     const parentAccount = parentId ? accounts.find(a => a.id === parentId) : null;\n//     const accountType = parentAccount ? parentAccount.type : 'assets';\n\n//     setFormData({\n//       code: generateAccountCode(accountType, parentId),\n//       name: '',\n//       type: accountType,\n//       category: 'account',\n//       parentId,\n//       description: '',\n//       isActive: true\n//     });\n//     setIsAddingAccount(true);\n//   };\n\n//   const handleEditAccount = (account) => {\n//     setFormData({\n//       code: account.code,\n//       name: account.name,\n//       type: account.type,\n//       category: account.category,\n//       parentId: account.parentId,\n//       description: account.description || '',\n//       isActive: account.isActive\n//     });\n//     setEditingAccount(account.id);\n//   };\n\n//   const generateAccountCode = (type, parentId = null) => {\n//     const typeRanges = {\n//       assets: { start: 1000, end: 1999 },\n//       liabilities: { start: 2000, end: 2999 },\n//       equity: { start: 3000, end: 3999 },\n//       revenue: { start: 4000, end: 4999 },\n//       expenses: { start: 5000, end: 5999 }\n//     };\n\n//     let baseCode = typeRanges[type].start;\n\n//     if (parentId) {\n//       const parent = accounts.find(a => a.id === parentId);\n//       if (parent) {\n//         const siblingCodes = accounts\n//           .filter(a => a.parentId === parentId)\n//           .map(a => parseInt(a.code))\n//           .sort((a, b) => a - b);\n\n//         if (siblingCodes.length > 0) {\n//           baseCode = Math.max(...siblingCodes) + 1;\n//         } else {\n//           baseCode = parseInt(parent.code) + 10;\n//         }\n//       }\n//     } else {\n//       const existingCodes = accounts\n//         .filter(a => a.type === type)\n//         .map(a => parseInt(a.code))\n//         .sort((a, b) => a - b);\n\n//       if (existingCodes.length > 0) {\n//         baseCode = Math.max(...existingCodes) + 100;\n//       }\n//     }\n\n//     return baseCode.toString();\n//   };\n\n//   const handleSaveAccount = () => {\n//     if (!formData.code || !formData.name) {\n//       alert('Please fill in required fields (Code and Name)');\n//       return;\n//     }\n\n//     // Check for duplicate codes\n//     if (accounts.some(a => a.code === formData.code && a.id !== editingAccount)) {\n//       alert('Account code already exists');\n//       return;\n//     }\n\n//     if (editingAccount) {\n//       // Edit existing account\n//       setAccounts(accounts.map(account => \n//         account.id === editingAccount \n//           ? { ...account, ...formData }\n//           : account\n//       ));\n//       setEditingAccount(null);\n//     } else {\n//       // Add new account\n//       const newId = (Math.max(...accounts.map(a => parseInt(a.id))) + 1).toString();\n//       const parentLevel = formData.parentId \n//         ? accounts.find(a => a.id === formData.parentId)?.level || 0\n//         : 0;\n\n//       const newAccount = {\n//         id: newId,\n//         ...formData,\n//         level: parentLevel + 1\n//       };\n\n//       setAccounts([...accounts, newAccount]);\n//       setIsAddingAccount(false);\n//     }\n\n//     // Reset form\n//     setFormData({\n//       code: '',\n//       name: '',\n//       type: 'assets',\n//       category: 'account',\n//       parentId: null,\n//       description: '',\n//       isActive: true\n//     });\n//   };\n\n//   const handleDeleteAccount = (accountId) => {\n//     // Check if account has children\n//     const hasChildren = accounts.some(a => a.parentId === accountId);\n//     if (hasChildren) {\n//       alert('Cannot delete account with sub-accounts. Please delete sub-accounts first.');\n//       return;\n//     }\n\n//     if (window.confirm('Are you sure you want to delete this account?')) {\n//       setAccounts(accounts.filter(a => a.id !== accountId));\n//     }\n//   };\n\n//   const handleCancel = () => {\n//     setIsAddingAccount(false);\n//     setEditingAccount(null);\n//     setFormData({\n//       code: '',\n//       name: '',\n//       type: 'assets',\n//       category: 'account',\n//       parentId: null,\n//       description: '',\n//       isActive: true\n//     });\n//   };\n\n//   const renderAccountNode = (account) => {\n//     const hasChildren = account.children && account.children.length > 0;\n//     const isExpanded = expandedNodes.has(account.id);\n//     const typeConfig = accountTypes[account.type];\n\n//     return (\n//       <div key={account.id} className=\"account-node\">\n//         <div \n//           className={`flex items-center py-2 px-4 hover:bg-gray-50 border-l-4 ${\n//             account.category === 'header' ? 'border-gray-400 bg-gray-100 font-bold' :\n//             account.category === 'group' ? 'border-gray-300 bg-gray-50 font-semibold' :\n//             'border-transparent'\n//           }`}\n//           style={{ paddingLeft: `${account.level * 20 + 16}px` }}\n//         >\n//           {hasChildren && (\n//             <button\n//               onClick={() => toggleExpand(account.id)}\n//               className=\"mr-2 p-1 hover:bg-gray-200 rounded\"\n//             >\n//               {isExpanded ? <ChevronDown size={16} /> : <ChevronRight size={16} />}\n//             </button>\n//           )}\n\n//           <div className=\"flex-1 flex items-center space-x-4\">\n//             <span className=\"font-mono text-sm text-gray-600 min-w-[80px]\">\n//               {account.code}\n//             </span>\n\n//             <span className={`flex-1 ${account.category === 'header' ? 'text-lg' : ''}`}>\n//               {account.name}\n//             </span>\n\n//             <span className={`px-2 py-1 rounded-full text-xs font-medium ${typeConfig.color}`}>\n//               {typeConfig.label}\n//             </span>\n\n//             {account.category !== 'header' && (\n//               <div className=\"flex space-x-1\">\n//                 <button\n//                   onClick={() => handleEditAccount(account)}\n//                   className=\"p-1 hover:bg-blue-100 rounded text-blue-600\"\n//                   title=\"Edit Account\"\n//                 >\n//                   <Edit size={14} />\n//                 </button>\n//                 <button\n//                   onClick={() => handleDeleteAccount(account.id)}\n//                   className=\"p-1 hover:bg-red-100 rounded text-red-600\"\n//                   disabled={account.category === 'header'}\n//                   title=\"Delete Account\"\n//                 >\n//                   <Trash2 size={14} />\n//                 </button>\n//                 <button\n//                   onClick={() => handleAddAccount(account.id)}\n//                   className=\"p-1 hover:bg-green-100 rounded text-green-600\"\n//                   title=\"Add Sub-Account\"\n//                 >\n//                   <Plus size={14} />\n//                 </button>\n//               </div>\n//             )}\n//           </div>\n//         </div>\n\n//         {account.description && (\n//           <div className=\"px-4 py-1 text-sm text-gray-500\" style={{ paddingLeft: `${account.level * 20 + 36}px` }}>\n//             {account.description}\n//           </div>\n//         )}\n\n//         {isExpanded && hasChildren && (\n//           <div>\n//             {account.children.map(child => renderAccountNode(child))}\n//           </div>\n//         )}\n//       </div>\n//     );\n//   };\n\n//   const filteredAccounts = getFilteredAccounts();\n//   const hierarchicalAccounts = buildHierarchy(filteredAccounts);\n\n//   return (\n//     <div className=\"max-w-7xl mx-auto p-6 bg-white\">\n//       <div className=\"mb-6\">\n//         <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Chart of Accounts</h1>\n//         <p className=\"text-gray-600\">Manage your company's account structure and hierarchy</p>\n//       </div>\n\n//       {/* Controls */}\n//       <div className=\"mb-6 flex flex-wrap items-center justify-between gap-4\">\n//         <div className=\"flex items-center space-x-4\">\n//           <div className=\"relative\">\n//             <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" size={20} />\n//             <input\n//               type=\"text\"\n//               placeholder=\"Search accounts...\"\n//               value={searchTerm}\n//               onChange={(e) => setSearchTerm(e.target.value)}\n//               className=\"pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n//             />\n//           </div>\n\n//           <div className=\"relative\">\n//             <Filter className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" size={20} />\n//             <select\n//               value={selectedCategory}\n//               onChange={(e) => setSelectedCategory(e.target.value)}\n//               className=\"pl-10 pr-8 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n//             >\n//               <option value=\"all\">All Types</option>\n//               {Object.entries(accountTypes).map(([key, type]) => (\n//                 <option key={key} value={key}>{type.label}</option>\n//               ))}\n//             </select>\n//           </div>\n//         </div>\n\n//         <button\n//           onClick={() => handleAddAccount()}\n//           className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center space-x-2\"\n//         >\n//           <Plus size={20} />\n//           <span>Add Account</span>\n//         </button>\n//       </div>\n\n//       {/* Account Form */}\n//       {(isAddingAccount || editingAccount) && (\n//         <div className=\"mb-6 p-6 bg-gray-50 rounded-lg border\">\n//           <h3 className=\"text-lg font-semibold mb-4\">\n//             {editingAccount ? 'Edit Account' : 'Add New Account'}\n//           </h3>\n\n//           <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n//             <div>\n//               <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n//                 Account Code *\n//               </label>\n//               <input\n//                 type=\"text\"\n//                 value={formData.code}\n//                 onChange={(e) => setFormData({...formData, code: e.target.value})}\n//                 placeholder=\"Enter account code\"\n//                 className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n//               />\n//             </div>\n\n//             <div>\n//               <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n//                 Account Name *\n//               </label>\n//               <input\n//                 type=\"text\"\n//                 value={formData.name}\n//                 onChange={(e) => setFormData({...formData, name: e.target.value})}\n//                 placeholder=\"Enter account name\"\n//                 className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n//               />\n//             </div>\n\n//             <div>\n//               <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n//                 Account Type\n//               </label>\n//               <select\n//                 value={formData.type}\n//                 onChange={(e) => setFormData({...formData, type: e.target.value})}\n//                 className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n//               >\n//                 {Object.entries(accountTypes).map(([key, type]) => (\n//                   <option key={key} value={key}>{type.label} ({type.codeRange})</option>\n//                 ))}\n//               </select>\n//             </div>\n\n//             <div>\n//               <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n//                 Category\n//               </label>\n//               <select\n//                 value={formData.category}\n//                 onChange={(e) => setFormData({...formData, category: e.target.value})}\n//                 className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n//               >\n//                 <option value=\"header\">Header</option>\n//                 <option value=\"group\">Group</option>\n//                 <option value=\"account\">Account</option>\n//               </select>\n//             </div>\n\n//             <div>\n//               <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n//                 Parent Account\n//               </label>\n//               <select\n//                 value={formData.parentId || ''}\n//                 onChange={(e) => setFormData({...formData, parentId: e.target.value || null})}\n//                 className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n//               >\n//                 <option value=\"\">None (Top Level)</option>\n//                 {accounts\n//                   .filter(a => a.id !== editingAccount && a.category !== 'account')\n//                   .map(account => (\n//                     <option key={account.id} value={account.id}>\n//                       {account.code} - {account.name}\n//                     </option>\n//                   ))\n//                 }\n//               </select>\n//             </div>\n\n//             <div className=\"flex items-center\">\n//               <input\n//                 type=\"checkbox\"\n//                 id=\"isActive\"\n//                 checked={formData.isActive}\n//                 onChange={(e) => setFormData({...formData, isActive: e.target.checked})}\n//                 className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n//               />\n//               <label htmlFor=\"isActive\" className=\"ml-2 block text-sm text-gray-900\">\n//                 Active\n//               </label>\n//             </div>\n\n//             <div className=\"md:col-span-2 lg:col-span-3\">\n//               <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n//                 Description\n//               </label>\n//               <textarea\n//                 value={formData.description}\n//                 onChange={(e) => setFormData({...formData, description: e.target.value})}\n//                 rows={2}\n//                 placeholder=\"Enter account description\"\n//                 className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n//               />\n//             </div>\n//           </div>\n\n//           <div className=\"mt-4 flex space-x-3\">\n//             <button\n//               onClick={handleSaveAccount}\n//               className=\"px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 flex items-center space-x-2\"\n//             >\n//               <Save size={16} />\n//               <span>Save</span>\n//             </button>\n//             <button\n//               onClick={handleCancel}\n//               className=\"px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 flex items-center space-x-2\"\n//             >\n//               <X size={16} />\n//               <span>Cancel</span>\n//             </button>\n//           </div>\n//         </div>\n//       )}\n\n//       {/* Accounts Tree */}\n//       <div className=\"bg-white border border-gray-200 rounded-lg overflow-hidden\">\n//         <div className=\"px-4 py-3 bg-gray-50 border-b border-gray-200\">\n//           <div className=\"flex items-center justify-between\">\n//             <h2 className=\"text-lg font-semibold text-gray-900\">Account Structure</h2>\n//             <span className=\"text-sm text-gray-500\">\n//               {filteredAccounts.length} accounts\n//             </span>\n//           </div>\n//         </div>\n\n//         <div className=\"max-h-[600px] overflow-y-auto\">\n//           {hierarchicalAccounts.length > 0 ? (\n//             hierarchicalAccounts.map(account => renderAccountNode(account))\n//           ) : (\n//             <div className=\"p-8 text-center text-gray-500\">\n//               No accounts found matching your criteria.\n//             </div>\n//           )}\n//         </div>\n//       </div>\n\n//       {/* Account Type Legend */}\n//       <div className=\"mt-6 p-4 bg-gray-50 rounded-lg\">\n//         <h3 className=\"text-sm font-semibold text-gray-700 mb-3\">Account Types & Code Ranges</h3>\n//         <div className=\"flex flex-wrap gap-4\">\n//           {Object.entries(accountTypes).map(([key, type]) => (\n//             <div key={key} className=\"flex items-center space-x-2\">\n//               <span className={`px-2 py-1 rounded-full text-xs font-medium ${type.color}`}>\n//                 {type.label}\n//               </span>\n//               <span className=\"text-sm text-gray-600 font-mono\">{type.codeRange}</span>\n//             </div>\n//           ))}\n//         </div>\n//       </div>\n\n//       {/* Quick Actions Info */}\n//       <div className=\"mt-6 p-4 bg-blue-50 rounded-lg\">\n//         <h3 className=\"text-sm font-semibold text-blue-800 mb-2\">Quick Actions Guide</h3>\n//         <div className=\"text-xs text-blue-700 space-y-1\">\n//           <p>• Click the expand/collapse arrow to show/hide sub-accounts</p>\n//           <p>• Use the Edit button to modify account details</p>\n//           <p>• Use the Plus button to add a sub-account under any account</p>\n//           <p>• Delete accounts that have no sub-accounts or transactions</p>\n//           <p>• Search by account code, name, or description</p>\n//           <p>• Filter by account type to focus on specific categories</p>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ChartOfAccounts;\n\n//perferc integrated\n// import React, { useState, useEffect } from 'react';\n// import { ChevronDown, ChevronRight, Plus, Edit, Trash2, Save, X, Search, Filter, RefreshCw } from 'lucide-react';\n\n// const ChartOfAccounts = () => {\n//   const [accounts, setAccounts] = useState([]);\n//   const [expandedNodes, setExpandedNodes] = useState(new Set());\n//   const [searchTerm, setSearchTerm] = useState('');\n//   const [selectedCategory, setSelectedCategory] = useState('all');\n//   const [isAddingAccount, setIsAddingAccount] = useState(false);\n//   const [editingAccount, setEditingAccount] = useState(null);\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState(null);\n//   const [formData, setFormData] = useState({\n//     code: '',\n//     name: '',\n//     type: 'assets',\n//     category: 'account',\n//     parentId: null,\n//     description: '',\n//     active: true\n//   });\n\n//   // API Base URL\n//   const API_BASE_URL = 'http://localhost:8080/api/accounts';\n\n//   // Account types configuration\n//   const accountTypes = {\n//     assets: { label: 'Assets', color: 'bg-green-100 text-green-800', codeRange: '1000-1999' },\n//     liabilities: { label: 'Liabilities', color: 'bg-red-100 text-red-800', codeRange: '2000-2999' },\n//     equity: { label: 'Equity', color: 'bg-blue-100 text-blue-800', codeRange: '3000-3999' },\n//     revenue: { label: 'Revenue', color: 'bg-purple-100 text-purple-800', codeRange: '4000-4999' },\n//     expenses: { label: 'Expenses', color: 'bg-orange-100 text-orange-800', codeRange: '5000-5999' }\n//   };\n\n//   // Fetch accounts from API\n//   const fetchAccounts = async () => {\n//     try {\n//       setLoading(true);\n//       setError(null);\n//       const response = await fetch(API_BASE_URL);\n\n//       if (!response.ok) {\n//         throw new Error(`HTTP error! status: ${response.status}`);\n//       }\n\n//       const data = await response.json();\n//       setAccounts(data);\n\n//       // Expand main categories by default\n//       const mainCategories = data\n//         .filter(account => account.level === 0)\n//         .map(account => account.id);\n//       setExpandedNodes(new Set(mainCategories));\n\n//     } catch (err) {\n//       setError('Failed to fetch accounts: ' + err.message);\n//       console.error('Error fetching accounts:', err);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   // Initialize component\n//   useEffect(() => {\n//     fetchAccounts();\n//   }, []);\n\n//   // Create account\n//   const createAccount = async (accountData) => {\n//     try {\n//       setLoading(true);\n//       const response = await fetch(API_BASE_URL, {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify(accountData)\n//       });\n\n//       if (!response.ok) {\n//         const errorText = await response.text();\n//         throw new Error(errorText || `HTTP error! status: ${response.status}`);\n//       }\n\n//       await fetchAccounts(); // Refresh the list\n//       return true;\n//     } catch (err) {\n//       setError('Failed to create account: ' + err.message);\n//       console.error('Error creating account:', err);\n//       return false;\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   // Update account\n//   const updateAccount = async (accountId, accountData) => {\n//     try {\n//       setLoading(true);\n//       const response = await fetch(`${API_BASE_URL}/${accountId}`, {\n//         method: 'PUT',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify(accountData)\n//       });\n\n//       if (!response.ok) {\n//         const errorText = await response.text();\n//         throw new Error(errorText || `HTTP error! status: ${response.status}`);\n//       }\n\n//       await fetchAccounts(); // Refresh the list\n//       return true;\n//     } catch (err) {\n//       setError('Failed to update account: ' + err.message);\n//       console.error('Error updating account:', err);\n//       return false;\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   // Delete account\n//   const deleteAccount = async (accountId) => {\n//     try {\n//       setLoading(true);\n//       const response = await fetch(`${API_BASE_URL}/${accountId}`, {\n//         method: 'DELETE'\n//       });\n\n//       if (!response.ok) {\n//         const errorText = await response.text();\n//         throw new Error(errorText || `HTTP error! status: ${response.status}`);\n//       }\n\n//       await fetchAccounts(); // Refresh the list\n//       return true;\n//     } catch (err) {\n//       setError('Failed to delete account: ' + err.message);\n//       console.error('Error deleting account:', err);\n//       return false;\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   // Helper function to flatten hierarchy for filtering\n//   const flattenAccounts = (accounts) => {\n//     const result = [];\n//     const flatten = (items) => {\n//       items.forEach(item => {\n//         result.push(item);\n//         if (item.children && item.children.length > 0) {\n//           flatten(item.children);\n//         }\n//       });\n//     };\n//     flatten(accounts);\n//     return result;\n//   };\n\n//   // Filter accounts based on search and category\n//   const getFilteredAccounts = () => {\n//     const flatAccounts = flattenAccounts(accounts);\n//     let filtered = flatAccounts;\n\n//     if (searchTerm) {\n//       filtered = filtered.filter(account => \n//         account.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n//         account.code.includes(searchTerm) ||\n//         (account.description && account.description.toLowerCase().includes(searchTerm.toLowerCase()))\n//       );\n//     }\n\n//     if (selectedCategory !== 'all') {\n//       filtered = filtered.filter(account => account.type === selectedCategory);\n//     }\n\n//     return filtered;\n//   };\n\n//   // Build hierarchy from flat accounts (for display when not searching)\n//   const buildHierarchy = (accounts, parentId = null) => {\n//     return accounts\n//       .filter(account => account.parentId === parentId)\n//       .sort((a, b) => a.code.localeCompare(b.code))\n//       .map(account => ({\n//         ...account,\n//         children: buildHierarchy(accounts, account.id)\n//       }));\n//   };\n\n//   // Toggle expand/collapse\n//   const toggleExpand = (nodeId) => {\n//     const newExpanded = new Set(expandedNodes);\n//     if (newExpanded.has(nodeId)) {\n//       newExpanded.delete(nodeId);\n//     } else {\n//       newExpanded.add(nodeId);\n//     }\n//     setExpandedNodes(newExpanded);\n//   };\n\n//   // Handle add account\n//   const handleAddAccount = (parentId = null) => {\n//     const flatAccounts = flattenAccounts(accounts);\n//     const parentAccount = parentId ? flatAccounts.find(a => a.id === parentId) : null;\n//     const accountType = parentAccount ? parentAccount.type : 'assets';\n\n//     setFormData({\n//       code: '', // Will be generated by backend\n//       name: '',\n//       type: accountType,\n//       category: 'account',\n//       parentId,\n//       description: '',\n//       active: true\n//     });\n//     setIsAddingAccount(true);\n//   };\n\n//   // Handle edit account\n//   const handleEditAccount = (account) => {\n//     setFormData({\n//       code: account.code,\n//       name: account.name,\n//       type: account.type,\n//       category: account.category,\n//       parentId: account.parentId,\n//       description: account.description || '',\n//       active: account.active !== undefined ? account.active : true\n//     });\n//     setEditingAccount(account.id);\n//   };\n\n//   // Handle save account\n//   const handleSaveAccount = async () => {\n//     if (!formData.name) {\n//       alert('Please fill in the account name');\n//       return;\n//     }\n\n//     const success = editingAccount \n//       ? await updateAccount(editingAccount, formData)\n//       : await createAccount(formData);\n\n//     if (success) {\n//       // Reset form\n//       setFormData({\n//         code: '',\n//         name: '',\n//         type: 'assets',\n//         category: 'account',\n//         parentId: null,\n//         description: '',\n//         active: true\n//       });\n//       setIsAddingAccount(false);\n//       setEditingAccount(null);\n//     }\n//   };\n\n//   // Handle delete account\n//   const handleDeleteAccount = async (accountId) => {\n//     const flatAccounts = flattenAccounts(accounts);\n//     const hasChildren = flatAccounts.some(a => a.parentId === accountId);\n\n//     if (hasChildren) {\n//       alert('Cannot delete account with sub-accounts. Please delete sub-accounts first.');\n//       return;\n//     }\n\n//     if (window.confirm('Are you sure you want to delete this account?')) {\n//       await deleteAccount(accountId);\n//     }\n//   };\n\n//   // Handle cancel\n//   const handleCancel = () => {\n//     setIsAddingAccount(false);\n//     setEditingAccount(null);\n//     setFormData({\n//       code: '',\n//       name: '',\n//       type: 'assets',\n//       category: 'account',\n//       parentId: null,\n//       description: '',\n//       active: true\n//     });\n//   };\n\n//   // Render account node\n//   const renderAccountNode = (account) => {\n//     const hasChildren = account.children && account.children.length > 0;\n//     const isExpanded = expandedNodes.has(account.id);\n//     const typeConfig = accountTypes[account.type];\n\n//     return (\n//       <div key={account.id} className=\"account-node\">\n//         <div \n//           className={`flex items-center py-2 px-4 hover:bg-gray-50 border-l-4 ${\n//             account.category === 'header' ? 'border-gray-400 bg-gray-100 font-bold' :\n//             account.category === 'group' ? 'border-gray-300 bg-gray-50 font-semibold' :\n//             'border-transparent'\n//           }`}\n//           style={{ paddingLeft: `${account.level * 20 + 16}px` }}\n//         >\n//           {hasChildren && (\n//             <button\n//               onClick={() => toggleExpand(account.id)}\n//               className=\"mr-2 p-1 hover:bg-gray-200 rounded\"\n//             >\n//               {isExpanded ? <ChevronDown size={16} /> : <ChevronRight size={16} />}\n//             </button>\n//           )}\n\n//           <div className=\"flex-1 flex items-center space-x-4\">\n//             <span className=\"font-mono text-sm text-gray-600 min-w-[80px]\">\n//               {account.code}\n//             </span>\n\n//             <span className={`flex-1 ${account.category === 'header' ? 'text-lg' : ''}`}>\n//               {account.name}\n//               {!account.active && <span className=\"ml-2 text-red-500 text-xs\">(Inactive)</span>}\n//             </span>\n\n//             <span className={`px-2 py-1 rounded-full text-xs font-medium ${typeConfig.color}`}>\n//               {typeConfig.label}\n//             </span>\n\n//             <div className=\"flex space-x-1\">\n//               <button\n//                 onClick={() => handleEditAccount(account)}\n//                 className=\"p-1 hover:bg-blue-100 rounded text-blue-600\"\n//                 title=\"Edit Account\"\n//                 disabled={loading}\n//               >\n//                 <Edit size={14} />\n//               </button>\n//               <button\n//                 onClick={() => handleDeleteAccount(account.id)}\n//                 className=\"p-1 hover:bg-red-100 rounded text-red-600\"\n//                 title=\"Delete Account\"\n//                 disabled={loading}\n//               >\n//                 <Trash2 size={14} />\n//               </button>\n//               <button\n//                 onClick={() => handleAddAccount(account.id)}\n//                 className=\"p-1 hover:bg-green-100 rounded text-green-600\"\n//                 title=\"Add Sub-Account\"\n//                 disabled={loading}\n//               >\n//                 <Plus size={14} />\n//               </button>\n//             </div>\n//           </div>\n//         </div>\n\n//         {account.description && (\n//           <div className=\"px-4 py-1 text-sm text-gray-500\" style={{ paddingLeft: `${account.level * 20 + 36}px` }}>\n//             {account.description}\n//           </div>\n//         )}\n\n//         {isExpanded && hasChildren && (\n//           <div>\n//             {account.children.map(child => renderAccountNode(child))}\n//           </div>\n//         )}\n//       </div>\n//     );\n//   };\n\n//   const flatAccounts = flattenAccounts(accounts);\n//   const filteredAccounts = getFilteredAccounts();\n//   const displayAccounts = searchTerm || selectedCategory !== 'all' \n//     ? filteredAccounts \n//     : buildHierarchy(flatAccounts);\n\n//   return (\n//     <div className=\"max-w-7xl mx-auto p-6 bg-white\">\n//       <div className=\"mb-6\">\n//         <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Chart of Accounts</h1>\n//         <p className=\"text-gray-600\">Manage your company's account structure and hierarchy</p>\n//       </div>\n\n//       {/* Error Message */}\n//       {error && (\n//         <div className=\"mb-4 p-4 bg-red-50 border border-red-200 rounded-lg\">\n//           <div className=\"flex\">\n//             <div className=\"flex-1\">\n//               <p className=\"text-red-700\">{error}</p>\n//             </div>\n//             <button\n//               onClick={() => setError(null)}\n//               className=\"text-red-400 hover:text-red-600\"\n//             >\n//               <X size={16} />\n//             </button>\n//           </div>\n//         </div>\n//       )}\n\n//       {/* Controls */}\n//       <div className=\"mb-6 flex flex-wrap items-center justify-between gap-4\">\n//         <div className=\"flex items-center space-x-4\">\n//           <div className=\"relative\">\n//             <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" size={20} />\n//             <input\n//               type=\"text\"\n//               placeholder=\"Search accounts...\"\n//               value={searchTerm}\n//               onChange={(e) => setSearchTerm(e.target.value)}\n//               className=\"pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n//             />\n//           </div>\n\n//           <div className=\"relative\">\n//             <Filter className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" size={20} />\n//             <select\n//               value={selectedCategory}\n//               onChange={(e) => setSelectedCategory(e.target.value)}\n//               className=\"pl-10 pr-8 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n//             >\n//               <option value=\"all\">All Types</option>\n//               {Object.entries(accountTypes).map(([key, type]) => (\n//                 <option key={key} value={key}>{type.label}</option>\n//               ))}\n//             </select>\n//           </div>\n\n//           <button\n//             onClick={fetchAccounts}\n//             className=\"px-3 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 flex items-center space-x-2\"\n//             disabled={loading}\n//           >\n//             <RefreshCw size={16} className={loading ? 'animate-spin' : ''} />\n//             <span>Refresh</span>\n//           </button>\n//         </div>\n\n//         <button\n//           onClick={() => handleAddAccount()}\n//           className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center space-x-2\"\n//           disabled={loading}\n//         >\n//           <Plus size={20} />\n//           <span>Add Account</span>\n//         </button>\n//       </div>\n\n//       {/* Account Form */}\n//       {(isAddingAccount || editingAccount) && (\n//         <div className=\"mb-6 p-6 bg-gray-50 rounded-lg border\">\n//           <h3 className=\"text-lg font-semibold mb-4\">\n//             {editingAccount ? 'Edit Account' : 'Add New Account'}\n//           </h3>\n\n//           <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n//             <div>\n//               <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n//                 Account Code\n//               </label>\n//               <input\n//                 type=\"text\"\n//                 value={formData.code}\n//                 onChange={(e) => setFormData({...formData, code: e.target.value})}\n//                 placeholder=\"Auto-generated if empty\"\n//                 className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n//               />\n//               <p className=\"text-xs text-gray-500 mt-1\">Leave empty for auto-generation</p>\n//             </div>\n\n//             <div>\n//               <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n//                 Account Name *\n//               </label>\n//               <input\n//                 type=\"text\"\n//                 value={formData.name}\n//                 onChange={(e) => setFormData({...formData, name: e.target.value})}\n//                 placeholder=\"Enter account name\"\n//                 className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n//                 required\n//               />\n//             </div>\n\n//             <div>\n//               <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n//                 Account Type\n//               </label>\n//               <select\n//                 value={formData.type}\n//                 onChange={(e) => setFormData({...formData, type: e.target.value})}\n//                 className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n//               >\n//                 {Object.entries(accountTypes).map(([key, type]) => (\n//                   <option key={key} value={key}>{type.label} ({type.codeRange})</option>\n//                 ))}\n//               </select>\n//             </div>\n\n//             <div>\n//               <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n//                 Category\n//               </label>\n//               <select\n//                 value={formData.category}\n//                 onChange={(e) => setFormData({...formData, category: e.target.value})}\n//                 className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n//               >\n//                 <option value=\"header\">Header</option>\n//                 <option value=\"group\">Group</option>\n//                 <option value=\"account\">Account</option>\n//               </select>\n//             </div>\n\n//             <div>\n//               <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n//                 Parent Account\n//               </label>\n//               <select\n//                 value={formData.parentId || ''}\n//                 onChange={(e) => setFormData({...formData, parentId: e.target.value || null})}\n//                 className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n//               >\n//                 <option value=\"\">None (Top Level)</option>\n//                 {flatAccounts\n//                   .filter(a => a.id !== editingAccount && a.category !== 'account')\n//                   .map(account => (\n//                     <option key={account.id} value={account.id}>\n//                       {account.code} - {account.name}\n//                     </option>\n//                   ))\n//                 }\n//               </select>\n//             </div>\n\n//             <div className=\"flex items-center\">\n//               <input\n//                 type=\"checkbox\"\n//                 id=\"active\"\n//                 checked={formData.active}\n//                 onChange={(e) => setFormData({...formData, active: e.target.checked})}\n//                 className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n//               />\n//               <label htmlFor=\"active\" className=\"ml-2 block text-sm text-gray-900\">\n//                 Active\n//               </label>\n//             </div>\n\n//             <div className=\"md:col-span-2 lg:col-span-3\">\n//               <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n//                 Description\n//               </label>\n//               <textarea\n//                 value={formData.description}\n//                 onChange={(e) => setFormData({...formData, description: e.target.value})}\n//                 rows={2}\n//                 placeholder=\"Enter account description\"\n//                 className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n//               />\n//             </div>\n//           </div>\n\n//           <div className=\"mt-4 flex space-x-3\">\n//             <button\n//               onClick={handleSaveAccount}\n//               className=\"px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 flex items-center space-x-2\"\n//               disabled={loading}\n//             >\n//               <Save size={16} />\n//               <span>{loading ? 'Saving...' : 'Save'}</span>\n//             </button>\n//             <button\n//               onClick={handleCancel}\n//               className=\"px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 flex items-center space-x-2\"\n//               disabled={loading}\n//             >\n//               <X size={16} />\n//               <span>Cancel</span>\n//             </button>\n//           </div>\n//         </div>\n//       )}\n\n//       {/* Accounts Tree */}\n//       <div className=\"bg-white border border-gray-200 rounded-lg overflow-hidden\">\n//         <div className=\"px-4 py-3 bg-gray-50 border-b border-gray-200\">\n//           <div className=\"flex items-center justify-between\">\n//             <h2 className=\"text-lg font-semibold text-gray-900\">Account Structure</h2>\n//             <span className=\"text-sm text-gray-500\">\n//               {filteredAccounts.length} accounts\n//               {loading && <span className=\"ml-2 text-blue-600\">Loading...</span>}\n//             </span>\n//           </div>\n//         </div>\n\n//         <div className=\"max-h-[600px] overflow-y-auto\">\n//           {loading && accounts.length === 0 ? (\n//             <div className=\"p-8 text-center text-gray-500\">\n//               <RefreshCw className=\"animate-spin mx-auto mb-2\" size={24} />\n//               Loading accounts...\n//             </div>\n//           ) : displayAccounts.length > 0 ? (\n//             searchTerm || selectedCategory !== 'all' ? (\n//               // Flat view for search results\n//               <div>\n//                 {filteredAccounts.map(account => (\n//                   <div key={account.id}>\n//                     {renderAccountNode({...account, children: []})}\n//                   </div>\n//                 ))}\n//               </div>\n//             ) : (\n//               // Hierarchical view\n//               displayAccounts.map(account => renderAccountNode(account))\n//             )\n//           ) : (\n//             <div className=\"p-8 text-center text-gray-500\">\n//               No accounts found matching your criteria.\n//             </div>\n//           )}\n//         </div>\n//       </div>\n\n//       {/* Account Type Legend */}\n//       <div className=\"mt-6 p-4 bg-gray-50 rounded-lg\">\n//         <h3 className=\"text-sm font-semibold text-gray-700 mb-3\">Account Types & Code Ranges</h3>\n//         <div className=\"flex flex-wrap gap-4\">\n//           {Object.entries(accountTypes).map(([key, type]) => (\n//             <div key={key} className=\"flex items-center space-x-2\">\n//               <span className={`px-2 py-1 rounded-full text-xs font-medium ${type.color}`}>\n//                 {type.label}\n//               </span>\n//               <span className=\"text-sm text-gray-600 font-mono\">{type.codeRange}</span>\n//             </div>\n//           ))}\n//         </div>\n//       </div>\n\n//       {/* API Integration Info */}\n//       <div className=\"mt-6 p-4 bg-blue-50 rounded-lg\">\n//         <h3 className=\"text-sm font-semibold text-blue-800 mb-2\">API Integration Status</h3>\n//         <div className=\"text-xs text-blue-700 space-y-1\">\n//           <p>• Connected to: {API_BASE_URL}</p>\n//           <p>• Auto-refresh after CRUD operations</p>\n//           <p>• Real-time data from Spring Boot backend</p>\n//           <p>• Hierarchical structure maintained server-side</p>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ChartOfAccounts;1230\n\n//correct code integrated with toast\n// import React, { useState, useEffect } from 'react';\n// import { ChevronDown, ChevronRight, Plus, Edit, Trash2, Save, X, Search, Filter, RefreshCw, CheckCircle, AlertCircle, XCircle } from 'lucide-react';\n\n// const ChartOfAccounts = () => {\n//   const [accounts, setAccounts] = useState([]);\n//   const [expandedNodes, setExpandedNodes] = useState(new Set());\n//   const [searchTerm, setSearchTerm] = useState('');\n//   const [selectedCategory, setSelectedCategory] = useState('all');\n//   const [isAddingAccount, setIsAddingAccount] = useState(false);\n//   const [editingAccount, setEditingAccount] = useState(null);\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState(null);\n//   const [toasts, setToasts] = useState([]);\n//   const [formData, setFormData] = useState({\n//     code: '',\n//     name: '',\n//     type: 'assets',\n//     category: 'account',\n//     parentId: null,\n//     description: '',\n//     active: true\n//   });\n\n//   // API Base URL\n//   const API_BASE_URL = 'http://localhost:8080/api/accounts';\n\n//   // Toast notification system\n//   const showToast = (message, type = 'success') => {\n//     const id = Date.now();\n//     const toast = { id, message, type };\n//     setToasts(prev => [...prev, toast]);\n\n//     // Auto remove after 5 seconds\n//     setTimeout(() => {\n//       setToasts(prev => prev.filter(t => t.id !== id));\n//     }, 5000);\n//   };\n\n//   const removeToast = (id) => {\n//     setToasts(prev => prev.filter(t => t.id !== id));\n//   };\n\n//   // Account types configuration\n//   const accountTypes = {\n//     assets: { label: 'Assets', color: 'bg-green-100 text-green-800', codeRange: '1000-1999' },\n//     liabilities: { label: 'Liabilities', color: 'bg-red-100 text-red-800', codeRange: '2000-2999' },\n//     equity: { label: 'Equity', color: 'bg-blue-100 text-blue-800', codeRange: '3000-3999' },\n//     revenue: { label: 'Revenue', color: 'bg-purple-100 text-purple-800', codeRange: '4000-4999' },\n//     expenses: { label: 'Expenses', color: 'bg-orange-100 text-orange-800', codeRange: '5000-5999' }\n//   };\n\n//   // Fetch accounts from API\n//   const fetchAccounts = async () => {\n//     try {\n//       setLoading(true);\n//       setError(null);\n//       const response = await fetch(API_BASE_URL);\n\n//       if (!response.ok) {\n//         throw new Error(`HTTP error! status: ${response.status}`);\n//       }\n\n//       const data = await response.json();\n//       setAccounts(data);\n\n//       // Expand main categories by default\n//       const mainCategories = data\n//         .filter(account => account.level === 0)\n//         .map(account => account.id);\n//       setExpandedNodes(new Set(mainCategories));\n\n//     } catch (err) {\n//       const errorMsg = 'Failed to fetch accounts: ' + err.message;\n//       setError(errorMsg);\n//       showToast(errorMsg, 'error');\n//       console.error('Error fetching accounts:', err);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   // Initialize component\n//   useEffect(() => {\n//     fetchAccounts();\n//   }, []);\n\n//   // Create account\n//   const createAccount = async (accountData) => {\n//     try {\n//       setLoading(true);\n//       const response = await fetch(API_BASE_URL, {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify(accountData)\n//       });\n\n//       if (!response.ok) {\n//         const errorText = await response.text();\n//         throw new Error(errorText || `HTTP error! status: ${response.status}`);\n//       }\n\n//       const result = await response.text();\n//       showToast(result || 'Account created successfully!', 'success');\n//       await fetchAccounts(); // Refresh the list\n//       return true;\n//     } catch (err) {\n//       const errorMsg = 'Failed to create account: ' + err.message;\n//       setError(errorMsg);\n//       showToast(errorMsg, 'error');\n//       console.error('Error creating account:', err);\n//       return false;\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   // Update account\n//   const updateAccount = async (accountId, accountData) => {\n//     try {\n//       setLoading(true);\n//       const response = await fetch(`${API_BASE_URL}/${accountId}`, {\n//         method: 'PUT',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify(accountData)\n//       });\n\n//       if (!response.ok) {\n//         const errorText = await response.text();\n//         throw new Error(errorText || `HTTP error! status: ${response.status}`);\n//       }\n\n//       const result = await response.text();\n//       showToast(result || 'Account updated successfully!', 'success');\n//       await fetchAccounts(); // Refresh the list\n//       return true;\n//     } catch (err) {\n//       const errorMsg = 'Failed to update account: ' + err.message;\n//       setError(errorMsg);\n//       showToast(errorMsg, 'error');\n//       console.error('Error updating account:', err);\n//       return false;\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   // Delete account\n//   const deleteAccount = async (accountId) => {\n//     try {\n//       setLoading(true);\n//       const response = await fetch(`${API_BASE_URL}/${accountId}`, {\n//         method: 'DELETE'\n//       });\n\n//       if (!response.ok) {\n//         const errorText = await response.text();\n//         throw new Error(errorText || `HTTP error! status: ${response.status}`);\n//       }\n\n//       const result = await response.text();\n//       showToast(result || 'Account deleted successfully!', 'success');\n//       await fetchAccounts(); // Refresh the list\n//       return true;\n//     } catch (err) {\n//       const errorMsg = 'Failed to delete account: ' + err.message;\n//       setError(errorMsg);\n//       showToast(errorMsg, 'error');\n//       console.error('Error deleting account:', err);\n//       return false;\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   // Helper function to flatten hierarchy for filtering\n//   const flattenAccounts = (accounts) => {\n//     const result = [];\n//     const flatten = (items) => {\n//       items.forEach(item => {\n//         result.push(item);\n//         if (item.children && item.children.length > 0) {\n//           flatten(item.children);\n//         }\n//       });\n//     };\n//     flatten(accounts);\n//     return result;\n//   };\n\n//   // Filter accounts based on search and category\n//   const getFilteredAccounts = () => {\n//     const flatAccounts = flattenAccounts(accounts);\n//     let filtered = flatAccounts;\n\n//     if (searchTerm) {\n//       filtered = filtered.filter(account => \n//         account.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n//         account.code.includes(searchTerm) ||\n//         (account.description && account.description.toLowerCase().includes(searchTerm.toLowerCase()))\n//       );\n//     }\n\n//     if (selectedCategory !== 'all') {\n//       filtered = filtered.filter(account => account.type === selectedCategory);\n//     }\n\n//     return filtered;\n//   };\n\n//   // Build hierarchy from flat accounts (for display when not searching)\n//   const buildHierarchy = (accounts, parentId = null) => {\n//     return accounts\n//       .filter(account => account.parentId === parentId)\n//       .sort((a, b) => a.code.localeCompare(b.code))\n//       .map(account => ({\n//         ...account,\n//         children: buildHierarchy(accounts, account.id)\n//       }));\n//   };\n\n//   // Toggle expand/collapse\n//   const toggleExpand = (nodeId) => {\n//     const newExpanded = new Set(expandedNodes);\n//     if (newExpanded.has(nodeId)) {\n//       newExpanded.delete(nodeId);\n//     } else {\n//       newExpanded.add(nodeId);\n//     }\n//     setExpandedNodes(newExpanded);\n//   };\n\n//   // Handle add account\n//   const handleAddAccount = (parentId = null) => {\n//     const flatAccounts = flattenAccounts(accounts);\n//     const parentAccount = parentId ? flatAccounts.find(a => a.id === parentId) : null;\n//     const accountType = parentAccount ? parentAccount.type : 'assets';\n\n//     setFormData({\n//       code: '', // Will be generated by backend\n//       name: '',\n//       type: accountType,\n//       category: 'account',\n//       parentId,\n//       description: '',\n//       active: true\n//     });\n//     setIsAddingAccount(true);\n//   };\n\n//   // Handle edit account\n//   const handleEditAccount = (account) => {\n//     setFormData({\n//       code: account.code,\n//       name: account.name,\n//       type: account.type,\n//       category: account.category,\n//       parentId: account.parentId,\n//       description: account.description || '',\n//       active: account.active !== undefined ? account.active : true\n//     });\n//     setEditingAccount(account.id);\n//   };\n\n//   // Handle save account\n//   const handleSaveAccount = async () => {\n//     if (!formData.name) {\n//       showToast('Please fill in the account name', 'error');\n//       return;\n//     }\n\n//     const success = editingAccount \n//       ? await updateAccount(editingAccount, formData)\n//       : await createAccount(formData);\n\n//     if (success) {\n//       // Reset form\n//       setFormData({\n//         code: '',\n//         name: '',\n//         type: 'assets',\n//         category: 'account',\n//         parentId: null,\n//         description: '',\n//         active: true\n//       });\n//       setIsAddingAccount(false);\n//       setEditingAccount(null);\n//     }\n//   };\n\n//   // Handle delete account\n//   const handleDeleteAccount = async (accountId) => {\n//     const flatAccounts = flattenAccounts(accounts);\n//     const hasChildren = flatAccounts.some(a => a.parentId === accountId);\n\n//     if (hasChildren) {\n//       showToast('Cannot delete account with sub-accounts. Please delete sub-accounts first.', 'error');\n//       return;\n//     }\n\n//     if (window.confirm('Are you sure you want to delete this account?')) {\n//       await deleteAccount(accountId);\n//     }\n//   };\n\n//   // Handle cancel\n//   const handleCancel = () => {\n//     setIsAddingAccount(false);\n//     setEditingAccount(null);\n//     setFormData({\n//       code: '',\n//       name: '',\n//       type: 'assets',\n//       category: 'account',\n//       parentId: null,\n//       description: '',\n//       active: true\n//     });\n//   };\n\n//   // Render account node\n//   const renderAccountNode = (account) => {\n//     const hasChildren = account.children && account.children.length > 0;\n//     const isExpanded = expandedNodes.has(account.id);\n//     const typeConfig = accountTypes[account.type];\n\n//     return (\n//       <div key={account.id} className=\"account-node\">\n//         <div \n//           className={`flex items-center py-2 px-4 hover:bg-gray-50 border-l-4 ${\n//             account.category === 'header' ? 'border-gray-400 bg-gray-100 font-bold' :\n//             account.category === 'group' ? 'border-gray-300 bg-gray-50 font-semibold' :\n//             'border-transparent'\n//           }`}\n//           style={{ paddingLeft: `${account.level * 20 + 16}px` }}\n//         >\n//           {hasChildren && (\n//             <button\n//               onClick={() => toggleExpand(account.id)}\n//               className=\"mr-2 p-1 hover:bg-gray-200 rounded\"\n//             >\n//               {isExpanded ? <ChevronDown size={16} /> : <ChevronRight size={16} />}\n//             </button>\n//           )}\n\n//           <div className=\"flex-1 flex items-center space-x-4\">\n//             <span className=\"font-mono text-sm text-gray-600 min-w-[80px]\">\n//               {account.code}\n//             </span>\n\n//             <span className={`flex-1 ${account.category === 'header' ? 'text-lg' : ''}`}>\n//               {account.name}\n//               {!account.active && <span className=\"ml-2 text-red-500 text-xs\">(Inactive)</span>}\n//             </span>\n\n//             <span className={`px-2 py-1 rounded-full text-xs font-medium ${typeConfig.color}`}>\n//               {typeConfig.label}\n//             </span>\n\n//             <div className=\"flex space-x-1\">\n//               <button\n//                 onClick={() => handleEditAccount(account)}\n//                 className=\"p-1 hover:bg-blue-100 rounded text-blue-600\"\n//                 title=\"Edit Account\"\n//                 disabled={loading}\n//               >\n//                 <Edit size={14} />\n//               </button>\n//               <button\n//                 onClick={() => handleDeleteAccount(account.id)}\n//                 className=\"p-1 hover:bg-red-100 rounded text-red-600\"\n//                 title=\"Delete Account\"\n//                 disabled={loading}\n//               >\n//                 <Trash2 size={14} />\n//               </button>\n//               <button\n//                 onClick={() => handleAddAccount(account.id)}\n//                 className=\"p-1 hover:bg-green-100 rounded text-green-600\"\n//                 title=\"Add Sub-Account\"\n//                 disabled={loading}\n//               >\n//                 <Plus size={14} />\n//               </button>\n//             </div>\n//           </div>\n//         </div>\n\n//         {account.description && (\n//           <div className=\"px-4 py-1 text-sm text-gray-500\" style={{ paddingLeft: `${account.level * 20 + 36}px` }}>\n//             {account.description}\n//           </div>\n//         )}\n\n//         {isExpanded && hasChildren && (\n//           <div>\n//             {account.children.map(child => renderAccountNode(child))}\n//           </div>\n//         )}\n//       </div>\n//     );\n//   };\n\n//   const flatAccounts = flattenAccounts(accounts);\n//   const filteredAccounts = getFilteredAccounts();\n//   const displayAccounts = searchTerm || selectedCategory !== 'all' \n//     ? filteredAccounts \n//     : buildHierarchy(flatAccounts);\n\n//   return (\n//     <div className=\"max-w-7xl mx-auto p-6 bg-white\">\n//       {/* Toast Notifications */}\n//       <div className=\"fixed top-4 right-4 z-50 space-y-2\">\n//         {toasts.map((toast) => (\n//           <div\n//             key={toast.id}\n//             className={`flex items-center p-4 rounded-lg shadow-lg max-w-sm transform transition-all duration-300 ease-in-out ${\n//               toast.type === 'success' \n//                 ? 'bg-green-50 border border-green-200 text-green-800' \n//                 : toast.type === 'error'\n//                 ? 'bg-red-50 border border-red-200 text-red-800'\n//                 : 'bg-blue-50 border border-blue-200 text-blue-800'\n//             }`}\n//           >\n//             <div className=\"flex-shrink-0\">\n//               {toast.type === 'success' && <CheckCircle size={20} className=\"text-green-600\" />}\n//               {toast.type === 'error' && <XCircle size={20} className=\"text-red-600\" />}\n//               {toast.type === 'info' && <AlertCircle size={20} className=\"text-blue-600\" />}\n//             </div>\n//             <div className=\"ml-3 flex-1\">\n//               <p className=\"text-sm font-medium\">{toast.message}</p>\n//             </div>\n//             <button\n//               onClick={() => removeToast(toast.id)}\n//               className={`ml-3 flex-shrink-0 rounded-md p-1.5 inline-flex focus:outline-none focus:ring-2 focus:ring-offset-2 ${\n//                 toast.type === 'success' \n//                   ? 'text-green-400 hover:bg-green-100 focus:ring-green-600' \n//                   : toast.type === 'error'\n//                   ? 'text-red-400 hover:bg-red-100 focus:ring-red-600'\n//                   : 'text-blue-400 hover:bg-blue-100 focus:ring-blue-600'\n//               }`}\n//             >\n//               <X size={16} />\n//             </button>\n//           </div>\n//         ))}\n//       </div>\n\n//       <div className=\"mb-6\">\n//         <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Chart of Accounts</h1>\n//         <p className=\"text-gray-600\">Manage your company's account structure and hierarchy</p>\n//       </div>\n\n//       {/* Error Message */}\n//       {error && (\n//         <div className=\"mb-4 p-4 bg-red-50 border border-red-200 rounded-lg\">\n//           <div className=\"flex\">\n//             <div className=\"flex-1\">\n//               <p className=\"text-red-700\">{error}</p>\n//             </div>\n//             <button\n//               onClick={() => setError(null)}\n//               className=\"text-red-400 hover:text-red-600\"\n//             >\n//               <X size={16} />\n//             </button>\n//           </div>\n//         </div>\n//       )}\n\n//       {/* Controls */}\n//       <div className=\"mb-6 flex flex-wrap items-center justify-between gap-4\">\n//         <div className=\"flex items-center space-x-4\">\n//           <div className=\"relative\">\n//             <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" size={20} />\n//             <input\n//               type=\"text\"\n//               placeholder=\"Search accounts...\"\n//               value={searchTerm}\n//               onChange={(e) => setSearchTerm(e.target.value)}\n//               className=\"pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n//             />\n//           </div>\n\n//           <div className=\"relative\">\n//             <Filter className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" size={20} />\n//             <select\n//               value={selectedCategory}\n//               onChange={(e) => setSelectedCategory(e.target.value)}\n//               className=\"pl-10 pr-8 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n//             >\n//               <option value=\"all\">All Types</option>\n//               {Object.entries(accountTypes).map(([key, type]) => (\n//                 <option key={key} value={key}>{type.label}</option>\n//               ))}\n//             </select>\n//           </div>\n\n//           <button\n//             onClick={fetchAccounts}\n//             className=\"px-3 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 flex items-center space-x-2\"\n//             disabled={loading}\n//           >\n//             <RefreshCw size={16} className={loading ? 'animate-spin' : ''} />\n//             <span>Refresh</span>\n//           </button>\n//         </div>\n\n//         <button\n//           onClick={() => handleAddAccount()}\n//           className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center space-x-2\"\n//           disabled={loading}\n//         >\n//           <Plus size={20} />\n//           <span>Add Account</span>\n//         </button>\n//       </div>\n\n//       {/* Account Form */}\n//       {(isAddingAccount || editingAccount) && (\n//         <div className=\"mb-6 p-6 bg-gray-50 rounded-lg border\">\n//           <h3 className=\"text-lg font-semibold mb-4\">\n//             {editingAccount ? 'Edit Account' : 'Add New Account'}\n//           </h3>\n\n//           <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n//             <div>\n//               <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n//                 Account Code\n//               </label>\n//               <input\n//                 type=\"text\"\n//                 value={formData.code}\n//                 onChange={(e) => setFormData({...formData, code: e.target.value})}\n//                 placeholder=\"Auto-generated if empty\"\n//                 className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n//               />\n//               <p className=\"text-xs text-gray-500 mt-1\">Leave empty for auto-generation</p>\n//             </div>\n\n//             <div>\n//               <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n//                 Account Name *\n//               </label>\n//               <input\n//                 type=\"text\"\n//                 value={formData.name}\n//                 onChange={(e) => setFormData({...formData, name: e.target.value})}\n//                 placeholder=\"Enter account name\"\n//                 className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n//                 required\n//               />\n//             </div>\n\n//             <div>\n//               <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n//                 Account Type\n//               </label>\n//               <select\n//                 value={formData.type}\n//                 onChange={(e) => setFormData({...formData, type: e.target.value})}\n//                 className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n//               >\n//                 {Object.entries(accountTypes).map(([key, type]) => (\n//                   <option key={key} value={key}>{type.label} ({type.codeRange})</option>\n//                 ))}\n//               </select>\n//             </div>\n\n//             <div>\n//               <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n//                 Category\n//               </label>\n//               <select\n//                 value={formData.category}\n//                 onChange={(e) => setFormData({...formData, category: e.target.value})}\n//                 className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n//               >\n//                 <option value=\"header\">Header</option>\n//                 <option value=\"group\">Group</option>\n//                 <option value=\"account\">Account</option>\n//               </select>\n//             </div>\n\n//             <div>\n//               <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n//                 Parent Account\n//               </label>\n//               <select\n//                 value={formData.parentId || ''}\n//                 onChange={(e) => setFormData({...formData, parentId: e.target.value || null})}\n//                 className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n//               >\n//                 <option value=\"\">None (Top Level)</option>\n//                 {flatAccounts\n//                   .filter(a => a.id !== editingAccount && a.category !== 'account')\n//                   .map(account => (\n//                     <option key={account.id} value={account.id}>\n//                       {account.code} - {account.name}\n//                     </option>\n//                   ))\n//                 }\n//               </select>\n//             </div>\n\n//             <div className=\"flex items-center\">\n//               <input\n//                 type=\"checkbox\"\n//                 id=\"active\"\n//                 checked={formData.active}\n//                 onChange={(e) => setFormData({...formData, active: e.target.checked})}\n//                 className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n//               />\n//               <label htmlFor=\"active\" className=\"ml-2 block text-sm text-gray-900\">\n//                 Active\n//               </label>\n//             </div>\n\n//             <div className=\"md:col-span-2 lg:col-span-3\">\n//               <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n//                 Description\n//               </label>\n//               <textarea\n//                 value={formData.description}\n//                 onChange={(e) => setFormData({...formData, description: e.target.value})}\n//                 rows={2}\n//                 placeholder=\"Enter account description\"\n//                 className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n//               />\n//             </div>\n//           </div>\n\n//           <div className=\"mt-4 flex space-x-3\">\n//             <button\n//               onClick={handleSaveAccount}\n//               className=\"px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 flex items-center space-x-2\"\n//               disabled={loading}\n//             >\n//               <Save size={16} />\n//               <span>{loading ? 'Saving...' : 'Save'}</span>\n//             </button>\n//             <button\n//               onClick={handleCancel}\n//               className=\"px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 flex items-center space-x-2\"\n//               disabled={loading}\n//             >\n//               <X size={16} />\n//               <span>Cancel</span>\n//             </button>\n//           </div>\n//         </div>\n//       )}\n\n//       {/* Accounts Tree */}\n//       <div className=\"bg-white border border-gray-200 rounded-lg overflow-hidden\">\n//         <div className=\"px-4 py-3 bg-gray-50 border-b border-gray-200\">\n//           <div className=\"flex items-center justify-between\">\n//             <h2 className=\"text-lg font-semibold text-gray-900\">Account Structure</h2>\n//             <span className=\"text-sm text-gray-500\">\n//               {filteredAccounts.length} accounts\n//               {loading && <span className=\"ml-2 text-blue-600\">Loading...</span>}\n//             </span>\n//           </div>\n//         </div>\n\n//         <div className=\"max-h-[600px] overflow-y-auto\">\n//           {loading && accounts.length === 0 ? (\n//             <div className=\"p-8 text-center text-gray-500\">\n//               <RefreshCw className=\"animate-spin mx-auto mb-2\" size={24} />\n//               Loading accounts...\n//             </div>\n//           ) : displayAccounts.length > 0 ? (\n//             searchTerm || selectedCategory !== 'all' ? (\n//               // Flat view for search results\n//               <div>\n//                 {filteredAccounts.map(account => (\n//                   <div key={account.id}>\n//                     {renderAccountNode({...account, children: []})}\n//                   </div>\n//                 ))}\n//               </div>\n//             ) : (\n//               // Hierarchical view\n//               displayAccounts.map(account => renderAccountNode(account))\n//             )\n//           ) : (\n//             <div className=\"p-8 text-center text-gray-500\">\n//               No accounts found matching your criteria.\n//             </div>\n//           )}\n//         </div>\n//       </div>\n\n//       {/* Account Type Legend */}\n//       <div className=\"mt-6 p-4 bg-gray-50 rounded-lg\">\n//         <h3 className=\"text-sm font-semibold text-gray-700 mb-3\">Account Types & Code Ranges</h3>\n//         <div className=\"flex flex-wrap gap-4\">\n//           {Object.entries(accountTypes).map(([key, type]) => (\n//             <div key={key} className=\"flex items-center space-x-2\">\n//               <span className={`px-2 py-1 rounded-full text-xs font-medium ${type.color}`}>\n//                 {type.label}\n//               </span>\n//               <span className=\"text-sm text-gray-600 font-mono\">{type.codeRange}</span>\n//             </div>\n//           ))}\n//         </div>\n//       </div>\n\n//       {/* API Integration Info */}\n//       <div className=\"mt-6 p-4 bg-blue-50 rounded-lg\">\n//         <h3 className=\"text-sm font-semibold text-blue-800 mb-2\">API Integration Status</h3>\n//         <div className=\"text-xs text-blue-700 space-y-1\">\n//           <p>• Connected to: {API_BASE_URL}</p>\n//           <p>• Auto-refresh after CRUD operations</p>\n//           <p>• Real-time data from Spring Boot backend</p>\n//           <p>• Hierarchical structure maintained server-side</p>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ChartOfAccounts;\n\nimport React, { useState, useEffect } from 'react';\nimport { ChevronDown, ChevronRight, Plus, Edit, Trash2, Save, X, Search, Filter, RefreshCw, CheckCircle, AlertCircle, XCircle, AlertTriangle } from 'lucide-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChartOfAccounts = () => {\n  _s();\n  const [accounts, setAccounts] = useState([]);\n  const [expandedNodes, setExpandedNodes] = useState(new Set());\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedCategory, setSelectedCategory] = useState('all');\n  const [isAddingAccount, setIsAddingAccount] = useState(false);\n  const [editingAccount, setEditingAccount] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [toasts, setToasts] = useState([]);\n  const [confirmDialog, setConfirmDialog] = useState(null);\n  const [formData, setFormData] = useState({\n    code: '',\n    name: '',\n    type: 'assets',\n    category: 'account',\n    parentId: null,\n    description: '',\n    active: true\n  });\n\n  // API Base URL\n  const API_BASE_URL = 'http://localhost:8080/api/accounts';\n\n  // Toast notification system\n  const showToast = (message, type = 'success') => {\n    const id = Date.now();\n    const toast = {\n      id,\n      message,\n      type\n    };\n    setToasts(prev => [...prev, toast]);\n\n    // Auto remove after 5 seconds\n    setTimeout(() => {\n      setToasts(prev => prev.filter(t => t.id !== id));\n    }, 5000);\n  };\n  const removeToast = id => {\n    setToasts(prev => prev.filter(t => t.id !== id));\n  };\n\n  // Confirmation Dialog Component\n  const ConfirmationDialog = ({\n    isOpen,\n    title,\n    message,\n    onConfirm,\n    onCancel,\n    confirmText = \"Confirm\",\n    cancelText = \"Cancel\",\n    type = \"warning\"\n  }) => {\n    if (!isOpen) return null;\n    const typeStyles = {\n      warning: {\n        icon: /*#__PURE__*/_jsxDEV(AlertTriangle, {\n          className: \"text-yellow-600\",\n          size: 24\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2016,\n          columnNumber: 15\n        }, this),\n        iconBg: 'bg-yellow-100',\n        confirmBtn: 'bg-yellow-600 hover:bg-yellow-700'\n      },\n      danger: {\n        icon: /*#__PURE__*/_jsxDEV(XCircle, {\n          className: \"text-red-600\",\n          size: 24\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2021,\n          columnNumber: 15\n        }, this),\n        iconBg: 'bg-red-100',\n        confirmBtn: 'bg-red-600 hover:bg-red-700'\n      },\n      info: {\n        icon: /*#__PURE__*/_jsxDEV(AlertCircle, {\n          className: \"text-blue-600\",\n          size: 24\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2026,\n          columnNumber: 15\n        }, this),\n        iconBg: 'bg-blue-100',\n        confirmBtn: 'bg-blue-600 hover:bg-blue-700'\n      }\n    };\n    const style = typeStyles[type] || typeStyles.warning;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fixed inset-0 z-50 overflow-y-auto\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex min-h-screen items-center justify-center p-4 text-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity\",\n          onClick: onCancel\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2037,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"relative transform overflow-hidden rounded-lg bg-white text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-lg\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bg-white px-4 pb-4 pt-5 sm:p-6 sm:pb-4\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"sm:flex sm:items-start\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: `mx-auto flex h-12 w-12 flex-shrink-0 items-center justify-center rounded-full sm:mx-0 sm:h-10 sm:w-10 ${style.iconBg}`,\n                children: style.icon\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2042,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"mt-3 text-center sm:ml-4 sm:mt-0 sm:text-left\",\n                children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                  className: \"text-lg font-semibold leading-6 text-gray-900\",\n                  children: title\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2046,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"mt-2\",\n                  children: /*#__PURE__*/_jsxDEV(\"p\", {\n                    className: \"text-sm text-gray-500\",\n                    children: message\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2050,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2049,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 2045,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 2041,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2040,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bg-gray-50 px-4 py-3 sm:flex sm:flex-row-reverse sm:px-6\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: `inline-flex w-full justify-center rounded-md px-3 py-2 text-sm font-semibold text-white shadow-sm sm:ml-3 sm:w-auto ${style.confirmBtn}`,\n              onClick: onConfirm,\n              children: confirmText\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2058,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"mt-3 inline-flex w-full justify-center rounded-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50 sm:mt-0 sm:w-auto\",\n              onClick: onCancel,\n              children: cancelText\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2065,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2057,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2039,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 2036,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 2035,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Account types configuration\n  const accountTypes = {\n    assets: {\n      label: 'Assets',\n      color: 'bg-green-100 text-green-800',\n      codeRange: '1000-1999'\n    },\n    liabilities: {\n      label: 'Liabilities',\n      color: 'bg-red-100 text-red-800',\n      codeRange: '2000-2999'\n    },\n    equity: {\n      label: 'Equity',\n      color: 'bg-blue-100 text-blue-800',\n      codeRange: '3000-3999'\n    },\n    revenue: {\n      label: 'Revenue',\n      color: 'bg-purple-100 text-purple-800',\n      codeRange: '4000-4999'\n    },\n    expenses: {\n      label: 'Expenses',\n      color: 'bg-orange-100 text-orange-800',\n      codeRange: '5000-5999'\n    }\n  };\n\n  // Fetch accounts from API\n  const fetchAccounts = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await fetch(API_BASE_URL);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      setAccounts(data);\n\n      // Expand main categories by default\n      const mainCategories = data.filter(account => account.level === 0).map(account => account.id);\n      setExpandedNodes(new Set(mainCategories));\n    } catch (err) {\n      const errorMsg = 'Failed to fetch accounts: ' + err.message;\n      setError(errorMsg);\n      showToast(errorMsg, 'error');\n      console.error('Error fetching accounts:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Initialize component\n  useEffect(() => {\n    fetchAccounts();\n  }, []);\n\n  // Create account\n  const createAccount = async accountData => {\n    try {\n      setLoading(true);\n      const response = await fetch(API_BASE_URL, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(accountData)\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(errorText || `HTTP error! status: ${response.status}`);\n      }\n      const result = await response.text();\n      showToast(result || 'Account created successfully!', 'success');\n      await fetchAccounts(); // Refresh the list\n      return true;\n    } catch (err) {\n      const errorMsg = 'Failed to create account: ' + err.message;\n      setError(errorMsg);\n      showToast(errorMsg, 'error');\n      console.error('Error creating account:', err);\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Update account\n  const updateAccount = async (accountId, accountData) => {\n    try {\n      setLoading(true);\n      const response = await fetch(`${API_BASE_URL}/${accountId}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(accountData)\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(errorText || `HTTP error! status: ${response.status}`);\n      }\n      const result = await response.text();\n      showToast(result || 'Account updated successfully!', 'success');\n      await fetchAccounts(); // Refresh the list\n      return true;\n    } catch (err) {\n      const errorMsg = 'Failed to update account: ' + err.message;\n      setError(errorMsg);\n      showToast(errorMsg, 'error');\n      console.error('Error updating account:', err);\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Delete account\n  const deleteAccount = async accountId => {\n    try {\n      setLoading(true);\n      const response = await fetch(`${API_BASE_URL}/${accountId}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(errorText || `HTTP error! status: ${response.status}`);\n      }\n      const result = await response.text();\n      showToast(result || 'Account deleted successfully!', 'success');\n      await fetchAccounts(); // Refresh the list\n      return true;\n    } catch (err) {\n      const errorMsg = 'Failed to delete account: ' + err.message;\n      setError(errorMsg);\n      showToast(errorMsg, 'error');\n      console.error('Error deleting account:', err);\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Helper function to flatten hierarchy for filtering\n  const flattenAccounts = accounts => {\n    const result = [];\n    const flatten = items => {\n      items.forEach(item => {\n        result.push(item);\n        if (item.children && item.children.length > 0) {\n          flatten(item.children);\n        }\n      });\n    };\n    flatten(accounts);\n    return result;\n  };\n\n  // Filter accounts based on search and category\n  const getFilteredAccounts = () => {\n    const flatAccounts = flattenAccounts(accounts);\n    let filtered = flatAccounts;\n    if (searchTerm) {\n      filtered = filtered.filter(account => account.name.toLowerCase().includes(searchTerm.toLowerCase()) || account.code.includes(searchTerm) || account.description && account.description.toLowerCase().includes(searchTerm.toLowerCase()));\n    }\n    if (selectedCategory !== 'all') {\n      filtered = filtered.filter(account => account.type === selectedCategory);\n    }\n    return filtered;\n  };\n\n  // Build hierarchy from flat accounts (for display when not searching)\n  const buildHierarchy = (accounts, parentId = null) => {\n    return accounts.filter(account => account.parentId === parentId).sort((a, b) => a.code.localeCompare(b.code)).map(account => ({\n      ...account,\n      children: buildHierarchy(accounts, account.id)\n    }));\n  };\n\n  // Toggle expand/collapse\n  const toggleExpand = nodeId => {\n    const newExpanded = new Set(expandedNodes);\n    if (newExpanded.has(nodeId)) {\n      newExpanded.delete(nodeId);\n    } else {\n      newExpanded.add(nodeId);\n    }\n    setExpandedNodes(newExpanded);\n  };\n\n  // Handle add account\n  const handleAddAccount = (parentId = null) => {\n    const flatAccounts = flattenAccounts(accounts);\n    const parentAccount = parentId ? flatAccounts.find(a => a.id === parentId) : null;\n    const accountType = parentAccount ? parentAccount.type : 'assets';\n    setFormData({\n      code: '',\n      // Will be generated by backend\n      name: '',\n      type: accountType,\n      category: 'account',\n      parentId,\n      description: '',\n      active: true\n    });\n    setIsAddingAccount(true);\n  };\n\n  // Handle edit account\n  const handleEditAccount = account => {\n    setFormData({\n      code: account.code,\n      name: account.name,\n      type: account.type,\n      category: account.category,\n      parentId: account.parentId,\n      description: account.description || '',\n      active: account.active !== undefined ? account.active : true\n    });\n    setEditingAccount(account.id);\n  };\n\n  // Handle save account\n  const handleSaveAccount = async () => {\n    if (!formData.name) {\n      showToast('Please fill in the account name', 'error');\n      return;\n    }\n    const success = editingAccount ? await updateAccount(editingAccount, formData) : await createAccount(formData);\n    if (success) {\n      // Reset form\n      setFormData({\n        code: '',\n        name: '',\n        type: 'assets',\n        category: 'account',\n        parentId: null,\n        description: '',\n        active: true\n      });\n      setIsAddingAccount(false);\n      setEditingAccount(null);\n    }\n  };\n\n  // Handle delete account with confirmation popup\n  const handleDeleteAccount = async account => {\n    const flatAccounts = flattenAccounts(accounts);\n    const hasChildren = flatAccounts.some(a => a.parentId === account.id);\n    if (hasChildren) {\n      showToast('Cannot delete account with sub-accounts. Please delete sub-accounts first.', 'error');\n      return;\n    }\n    setConfirmDialog({\n      title: 'Delete Account',\n      message: `Are you sure you want to delete the account \"${account.name}\" (${account.code})? This action cannot be undone.`,\n      type: 'danger',\n      confirmText: 'Delete',\n      cancelText: 'Cancel',\n      onConfirm: async () => {\n        await deleteAccount(account.id);\n        setConfirmDialog(null);\n      },\n      onCancel: () => {\n        setConfirmDialog(null);\n      }\n    });\n  };\n\n  // Handle cancel\n  const handleCancel = () => {\n    setIsAddingAccount(false);\n    setEditingAccount(null);\n    setFormData({\n      code: '',\n      name: '',\n      type: 'assets',\n      category: 'account',\n      parentId: null,\n      description: '',\n      active: true\n    });\n  };\n\n  // Render account node\n  const renderAccountNode = account => {\n    const hasChildren = account.children && account.children.length > 0;\n    const isExpanded = expandedNodes.has(account.id);\n    const typeConfig = accountTypes[account.type];\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"account-node\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `flex items-center py-2 px-4 hover:bg-gray-50 border-l-4 ${account.category === 'header' ? 'border-gray-400 bg-gray-100 font-bold' : account.category === 'group' ? 'border-gray-300 bg-gray-50 font-semibold' : 'border-transparent'}`,\n        style: {\n          paddingLeft: `${account.level * 20 + 16}px`\n        },\n        children: [hasChildren && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => toggleExpand(account.id),\n          className: \"mr-2 p-1 hover:bg-gray-200 rounded\",\n          children: isExpanded ? /*#__PURE__*/_jsxDEV(ChevronDown, {\n            size: 16\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2393,\n            columnNumber: 29\n          }, this) : /*#__PURE__*/_jsxDEV(ChevronRight, {\n            size: 16\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2393,\n            columnNumber: 57\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2389,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex-1 flex items-center space-x-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"font-mono text-sm text-gray-600 min-w-[80px]\",\n            children: account.code\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2398,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: `flex-1 ${account.category === 'header' ? 'text-lg' : ''}`,\n            children: [account.name, !account.active && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"ml-2 text-red-500 text-xs\",\n              children: \"(Inactive)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2404,\n              columnNumber: 35\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2402,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: `px-2 py-1 rounded-full text-xs font-medium ${typeConfig.color}`,\n            children: typeConfig.label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2407,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex space-x-1\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleEditAccount(account),\n              className: \"p-1 hover:bg-blue-100 rounded text-blue-600\",\n              title: \"Edit Account\",\n              disabled: loading,\n              children: /*#__PURE__*/_jsxDEV(Edit, {\n                size: 14\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2418,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2412,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleDeleteAccount(account),\n              className: \"p-1 hover:bg-red-100 rounded text-red-600\",\n              title: \"Delete Account\",\n              disabled: loading,\n              children: /*#__PURE__*/_jsxDEV(Trash2, {\n                size: 14\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2426,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2420,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleAddAccount(account.id),\n              className: \"p-1 hover:bg-green-100 rounded text-green-600\",\n              title: \"Add Sub-Account\",\n              disabled: loading,\n              children: /*#__PURE__*/_jsxDEV(Plus, {\n                size: 14\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2434,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2428,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2411,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2397,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 2380,\n        columnNumber: 9\n      }, this), account.description && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"px-4 py-1 text-sm text-gray-500\",\n        style: {\n          paddingLeft: `${account.level * 20 + 36}px`\n        },\n        children: account.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2441,\n        columnNumber: 11\n      }, this), isExpanded && hasChildren && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: account.children.map(child => renderAccountNode(child))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2447,\n        columnNumber: 11\n      }, this)]\n    }, account.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 2379,\n      columnNumber: 7\n    }, this);\n  };\n  const flatAccounts = flattenAccounts(accounts);\n  const filteredAccounts = getFilteredAccounts();\n  const displayAccounts = searchTerm || selectedCategory !== 'all' ? filteredAccounts : buildHierarchy(flatAccounts);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"max-w-7xl mx-auto p-6 bg-white\",\n    children: [confirmDialog && /*#__PURE__*/_jsxDEV(ConfirmationDialog, {\n      isOpen: true,\n      title: confirmDialog.title,\n      message: confirmDialog.message,\n      type: confirmDialog.type,\n      confirmText: confirmDialog.confirmText,\n      cancelText: confirmDialog.cancelText,\n      onConfirm: confirmDialog.onConfirm,\n      onCancel: confirmDialog.onCancel\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 2465,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fixed top-4 right-4 z-40 space-y-2\",\n      children: toasts.map(toast => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `flex items-center p-4 rounded-lg shadow-lg max-w-sm transform transition-all duration-300 ease-in-out ${toast.type === 'success' ? 'bg-green-50 border border-green-200 text-green-800' : toast.type === 'error' ? 'bg-red-50 border border-red-200 text-red-800' : 'bg-blue-50 border border-blue-200 text-blue-800'}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex-shrink-0\",\n          children: [toast.type === 'success' && /*#__PURE__*/_jsxDEV(CheckCircle, {\n            size: 20,\n            className: \"text-green-600\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2491,\n            columnNumber: 44\n          }, this), toast.type === 'error' && /*#__PURE__*/_jsxDEV(XCircle, {\n            size: 20,\n            className: \"text-red-600\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2492,\n            columnNumber: 42\n          }, this), toast.type === 'info' && /*#__PURE__*/_jsxDEV(AlertCircle, {\n            size: 20,\n            className: \"text-blue-600\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2493,\n            columnNumber: 41\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2490,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ml-3 flex-1\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-sm font-medium\",\n            children: toast.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2496,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2495,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => removeToast(toast.id),\n          className: `ml-3 flex-shrink-0 rounded-md p-1.5 inline-flex focus:outline-none focus:ring-2 focus:ring-offset-2 ${toast.type === 'success' ? 'text-green-400 hover:bg-green-100 focus:ring-green-600' : toast.type === 'error' ? 'text-red-400 hover:bg-red-100 focus:ring-red-600' : 'text-blue-400 hover:bg-blue-100 focus:ring-blue-600'}`,\n          children: /*#__PURE__*/_jsxDEV(X, {\n            size: 16\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2508,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2498,\n          columnNumber: 13\n        }, this)]\n      }, toast.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 2480,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 2478,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-3xl font-bold text-gray-900 mb-2\",\n        children: \"Chart of Accounts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2515,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-gray-600\",\n        children: \"Manage your company's account structure and hierarchy\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2516,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 2514,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-4 p-4 bg-red-50 border border-red-200 rounded-lg\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex-1\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-red-700\",\n            children: error\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2524,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2523,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setError(null),\n          className: \"text-red-400 hover:text-red-600\",\n          children: /*#__PURE__*/_jsxDEV(X, {\n            size: 16\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2530,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2526,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 2522,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 2521,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-6 flex flex-wrap items-center justify-between gap-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center space-x-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"relative\",\n          children: [/*#__PURE__*/_jsxDEV(Search, {\n            className: \"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\",\n            size: 20\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2540,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Search accounts...\",\n            value: searchTerm,\n            onChange: e => setSearchTerm(e.target.value),\n            className: \"pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2541,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2539,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"relative\",\n          children: [/*#__PURE__*/_jsxDEV(Filter, {\n            className: \"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\",\n            size: 20\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2551,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: selectedCategory,\n            onChange: e => setSelectedCategory(e.target.value),\n            className: \"pl-10 pr-8 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\",\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"all\",\n              children: \"All Types\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2557,\n              columnNumber: 15\n            }, this), Object.entries(accountTypes).map(([key, type]) => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: key,\n              children: type.label\n            }, key, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2559,\n              columnNumber: 17\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2552,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2550,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: fetchAccounts,\n          className: \"px-3 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 flex items-center space-x-2\",\n          disabled: loading,\n          children: [/*#__PURE__*/_jsxDEV(RefreshCw, {\n            size: 16,\n            className: loading ? 'animate-spin' : ''\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2569,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Refresh\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2570,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2564,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 2538,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleAddAccount(),\n        className: \"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center space-x-2\",\n        disabled: loading,\n        children: [/*#__PURE__*/_jsxDEV(Plus, {\n          size: 20\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2579,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Add Account\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2580,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 2574,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 2537,\n      columnNumber: 7\n    }, this), (isAddingAccount || editingAccount) && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-6 p-6 bg-gray-50 rounded-lg border\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"text-lg font-semibold mb-4\",\n        children: editingAccount ? 'Edit Account' : 'Add New Account'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2587,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"block text-sm font-medium text-gray-700 mb-1\",\n            children: \"Account Code\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2593,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: formData.code,\n            onChange: e => setFormData({\n              ...formData,\n              code: e.target.value\n            }),\n            placeholder: \"Auto-generated if empty\",\n            className: \"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2596,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-xs text-gray-500 mt-1\",\n            children: \"Leave empty for auto-generation\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2603,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2592,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"block text-sm font-medium text-gray-700 mb-1\",\n            children: \"Account Name *\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2607,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: formData.name,\n            onChange: e => setFormData({\n              ...formData,\n              name: e.target.value\n            }),\n            placeholder: \"Enter account name\",\n            className: \"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2610,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2606,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"block text-sm font-medium text-gray-700 mb-1\",\n            children: \"Account Type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2621,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: formData.type,\n            onChange: e => setFormData({\n              ...formData,\n              type: e.target.value\n            }),\n            className: \"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\",\n            children: Object.entries(accountTypes).map(([key, type]) => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: key,\n              children: [type.label, \" (\", type.codeRange, \")\"]\n            }, key, true, {\n              fileName: _jsxFileName,\n              lineNumber: 2630,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2624,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2620,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"block text-sm font-medium text-gray-700 mb-1\",\n            children: \"Category\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2636,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: formData.category,\n            onChange: e => setFormData({\n              ...formData,\n              category: e.target.value\n            }),\n            className: \"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\",\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"header\",\n              children: \"Header\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2644,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"group\",\n              children: \"Group\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2645,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"account\",\n              children: \"Account\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2646,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2639,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2635,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"block text-sm font-medium text-gray-700 mb-1\",\n            children: \"Parent Account\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2651,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: formData.parentId || '',\n            onChange: e => setFormData({\n              ...formData,\n              parentId: e.target.value || null\n            }),\n            className: \"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\",\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"None (Top Level)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2659,\n              columnNumber: 17\n            }, this), flatAccounts.filter(a => a.id !== editingAccount && a.category !== 'account').map(account => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: account.id,\n              children: [account.code, \" - \", account.name]\n            }, account.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 2663,\n              columnNumber: 21\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2654,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2650,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            id: \"active\",\n            checked: formData.active,\n            onChange: e => setFormData({\n              ...formData,\n              active: e.target.checked\n            }),\n            className: \"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2672,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"active\",\n            className: \"ml-2 block text-sm text-gray-900\",\n            children: \"Active\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2679,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2671,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"md:col-span-2 lg:col-span-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"block text-sm font-medium text-gray-700 mb-1\",\n            children: \"Description\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2685,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            value: formData.description,\n            onChange: e => setFormData({\n              ...formData,\n              description: e.target.value\n            }),\n            rows: 2,\n            placeholder: \"Enter account description\",\n            className: \"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2688,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2684,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 2591,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-4 flex space-x-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSaveAccount,\n          className: \"px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 flex items-center space-x-2\",\n          disabled: loading,\n          children: [/*#__PURE__*/_jsxDEV(Save, {\n            size: 16\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2704,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: loading ? 'Saving...' : 'Save'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2705,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2699,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleCancel,\n          className: \"px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 flex items-center space-x-2\",\n          disabled: loading,\n          children: [/*#__PURE__*/_jsxDEV(X, {\n            size: 16\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2712,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2713,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2707,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 2698,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 2586,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-white border border-gray-200 rounded-lg overflow-hidden\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"px-4 py-3 bg-gray-50 border-b border-gray-200\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center justify-between\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"text-lg font-semibold text-gray-900\",\n            children: \"Account Structure\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2723,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-sm text-gray-500\",\n            children: [filteredAccounts.length, \" accounts\", loading && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"ml-2 text-blue-600\",\n              children: \"Loading...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2726,\n              columnNumber: 27\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2724,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2722,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2721,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"max-h-[600px] overflow-y-auto\",\n        children: loading && accounts.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"p-8 text-center text-gray-500\",\n          children: [/*#__PURE__*/_jsxDEV(RefreshCw, {\n            className: \"animate-spin mx-auto mb-2\",\n            size: 24\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2734,\n            columnNumber: 15\n          }, this), \"Loading accounts...\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2733,\n          columnNumber: 13\n        }, this) : displayAccounts.length > 0 ? searchTerm || selectedCategory !== 'all' ?\n        /*#__PURE__*/\n        // Flat view for search results\n        _jsxDEV(\"div\", {\n          children: filteredAccounts.map(account => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: renderAccountNode({\n              ...account,\n              children: []\n            })\n          }, account.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2742,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2740,\n          columnNumber: 15\n        }, this) :\n        // Hierarchical view\n        displayAccounts.map(account => renderAccountNode(account)) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"p-8 text-center text-gray-500\",\n          children: \"No accounts found matching your criteria.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2752,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2731,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 2720,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-6 p-4 bg-gray-50 rounded-lg\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"text-sm font-semibold text-gray-700 mb-3\",\n        children: \"Account Types & Code Ranges\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2761,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex flex-wrap gap-4\",\n        children: Object.entries(accountTypes).map(([key, type]) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center space-x-2\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: `px-2 py-1 rounded-full text-xs font-medium ${type.color}`,\n            children: type.label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2765,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-sm text-gray-600 font-mono\",\n            children: type.codeRange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2768,\n            columnNumber: 15\n          }, this)]\n        }, key, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2764,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2762,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 2760,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-6 p-4 bg-blue-50 rounded-lg\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"text-sm font-semibold text-blue-800 mb-2\",\n        children: \"API Integration Status\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2776,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-xs text-blue-700 space-y-1\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\u2022 Connected to: \", API_BASE_URL]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2778,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"\\u2022 Auto-refresh after CRUD operations\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2779,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"\\u2022 Real-time data from Spring Boot backend\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2780,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"\\u2022 Hierarchical structure maintained server-side\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2781,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 2777,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 2775,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 2462,\n    columnNumber: 5\n  }, this);\n};\n_s(ChartOfAccounts, \"dKeyclE5JqPKlF/6QnHM1kDICHI=\");\n_c = ChartOfAccounts;\nexport default ChartOfAccounts;\nvar _c;\n$RefreshReg$(_c, \"ChartOfAccounts\");","map":{"version":3,"names":["React","useState","useEffect","ChevronDown","ChevronRight","Plus","Edit","Trash2","Save","X","Search","Filter","RefreshCw","CheckCircle","AlertCircle","XCircle","AlertTriangle","jsxDEV","_jsxDEV","ChartOfAccounts","_s","accounts","setAccounts","expandedNodes","setExpandedNodes","Set","searchTerm","setSearchTerm","selectedCategory","setSelectedCategory","isAddingAccount","setIsAddingAccount","editingAccount","setEditingAccount","loading","setLoading","error","setError","toasts","setToasts","confirmDialog","setConfirmDialog","formData","setFormData","code","name","type","category","parentId","description","active","API_BASE_URL","showToast","message","id","Date","now","toast","prev","setTimeout","filter","t","removeToast","ConfirmationDialog","isOpen","title","onConfirm","onCancel","confirmText","cancelText","typeStyles","warning","icon","className","size","fileName","_jsxFileName","lineNumber","columnNumber","iconBg","confirmBtn","danger","info","style","children","onClick","accountTypes","assets","label","color","codeRange","liabilities","equity","revenue","expenses","fetchAccounts","response","fetch","ok","Error","status","data","json","mainCategories","account","level","map","err","errorMsg","console","createAccount","accountData","method","headers","body","JSON","stringify","errorText","text","result","updateAccount","accountId","deleteAccount","flattenAccounts","flatten","items","forEach","item","push","length","getFilteredAccounts","flatAccounts","filtered","toLowerCase","includes","buildHierarchy","sort","a","b","localeCompare","toggleExpand","nodeId","newExpanded","has","delete","add","handleAddAccount","parentAccount","find","accountType","handleEditAccount","undefined","handleSaveAccount","success","handleDeleteAccount","hasChildren","some","handleCancel","renderAccountNode","isExpanded","typeConfig","paddingLeft","disabled","child","filteredAccounts","displayAccounts","placeholder","value","onChange","e","target","Object","entries","key","required","checked","htmlFor","rows","_c","$RefreshReg$"],"sources":["C:/Users/Logic-Unit/my-account/src/pages/ChartOfAccounts.jsx"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import { ChevronDown, ChevronRight, Plus, Edit, Trash2, Save, X, Search, Filter } from 'lucide-react';\r\n\r\n// const ChartOfAccounts = () => {\r\n//   const [accounts, setAccounts] = useState([]);\r\n//   const [expandedNodes, setExpandedNodes] = useState(new Set());\r\n//   const [searchTerm, setSearchTerm] = useState('');\r\n//   const [selectedCategory, setSelectedCategory] = useState('all');\r\n//   const [isAddingAccount, setIsAddingAccount] = useState(false);\r\n//   const [editingAccount, setEditingAccount] = useState(null);\r\n//   const [formData, setFormData] = useState({\r\n//     code: '',\r\n//     name: '',\r\n//     type: 'assets',\r\n//     category: 'account',\r\n//     parentId: null,\r\n//     description: '',\r\n//     isActive: true\r\n//   });\r\n\r\n//   // Initialize with default account structure\r\n//   useEffect(() => {\r\n//     const defaultAccounts = [\r\n//       // Assets\r\n//       { id: '1000', code: '1000', name: 'Assets', type: 'assets', category: 'header', parentId: null, level: 0, isActive: true, description: 'All company assets' },\r\n//       { id: '1100', code: '1100', name: 'Current Assets', type: 'assets', category: 'group', parentId: '1000', level: 1, isActive: true, description: 'Assets expected to be converted to cash within one year' },\r\n//       { id: '1110', code: '1110', name: 'Cash and Cash Equivalents', type: 'assets', category: 'account', parentId: '1100', level: 2, isActive: true, description: 'Cash in hand and bank accounts' },\r\n//       { id: '1111', code: '1111', name: 'Petty Cash', type: 'assets', category: 'account', parentId: '1110', level: 3, isActive: true, description: 'Small cash amounts for daily expenses' },\r\n//       { id: '1112', code: '1112', name: 'Bank - Main Account', type: 'assets', category: 'account', parentId: '1110', level: 3, isActive: true, description: 'Primary business bank account' },\r\n//       { id: '1120', code: '1120', name: 'Accounts Receivable', type: 'assets', category: 'account', parentId: '1100', level: 2, isActive: true, description: 'Money owed by customers' },\r\n//       { id: '1130', code: '1130', name: 'Inventory', type: 'assets', category: 'account', parentId: '1100', level: 2, isActive: true, description: 'Products held for sale' },\r\n//       { id: '1200', code: '1200', name: 'Fixed Assets', type: 'assets', category: 'group', parentId: '1000', level: 1, isActive: true, description: 'Long-term assets used in business operations' },\r\n//       { id: '1210', code: '1210', name: 'Equipment', type: 'assets', category: 'account', parentId: '1200', level: 2, isActive: true, description: 'Business equipment and machinery' },\r\n//       { id: '1220', code: '1220', name: 'Accumulated Depreciation - Equipment', type: 'assets', category: 'account', parentId: '1200', level: 2, isActive: true, description: 'Accumulated depreciation on equipment' },\r\n\r\n//       // Liabilities\r\n//       { id: '2000', code: '2000', name: 'Liabilities', type: 'liabilities', category: 'header', parentId: null, level: 0, isActive: true, description: 'All company liabilities' },\r\n//       { id: '2100', code: '2100', name: 'Current Liabilities', type: 'liabilities', category: 'group', parentId: '2000', level: 1, isActive: true, description: 'Debts due within one year' },\r\n//       { id: '2110', code: '2110', name: 'Accounts Payable', type: 'liabilities', category: 'account', parentId: '2100', level: 2, isActive: true, description: 'Money owed to suppliers' },\r\n//       { id: '2120', code: '2120', name: 'Accrued Expenses', type: 'liabilities', category: 'account', parentId: '2100', level: 2, isActive: true, description: 'Expenses incurred but not yet paid' },\r\n//       { id: '2130', code: '2130', name: 'Sales Tax Payable', type: 'liabilities', category: 'account', parentId: '2100', level: 2, isActive: true, description: 'Sales tax collected from customers' },\r\n\r\n//       // Equity\r\n//       { id: '3000', code: '3000', name: 'Equity', type: 'equity', category: 'header', parentId: null, level: 0, isActive: true, description: 'Owner equity in the business' },\r\n//       { id: '3100', code: '3100', name: 'Owner Equity', type: 'equity', category: 'account', parentId: '3000', level: 1, isActive: true, description: 'Owner investment in business' },\r\n//       { id: '3200', code: '3200', name: 'Retained Earnings', type: 'equity', category: 'account', parentId: '3000', level: 1, isActive: true, description: 'Accumulated profits retained in business' },\r\n\r\n//       // Revenue\r\n//       { id: '4000', code: '4000', name: 'Revenue', type: 'revenue', category: 'header', parentId: null, level: 0, isActive: true, description: 'All company revenue' },\r\n//       { id: '4100', code: '4100', name: 'Sales Revenue', type: 'revenue', category: 'account', parentId: '4000', level: 1, isActive: true, description: 'Revenue from product sales' },\r\n//       { id: '4200', code: '4200', name: 'Service Revenue', type: 'revenue', category: 'account', parentId: '4000', level: 1, isActive: true, description: 'Revenue from services provided' },\r\n\r\n//       // Expenses\r\n//       { id: '5000', code: '5000', name: 'Expenses', type: 'expenses', category: 'header', parentId: null, level: 0, isActive: true, description: 'All company expenses' },\r\n//       { id: '5100', code: '5100', name: 'Cost of Goods Sold', type: 'expenses', category: 'account', parentId: '5000', level: 1, isActive: true, description: 'Direct costs of products sold' },\r\n//       { id: '5200', code: '5200', name: 'Operating Expenses', type: 'expenses', category: 'group', parentId: '5000', level: 1, isActive: true, description: 'Day-to-day business operating expenses' },\r\n//       { id: '5210', code: '5210', name: 'Rent Expense', type: 'expenses', category: 'account', parentId: '5200', level: 2, isActive: true, description: 'Monthly rent payments' },\r\n//       { id: '5220', code: '5220', name: 'Utilities Expense', type: 'expenses', category: 'account', parentId: '5200', level: 2, isActive: true, description: 'Electricity, water, internet costs' },\r\n//       { id: '5230', code: '5230', name: 'Salaries and Wages', type: 'expenses', category: 'account', parentId: '5200', level: 2, isActive: true, description: 'Employee compensation' },\r\n//     ];\r\n\r\n//     setAccounts(defaultAccounts);\r\n//     // Expand main categories by default\r\n//     setExpandedNodes(new Set(['1000', '2000', '3000', '4000', '5000']));\r\n//   }, []);\r\n\r\n//   const accountTypes = {\r\n//     assets: { label: 'Assets', color: 'bg-green-100 text-green-800', codeRange: '1000-1999' },\r\n//     liabilities: { label: 'Liabilities', color: 'bg-red-100 text-red-800', codeRange: '2000-2999' },\r\n//     equity: { label: 'Equity', color: 'bg-blue-100 text-blue-800', codeRange: '3000-3999' },\r\n//     revenue: { label: 'Revenue', color: 'bg-purple-100 text-purple-800', codeRange: '4000-4999' },\r\n//     expenses: { label: 'Expenses', color: 'bg-orange-100 text-orange-800', codeRange: '5000-5999' }\r\n//   };\r\n\r\n//   const getFilteredAccounts = () => {\r\n//     let filtered = accounts;\r\n\r\n//     if (searchTerm) {\r\n//       filtered = filtered.filter(account => \r\n//         account.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n//         account.code.includes(searchTerm) ||\r\n//         account.description.toLowerCase().includes(searchTerm.toLowerCase())\r\n//       );\r\n//     }\r\n\r\n//     if (selectedCategory !== 'all') {\r\n//       filtered = filtered.filter(account => account.type === selectedCategory);\r\n//     }\r\n\r\n//     return filtered;\r\n//   };\r\n\r\n//   const buildHierarchy = (accounts, parentId = null) => {\r\n//     return accounts\r\n//       .filter(account => account.parentId === parentId)\r\n//       .sort((a, b) => a.code.localeCompare(b.code))\r\n//       .map(account => ({\r\n//         ...account,\r\n//         children: buildHierarchy(accounts, account.id)\r\n//       }));\r\n//   };\r\n\r\n//   const toggleExpand = (nodeId) => {\r\n//     const newExpanded = new Set(expandedNodes);\r\n//     if (newExpanded.has(nodeId)) {\r\n//       newExpanded.delete(nodeId);\r\n//     } else {\r\n//       newExpanded.add(nodeId);\r\n//     }\r\n//     setExpandedNodes(newExpanded);\r\n//   };\r\n\r\n//   const handleAddAccount = (parentId = null) => {\r\n//     const parentAccount = parentId ? accounts.find(a => a.id === parentId) : null;\r\n//     const accountType = parentAccount ? parentAccount.type : 'assets';\r\n    \r\n//     setFormData({\r\n//       code: generateAccountCode(accountType, parentId),\r\n//       name: '',\r\n//       type: accountType,\r\n//       category: 'account',\r\n//       parentId,\r\n//       description: '',\r\n//       isActive: true\r\n//     });\r\n//     setIsAddingAccount(true);\r\n//   };\r\n\r\n//   const handleEditAccount = (account) => {\r\n//     setFormData({\r\n//       code: account.code,\r\n//       name: account.name,\r\n//       type: account.type,\r\n//       category: account.category,\r\n//       parentId: account.parentId,\r\n//       description: account.description || '',\r\n//       isActive: account.isActive\r\n//     });\r\n//     setEditingAccount(account.id);\r\n//   };\r\n\r\n//   const generateAccountCode = (type, parentId = null) => {\r\n//     const typeRanges = {\r\n//       assets: { start: 1000, end: 1999 },\r\n//       liabilities: { start: 2000, end: 2999 },\r\n//       equity: { start: 3000, end: 3999 },\r\n//       revenue: { start: 4000, end: 4999 },\r\n//       expenses: { start: 5000, end: 5999 }\r\n//     };\r\n\r\n//     let baseCode = typeRanges[type].start;\r\n    \r\n//     if (parentId) {\r\n//       const parent = accounts.find(a => a.id === parentId);\r\n//       if (parent) {\r\n//         const siblingCodes = accounts\r\n//           .filter(a => a.parentId === parentId)\r\n//           .map(a => parseInt(a.code))\r\n//           .sort((a, b) => a - b);\r\n        \r\n//         if (siblingCodes.length > 0) {\r\n//           baseCode = Math.max(...siblingCodes) + 1;\r\n//         } else {\r\n//           baseCode = parseInt(parent.code) + 10;\r\n//         }\r\n//       }\r\n//     } else {\r\n//       const existingCodes = accounts\r\n//         .filter(a => a.type === type)\r\n//         .map(a => parseInt(a.code))\r\n//         .sort((a, b) => a - b);\r\n      \r\n//       if (existingCodes.length > 0) {\r\n//         baseCode = Math.max(...existingCodes) + 100;\r\n//       }\r\n//     }\r\n\r\n//     return baseCode.toString();\r\n//   };\r\n\r\n//   const handleSaveAccount = () => {\r\n//     if (!formData.code || !formData.name) {\r\n//       alert('Please fill in required fields (Code and Name)');\r\n//       return;\r\n//     }\r\n\r\n//     // Check for duplicate codes\r\n//     if (accounts.some(a => a.code === formData.code && a.id !== editingAccount)) {\r\n//       alert('Account code already exists');\r\n//       return;\r\n//     }\r\n\r\n//     if (editingAccount) {\r\n//       // Edit existing account\r\n//       setAccounts(accounts.map(account => \r\n//         account.id === editingAccount \r\n//           ? { ...account, ...formData }\r\n//           : account\r\n//       ));\r\n//       setEditingAccount(null);\r\n//     } else {\r\n//       // Add new account\r\n//       const newId = (Math.max(...accounts.map(a => parseInt(a.id))) + 1).toString();\r\n//       const parentLevel = formData.parentId \r\n//         ? accounts.find(a => a.id === formData.parentId)?.level || 0\r\n//         : 0;\r\n      \r\n//       const newAccount = {\r\n//         id: newId,\r\n//         ...formData,\r\n//         level: parentLevel + 1\r\n//       };\r\n      \r\n//       setAccounts([...accounts, newAccount]);\r\n//       setIsAddingAccount(false);\r\n//     }\r\n\r\n//     // Reset form\r\n//     setFormData({\r\n//       code: '',\r\n//       name: '',\r\n//       type: 'assets',\r\n//       category: 'account',\r\n//       parentId: null,\r\n//       description: '',\r\n//       isActive: true\r\n//     });\r\n//   };\r\n\r\n//   const handleDeleteAccount = (accountId) => {\r\n//     // Check if account has children\r\n//     const hasChildren = accounts.some(a => a.parentId === accountId);\r\n//     if (hasChildren) {\r\n//       alert('Cannot delete account with sub-accounts. Please delete sub-accounts first.');\r\n//       return;\r\n//     }\r\n\r\n//     if (window.confirm('Are you sure you want to delete this account?')) {\r\n//       setAccounts(accounts.filter(a => a.id !== accountId));\r\n//     }\r\n//   };\r\n\r\n//   const handleCancel = () => {\r\n//     setIsAddingAccount(false);\r\n//     setEditingAccount(null);\r\n//     setFormData({\r\n//       code: '',\r\n//       name: '',\r\n//       type: 'assets',\r\n//       category: 'account',\r\n//       parentId: null,\r\n//       description: '',\r\n//       isActive: true\r\n//     });\r\n//   };\r\n\r\n//   const renderAccountNode = (account) => {\r\n//     const hasChildren = account.children && account.children.length > 0;\r\n//     const isExpanded = expandedNodes.has(account.id);\r\n//     const typeConfig = accountTypes[account.type];\r\n\r\n//     return (\r\n//       <div key={account.id} className=\"account-node\">\r\n//         <div \r\n//           className={`flex items-center py-2 px-4 hover:bg-gray-50 border-l-4 ${\r\n//             account.category === 'header' ? 'border-gray-400 bg-gray-100 font-bold' :\r\n//             account.category === 'group' ? 'border-gray-300 bg-gray-50 font-semibold' :\r\n//             'border-transparent'\r\n//           }`}\r\n//           style={{ paddingLeft: `${account.level * 20 + 16}px` }}\r\n//         >\r\n//           {hasChildren && (\r\n//             <button\r\n//               onClick={() => toggleExpand(account.id)}\r\n//               className=\"mr-2 p-1 hover:bg-gray-200 rounded\"\r\n//             >\r\n//               {isExpanded ? <ChevronDown size={16} /> : <ChevronRight size={16} />}\r\n//             </button>\r\n//           )}\r\n          \r\n//           <div className=\"flex-1 flex items-center space-x-4\">\r\n//             <span className=\"font-mono text-sm text-gray-600 min-w-[80px]\">\r\n//               {account.code}\r\n//             </span>\r\n            \r\n//             <span className={`flex-1 ${account.category === 'header' ? 'text-lg' : ''}`}>\r\n//               {account.name}\r\n//             </span>\r\n            \r\n//             <span className={`px-2 py-1 rounded-full text-xs font-medium ${typeConfig.color}`}>\r\n//               {typeConfig.label}\r\n//             </span>\r\n            \r\n//             {account.category !== 'header' && (\r\n//               <div className=\"flex space-x-1\">\r\n//                 <button\r\n//                   onClick={() => handleEditAccount(account)}\r\n//                   className=\"p-1 hover:bg-blue-100 rounded text-blue-600\"\r\n//                   title=\"Edit Account\"\r\n//                 >\r\n//                   <Edit size={14} />\r\n//                 </button>\r\n//                 <button\r\n//                   onClick={() => handleDeleteAccount(account.id)}\r\n//                   className=\"p-1 hover:bg-red-100 rounded text-red-600\"\r\n//                   disabled={account.category === 'header'}\r\n//                   title=\"Delete Account\"\r\n//                 >\r\n//                   <Trash2 size={14} />\r\n//                 </button>\r\n//                 <button\r\n//                   onClick={() => handleAddAccount(account.id)}\r\n//                   className=\"p-1 hover:bg-green-100 rounded text-green-600\"\r\n//                   title=\"Add Sub-Account\"\r\n//                 >\r\n//                   <Plus size={14} />\r\n//                 </button>\r\n//               </div>\r\n//             )}\r\n//           </div>\r\n//         </div>\r\n        \r\n//         {account.description && (\r\n//           <div className=\"px-4 py-1 text-sm text-gray-500\" style={{ paddingLeft: `${account.level * 20 + 36}px` }}>\r\n//             {account.description}\r\n//           </div>\r\n//         )}\r\n\r\n//         {isExpanded && hasChildren && (\r\n//           <div>\r\n//             {account.children.map(child => renderAccountNode(child))}\r\n//           </div>\r\n//         )}\r\n//       </div>\r\n//     );\r\n//   };\r\n\r\n//   const filteredAccounts = getFilteredAccounts();\r\n//   const hierarchicalAccounts = buildHierarchy(filteredAccounts);\r\n\r\n//   return (\r\n//     <div className=\"max-w-7xl mx-auto p-6 bg-white\">\r\n//       <div className=\"mb-6\">\r\n//         <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Chart of Accounts</h1>\r\n//         <p className=\"text-gray-600\">Manage your company's account structure and hierarchy</p>\r\n//       </div>\r\n\r\n//       {/* Controls */}\r\n//       <div className=\"mb-6 flex flex-wrap items-center justify-between gap-4\">\r\n//         <div className=\"flex items-center space-x-4\">\r\n//           <div className=\"relative\">\r\n//             <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" size={20} />\r\n//             <input\r\n//               type=\"text\"\r\n//               placeholder=\"Search accounts...\"\r\n//               value={searchTerm}\r\n//               onChange={(e) => setSearchTerm(e.target.value)}\r\n//               className=\"pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n//             />\r\n//           </div>\r\n          \r\n//           <div className=\"relative\">\r\n//             <Filter className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" size={20} />\r\n//             <select\r\n//               value={selectedCategory}\r\n//               onChange={(e) => setSelectedCategory(e.target.value)}\r\n//               className=\"pl-10 pr-8 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n//             >\r\n//               <option value=\"all\">All Types</option>\r\n//               {Object.entries(accountTypes).map(([key, type]) => (\r\n//                 <option key={key} value={key}>{type.label}</option>\r\n//               ))}\r\n//             </select>\r\n//           </div>\r\n//         </div>\r\n\r\n//         <button\r\n//           onClick={() => handleAddAccount()}\r\n//           className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center space-x-2\"\r\n//         >\r\n//           <Plus size={20} />\r\n//           <span>Add Account</span>\r\n//         </button>\r\n//       </div>\r\n\r\n//       {/* Account Form */}\r\n//       {(isAddingAccount || editingAccount) && (\r\n//         <div className=\"mb-6 p-6 bg-gray-50 rounded-lg border\">\r\n//           <h3 className=\"text-lg font-semibold mb-4\">\r\n//             {editingAccount ? 'Edit Account' : 'Add New Account'}\r\n//           </h3>\r\n          \r\n//           <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\r\n//             <div>\r\n//               <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n//                 Account Code *\r\n//               </label>\r\n//               <input\r\n//                 type=\"text\"\r\n//                 value={formData.code}\r\n//                 onChange={(e) => setFormData({...formData, code: e.target.value})}\r\n//                 placeholder=\"Enter account code\"\r\n//                 className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n//               />\r\n//             </div>\r\n            \r\n//             <div>\r\n//               <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n//                 Account Name *\r\n//               </label>\r\n//               <input\r\n//                 type=\"text\"\r\n//                 value={formData.name}\r\n//                 onChange={(e) => setFormData({...formData, name: e.target.value})}\r\n//                 placeholder=\"Enter account name\"\r\n//                 className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n//               />\r\n//             </div>\r\n            \r\n//             <div>\r\n//               <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n//                 Account Type\r\n//               </label>\r\n//               <select\r\n//                 value={formData.type}\r\n//                 onChange={(e) => setFormData({...formData, type: e.target.value})}\r\n//                 className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n//               >\r\n//                 {Object.entries(accountTypes).map(([key, type]) => (\r\n//                   <option key={key} value={key}>{type.label} ({type.codeRange})</option>\r\n//                 ))}\r\n//               </select>\r\n//             </div>\r\n            \r\n//             <div>\r\n//               <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n//                 Category\r\n//               </label>\r\n//               <select\r\n//                 value={formData.category}\r\n//                 onChange={(e) => setFormData({...formData, category: e.target.value})}\r\n//                 className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n//               >\r\n//                 <option value=\"header\">Header</option>\r\n//                 <option value=\"group\">Group</option>\r\n//                 <option value=\"account\">Account</option>\r\n//               </select>\r\n//             </div>\r\n            \r\n//             <div>\r\n//               <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n//                 Parent Account\r\n//               </label>\r\n//               <select\r\n//                 value={formData.parentId || ''}\r\n//                 onChange={(e) => setFormData({...formData, parentId: e.target.value || null})}\r\n//                 className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n//               >\r\n//                 <option value=\"\">None (Top Level)</option>\r\n//                 {accounts\r\n//                   .filter(a => a.id !== editingAccount && a.category !== 'account')\r\n//                   .map(account => (\r\n//                     <option key={account.id} value={account.id}>\r\n//                       {account.code} - {account.name}\r\n//                     </option>\r\n//                   ))\r\n//                 }\r\n//               </select>\r\n//             </div>\r\n            \r\n//             <div className=\"flex items-center\">\r\n//               <input\r\n//                 type=\"checkbox\"\r\n//                 id=\"isActive\"\r\n//                 checked={formData.isActive}\r\n//                 onChange={(e) => setFormData({...formData, isActive: e.target.checked})}\r\n//                 className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\r\n//               />\r\n//               <label htmlFor=\"isActive\" className=\"ml-2 block text-sm text-gray-900\">\r\n//                 Active\r\n//               </label>\r\n//             </div>\r\n            \r\n//             <div className=\"md:col-span-2 lg:col-span-3\">\r\n//               <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n//                 Description\r\n//               </label>\r\n//               <textarea\r\n//                 value={formData.description}\r\n//                 onChange={(e) => setFormData({...formData, description: e.target.value})}\r\n//                 rows={2}\r\n//                 placeholder=\"Enter account description\"\r\n//                 className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n//               />\r\n//             </div>\r\n//           </div>\r\n          \r\n//           <div className=\"mt-4 flex space-x-3\">\r\n//             <button\r\n//               onClick={handleSaveAccount}\r\n//               className=\"px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 flex items-center space-x-2\"\r\n//             >\r\n//               <Save size={16} />\r\n//               <span>Save</span>\r\n//             </button>\r\n//             <button\r\n//               onClick={handleCancel}\r\n//               className=\"px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 flex items-center space-x-2\"\r\n//             >\r\n//               <X size={16} />\r\n//               <span>Cancel</span>\r\n//             </button>\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n\r\n//       {/* Accounts Tree */}\r\n//       <div className=\"bg-white border border-gray-200 rounded-lg overflow-hidden\">\r\n//         <div className=\"px-4 py-3 bg-gray-50 border-b border-gray-200\">\r\n//           <div className=\"flex items-center justify-between\">\r\n//             <h2 className=\"text-lg font-semibold text-gray-900\">Account Structure</h2>\r\n//             <span className=\"text-sm text-gray-500\">\r\n//               {filteredAccounts.length} accounts\r\n//             </span>\r\n//           </div>\r\n//         </div>\r\n        \r\n//         <div className=\"max-h-[600px] overflow-y-auto\">\r\n//           {hierarchicalAccounts.length > 0 ? (\r\n//             hierarchicalAccounts.map(account => renderAccountNode(account))\r\n//           ) : (\r\n//             <div className=\"p-8 text-center text-gray-500\">\r\n//               No accounts found matching your criteria.\r\n//             </div>\r\n//           )}\r\n//         </div>\r\n//       </div>\r\n\r\n//       {/* Account Type Legend */}\r\n//       <div className=\"mt-6 p-4 bg-gray-50 rounded-lg\">\r\n//         <h3 className=\"text-sm font-semibold text-gray-700 mb-3\">Account Types & Code Ranges</h3>\r\n//         <div className=\"flex flex-wrap gap-4\">\r\n//           {Object.entries(accountTypes).map(([key, type]) => (\r\n//             <div key={key} className=\"flex items-center space-x-2\">\r\n//               <span className={`px-2 py-1 rounded-full text-xs font-medium ${type.color}`}>\r\n//                 {type.label}\r\n//               </span>\r\n//               <span className=\"text-sm text-gray-600 font-mono\">{type.codeRange}</span>\r\n//             </div>\r\n//           ))}\r\n//         </div>\r\n//       </div>\r\n\r\n//       {/* Quick Actions Info */}\r\n//       <div className=\"mt-6 p-4 bg-blue-50 rounded-lg\">\r\n//         <h3 className=\"text-sm font-semibold text-blue-800 mb-2\">Quick Actions Guide</h3>\r\n//         <div className=\"text-xs text-blue-700 space-y-1\">\r\n//           <p>• Click the expand/collapse arrow to show/hide sub-accounts</p>\r\n//           <p>• Use the Edit button to modify account details</p>\r\n//           <p>• Use the Plus button to add a sub-account under any account</p>\r\n//           <p>• Delete accounts that have no sub-accounts or transactions</p>\r\n//           <p>• Search by account code, name, or description</p>\r\n//           <p>• Filter by account type to focus on specific categories</p>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default ChartOfAccounts;\r\n\r\n\r\n//perferc integrated\r\n// import React, { useState, useEffect } from 'react';\r\n// import { ChevronDown, ChevronRight, Plus, Edit, Trash2, Save, X, Search, Filter, RefreshCw } from 'lucide-react';\r\n\r\n// const ChartOfAccounts = () => {\r\n//   const [accounts, setAccounts] = useState([]);\r\n//   const [expandedNodes, setExpandedNodes] = useState(new Set());\r\n//   const [searchTerm, setSearchTerm] = useState('');\r\n//   const [selectedCategory, setSelectedCategory] = useState('all');\r\n//   const [isAddingAccount, setIsAddingAccount] = useState(false);\r\n//   const [editingAccount, setEditingAccount] = useState(null);\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [error, setError] = useState(null);\r\n//   const [formData, setFormData] = useState({\r\n//     code: '',\r\n//     name: '',\r\n//     type: 'assets',\r\n//     category: 'account',\r\n//     parentId: null,\r\n//     description: '',\r\n//     active: true\r\n//   });\r\n\r\n//   // API Base URL\r\n//   const API_BASE_URL = 'http://localhost:8080/api/accounts';\r\n\r\n//   // Account types configuration\r\n//   const accountTypes = {\r\n//     assets: { label: 'Assets', color: 'bg-green-100 text-green-800', codeRange: '1000-1999' },\r\n//     liabilities: { label: 'Liabilities', color: 'bg-red-100 text-red-800', codeRange: '2000-2999' },\r\n//     equity: { label: 'Equity', color: 'bg-blue-100 text-blue-800', codeRange: '3000-3999' },\r\n//     revenue: { label: 'Revenue', color: 'bg-purple-100 text-purple-800', codeRange: '4000-4999' },\r\n//     expenses: { label: 'Expenses', color: 'bg-orange-100 text-orange-800', codeRange: '5000-5999' }\r\n//   };\r\n\r\n//   // Fetch accounts from API\r\n//   const fetchAccounts = async () => {\r\n//     try {\r\n//       setLoading(true);\r\n//       setError(null);\r\n//       const response = await fetch(API_BASE_URL);\r\n      \r\n//       if (!response.ok) {\r\n//         throw new Error(`HTTP error! status: ${response.status}`);\r\n//       }\r\n      \r\n//       const data = await response.json();\r\n//       setAccounts(data);\r\n      \r\n//       // Expand main categories by default\r\n//       const mainCategories = data\r\n//         .filter(account => account.level === 0)\r\n//         .map(account => account.id);\r\n//       setExpandedNodes(new Set(mainCategories));\r\n      \r\n//     } catch (err) {\r\n//       setError('Failed to fetch accounts: ' + err.message);\r\n//       console.error('Error fetching accounts:', err);\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   // Initialize component\r\n//   useEffect(() => {\r\n//     fetchAccounts();\r\n//   }, []);\r\n\r\n//   // Create account\r\n//   const createAccount = async (accountData) => {\r\n//     try {\r\n//       setLoading(true);\r\n//       const response = await fetch(API_BASE_URL, {\r\n//         method: 'POST',\r\n//         headers: {\r\n//           'Content-Type': 'application/json',\r\n//         },\r\n//         body: JSON.stringify(accountData)\r\n//       });\r\n\r\n//       if (!response.ok) {\r\n//         const errorText = await response.text();\r\n//         throw new Error(errorText || `HTTP error! status: ${response.status}`);\r\n//       }\r\n\r\n//       await fetchAccounts(); // Refresh the list\r\n//       return true;\r\n//     } catch (err) {\r\n//       setError('Failed to create account: ' + err.message);\r\n//       console.error('Error creating account:', err);\r\n//       return false;\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   // Update account\r\n//   const updateAccount = async (accountId, accountData) => {\r\n//     try {\r\n//       setLoading(true);\r\n//       const response = await fetch(`${API_BASE_URL}/${accountId}`, {\r\n//         method: 'PUT',\r\n//         headers: {\r\n//           'Content-Type': 'application/json',\r\n//         },\r\n//         body: JSON.stringify(accountData)\r\n//       });\r\n\r\n//       if (!response.ok) {\r\n//         const errorText = await response.text();\r\n//         throw new Error(errorText || `HTTP error! status: ${response.status}`);\r\n//       }\r\n\r\n//       await fetchAccounts(); // Refresh the list\r\n//       return true;\r\n//     } catch (err) {\r\n//       setError('Failed to update account: ' + err.message);\r\n//       console.error('Error updating account:', err);\r\n//       return false;\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   // Delete account\r\n//   const deleteAccount = async (accountId) => {\r\n//     try {\r\n//       setLoading(true);\r\n//       const response = await fetch(`${API_BASE_URL}/${accountId}`, {\r\n//         method: 'DELETE'\r\n//       });\r\n\r\n//       if (!response.ok) {\r\n//         const errorText = await response.text();\r\n//         throw new Error(errorText || `HTTP error! status: ${response.status}`);\r\n//       }\r\n\r\n//       await fetchAccounts(); // Refresh the list\r\n//       return true;\r\n//     } catch (err) {\r\n//       setError('Failed to delete account: ' + err.message);\r\n//       console.error('Error deleting account:', err);\r\n//       return false;\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   // Helper function to flatten hierarchy for filtering\r\n//   const flattenAccounts = (accounts) => {\r\n//     const result = [];\r\n//     const flatten = (items) => {\r\n//       items.forEach(item => {\r\n//         result.push(item);\r\n//         if (item.children && item.children.length > 0) {\r\n//           flatten(item.children);\r\n//         }\r\n//       });\r\n//     };\r\n//     flatten(accounts);\r\n//     return result;\r\n//   };\r\n\r\n//   // Filter accounts based on search and category\r\n//   const getFilteredAccounts = () => {\r\n//     const flatAccounts = flattenAccounts(accounts);\r\n//     let filtered = flatAccounts;\r\n\r\n//     if (searchTerm) {\r\n//       filtered = filtered.filter(account => \r\n//         account.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n//         account.code.includes(searchTerm) ||\r\n//         (account.description && account.description.toLowerCase().includes(searchTerm.toLowerCase()))\r\n//       );\r\n//     }\r\n\r\n//     if (selectedCategory !== 'all') {\r\n//       filtered = filtered.filter(account => account.type === selectedCategory);\r\n//     }\r\n\r\n//     return filtered;\r\n//   };\r\n\r\n//   // Build hierarchy from flat accounts (for display when not searching)\r\n//   const buildHierarchy = (accounts, parentId = null) => {\r\n//     return accounts\r\n//       .filter(account => account.parentId === parentId)\r\n//       .sort((a, b) => a.code.localeCompare(b.code))\r\n//       .map(account => ({\r\n//         ...account,\r\n//         children: buildHierarchy(accounts, account.id)\r\n//       }));\r\n//   };\r\n\r\n//   // Toggle expand/collapse\r\n//   const toggleExpand = (nodeId) => {\r\n//     const newExpanded = new Set(expandedNodes);\r\n//     if (newExpanded.has(nodeId)) {\r\n//       newExpanded.delete(nodeId);\r\n//     } else {\r\n//       newExpanded.add(nodeId);\r\n//     }\r\n//     setExpandedNodes(newExpanded);\r\n//   };\r\n\r\n//   // Handle add account\r\n//   const handleAddAccount = (parentId = null) => {\r\n//     const flatAccounts = flattenAccounts(accounts);\r\n//     const parentAccount = parentId ? flatAccounts.find(a => a.id === parentId) : null;\r\n//     const accountType = parentAccount ? parentAccount.type : 'assets';\r\n    \r\n//     setFormData({\r\n//       code: '', // Will be generated by backend\r\n//       name: '',\r\n//       type: accountType,\r\n//       category: 'account',\r\n//       parentId,\r\n//       description: '',\r\n//       active: true\r\n//     });\r\n//     setIsAddingAccount(true);\r\n//   };\r\n\r\n//   // Handle edit account\r\n//   const handleEditAccount = (account) => {\r\n//     setFormData({\r\n//       code: account.code,\r\n//       name: account.name,\r\n//       type: account.type,\r\n//       category: account.category,\r\n//       parentId: account.parentId,\r\n//       description: account.description || '',\r\n//       active: account.active !== undefined ? account.active : true\r\n//     });\r\n//     setEditingAccount(account.id);\r\n//   };\r\n\r\n//   // Handle save account\r\n//   const handleSaveAccount = async () => {\r\n//     if (!formData.name) {\r\n//       alert('Please fill in the account name');\r\n//       return;\r\n//     }\r\n\r\n//     const success = editingAccount \r\n//       ? await updateAccount(editingAccount, formData)\r\n//       : await createAccount(formData);\r\n\r\n//     if (success) {\r\n//       // Reset form\r\n//       setFormData({\r\n//         code: '',\r\n//         name: '',\r\n//         type: 'assets',\r\n//         category: 'account',\r\n//         parentId: null,\r\n//         description: '',\r\n//         active: true\r\n//       });\r\n//       setIsAddingAccount(false);\r\n//       setEditingAccount(null);\r\n//     }\r\n//   };\r\n\r\n//   // Handle delete account\r\n//   const handleDeleteAccount = async (accountId) => {\r\n//     const flatAccounts = flattenAccounts(accounts);\r\n//     const hasChildren = flatAccounts.some(a => a.parentId === accountId);\r\n    \r\n//     if (hasChildren) {\r\n//       alert('Cannot delete account with sub-accounts. Please delete sub-accounts first.');\r\n//       return;\r\n//     }\r\n\r\n//     if (window.confirm('Are you sure you want to delete this account?')) {\r\n//       await deleteAccount(accountId);\r\n//     }\r\n//   };\r\n\r\n//   // Handle cancel\r\n//   const handleCancel = () => {\r\n//     setIsAddingAccount(false);\r\n//     setEditingAccount(null);\r\n//     setFormData({\r\n//       code: '',\r\n//       name: '',\r\n//       type: 'assets',\r\n//       category: 'account',\r\n//       parentId: null,\r\n//       description: '',\r\n//       active: true\r\n//     });\r\n//   };\r\n\r\n//   // Render account node\r\n//   const renderAccountNode = (account) => {\r\n//     const hasChildren = account.children && account.children.length > 0;\r\n//     const isExpanded = expandedNodes.has(account.id);\r\n//     const typeConfig = accountTypes[account.type];\r\n\r\n//     return (\r\n//       <div key={account.id} className=\"account-node\">\r\n//         <div \r\n//           className={`flex items-center py-2 px-4 hover:bg-gray-50 border-l-4 ${\r\n//             account.category === 'header' ? 'border-gray-400 bg-gray-100 font-bold' :\r\n//             account.category === 'group' ? 'border-gray-300 bg-gray-50 font-semibold' :\r\n//             'border-transparent'\r\n//           }`}\r\n//           style={{ paddingLeft: `${account.level * 20 + 16}px` }}\r\n//         >\r\n//           {hasChildren && (\r\n//             <button\r\n//               onClick={() => toggleExpand(account.id)}\r\n//               className=\"mr-2 p-1 hover:bg-gray-200 rounded\"\r\n//             >\r\n//               {isExpanded ? <ChevronDown size={16} /> : <ChevronRight size={16} />}\r\n//             </button>\r\n//           )}\r\n          \r\n//           <div className=\"flex-1 flex items-center space-x-4\">\r\n//             <span className=\"font-mono text-sm text-gray-600 min-w-[80px]\">\r\n//               {account.code}\r\n//             </span>\r\n            \r\n//             <span className={`flex-1 ${account.category === 'header' ? 'text-lg' : ''}`}>\r\n//               {account.name}\r\n//               {!account.active && <span className=\"ml-2 text-red-500 text-xs\">(Inactive)</span>}\r\n//             </span>\r\n            \r\n//             <span className={`px-2 py-1 rounded-full text-xs font-medium ${typeConfig.color}`}>\r\n//               {typeConfig.label}\r\n//             </span>\r\n            \r\n//             <div className=\"flex space-x-1\">\r\n//               <button\r\n//                 onClick={() => handleEditAccount(account)}\r\n//                 className=\"p-1 hover:bg-blue-100 rounded text-blue-600\"\r\n//                 title=\"Edit Account\"\r\n//                 disabled={loading}\r\n//               >\r\n//                 <Edit size={14} />\r\n//               </button>\r\n//               <button\r\n//                 onClick={() => handleDeleteAccount(account.id)}\r\n//                 className=\"p-1 hover:bg-red-100 rounded text-red-600\"\r\n//                 title=\"Delete Account\"\r\n//                 disabled={loading}\r\n//               >\r\n//                 <Trash2 size={14} />\r\n//               </button>\r\n//               <button\r\n//                 onClick={() => handleAddAccount(account.id)}\r\n//                 className=\"p-1 hover:bg-green-100 rounded text-green-600\"\r\n//                 title=\"Add Sub-Account\"\r\n//                 disabled={loading}\r\n//               >\r\n//                 <Plus size={14} />\r\n//               </button>\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n        \r\n//         {account.description && (\r\n//           <div className=\"px-4 py-1 text-sm text-gray-500\" style={{ paddingLeft: `${account.level * 20 + 36}px` }}>\r\n//             {account.description}\r\n//           </div>\r\n//         )}\r\n\r\n//         {isExpanded && hasChildren && (\r\n//           <div>\r\n//             {account.children.map(child => renderAccountNode(child))}\r\n//           </div>\r\n//         )}\r\n//       </div>\r\n//     );\r\n//   };\r\n\r\n//   const flatAccounts = flattenAccounts(accounts);\r\n//   const filteredAccounts = getFilteredAccounts();\r\n//   const displayAccounts = searchTerm || selectedCategory !== 'all' \r\n//     ? filteredAccounts \r\n//     : buildHierarchy(flatAccounts);\r\n\r\n//   return (\r\n//     <div className=\"max-w-7xl mx-auto p-6 bg-white\">\r\n//       <div className=\"mb-6\">\r\n//         <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Chart of Accounts</h1>\r\n//         <p className=\"text-gray-600\">Manage your company's account structure and hierarchy</p>\r\n//       </div>\r\n\r\n//       {/* Error Message */}\r\n//       {error && (\r\n//         <div className=\"mb-4 p-4 bg-red-50 border border-red-200 rounded-lg\">\r\n//           <div className=\"flex\">\r\n//             <div className=\"flex-1\">\r\n//               <p className=\"text-red-700\">{error}</p>\r\n//             </div>\r\n//             <button\r\n//               onClick={() => setError(null)}\r\n//               className=\"text-red-400 hover:text-red-600\"\r\n//             >\r\n//               <X size={16} />\r\n//             </button>\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n\r\n//       {/* Controls */}\r\n//       <div className=\"mb-6 flex flex-wrap items-center justify-between gap-4\">\r\n//         <div className=\"flex items-center space-x-4\">\r\n//           <div className=\"relative\">\r\n//             <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" size={20} />\r\n//             <input\r\n//               type=\"text\"\r\n//               placeholder=\"Search accounts...\"\r\n//               value={searchTerm}\r\n//               onChange={(e) => setSearchTerm(e.target.value)}\r\n//               className=\"pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n//             />\r\n//           </div>\r\n          \r\n//           <div className=\"relative\">\r\n//             <Filter className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" size={20} />\r\n//             <select\r\n//               value={selectedCategory}\r\n//               onChange={(e) => setSelectedCategory(e.target.value)}\r\n//               className=\"pl-10 pr-8 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n//             >\r\n//               <option value=\"all\">All Types</option>\r\n//               {Object.entries(accountTypes).map(([key, type]) => (\r\n//                 <option key={key} value={key}>{type.label}</option>\r\n//               ))}\r\n//             </select>\r\n//           </div>\r\n\r\n//           <button\r\n//             onClick={fetchAccounts}\r\n//             className=\"px-3 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 flex items-center space-x-2\"\r\n//             disabled={loading}\r\n//           >\r\n//             <RefreshCw size={16} className={loading ? 'animate-spin' : ''} />\r\n//             <span>Refresh</span>\r\n//           </button>\r\n//         </div>\r\n\r\n//         <button\r\n//           onClick={() => handleAddAccount()}\r\n//           className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center space-x-2\"\r\n//           disabled={loading}\r\n//         >\r\n//           <Plus size={20} />\r\n//           <span>Add Account</span>\r\n//         </button>\r\n//       </div>\r\n\r\n//       {/* Account Form */}\r\n//       {(isAddingAccount || editingAccount) && (\r\n//         <div className=\"mb-6 p-6 bg-gray-50 rounded-lg border\">\r\n//           <h3 className=\"text-lg font-semibold mb-4\">\r\n//             {editingAccount ? 'Edit Account' : 'Add New Account'}\r\n//           </h3>\r\n          \r\n//           <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\r\n//             <div>\r\n//               <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n//                 Account Code\r\n//               </label>\r\n//               <input\r\n//                 type=\"text\"\r\n//                 value={formData.code}\r\n//                 onChange={(e) => setFormData({...formData, code: e.target.value})}\r\n//                 placeholder=\"Auto-generated if empty\"\r\n//                 className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n//               />\r\n//               <p className=\"text-xs text-gray-500 mt-1\">Leave empty for auto-generation</p>\r\n//             </div>\r\n            \r\n//             <div>\r\n//               <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n//                 Account Name *\r\n//               </label>\r\n//               <input\r\n//                 type=\"text\"\r\n//                 value={formData.name}\r\n//                 onChange={(e) => setFormData({...formData, name: e.target.value})}\r\n//                 placeholder=\"Enter account name\"\r\n//                 className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n//                 required\r\n//               />\r\n//             </div>\r\n            \r\n//             <div>\r\n//               <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n//                 Account Type\r\n//               </label>\r\n//               <select\r\n//                 value={formData.type}\r\n//                 onChange={(e) => setFormData({...formData, type: e.target.value})}\r\n//                 className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n//               >\r\n//                 {Object.entries(accountTypes).map(([key, type]) => (\r\n//                   <option key={key} value={key}>{type.label} ({type.codeRange})</option>\r\n//                 ))}\r\n//               </select>\r\n//             </div>\r\n            \r\n//             <div>\r\n//               <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n//                 Category\r\n//               </label>\r\n//               <select\r\n//                 value={formData.category}\r\n//                 onChange={(e) => setFormData({...formData, category: e.target.value})}\r\n//                 className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n//               >\r\n//                 <option value=\"header\">Header</option>\r\n//                 <option value=\"group\">Group</option>\r\n//                 <option value=\"account\">Account</option>\r\n//               </select>\r\n//             </div>\r\n            \r\n//             <div>\r\n//               <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n//                 Parent Account\r\n//               </label>\r\n//               <select\r\n//                 value={formData.parentId || ''}\r\n//                 onChange={(e) => setFormData({...formData, parentId: e.target.value || null})}\r\n//                 className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n//               >\r\n//                 <option value=\"\">None (Top Level)</option>\r\n//                 {flatAccounts\r\n//                   .filter(a => a.id !== editingAccount && a.category !== 'account')\r\n//                   .map(account => (\r\n//                     <option key={account.id} value={account.id}>\r\n//                       {account.code} - {account.name}\r\n//                     </option>\r\n//                   ))\r\n//                 }\r\n//               </select>\r\n//             </div>\r\n            \r\n//             <div className=\"flex items-center\">\r\n//               <input\r\n//                 type=\"checkbox\"\r\n//                 id=\"active\"\r\n//                 checked={formData.active}\r\n//                 onChange={(e) => setFormData({...formData, active: e.target.checked})}\r\n//                 className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\r\n//               />\r\n//               <label htmlFor=\"active\" className=\"ml-2 block text-sm text-gray-900\">\r\n//                 Active\r\n//               </label>\r\n//             </div>\r\n            \r\n//             <div className=\"md:col-span-2 lg:col-span-3\">\r\n//               <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n//                 Description\r\n//               </label>\r\n//               <textarea\r\n//                 value={formData.description}\r\n//                 onChange={(e) => setFormData({...formData, description: e.target.value})}\r\n//                 rows={2}\r\n//                 placeholder=\"Enter account description\"\r\n//                 className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n//               />\r\n//             </div>\r\n//           </div>\r\n          \r\n//           <div className=\"mt-4 flex space-x-3\">\r\n//             <button\r\n//               onClick={handleSaveAccount}\r\n//               className=\"px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 flex items-center space-x-2\"\r\n//               disabled={loading}\r\n//             >\r\n//               <Save size={16} />\r\n//               <span>{loading ? 'Saving...' : 'Save'}</span>\r\n//             </button>\r\n//             <button\r\n//               onClick={handleCancel}\r\n//               className=\"px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 flex items-center space-x-2\"\r\n//               disabled={loading}\r\n//             >\r\n//               <X size={16} />\r\n//               <span>Cancel</span>\r\n//             </button>\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n\r\n//       {/* Accounts Tree */}\r\n//       <div className=\"bg-white border border-gray-200 rounded-lg overflow-hidden\">\r\n//         <div className=\"px-4 py-3 bg-gray-50 border-b border-gray-200\">\r\n//           <div className=\"flex items-center justify-between\">\r\n//             <h2 className=\"text-lg font-semibold text-gray-900\">Account Structure</h2>\r\n//             <span className=\"text-sm text-gray-500\">\r\n//               {filteredAccounts.length} accounts\r\n//               {loading && <span className=\"ml-2 text-blue-600\">Loading...</span>}\r\n//             </span>\r\n//           </div>\r\n//         </div>\r\n        \r\n//         <div className=\"max-h-[600px] overflow-y-auto\">\r\n//           {loading && accounts.length === 0 ? (\r\n//             <div className=\"p-8 text-center text-gray-500\">\r\n//               <RefreshCw className=\"animate-spin mx-auto mb-2\" size={24} />\r\n//               Loading accounts...\r\n//             </div>\r\n//           ) : displayAccounts.length > 0 ? (\r\n//             searchTerm || selectedCategory !== 'all' ? (\r\n//               // Flat view for search results\r\n//               <div>\r\n//                 {filteredAccounts.map(account => (\r\n//                   <div key={account.id}>\r\n//                     {renderAccountNode({...account, children: []})}\r\n//                   </div>\r\n//                 ))}\r\n//               </div>\r\n//             ) : (\r\n//               // Hierarchical view\r\n//               displayAccounts.map(account => renderAccountNode(account))\r\n//             )\r\n//           ) : (\r\n//             <div className=\"p-8 text-center text-gray-500\">\r\n//               No accounts found matching your criteria.\r\n//             </div>\r\n//           )}\r\n//         </div>\r\n//       </div>\r\n\r\n//       {/* Account Type Legend */}\r\n//       <div className=\"mt-6 p-4 bg-gray-50 rounded-lg\">\r\n//         <h3 className=\"text-sm font-semibold text-gray-700 mb-3\">Account Types & Code Ranges</h3>\r\n//         <div className=\"flex flex-wrap gap-4\">\r\n//           {Object.entries(accountTypes).map(([key, type]) => (\r\n//             <div key={key} className=\"flex items-center space-x-2\">\r\n//               <span className={`px-2 py-1 rounded-full text-xs font-medium ${type.color}`}>\r\n//                 {type.label}\r\n//               </span>\r\n//               <span className=\"text-sm text-gray-600 font-mono\">{type.codeRange}</span>\r\n//             </div>\r\n//           ))}\r\n//         </div>\r\n//       </div>\r\n\r\n//       {/* API Integration Info */}\r\n//       <div className=\"mt-6 p-4 bg-blue-50 rounded-lg\">\r\n//         <h3 className=\"text-sm font-semibold text-blue-800 mb-2\">API Integration Status</h3>\r\n//         <div className=\"text-xs text-blue-700 space-y-1\">\r\n//           <p>• Connected to: {API_BASE_URL}</p>\r\n//           <p>• Auto-refresh after CRUD operations</p>\r\n//           <p>• Real-time data from Spring Boot backend</p>\r\n//           <p>• Hierarchical structure maintained server-side</p>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default ChartOfAccounts;1230\r\n\r\n//correct code integrated with toast\r\n// import React, { useState, useEffect } from 'react';\r\n// import { ChevronDown, ChevronRight, Plus, Edit, Trash2, Save, X, Search, Filter, RefreshCw, CheckCircle, AlertCircle, XCircle } from 'lucide-react';\r\n\r\n// const ChartOfAccounts = () => {\r\n//   const [accounts, setAccounts] = useState([]);\r\n//   const [expandedNodes, setExpandedNodes] = useState(new Set());\r\n//   const [searchTerm, setSearchTerm] = useState('');\r\n//   const [selectedCategory, setSelectedCategory] = useState('all');\r\n//   const [isAddingAccount, setIsAddingAccount] = useState(false);\r\n//   const [editingAccount, setEditingAccount] = useState(null);\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [error, setError] = useState(null);\r\n//   const [toasts, setToasts] = useState([]);\r\n//   const [formData, setFormData] = useState({\r\n//     code: '',\r\n//     name: '',\r\n//     type: 'assets',\r\n//     category: 'account',\r\n//     parentId: null,\r\n//     description: '',\r\n//     active: true\r\n//   });\r\n\r\n//   // API Base URL\r\n//   const API_BASE_URL = 'http://localhost:8080/api/accounts';\r\n\r\n//   // Toast notification system\r\n//   const showToast = (message, type = 'success') => {\r\n//     const id = Date.now();\r\n//     const toast = { id, message, type };\r\n//     setToasts(prev => [...prev, toast]);\r\n    \r\n//     // Auto remove after 5 seconds\r\n//     setTimeout(() => {\r\n//       setToasts(prev => prev.filter(t => t.id !== id));\r\n//     }, 5000);\r\n//   };\r\n\r\n//   const removeToast = (id) => {\r\n//     setToasts(prev => prev.filter(t => t.id !== id));\r\n//   };\r\n\r\n//   // Account types configuration\r\n//   const accountTypes = {\r\n//     assets: { label: 'Assets', color: 'bg-green-100 text-green-800', codeRange: '1000-1999' },\r\n//     liabilities: { label: 'Liabilities', color: 'bg-red-100 text-red-800', codeRange: '2000-2999' },\r\n//     equity: { label: 'Equity', color: 'bg-blue-100 text-blue-800', codeRange: '3000-3999' },\r\n//     revenue: { label: 'Revenue', color: 'bg-purple-100 text-purple-800', codeRange: '4000-4999' },\r\n//     expenses: { label: 'Expenses', color: 'bg-orange-100 text-orange-800', codeRange: '5000-5999' }\r\n//   };\r\n\r\n//   // Fetch accounts from API\r\n//   const fetchAccounts = async () => {\r\n//     try {\r\n//       setLoading(true);\r\n//       setError(null);\r\n//       const response = await fetch(API_BASE_URL);\r\n      \r\n//       if (!response.ok) {\r\n//         throw new Error(`HTTP error! status: ${response.status}`);\r\n//       }\r\n      \r\n//       const data = await response.json();\r\n//       setAccounts(data);\r\n      \r\n//       // Expand main categories by default\r\n//       const mainCategories = data\r\n//         .filter(account => account.level === 0)\r\n//         .map(account => account.id);\r\n//       setExpandedNodes(new Set(mainCategories));\r\n      \r\n//     } catch (err) {\r\n//       const errorMsg = 'Failed to fetch accounts: ' + err.message;\r\n//       setError(errorMsg);\r\n//       showToast(errorMsg, 'error');\r\n//       console.error('Error fetching accounts:', err);\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   // Initialize component\r\n//   useEffect(() => {\r\n//     fetchAccounts();\r\n//   }, []);\r\n\r\n//   // Create account\r\n//   const createAccount = async (accountData) => {\r\n//     try {\r\n//       setLoading(true);\r\n//       const response = await fetch(API_BASE_URL, {\r\n//         method: 'POST',\r\n//         headers: {\r\n//           'Content-Type': 'application/json',\r\n//         },\r\n//         body: JSON.stringify(accountData)\r\n//       });\r\n\r\n//       if (!response.ok) {\r\n//         const errorText = await response.text();\r\n//         throw new Error(errorText || `HTTP error! status: ${response.status}`);\r\n//       }\r\n\r\n//       const result = await response.text();\r\n//       showToast(result || 'Account created successfully!', 'success');\r\n//       await fetchAccounts(); // Refresh the list\r\n//       return true;\r\n//     } catch (err) {\r\n//       const errorMsg = 'Failed to create account: ' + err.message;\r\n//       setError(errorMsg);\r\n//       showToast(errorMsg, 'error');\r\n//       console.error('Error creating account:', err);\r\n//       return false;\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   // Update account\r\n//   const updateAccount = async (accountId, accountData) => {\r\n//     try {\r\n//       setLoading(true);\r\n//       const response = await fetch(`${API_BASE_URL}/${accountId}`, {\r\n//         method: 'PUT',\r\n//         headers: {\r\n//           'Content-Type': 'application/json',\r\n//         },\r\n//         body: JSON.stringify(accountData)\r\n//       });\r\n\r\n//       if (!response.ok) {\r\n//         const errorText = await response.text();\r\n//         throw new Error(errorText || `HTTP error! status: ${response.status}`);\r\n//       }\r\n\r\n//       const result = await response.text();\r\n//       showToast(result || 'Account updated successfully!', 'success');\r\n//       await fetchAccounts(); // Refresh the list\r\n//       return true;\r\n//     } catch (err) {\r\n//       const errorMsg = 'Failed to update account: ' + err.message;\r\n//       setError(errorMsg);\r\n//       showToast(errorMsg, 'error');\r\n//       console.error('Error updating account:', err);\r\n//       return false;\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   // Delete account\r\n//   const deleteAccount = async (accountId) => {\r\n//     try {\r\n//       setLoading(true);\r\n//       const response = await fetch(`${API_BASE_URL}/${accountId}`, {\r\n//         method: 'DELETE'\r\n//       });\r\n\r\n//       if (!response.ok) {\r\n//         const errorText = await response.text();\r\n//         throw new Error(errorText || `HTTP error! status: ${response.status}`);\r\n//       }\r\n\r\n//       const result = await response.text();\r\n//       showToast(result || 'Account deleted successfully!', 'success');\r\n//       await fetchAccounts(); // Refresh the list\r\n//       return true;\r\n//     } catch (err) {\r\n//       const errorMsg = 'Failed to delete account: ' + err.message;\r\n//       setError(errorMsg);\r\n//       showToast(errorMsg, 'error');\r\n//       console.error('Error deleting account:', err);\r\n//       return false;\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   // Helper function to flatten hierarchy for filtering\r\n//   const flattenAccounts = (accounts) => {\r\n//     const result = [];\r\n//     const flatten = (items) => {\r\n//       items.forEach(item => {\r\n//         result.push(item);\r\n//         if (item.children && item.children.length > 0) {\r\n//           flatten(item.children);\r\n//         }\r\n//       });\r\n//     };\r\n//     flatten(accounts);\r\n//     return result;\r\n//   };\r\n\r\n//   // Filter accounts based on search and category\r\n//   const getFilteredAccounts = () => {\r\n//     const flatAccounts = flattenAccounts(accounts);\r\n//     let filtered = flatAccounts;\r\n\r\n//     if (searchTerm) {\r\n//       filtered = filtered.filter(account => \r\n//         account.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n//         account.code.includes(searchTerm) ||\r\n//         (account.description && account.description.toLowerCase().includes(searchTerm.toLowerCase()))\r\n//       );\r\n//     }\r\n\r\n//     if (selectedCategory !== 'all') {\r\n//       filtered = filtered.filter(account => account.type === selectedCategory);\r\n//     }\r\n\r\n//     return filtered;\r\n//   };\r\n\r\n//   // Build hierarchy from flat accounts (for display when not searching)\r\n//   const buildHierarchy = (accounts, parentId = null) => {\r\n//     return accounts\r\n//       .filter(account => account.parentId === parentId)\r\n//       .sort((a, b) => a.code.localeCompare(b.code))\r\n//       .map(account => ({\r\n//         ...account,\r\n//         children: buildHierarchy(accounts, account.id)\r\n//       }));\r\n//   };\r\n\r\n//   // Toggle expand/collapse\r\n//   const toggleExpand = (nodeId) => {\r\n//     const newExpanded = new Set(expandedNodes);\r\n//     if (newExpanded.has(nodeId)) {\r\n//       newExpanded.delete(nodeId);\r\n//     } else {\r\n//       newExpanded.add(nodeId);\r\n//     }\r\n//     setExpandedNodes(newExpanded);\r\n//   };\r\n\r\n//   // Handle add account\r\n//   const handleAddAccount = (parentId = null) => {\r\n//     const flatAccounts = flattenAccounts(accounts);\r\n//     const parentAccount = parentId ? flatAccounts.find(a => a.id === parentId) : null;\r\n//     const accountType = parentAccount ? parentAccount.type : 'assets';\r\n    \r\n//     setFormData({\r\n//       code: '', // Will be generated by backend\r\n//       name: '',\r\n//       type: accountType,\r\n//       category: 'account',\r\n//       parentId,\r\n//       description: '',\r\n//       active: true\r\n//     });\r\n//     setIsAddingAccount(true);\r\n//   };\r\n\r\n//   // Handle edit account\r\n//   const handleEditAccount = (account) => {\r\n//     setFormData({\r\n//       code: account.code,\r\n//       name: account.name,\r\n//       type: account.type,\r\n//       category: account.category,\r\n//       parentId: account.parentId,\r\n//       description: account.description || '',\r\n//       active: account.active !== undefined ? account.active : true\r\n//     });\r\n//     setEditingAccount(account.id);\r\n//   };\r\n\r\n//   // Handle save account\r\n//   const handleSaveAccount = async () => {\r\n//     if (!formData.name) {\r\n//       showToast('Please fill in the account name', 'error');\r\n//       return;\r\n//     }\r\n\r\n//     const success = editingAccount \r\n//       ? await updateAccount(editingAccount, formData)\r\n//       : await createAccount(formData);\r\n\r\n//     if (success) {\r\n//       // Reset form\r\n//       setFormData({\r\n//         code: '',\r\n//         name: '',\r\n//         type: 'assets',\r\n//         category: 'account',\r\n//         parentId: null,\r\n//         description: '',\r\n//         active: true\r\n//       });\r\n//       setIsAddingAccount(false);\r\n//       setEditingAccount(null);\r\n//     }\r\n//   };\r\n\r\n//   // Handle delete account\r\n//   const handleDeleteAccount = async (accountId) => {\r\n//     const flatAccounts = flattenAccounts(accounts);\r\n//     const hasChildren = flatAccounts.some(a => a.parentId === accountId);\r\n    \r\n//     if (hasChildren) {\r\n//       showToast('Cannot delete account with sub-accounts. Please delete sub-accounts first.', 'error');\r\n//       return;\r\n//     }\r\n\r\n//     if (window.confirm('Are you sure you want to delete this account?')) {\r\n//       await deleteAccount(accountId);\r\n//     }\r\n//   };\r\n\r\n//   // Handle cancel\r\n//   const handleCancel = () => {\r\n//     setIsAddingAccount(false);\r\n//     setEditingAccount(null);\r\n//     setFormData({\r\n//       code: '',\r\n//       name: '',\r\n//       type: 'assets',\r\n//       category: 'account',\r\n//       parentId: null,\r\n//       description: '',\r\n//       active: true\r\n//     });\r\n//   };\r\n\r\n//   // Render account node\r\n//   const renderAccountNode = (account) => {\r\n//     const hasChildren = account.children && account.children.length > 0;\r\n//     const isExpanded = expandedNodes.has(account.id);\r\n//     const typeConfig = accountTypes[account.type];\r\n\r\n//     return (\r\n//       <div key={account.id} className=\"account-node\">\r\n//         <div \r\n//           className={`flex items-center py-2 px-4 hover:bg-gray-50 border-l-4 ${\r\n//             account.category === 'header' ? 'border-gray-400 bg-gray-100 font-bold' :\r\n//             account.category === 'group' ? 'border-gray-300 bg-gray-50 font-semibold' :\r\n//             'border-transparent'\r\n//           }`}\r\n//           style={{ paddingLeft: `${account.level * 20 + 16}px` }}\r\n//         >\r\n//           {hasChildren && (\r\n//             <button\r\n//               onClick={() => toggleExpand(account.id)}\r\n//               className=\"mr-2 p-1 hover:bg-gray-200 rounded\"\r\n//             >\r\n//               {isExpanded ? <ChevronDown size={16} /> : <ChevronRight size={16} />}\r\n//             </button>\r\n//           )}\r\n          \r\n//           <div className=\"flex-1 flex items-center space-x-4\">\r\n//             <span className=\"font-mono text-sm text-gray-600 min-w-[80px]\">\r\n//               {account.code}\r\n//             </span>\r\n            \r\n//             <span className={`flex-1 ${account.category === 'header' ? 'text-lg' : ''}`}>\r\n//               {account.name}\r\n//               {!account.active && <span className=\"ml-2 text-red-500 text-xs\">(Inactive)</span>}\r\n//             </span>\r\n            \r\n//             <span className={`px-2 py-1 rounded-full text-xs font-medium ${typeConfig.color}`}>\r\n//               {typeConfig.label}\r\n//             </span>\r\n            \r\n//             <div className=\"flex space-x-1\">\r\n//               <button\r\n//                 onClick={() => handleEditAccount(account)}\r\n//                 className=\"p-1 hover:bg-blue-100 rounded text-blue-600\"\r\n//                 title=\"Edit Account\"\r\n//                 disabled={loading}\r\n//               >\r\n//                 <Edit size={14} />\r\n//               </button>\r\n//               <button\r\n//                 onClick={() => handleDeleteAccount(account.id)}\r\n//                 className=\"p-1 hover:bg-red-100 rounded text-red-600\"\r\n//                 title=\"Delete Account\"\r\n//                 disabled={loading}\r\n//               >\r\n//                 <Trash2 size={14} />\r\n//               </button>\r\n//               <button\r\n//                 onClick={() => handleAddAccount(account.id)}\r\n//                 className=\"p-1 hover:bg-green-100 rounded text-green-600\"\r\n//                 title=\"Add Sub-Account\"\r\n//                 disabled={loading}\r\n//               >\r\n//                 <Plus size={14} />\r\n//               </button>\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n        \r\n//         {account.description && (\r\n//           <div className=\"px-4 py-1 text-sm text-gray-500\" style={{ paddingLeft: `${account.level * 20 + 36}px` }}>\r\n//             {account.description}\r\n//           </div>\r\n//         )}\r\n\r\n//         {isExpanded && hasChildren && (\r\n//           <div>\r\n//             {account.children.map(child => renderAccountNode(child))}\r\n//           </div>\r\n//         )}\r\n//       </div>\r\n//     );\r\n//   };\r\n\r\n//   const flatAccounts = flattenAccounts(accounts);\r\n//   const filteredAccounts = getFilteredAccounts();\r\n//   const displayAccounts = searchTerm || selectedCategory !== 'all' \r\n//     ? filteredAccounts \r\n//     : buildHierarchy(flatAccounts);\r\n\r\n//   return (\r\n//     <div className=\"max-w-7xl mx-auto p-6 bg-white\">\r\n//       {/* Toast Notifications */}\r\n//       <div className=\"fixed top-4 right-4 z-50 space-y-2\">\r\n//         {toasts.map((toast) => (\r\n//           <div\r\n//             key={toast.id}\r\n//             className={`flex items-center p-4 rounded-lg shadow-lg max-w-sm transform transition-all duration-300 ease-in-out ${\r\n//               toast.type === 'success' \r\n//                 ? 'bg-green-50 border border-green-200 text-green-800' \r\n//                 : toast.type === 'error'\r\n//                 ? 'bg-red-50 border border-red-200 text-red-800'\r\n//                 : 'bg-blue-50 border border-blue-200 text-blue-800'\r\n//             }`}\r\n//           >\r\n//             <div className=\"flex-shrink-0\">\r\n//               {toast.type === 'success' && <CheckCircle size={20} className=\"text-green-600\" />}\r\n//               {toast.type === 'error' && <XCircle size={20} className=\"text-red-600\" />}\r\n//               {toast.type === 'info' && <AlertCircle size={20} className=\"text-blue-600\" />}\r\n//             </div>\r\n//             <div className=\"ml-3 flex-1\">\r\n//               <p className=\"text-sm font-medium\">{toast.message}</p>\r\n//             </div>\r\n//             <button\r\n//               onClick={() => removeToast(toast.id)}\r\n//               className={`ml-3 flex-shrink-0 rounded-md p-1.5 inline-flex focus:outline-none focus:ring-2 focus:ring-offset-2 ${\r\n//                 toast.type === 'success' \r\n//                   ? 'text-green-400 hover:bg-green-100 focus:ring-green-600' \r\n//                   : toast.type === 'error'\r\n//                   ? 'text-red-400 hover:bg-red-100 focus:ring-red-600'\r\n//                   : 'text-blue-400 hover:bg-blue-100 focus:ring-blue-600'\r\n//               }`}\r\n//             >\r\n//               <X size={16} />\r\n//             </button>\r\n//           </div>\r\n//         ))}\r\n//       </div>\r\n\r\n//       <div className=\"mb-6\">\r\n//         <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Chart of Accounts</h1>\r\n//         <p className=\"text-gray-600\">Manage your company's account structure and hierarchy</p>\r\n//       </div>\r\n\r\n//       {/* Error Message */}\r\n//       {error && (\r\n//         <div className=\"mb-4 p-4 bg-red-50 border border-red-200 rounded-lg\">\r\n//           <div className=\"flex\">\r\n//             <div className=\"flex-1\">\r\n//               <p className=\"text-red-700\">{error}</p>\r\n//             </div>\r\n//             <button\r\n//               onClick={() => setError(null)}\r\n//               className=\"text-red-400 hover:text-red-600\"\r\n//             >\r\n//               <X size={16} />\r\n//             </button>\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n\r\n//       {/* Controls */}\r\n//       <div className=\"mb-6 flex flex-wrap items-center justify-between gap-4\">\r\n//         <div className=\"flex items-center space-x-4\">\r\n//           <div className=\"relative\">\r\n//             <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" size={20} />\r\n//             <input\r\n//               type=\"text\"\r\n//               placeholder=\"Search accounts...\"\r\n//               value={searchTerm}\r\n//               onChange={(e) => setSearchTerm(e.target.value)}\r\n//               className=\"pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n//             />\r\n//           </div>\r\n          \r\n//           <div className=\"relative\">\r\n//             <Filter className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" size={20} />\r\n//             <select\r\n//               value={selectedCategory}\r\n//               onChange={(e) => setSelectedCategory(e.target.value)}\r\n//               className=\"pl-10 pr-8 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n//             >\r\n//               <option value=\"all\">All Types</option>\r\n//               {Object.entries(accountTypes).map(([key, type]) => (\r\n//                 <option key={key} value={key}>{type.label}</option>\r\n//               ))}\r\n//             </select>\r\n//           </div>\r\n\r\n//           <button\r\n//             onClick={fetchAccounts}\r\n//             className=\"px-3 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 flex items-center space-x-2\"\r\n//             disabled={loading}\r\n//           >\r\n//             <RefreshCw size={16} className={loading ? 'animate-spin' : ''} />\r\n//             <span>Refresh</span>\r\n//           </button>\r\n//         </div>\r\n\r\n//         <button\r\n//           onClick={() => handleAddAccount()}\r\n//           className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center space-x-2\"\r\n//           disabled={loading}\r\n//         >\r\n//           <Plus size={20} />\r\n//           <span>Add Account</span>\r\n//         </button>\r\n//       </div>\r\n\r\n//       {/* Account Form */}\r\n//       {(isAddingAccount || editingAccount) && (\r\n//         <div className=\"mb-6 p-6 bg-gray-50 rounded-lg border\">\r\n//           <h3 className=\"text-lg font-semibold mb-4\">\r\n//             {editingAccount ? 'Edit Account' : 'Add New Account'}\r\n//           </h3>\r\n          \r\n//           <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\r\n//             <div>\r\n//               <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n//                 Account Code\r\n//               </label>\r\n//               <input\r\n//                 type=\"text\"\r\n//                 value={formData.code}\r\n//                 onChange={(e) => setFormData({...formData, code: e.target.value})}\r\n//                 placeholder=\"Auto-generated if empty\"\r\n//                 className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n//               />\r\n//               <p className=\"text-xs text-gray-500 mt-1\">Leave empty for auto-generation</p>\r\n//             </div>\r\n            \r\n//             <div>\r\n//               <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n//                 Account Name *\r\n//               </label>\r\n//               <input\r\n//                 type=\"text\"\r\n//                 value={formData.name}\r\n//                 onChange={(e) => setFormData({...formData, name: e.target.value})}\r\n//                 placeholder=\"Enter account name\"\r\n//                 className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n//                 required\r\n//               />\r\n//             </div>\r\n            \r\n//             <div>\r\n//               <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n//                 Account Type\r\n//               </label>\r\n//               <select\r\n//                 value={formData.type}\r\n//                 onChange={(e) => setFormData({...formData, type: e.target.value})}\r\n//                 className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n//               >\r\n//                 {Object.entries(accountTypes).map(([key, type]) => (\r\n//                   <option key={key} value={key}>{type.label} ({type.codeRange})</option>\r\n//                 ))}\r\n//               </select>\r\n//             </div>\r\n            \r\n//             <div>\r\n//               <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n//                 Category\r\n//               </label>\r\n//               <select\r\n//                 value={formData.category}\r\n//                 onChange={(e) => setFormData({...formData, category: e.target.value})}\r\n//                 className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n//               >\r\n//                 <option value=\"header\">Header</option>\r\n//                 <option value=\"group\">Group</option>\r\n//                 <option value=\"account\">Account</option>\r\n//               </select>\r\n//             </div>\r\n            \r\n//             <div>\r\n//               <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n//                 Parent Account\r\n//               </label>\r\n//               <select\r\n//                 value={formData.parentId || ''}\r\n//                 onChange={(e) => setFormData({...formData, parentId: e.target.value || null})}\r\n//                 className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n//               >\r\n//                 <option value=\"\">None (Top Level)</option>\r\n//                 {flatAccounts\r\n//                   .filter(a => a.id !== editingAccount && a.category !== 'account')\r\n//                   .map(account => (\r\n//                     <option key={account.id} value={account.id}>\r\n//                       {account.code} - {account.name}\r\n//                     </option>\r\n//                   ))\r\n//                 }\r\n//               </select>\r\n//             </div>\r\n            \r\n//             <div className=\"flex items-center\">\r\n//               <input\r\n//                 type=\"checkbox\"\r\n//                 id=\"active\"\r\n//                 checked={formData.active}\r\n//                 onChange={(e) => setFormData({...formData, active: e.target.checked})}\r\n//                 className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\r\n//               />\r\n//               <label htmlFor=\"active\" className=\"ml-2 block text-sm text-gray-900\">\r\n//                 Active\r\n//               </label>\r\n//             </div>\r\n            \r\n//             <div className=\"md:col-span-2 lg:col-span-3\">\r\n//               <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n//                 Description\r\n//               </label>\r\n//               <textarea\r\n//                 value={formData.description}\r\n//                 onChange={(e) => setFormData({...formData, description: e.target.value})}\r\n//                 rows={2}\r\n//                 placeholder=\"Enter account description\"\r\n//                 className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n//               />\r\n//             </div>\r\n//           </div>\r\n          \r\n//           <div className=\"mt-4 flex space-x-3\">\r\n//             <button\r\n//               onClick={handleSaveAccount}\r\n//               className=\"px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 flex items-center space-x-2\"\r\n//               disabled={loading}\r\n//             >\r\n//               <Save size={16} />\r\n//               <span>{loading ? 'Saving...' : 'Save'}</span>\r\n//             </button>\r\n//             <button\r\n//               onClick={handleCancel}\r\n//               className=\"px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 flex items-center space-x-2\"\r\n//               disabled={loading}\r\n//             >\r\n//               <X size={16} />\r\n//               <span>Cancel</span>\r\n//             </button>\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n\r\n//       {/* Accounts Tree */}\r\n//       <div className=\"bg-white border border-gray-200 rounded-lg overflow-hidden\">\r\n//         <div className=\"px-4 py-3 bg-gray-50 border-b border-gray-200\">\r\n//           <div className=\"flex items-center justify-between\">\r\n//             <h2 className=\"text-lg font-semibold text-gray-900\">Account Structure</h2>\r\n//             <span className=\"text-sm text-gray-500\">\r\n//               {filteredAccounts.length} accounts\r\n//               {loading && <span className=\"ml-2 text-blue-600\">Loading...</span>}\r\n//             </span>\r\n//           </div>\r\n//         </div>\r\n        \r\n//         <div className=\"max-h-[600px] overflow-y-auto\">\r\n//           {loading && accounts.length === 0 ? (\r\n//             <div className=\"p-8 text-center text-gray-500\">\r\n//               <RefreshCw className=\"animate-spin mx-auto mb-2\" size={24} />\r\n//               Loading accounts...\r\n//             </div>\r\n//           ) : displayAccounts.length > 0 ? (\r\n//             searchTerm || selectedCategory !== 'all' ? (\r\n//               // Flat view for search results\r\n//               <div>\r\n//                 {filteredAccounts.map(account => (\r\n//                   <div key={account.id}>\r\n//                     {renderAccountNode({...account, children: []})}\r\n//                   </div>\r\n//                 ))}\r\n//               </div>\r\n//             ) : (\r\n//               // Hierarchical view\r\n//               displayAccounts.map(account => renderAccountNode(account))\r\n//             )\r\n//           ) : (\r\n//             <div className=\"p-8 text-center text-gray-500\">\r\n//               No accounts found matching your criteria.\r\n//             </div>\r\n//           )}\r\n//         </div>\r\n//       </div>\r\n\r\n//       {/* Account Type Legend */}\r\n//       <div className=\"mt-6 p-4 bg-gray-50 rounded-lg\">\r\n//         <h3 className=\"text-sm font-semibold text-gray-700 mb-3\">Account Types & Code Ranges</h3>\r\n//         <div className=\"flex flex-wrap gap-4\">\r\n//           {Object.entries(accountTypes).map(([key, type]) => (\r\n//             <div key={key} className=\"flex items-center space-x-2\">\r\n//               <span className={`px-2 py-1 rounded-full text-xs font-medium ${type.color}`}>\r\n//                 {type.label}\r\n//               </span>\r\n//               <span className=\"text-sm text-gray-600 font-mono\">{type.codeRange}</span>\r\n//             </div>\r\n//           ))}\r\n//         </div>\r\n//       </div>\r\n\r\n//       {/* API Integration Info */}\r\n//       <div className=\"mt-6 p-4 bg-blue-50 rounded-lg\">\r\n//         <h3 className=\"text-sm font-semibold text-blue-800 mb-2\">API Integration Status</h3>\r\n//         <div className=\"text-xs text-blue-700 space-y-1\">\r\n//           <p>• Connected to: {API_BASE_URL}</p>\r\n//           <p>• Auto-refresh after CRUD operations</p>\r\n//           <p>• Real-time data from Spring Boot backend</p>\r\n//           <p>• Hierarchical structure maintained server-side</p>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default ChartOfAccounts;\r\n\r\n\r\n\r\n\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { ChevronDown, ChevronRight, Plus, Edit, Trash2, Save, X, Search, Filter, RefreshCw, CheckCircle, AlertCircle, XCircle, AlertTriangle } from 'lucide-react';\r\n\r\nconst ChartOfAccounts = () => {\r\n  const [accounts, setAccounts] = useState([]);\r\n  const [expandedNodes, setExpandedNodes] = useState(new Set());\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [selectedCategory, setSelectedCategory] = useState('all');\r\n  const [isAddingAccount, setIsAddingAccount] = useState(false);\r\n  const [editingAccount, setEditingAccount] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [toasts, setToasts] = useState([]);\r\n  const [confirmDialog, setConfirmDialog] = useState(null);\r\n  const [formData, setFormData] = useState({\r\n    code: '',\r\n    name: '',\r\n    type: 'assets',\r\n    category: 'account',\r\n    parentId: null,\r\n    description: '',\r\n    active: true\r\n  });\r\n\r\n  // API Base URL\r\n  const API_BASE_URL = 'http://localhost:8080/api/accounts';\r\n\r\n  // Toast notification system\r\n  const showToast = (message, type = 'success') => {\r\n    const id = Date.now();\r\n    const toast = { id, message, type };\r\n    setToasts(prev => [...prev, toast]);\r\n    \r\n    // Auto remove after 5 seconds\r\n    setTimeout(() => {\r\n      setToasts(prev => prev.filter(t => t.id !== id));\r\n    }, 5000);\r\n  };\r\n\r\n  const removeToast = (id) => {\r\n    setToasts(prev => prev.filter(t => t.id !== id));\r\n  };\r\n\r\n  // Confirmation Dialog Component\r\n  const ConfirmationDialog = ({ isOpen, title, message, onConfirm, onCancel, confirmText = \"Confirm\", cancelText = \"Cancel\", type = \"warning\" }) => {\r\n    if (!isOpen) return null;\r\n\r\n    const typeStyles = {\r\n      warning: {\r\n        icon: <AlertTriangle className=\"text-yellow-600\" size={24} />,\r\n        iconBg: 'bg-yellow-100',\r\n        confirmBtn: 'bg-yellow-600 hover:bg-yellow-700'\r\n      },\r\n      danger: {\r\n        icon: <XCircle className=\"text-red-600\" size={24} />,\r\n        iconBg: 'bg-red-100',\r\n        confirmBtn: 'bg-red-600 hover:bg-red-700'\r\n      },\r\n      info: {\r\n        icon: <AlertCircle className=\"text-blue-600\" size={24} />,\r\n        iconBg: 'bg-blue-100',\r\n        confirmBtn: 'bg-blue-600 hover:bg-blue-700'\r\n      }\r\n    };\r\n\r\n    const style = typeStyles[type] || typeStyles.warning;\r\n\r\n    return (\r\n      <div className=\"fixed inset-0 z-50 overflow-y-auto\">\r\n        <div className=\"flex min-h-screen items-center justify-center p-4 text-center\">\r\n          <div className=\"fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity\" onClick={onCancel}></div>\r\n          \r\n          <div className=\"relative transform overflow-hidden rounded-lg bg-white text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-lg\">\r\n            <div className=\"bg-white px-4 pb-4 pt-5 sm:p-6 sm:pb-4\">\r\n              <div className=\"sm:flex sm:items-start\">\r\n                <div className={`mx-auto flex h-12 w-12 flex-shrink-0 items-center justify-center rounded-full sm:mx-0 sm:h-10 sm:w-10 ${style.iconBg}`}>\r\n                  {style.icon}\r\n                </div>\r\n                <div className=\"mt-3 text-center sm:ml-4 sm:mt-0 sm:text-left\">\r\n                  <h3 className=\"text-lg font-semibold leading-6 text-gray-900\">\r\n                    {title}\r\n                  </h3>\r\n                  <div className=\"mt-2\">\r\n                    <p className=\"text-sm text-gray-500\">\r\n                      {message}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"bg-gray-50 px-4 py-3 sm:flex sm:flex-row-reverse sm:px-6\">\r\n              <button\r\n                type=\"button\"\r\n                className={`inline-flex w-full justify-center rounded-md px-3 py-2 text-sm font-semibold text-white shadow-sm sm:ml-3 sm:w-auto ${style.confirmBtn}`}\r\n                onClick={onConfirm}\r\n              >\r\n                {confirmText}\r\n              </button>\r\n              <button\r\n                type=\"button\"\r\n                className=\"mt-3 inline-flex w-full justify-center rounded-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50 sm:mt-0 sm:w-auto\"\r\n                onClick={onCancel}\r\n              >\r\n                {cancelText}\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // Account types configuration\r\n  const accountTypes = {\r\n    assets: { label: 'Assets', color: 'bg-green-100 text-green-800', codeRange: '1000-1999' },\r\n    liabilities: { label: 'Liabilities', color: 'bg-red-100 text-red-800', codeRange: '2000-2999' },\r\n    equity: { label: 'Equity', color: 'bg-blue-100 text-blue-800', codeRange: '3000-3999' },\r\n    revenue: { label: 'Revenue', color: 'bg-purple-100 text-purple-800', codeRange: '4000-4999' },\r\n    expenses: { label: 'Expenses', color: 'bg-orange-100 text-orange-800', codeRange: '5000-5999' }\r\n  };\r\n\r\n  // Fetch accounts from API\r\n  const fetchAccounts = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      const response = await fetch(API_BASE_URL);\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n      \r\n      const data = await response.json();\r\n      setAccounts(data);\r\n      \r\n      // Expand main categories by default\r\n      const mainCategories = data\r\n        .filter(account => account.level === 0)\r\n        .map(account => account.id);\r\n      setExpandedNodes(new Set(mainCategories));\r\n      \r\n    } catch (err) {\r\n      const errorMsg = 'Failed to fetch accounts: ' + err.message;\r\n      setError(errorMsg);\r\n      showToast(errorMsg, 'error');\r\n      console.error('Error fetching accounts:', err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Initialize component\r\n  useEffect(() => {\r\n    fetchAccounts();\r\n  }, []);\r\n\r\n  // Create account\r\n  const createAccount = async (accountData) => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await fetch(API_BASE_URL, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(accountData)\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorText = await response.text();\r\n        throw new Error(errorText || `HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      const result = await response.text();\r\n      showToast(result || 'Account created successfully!', 'success');\r\n      await fetchAccounts(); // Refresh the list\r\n      return true;\r\n    } catch (err) {\r\n      const errorMsg = 'Failed to create account: ' + err.message;\r\n      setError(errorMsg);\r\n      showToast(errorMsg, 'error');\r\n      console.error('Error creating account:', err);\r\n      return false;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Update account\r\n  const updateAccount = async (accountId, accountData) => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await fetch(`${API_BASE_URL}/${accountId}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(accountData)\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorText = await response.text();\r\n        throw new Error(errorText || `HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      const result = await response.text();\r\n      showToast(result || 'Account updated successfully!', 'success');\r\n      await fetchAccounts(); // Refresh the list\r\n      return true;\r\n    } catch (err) {\r\n      const errorMsg = 'Failed to update account: ' + err.message;\r\n      setError(errorMsg);\r\n      showToast(errorMsg, 'error');\r\n      console.error('Error updating account:', err);\r\n      return false;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Delete account\r\n  const deleteAccount = async (accountId) => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await fetch(`${API_BASE_URL}/${accountId}`, {\r\n        method: 'DELETE'\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorText = await response.text();\r\n        throw new Error(errorText || `HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      const result = await response.text();\r\n      showToast(result || 'Account deleted successfully!', 'success');\r\n      await fetchAccounts(); // Refresh the list\r\n      return true;\r\n    } catch (err) {\r\n      const errorMsg = 'Failed to delete account: ' + err.message;\r\n      setError(errorMsg);\r\n      showToast(errorMsg, 'error');\r\n      console.error('Error deleting account:', err);\r\n      return false;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Helper function to flatten hierarchy for filtering\r\n  const flattenAccounts = (accounts) => {\r\n    const result = [];\r\n    const flatten = (items) => {\r\n      items.forEach(item => {\r\n        result.push(item);\r\n        if (item.children && item.children.length > 0) {\r\n          flatten(item.children);\r\n        }\r\n      });\r\n    };\r\n    flatten(accounts);\r\n    return result;\r\n  };\r\n\r\n  // Filter accounts based on search and category\r\n  const getFilteredAccounts = () => {\r\n    const flatAccounts = flattenAccounts(accounts);\r\n    let filtered = flatAccounts;\r\n\r\n    if (searchTerm) {\r\n      filtered = filtered.filter(account => \r\n        account.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n        account.code.includes(searchTerm) ||\r\n        (account.description && account.description.toLowerCase().includes(searchTerm.toLowerCase()))\r\n      );\r\n    }\r\n\r\n    if (selectedCategory !== 'all') {\r\n      filtered = filtered.filter(account => account.type === selectedCategory);\r\n    }\r\n\r\n    return filtered;\r\n  };\r\n\r\n  // Build hierarchy from flat accounts (for display when not searching)\r\n  const buildHierarchy = (accounts, parentId = null) => {\r\n    return accounts\r\n      .filter(account => account.parentId === parentId)\r\n      .sort((a, b) => a.code.localeCompare(b.code))\r\n      .map(account => ({\r\n        ...account,\r\n        children: buildHierarchy(accounts, account.id)\r\n      }));\r\n  };\r\n\r\n  // Toggle expand/collapse\r\n  const toggleExpand = (nodeId) => {\r\n    const newExpanded = new Set(expandedNodes);\r\n    if (newExpanded.has(nodeId)) {\r\n      newExpanded.delete(nodeId);\r\n    } else {\r\n      newExpanded.add(nodeId);\r\n    }\r\n    setExpandedNodes(newExpanded);\r\n  };\r\n\r\n  // Handle add account\r\n  const handleAddAccount = (parentId = null) => {\r\n    const flatAccounts = flattenAccounts(accounts);\r\n    const parentAccount = parentId ? flatAccounts.find(a => a.id === parentId) : null;\r\n    const accountType = parentAccount ? parentAccount.type : 'assets';\r\n    \r\n    setFormData({\r\n      code: '', // Will be generated by backend\r\n      name: '',\r\n      type: accountType,\r\n      category: 'account',\r\n      parentId,\r\n      description: '',\r\n      active: true\r\n    });\r\n    setIsAddingAccount(true);\r\n  };\r\n\r\n  // Handle edit account\r\n  const handleEditAccount = (account) => {\r\n    setFormData({\r\n      code: account.code,\r\n      name: account.name,\r\n      type: account.type,\r\n      category: account.category,\r\n      parentId: account.parentId,\r\n      description: account.description || '',\r\n      active: account.active !== undefined ? account.active : true\r\n    });\r\n    setEditingAccount(account.id);\r\n  };\r\n\r\n  // Handle save account\r\n  const handleSaveAccount = async () => {\r\n    if (!formData.name) {\r\n      showToast('Please fill in the account name', 'error');\r\n      return;\r\n    }\r\n\r\n    const success = editingAccount \r\n      ? await updateAccount(editingAccount, formData)\r\n      : await createAccount(formData);\r\n\r\n    if (success) {\r\n      // Reset form\r\n      setFormData({\r\n        code: '',\r\n        name: '',\r\n        type: 'assets',\r\n        category: 'account',\r\n        parentId: null,\r\n        description: '',\r\n        active: true\r\n      });\r\n      setIsAddingAccount(false);\r\n      setEditingAccount(null);\r\n    }\r\n  };\r\n\r\n  // Handle delete account with confirmation popup\r\n  const handleDeleteAccount = async (account) => {\r\n    const flatAccounts = flattenAccounts(accounts);\r\n    const hasChildren = flatAccounts.some(a => a.parentId === account.id);\r\n    \r\n    if (hasChildren) {\r\n      showToast('Cannot delete account with sub-accounts. Please delete sub-accounts first.', 'error');\r\n      return;\r\n    }\r\n\r\n    setConfirmDialog({\r\n      title: 'Delete Account',\r\n      message: `Are you sure you want to delete the account \"${account.name}\" (${account.code})? This action cannot be undone.`,\r\n      type: 'danger',\r\n      confirmText: 'Delete',\r\n      cancelText: 'Cancel',\r\n      onConfirm: async () => {\r\n        await deleteAccount(account.id);\r\n        setConfirmDialog(null);\r\n      },\r\n      onCancel: () => {\r\n        setConfirmDialog(null);\r\n      }\r\n    });\r\n  };\r\n\r\n  // Handle cancel\r\n  const handleCancel = () => {\r\n    setIsAddingAccount(false);\r\n    setEditingAccount(null);\r\n    setFormData({\r\n      code: '',\r\n      name: '',\r\n      type: 'assets',\r\n      category: 'account',\r\n      parentId: null,\r\n      description: '',\r\n      active: true\r\n    });\r\n  };\r\n\r\n  // Render account node\r\n  const renderAccountNode = (account) => {\r\n    const hasChildren = account.children && account.children.length > 0;\r\n    const isExpanded = expandedNodes.has(account.id);\r\n    const typeConfig = accountTypes[account.type];\r\n\r\n    return (\r\n      <div key={account.id} className=\"account-node\">\r\n        <div \r\n          className={`flex items-center py-2 px-4 hover:bg-gray-50 border-l-4 ${\r\n            account.category === 'header' ? 'border-gray-400 bg-gray-100 font-bold' :\r\n            account.category === 'group' ? 'border-gray-300 bg-gray-50 font-semibold' :\r\n            'border-transparent'\r\n          }`}\r\n          style={{ paddingLeft: `${account.level * 20 + 16}px` }}\r\n        >\r\n          {hasChildren && (\r\n            <button\r\n              onClick={() => toggleExpand(account.id)}\r\n              className=\"mr-2 p-1 hover:bg-gray-200 rounded\"\r\n            >\r\n              {isExpanded ? <ChevronDown size={16} /> : <ChevronRight size={16} />}\r\n            </button>\r\n          )}\r\n          \r\n          <div className=\"flex-1 flex items-center space-x-4\">\r\n            <span className=\"font-mono text-sm text-gray-600 min-w-[80px]\">\r\n              {account.code}\r\n            </span>\r\n            \r\n            <span className={`flex-1 ${account.category === 'header' ? 'text-lg' : ''}`}>\r\n              {account.name}\r\n              {!account.active && <span className=\"ml-2 text-red-500 text-xs\">(Inactive)</span>}\r\n            </span>\r\n            \r\n            <span className={`px-2 py-1 rounded-full text-xs font-medium ${typeConfig.color}`}>\r\n              {typeConfig.label}\r\n            </span>\r\n            \r\n            <div className=\"flex space-x-1\">\r\n              <button\r\n                onClick={() => handleEditAccount(account)}\r\n                className=\"p-1 hover:bg-blue-100 rounded text-blue-600\"\r\n                title=\"Edit Account\"\r\n                disabled={loading}\r\n              >\r\n                <Edit size={14} />\r\n              </button>\r\n              <button\r\n                onClick={() => handleDeleteAccount(account)}\r\n                className=\"p-1 hover:bg-red-100 rounded text-red-600\"\r\n                title=\"Delete Account\"\r\n                disabled={loading}\r\n              >\r\n                <Trash2 size={14} />\r\n              </button>\r\n              <button\r\n                onClick={() => handleAddAccount(account.id)}\r\n                className=\"p-1 hover:bg-green-100 rounded text-green-600\"\r\n                title=\"Add Sub-Account\"\r\n                disabled={loading}\r\n              >\r\n                <Plus size={14} />\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        \r\n        {account.description && (\r\n          <div className=\"px-4 py-1 text-sm text-gray-500\" style={{ paddingLeft: `${account.level * 20 + 36}px` }}>\r\n            {account.description}\r\n          </div>\r\n        )}\r\n\r\n        {isExpanded && hasChildren && (\r\n          <div>\r\n            {account.children.map(child => renderAccountNode(child))}\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const flatAccounts = flattenAccounts(accounts);\r\n  const filteredAccounts = getFilteredAccounts();\r\n  const displayAccounts = searchTerm || selectedCategory !== 'all' \r\n    ? filteredAccounts \r\n    : buildHierarchy(flatAccounts);\r\n\r\n  return (\r\n    <div className=\"max-w-7xl mx-auto p-6 bg-white\">\r\n      {/* Confirmation Dialog */}\r\n      {confirmDialog && (\r\n        <ConfirmationDialog\r\n          isOpen={true}\r\n          title={confirmDialog.title}\r\n          message={confirmDialog.message}\r\n          type={confirmDialog.type}\r\n          confirmText={confirmDialog.confirmText}\r\n          cancelText={confirmDialog.cancelText}\r\n          onConfirm={confirmDialog.onConfirm}\r\n          onCancel={confirmDialog.onCancel}\r\n        />\r\n      )}\r\n\r\n      {/* Toast Notifications */}\r\n      <div className=\"fixed top-4 right-4 z-40 space-y-2\">\r\n        {toasts.map((toast) => (\r\n          <div\r\n            key={toast.id}\r\n            className={`flex items-center p-4 rounded-lg shadow-lg max-w-sm transform transition-all duration-300 ease-in-out ${\r\n              toast.type === 'success' \r\n                ? 'bg-green-50 border border-green-200 text-green-800' \r\n                : toast.type === 'error'\r\n                ? 'bg-red-50 border border-red-200 text-red-800'\r\n                : 'bg-blue-50 border border-blue-200 text-blue-800'\r\n            }`}\r\n          >\r\n            <div className=\"flex-shrink-0\">\r\n              {toast.type === 'success' && <CheckCircle size={20} className=\"text-green-600\" />}\r\n              {toast.type === 'error' && <XCircle size={20} className=\"text-red-600\" />}\r\n              {toast.type === 'info' && <AlertCircle size={20} className=\"text-blue-600\" />}\r\n            </div>\r\n            <div className=\"ml-3 flex-1\">\r\n              <p className=\"text-sm font-medium\">{toast.message}</p>\r\n            </div>\r\n            <button\r\n              onClick={() => removeToast(toast.id)}\r\n              className={`ml-3 flex-shrink-0 rounded-md p-1.5 inline-flex focus:outline-none focus:ring-2 focus:ring-offset-2 ${\r\n                toast.type === 'success' \r\n                  ? 'text-green-400 hover:bg-green-100 focus:ring-green-600' \r\n                  : toast.type === 'error'\r\n                  ? 'text-red-400 hover:bg-red-100 focus:ring-red-600'\r\n                  : 'text-blue-400 hover:bg-blue-100 focus:ring-blue-600'\r\n              }`}\r\n            >\r\n              <X size={16} />\r\n            </button>\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      <div className=\"mb-6\">\r\n        <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Chart of Accounts</h1>\r\n        <p className=\"text-gray-600\">Manage your company's account structure and hierarchy</p>\r\n      </div>\r\n\r\n      {/* Error Message */}\r\n      {error && (\r\n        <div className=\"mb-4 p-4 bg-red-50 border border-red-200 rounded-lg\">\r\n          <div className=\"flex\">\r\n            <div className=\"flex-1\">\r\n              <p className=\"text-red-700\">{error}</p>\r\n            </div>\r\n            <button\r\n              onClick={() => setError(null)}\r\n              className=\"text-red-400 hover:text-red-600\"\r\n            >\r\n              <X size={16} />\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Controls */}\r\n      <div className=\"mb-6 flex flex-wrap items-center justify-between gap-4\">\r\n        <div className=\"flex items-center space-x-4\">\r\n          <div className=\"relative\">\r\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" size={20} />\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Search accounts...\"\r\n              value={searchTerm}\r\n              onChange={(e) => setSearchTerm(e.target.value)}\r\n              className=\"pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n            />\r\n          </div>\r\n          \r\n          <div className=\"relative\">\r\n            <Filter className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" size={20} />\r\n            <select\r\n              value={selectedCategory}\r\n              onChange={(e) => setSelectedCategory(e.target.value)}\r\n              className=\"pl-10 pr-8 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n            >\r\n              <option value=\"all\">All Types</option>\r\n              {Object.entries(accountTypes).map(([key, type]) => (\r\n                <option key={key} value={key}>{type.label}</option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n\r\n          <button\r\n            onClick={fetchAccounts}\r\n            className=\"px-3 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 flex items-center space-x-2\"\r\n            disabled={loading}\r\n          >\r\n            <RefreshCw size={16} className={loading ? 'animate-spin' : ''} />\r\n            <span>Refresh</span>\r\n          </button>\r\n        </div>\r\n\r\n        <button\r\n          onClick={() => handleAddAccount()}\r\n          className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center space-x-2\"\r\n          disabled={loading}\r\n        >\r\n          <Plus size={20} />\r\n          <span>Add Account</span>\r\n        </button>\r\n      </div>\r\n\r\n      {/* Account Form */}\r\n      {(isAddingAccount || editingAccount) && (\r\n        <div className=\"mb-6 p-6 bg-gray-50 rounded-lg border\">\r\n          <h3 className=\"text-lg font-semibold mb-4\">\r\n            {editingAccount ? 'Edit Account' : 'Add New Account'}\r\n          </h3>\r\n          \r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                Account Code\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                value={formData.code}\r\n                onChange={(e) => setFormData({...formData, code: e.target.value})}\r\n                placeholder=\"Auto-generated if empty\"\r\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n              />\r\n              <p className=\"text-xs text-gray-500 mt-1\">Leave empty for auto-generation</p>\r\n            </div>\r\n            \r\n            <div>\r\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                Account Name *\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                value={formData.name}\r\n                onChange={(e) => setFormData({...formData, name: e.target.value})}\r\n                placeholder=\"Enter account name\"\r\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n                required\r\n              />\r\n            </div>\r\n            \r\n            <div>\r\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                Account Type\r\n              </label>\r\n              <select\r\n                value={formData.type}\r\n                onChange={(e) => setFormData({...formData, type: e.target.value})}\r\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n              >\r\n                {Object.entries(accountTypes).map(([key, type]) => (\r\n                  <option key={key} value={key}>{type.label} ({type.codeRange})</option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n            \r\n            <div>\r\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                Category\r\n              </label>\r\n              <select\r\n                value={formData.category}\r\n                onChange={(e) => setFormData({...formData, category: e.target.value})}\r\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n              >\r\n                <option value=\"header\">Header</option>\r\n                <option value=\"group\">Group</option>\r\n                <option value=\"account\">Account</option>\r\n              </select>\r\n            </div>\r\n            \r\n            <div>\r\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                Parent Account\r\n              </label>\r\n              <select\r\n                value={formData.parentId || ''}\r\n                onChange={(e) => setFormData({...formData, parentId: e.target.value || null})}\r\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n              >\r\n                <option value=\"\">None (Top Level)</option>\r\n                {flatAccounts\r\n                  .filter(a => a.id !== editingAccount && a.category !== 'account')\r\n                  .map(account => (\r\n                    <option key={account.id} value={account.id}>\r\n                      {account.code} - {account.name}\r\n                    </option>\r\n                  ))\r\n                }\r\n              </select>\r\n            </div>\r\n            \r\n            <div className=\"flex items-center\">\r\n              <input\r\n                type=\"checkbox\"\r\n                id=\"active\"\r\n                checked={formData.active}\r\n                onChange={(e) => setFormData({...formData, active: e.target.checked})}\r\n                className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\r\n              />\r\n              <label htmlFor=\"active\" className=\"ml-2 block text-sm text-gray-900\">\r\n                Active\r\n              </label>\r\n            </div>\r\n            \r\n            <div className=\"md:col-span-2 lg:col-span-3\">\r\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                Description\r\n              </label>\r\n              <textarea\r\n                value={formData.description}\r\n                onChange={(e) => setFormData({...formData, description: e.target.value})}\r\n                rows={2}\r\n                placeholder=\"Enter account description\"\r\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n              />\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"mt-4 flex space-x-3\">\r\n            <button\r\n              onClick={handleSaveAccount}\r\n              className=\"px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 flex items-center space-x-2\"\r\n              disabled={loading}\r\n            >\r\n              <Save size={16} />\r\n              <span>{loading ? 'Saving...' : 'Save'}</span>\r\n            </button>\r\n            <button\r\n              onClick={handleCancel}\r\n              className=\"px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 flex items-center space-x-2\"\r\n              disabled={loading}\r\n            >\r\n              <X size={16} />\r\n              <span>Cancel</span>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Accounts Tree */}\r\n      <div className=\"bg-white border border-gray-200 rounded-lg overflow-hidden\">\r\n        <div className=\"px-4 py-3 bg-gray-50 border-b border-gray-200\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <h2 className=\"text-lg font-semibold text-gray-900\">Account Structure</h2>\r\n            <span className=\"text-sm text-gray-500\">\r\n              {filteredAccounts.length} accounts\r\n              {loading && <span className=\"ml-2 text-blue-600\">Loading...</span>}\r\n            </span>\r\n          </div>\r\n        </div>\r\n        \r\n        <div className=\"max-h-[600px] overflow-y-auto\">\r\n          {loading && accounts.length === 0 ? (\r\n            <div className=\"p-8 text-center text-gray-500\">\r\n              <RefreshCw className=\"animate-spin mx-auto mb-2\" size={24} />\r\n              Loading accounts...\r\n            </div>\r\n          ) : displayAccounts.length > 0 ? (\r\n            searchTerm || selectedCategory !== 'all' ? (\r\n              // Flat view for search results\r\n              <div>\r\n                {filteredAccounts.map(account => (\r\n                  <div key={account.id}>\r\n                    {renderAccountNode({...account, children: []})}\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            ) : (\r\n              // Hierarchical view\r\n              displayAccounts.map(account => renderAccountNode(account))\r\n            )\r\n          ) : (\r\n            <div className=\"p-8 text-center text-gray-500\">\r\n              No accounts found matching your criteria.\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Account Type Legend */}\r\n      <div className=\"mt-6 p-4 bg-gray-50 rounded-lg\">\r\n        <h3 className=\"text-sm font-semibold text-gray-700 mb-3\">Account Types & Code Ranges</h3>\r\n        <div className=\"flex flex-wrap gap-4\">\r\n          {Object.entries(accountTypes).map(([key, type]) => (\r\n            <div key={key} className=\"flex items-center space-x-2\">\r\n              <span className={`px-2 py-1 rounded-full text-xs font-medium ${type.color}`}>\r\n                {type.label}\r\n              </span>\r\n              <span className=\"text-sm text-gray-600 font-mono\">{type.codeRange}</span>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      {/* API Integration Info */}\r\n      <div className=\"mt-6 p-4 bg-blue-50 rounded-lg\">\r\n        <h3 className=\"text-sm font-semibold text-blue-800 mb-2\">API Integration Status</h3>\r\n        <div className=\"text-xs text-blue-700 space-y-1\">\r\n          <p>• Connected to: {API_BASE_URL}</p>\r\n          <p>• Auto-refresh after CRUD operations</p>\r\n          <p>• Real-time data from Spring Boot backend</p>\r\n          <p>• Hierarchical structure maintained server-side</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChartOfAccounts;"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}