{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback } from 'react';\nexport const useTrialBalance = (accounts, journalEntries) => {\n  _s();\n  const [trialBalance, setTrialBalance] = useState([]);\n  const generateTrialBalance = useCallback(() => {\n    const balances = {};\n    accounts.forEach(account => {\n      if (account.category === 'account') {\n        balances[account.id] = {\n          accountId: account.id,\n          accountCode: account.code,\n          accountName: account.name,\n          accountType: account.type || 'unknown',\n          debit: 0,\n          credit: 0,\n          balance: 0\n        };\n      }\n    });\n    journalEntries.forEach(entry => {\n      if (entry.status === 'posted') {\n        entry.entries.forEach(entryLine => {\n          const accountId = entryLine.accountId;\n          if (!balances[accountId]) {\n            balances[accountId] = {\n              accountId: accountId,\n              accountCode: entryLine.accountCode || accountId,\n              accountName: entryLine.accountName || `Account ${accountId}`,\n              accountType: 'unknown',\n              debit: 0,\n              credit: 0,\n              balance: 0\n            };\n          }\n          balances[accountId].debit += parseFloat(entryLine.debit || 0);\n          balances[accountId].credit += parseFloat(entryLine.credit || 0);\n        });\n      }\n    });\n    Object.values(balances).forEach(account => {\n      if (account.accountType === 'assets' || account.accountType === 'expenses') {\n        account.balance = account.debit - account.credit;\n      } else {\n        account.balance = account.credit - account.debit;\n      }\n    });\n    const trialBalanceData = Object.values(balances).filter(account => account.debit > 0 || account.credit > 0).sort((a, b) => a.accountCode.localeCompare(b.accountCode));\n    setTrialBalance(trialBalanceData);\n  }, [accounts, journalEntries]);\n  return {\n    trialBalance,\n    generateTrialBalance\n  };\n};\n_s(useTrialBalance, \"xItKt9sVErzJAIi6hPLbVCNntsE=\");","map":{"version":3,"names":["useState","useCallback","useTrialBalance","accounts","journalEntries","_s","trialBalance","setTrialBalance","generateTrialBalance","balances","forEach","account","category","id","accountId","accountCode","code","accountName","name","accountType","type","debit","credit","balance","entry","status","entries","entryLine","parseFloat","Object","values","trialBalanceData","filter","sort","a","b","localeCompare"],"sources":["C:/Users/Logic-Unit/my-account/src/hooks/useTrialBalance.js"],"sourcesContent":["import { useState, useCallback } from 'react';\r\n\r\nexport const useTrialBalance = (accounts, journalEntries) => {\r\n  const [trialBalance, setTrialBalance] = useState([]);\r\n\r\n  const generateTrialBalance = useCallback(() => {\r\n    const balances = {};\r\n    \r\n    accounts.forEach(account => {\r\n      if (account.category === 'account') {\r\n        balances[account.id] = {\r\n          accountId: account.id,\r\n          accountCode: account.code,\r\n          accountName: account.name,\r\n          accountType: account.type || 'unknown',\r\n          debit: 0,\r\n          credit: 0,\r\n          balance: 0\r\n        };\r\n      }\r\n    });\r\n    \r\n    journalEntries.forEach(entry => {\r\n      if (entry.status === 'posted') {\r\n        entry.entries.forEach(entryLine => {\r\n          const accountId = entryLine.accountId;\r\n          if (!balances[accountId]) {\r\n            balances[accountId] = {\r\n              accountId: accountId,\r\n              accountCode: entryLine.accountCode || accountId,\r\n              accountName: entryLine.accountName || `Account ${accountId}`,\r\n              accountType: 'unknown',\r\n              debit: 0,\r\n              credit: 0,\r\n              balance: 0\r\n            };\r\n          }\r\n          \r\n          balances[accountId].debit += parseFloat(entryLine.debit || 0);\r\n          balances[accountId].credit += parseFloat(entryLine.credit || 0);\r\n        });\r\n      }\r\n    });\r\n\r\n    Object.values(balances).forEach(account => {\r\n      if (account.accountType === 'assets' || account.accountType === 'expenses') {\r\n        account.balance = account.debit - account.credit;\r\n      } else {\r\n        account.balance = account.credit - account.debit;\r\n      }\r\n    });\r\n\r\n    const trialBalanceData = Object.values(balances)\r\n      .filter(account => account.debit > 0 || account.credit > 0)\r\n      .sort((a, b) => a.accountCode.localeCompare(b.accountCode));\r\n    \r\n    setTrialBalance(trialBalanceData);\r\n  }, [accounts, journalEntries]);\r\n\r\n  return {\r\n    trialBalance,\r\n    generateTrialBalance\r\n  };\r\n};"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AAE7C,OAAO,MAAMC,eAAe,GAAGA,CAACC,QAAQ,EAAEC,cAAc,KAAK;EAAAC,EAAA;EAC3D,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAEpD,MAAMQ,oBAAoB,GAAGP,WAAW,CAAC,MAAM;IAC7C,MAAMQ,QAAQ,GAAG,CAAC,CAAC;IAEnBN,QAAQ,CAACO,OAAO,CAACC,OAAO,IAAI;MAC1B,IAAIA,OAAO,CAACC,QAAQ,KAAK,SAAS,EAAE;QAClCH,QAAQ,CAACE,OAAO,CAACE,EAAE,CAAC,GAAG;UACrBC,SAAS,EAAEH,OAAO,CAACE,EAAE;UACrBE,WAAW,EAAEJ,OAAO,CAACK,IAAI;UACzBC,WAAW,EAAEN,OAAO,CAACO,IAAI;UACzBC,WAAW,EAAER,OAAO,CAACS,IAAI,IAAI,SAAS;UACtCC,KAAK,EAAE,CAAC;UACRC,MAAM,EAAE,CAAC;UACTC,OAAO,EAAE;QACX,CAAC;MACH;IACF,CAAC,CAAC;IAEFnB,cAAc,CAACM,OAAO,CAACc,KAAK,IAAI;MAC9B,IAAIA,KAAK,CAACC,MAAM,KAAK,QAAQ,EAAE;QAC7BD,KAAK,CAACE,OAAO,CAAChB,OAAO,CAACiB,SAAS,IAAI;UACjC,MAAMb,SAAS,GAAGa,SAAS,CAACb,SAAS;UACrC,IAAI,CAACL,QAAQ,CAACK,SAAS,CAAC,EAAE;YACxBL,QAAQ,CAACK,SAAS,CAAC,GAAG;cACpBA,SAAS,EAAEA,SAAS;cACpBC,WAAW,EAAEY,SAAS,CAACZ,WAAW,IAAID,SAAS;cAC/CG,WAAW,EAAEU,SAAS,CAACV,WAAW,IAAI,WAAWH,SAAS,EAAE;cAC5DK,WAAW,EAAE,SAAS;cACtBE,KAAK,EAAE,CAAC;cACRC,MAAM,EAAE,CAAC;cACTC,OAAO,EAAE;YACX,CAAC;UACH;UAEAd,QAAQ,CAACK,SAAS,CAAC,CAACO,KAAK,IAAIO,UAAU,CAACD,SAAS,CAACN,KAAK,IAAI,CAAC,CAAC;UAC7DZ,QAAQ,CAACK,SAAS,CAAC,CAACQ,MAAM,IAAIM,UAAU,CAACD,SAAS,CAACL,MAAM,IAAI,CAAC,CAAC;QACjE,CAAC,CAAC;MACJ;IACF,CAAC,CAAC;IAEFO,MAAM,CAACC,MAAM,CAACrB,QAAQ,CAAC,CAACC,OAAO,CAACC,OAAO,IAAI;MACzC,IAAIA,OAAO,CAACQ,WAAW,KAAK,QAAQ,IAAIR,OAAO,CAACQ,WAAW,KAAK,UAAU,EAAE;QAC1ER,OAAO,CAACY,OAAO,GAAGZ,OAAO,CAACU,KAAK,GAAGV,OAAO,CAACW,MAAM;MAClD,CAAC,MAAM;QACLX,OAAO,CAACY,OAAO,GAAGZ,OAAO,CAACW,MAAM,GAAGX,OAAO,CAACU,KAAK;MAClD;IACF,CAAC,CAAC;IAEF,MAAMU,gBAAgB,GAAGF,MAAM,CAACC,MAAM,CAACrB,QAAQ,CAAC,CAC7CuB,MAAM,CAACrB,OAAO,IAAIA,OAAO,CAACU,KAAK,GAAG,CAAC,IAAIV,OAAO,CAACW,MAAM,GAAG,CAAC,CAAC,CAC1DW,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACnB,WAAW,CAACqB,aAAa,CAACD,CAAC,CAACpB,WAAW,CAAC,CAAC;IAE7DR,eAAe,CAACwB,gBAAgB,CAAC;EACnC,CAAC,EAAE,CAAC5B,QAAQ,EAAEC,cAAc,CAAC,CAAC;EAE9B,OAAO;IACLE,YAAY;IACZE;EACF,CAAC;AACH,CAAC;AAACH,EAAA,CA7DWH,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}