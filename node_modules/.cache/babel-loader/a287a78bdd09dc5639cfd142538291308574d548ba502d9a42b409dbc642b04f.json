{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Logic-Unit\\\\my-account\\\\src\\\\components\\\\AccountsReceivable\\\\RecordPaymentModal.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { X, Calendar, DollarSign, CreditCard, FileText, AlertCircle } from 'lucide-react';\nimport { formatCurrency } from './AccountsReceivableUtils/formatters';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RecordPaymentModal = ({\n  invoiceId,\n  amount,\n  onClose,\n  onSubmit,\n  onPaymentComplete,\n  customerId\n}) => {\n  _s();\n  const [formData, setFormData] = useState({\n    date: new Date().toISOString().split('T')[0],\n    amount: (amount === null || amount === void 0 ? void 0 : amount.toString()) || '',\n    method: '',\n    account: '',\n    memo: ''\n  });\n  const [accounts, setAccounts] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [errors, setErrors] = useState({});\n  const [isAlreadyPaid, setIsAlreadyPaid] = useState(false); // ✅ NEW\n  const [currentRemainingAmount, setCurrentRemainingAmount] = useState(amount);\n  useEffect(() => {\n    const existingOrders = JSON.parse(localStorage.getItem('orders') || '[]');\n    const orderIndex = existingOrders.findIndex(order => order.orderId === invoiceId || order.id === invoiceId);\n    const remainingAmountFromStorage = orderIndex !== -1 ? existingOrders[orderIndex].remainingAmount || amount : amount;\n    setCurrentRemainingAmount(remainingAmountFromStorage);\n  }, [invoiceId, amount]);\n  const paymentAmount = parseFloat(formData.amount) || 0;\n  const remainingAmount = Math.max(0, currentRemainingAmount - paymentAmount);\n  const isFullPayment = remainingAmount <= 0;\n  // Fetch accounts on mount\n  useEffect(() => {\n    fetchAccounts();\n  }, []);\n\n  // Set initial amount\n  useEffect(() => {\n    if (amount) {\n      setFormData(prev => ({\n        ...prev,\n        amount: amount.toString()\n      }));\n    }\n  }, [amount]);\n  // ✅ Check if this invoice is already fully paid\n  useEffect(() => {\n    const existingOrders = JSON.parse(localStorage.getItem('orders') || '[]');\n    const order = existingOrders.find(o => o.orderId === invoiceId || o.id === invoiceId);\n    if (order && (order.paid || order.paymentStatus === 'paid')) {\n      setIsAlreadyPaid(true);\n    }\n  }, [invoiceId]);\n  const fetchAccounts = async () => {\n    try {\n      const response = await fetch('http://localhost:8080/api/accounts');\n      const data = await response.json();\n\n      // Filter only asset accounts (like the commented code)\n      const assetAccounts = data.filter(acct => acct.type === 'assets');\n\n      // Build parent-child map (like the commented code)\n      const accountMap = {};\n      assetAccounts.forEach(acct => accountMap[acct.id] = {\n        ...acct,\n        children: []\n      });\n      assetAccounts.forEach(acct => {\n        if (acct.parentId && accountMap[acct.parentId]) {\n          accountMap[acct.parentId].children.push(accountMap[acct.id]);\n        }\n      });\n\n      // Top-level accounts (like the commented code)\n      const tree = assetAccounts.filter(acct => !acct.parentId || !accountMap[acct.parentId]);\n      setAccounts(tree);\n    } catch (err) {\n      console.error('Failed to fetch accounts:', err);\n    }\n  };\n  const handleChange = (field, value) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n    // Clear error for this field when user starts typing\n    if (errors[field]) {\n      setErrors(prev => ({\n        ...prev,\n        [field]: ''\n      }));\n    }\n  };\n  const validateForm = () => {\n    const newErrors = {};\n    if (!formData.date) {\n      newErrors.date = 'Payment date is required';\n    }\n    if (!formData.amount || parseFloat(formData.amount) <= 0) {\n      newErrors.amount = 'Valid payment amount is required';\n    }\n    if (!formData.method) {\n      newErrors.method = 'Payment method is required';\n    }\n    if (!formData.account) {\n      newErrors.account = 'Deposit account is required';\n    }\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n  // const handleSubmit = async () => {\n  //   if (isAlreadyPaid) {\n  //     setErrors({\n  //       general: 'This invoice has already been fully paid. No further payments allowed.'\n  //     });\n  //     return;\n  //   }\n\n  //   if (!validateForm()) return;\n\n  //   setLoading(true);\n\n  //   try {\n  //     const existingOrders = JSON.parse(localStorage.getItem('orders') || '[]');\n  //     const orderIndex = existingOrders.findIndex(order =>\n  //       order.orderId === invoiceId || order.id === invoiceId\n  //     );\n\n  //     // Get the current remaining amount, defaulting to the original amount if not found\n  //     const currentRemainingAmount = orderIndex !== -1 \n  //       ? existingOrders[orderIndex].remainingAmount || amount \n  //       : amount;\n\n  //     const paymentAmount = parseFloat(formData.amount);\n  //     const remainingAmount = currentRemainingAmount - paymentAmount;\n  //     const isFullPayment = remainingAmount <= 0;\n  //     const paymentStatus = isFullPayment ? 'paid' : 'partial';\n\n  //     // Create payment record (local save)\n  //     const paymentData = {\n  //       id: `PAY-${Date.now()}`,\n  //       customerId:customerId||null,\n  //       orderId: invoiceId,\n  //       date: formData.date,\n  //       amount: paymentAmount,\n  //       paymentMethod: formData.method,\n  //       accountId: formData.account,\n  //       accountName: getAccountNameById(formData.account, accounts) || 'Unknown Account',\n  //       memo: formData.memo,\n  //       status: paymentStatus,\n  //       remainingAmount: Math.max(0, remainingAmount),\n  //       createdAt: new Date().toISOString(),\n  //       createdBy: 'current_user'\n  //     };\n\n  //     // Save payment to localStorage\n  //     const existingPayments = JSON.parse(localStorage.getItem('payments') || '[]');\n  //     const updatedPayments = [...existingPayments, paymentData];\n  //     localStorage.setItem('payments', JSON.stringify(updatedPayments));\n\n  //     // // Update order in localStorage\n  //     //  existingOrders = JSON.parse(localStorage.getItem('orders') || '[]');\n  //     //  orderIndex = existingOrders.findIndex(order =>\n  //     //   order.orderId === invoiceId || order.id === invoiceId\n  //     // );\n\n  //     if (orderIndex !== -1) {\n  //       existingOrders[orderIndex] = {\n  //         ...existingOrders[orderIndex],\n  //         paid: isFullPayment,\n  //         paymentStatus: paymentStatus,\n  //         lastPaymentDate: formData.date,\n  //         lastPaymentAmount: paymentAmount,\n  //         remainingAmount: Math.max(0, remainingAmount),\n  //         paymentHistory: [\n  //           ...(existingOrders[orderIndex].paymentHistory || []),\n  //           paymentData.id\n  //         ]\n  //       };\n  //       localStorage.setItem('orders', JSON.stringify(existingOrders));\n  //     }\n\n  //     // ✅ CALL THE API\n  //     const apiUrl = `https://api-pos.hulmsolutions.com/POS/accounting2/31fc8df0-61db-41e5-bb67-070fde367ea1/orders/Paid/${invoiceId}`;\n\n  //     const payload = {\n  //       customerId: customerId,  // if null string is correct\n  //       orderId: invoiceId,\n  //       paid: isFullPayment,  // true if fully paid, false otherwise\n  //       billUnitId: \"2\",\n  //       billStatus: \"pending\"\n  //     };\n\n  //    const apiResponse = await fetch(apiUrl, {\n  //   method: \"PUT\",\n  //   headers: {\n  //     \"Content-Type\": \"application/json\",\n  //     \"Authorization\": `Bearer $hAMID` // ✅ add your token\n  //   },\n  //   body: JSON.stringify(payload)\n  // });\n\n  //     if (!apiResponse.ok) {\n  //       throw new Error(\"Failed to update order status in API\");\n  //     }\n\n  //     // Callbacks\n  //     if (onSubmit) {\n  //       onSubmit(paymentData, isFullPayment);\n  //     }\n\n  //     if (onPaymentComplete) {\n  //       onPaymentComplete(paymentData, isFullPayment);\n  //     }\n\n  //     // Success message\n  //     const message = isFullPayment\n  //       ? \"Payment recorded successfully. Invoice is now fully paid.\"\n  //       : `Partial payment of ${formatCurrency(paymentAmount)} recorded. Remaining balance: ${formatCurrency(remainingAmount)}`;\n\n  //     console.log(message);\n\n  //     onClose();\n  //   } catch (error) {\n  //     console.error(\"Error recording payment:\", error);\n  //     setErrors({ general: \"Failed to record payment. Please try again.\" });\n  //   } finally {\n  //     setLoading(false);\n  //   }\n  // };\n\n  const handleSubmit = async () => {\n    if (isAlreadyPaid) {\n      setErrors({\n        general: 'This invoice has already been fully paid. No further payments allowed.'\n      });\n      return;\n    }\n    if (!validateForm()) return;\n    setLoading(true);\n    try {\n      // Retrieve existing orders from localStorage\n      const existingOrders = JSON.parse(localStorage.getItem('orders') || '[]');\n      const orderIndex = existingOrders.findIndex(order => order.orderId === invoiceId || order.id === invoiceId);\n\n      // Determine current remaining amount\n      const currentRemainingAmount = orderIndex !== -1 ? existingOrders[orderIndex].remainingAmount || amount : amount;\n      const paymentAmount = parseFloat(formData.amount);\n      const remainingAmount = Math.max(0, currentRemainingAmount - paymentAmount);\n      const isFullPayment = remainingAmount <= 0;\n      const paymentStatus = isFullPayment ? 'paid' : 'partial';\n\n      // Create payment record\n      const paymentData = {\n        id: `PAY-${Date.now()}`,\n        customerId: customerId || null,\n        orderId: invoiceId,\n        date: formData.date,\n        amount: paymentAmount,\n        paymentMethod: formData.method,\n        accountId: formData.account,\n        accountName: getAccountNameById(formData.account, accounts) || 'Unknown Account',\n        memo: formData.memo,\n        status: paymentStatus,\n        remainingAmount: remainingAmount,\n        createdAt: new Date().toISOString(),\n        createdBy: 'current_user'\n      };\n\n      // Save payment to localStorage\n      const existingPayments = JSON.parse(localStorage.getItem('payments') || '[]');\n      const updatedPayments = [...existingPayments, paymentData];\n      localStorage.setItem('payments', JSON.stringify(updatedPayments));\n\n      // Update order in localStorage\n      if (orderIndex !== -1) {\n        existingOrders[orderIndex] = {\n          ...existingOrders[orderIndex],\n          paid: isFullPayment,\n          paymentStatus: paymentStatus,\n          lastPaymentDate: formData.date,\n          lastPaymentAmount: paymentAmount,\n          remainingAmount: remainingAmount,\n          paymentHistory: [...(existingOrders[orderIndex].paymentHistory || []), paymentData.id]\n        };\n        localStorage.setItem('orders', JSON.stringify(existingOrders));\n      }\n\n      // API Call\n      const apiUrl = `https://api-pos.hulmsolutions.com/POS/accounting2/31fc8df0-61db-41e5-bb67-070fde367ea1/orders/Paid/${invoiceId}`;\n      const payload = {\n        customerId: customerId,\n        orderId: invoiceId,\n        paid: isFullPayment,\n        billUnitId: \"2\",\n        billStatus: \"pending\"\n      };\n      const apiResponse = await fetch(apiUrl, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer $hAMID`\n        },\n        body: JSON.stringify(payload)\n      });\n      if (!apiResponse.ok) {\n        throw new Error(\"Failed to update order status in API\");\n      }\n\n      // Callbacks\n      if (onSubmit) {\n        onSubmit(paymentData, isFullPayment);\n      }\n      if (onPaymentComplete) {\n        onPaymentComplete(paymentData, isFullPayment);\n      }\n\n      // Success message\n      const message = isFullPayment ? \"Payment recorded successfully. Invoice is now fully paid.\" : `Partial payment of ${formatCurrency(paymentAmount)} recorded. Remaining balance: ${formatCurrency(remainingAmount)}`;\n      console.log(message);\n      onClose();\n    } catch (error) {\n      console.error(\"Error recording payment:\", error);\n      setErrors({\n        general: \"Failed to record payment. Please try again.\"\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n  const getAccountNameById = (accountId, accountList) => {\n    for (const account of accountList) {\n      if (account.id === accountId) {\n        return account.name;\n      }\n      if (account.children && account.children.length > 0) {\n        const foundInChildren = getAccountNameById(accountId, account.children);\n        if (foundInChildren) return foundInChildren;\n      }\n    }\n    return null;\n  };\n\n  // Helper function to render account options recursively\n  const renderAccountOptions = (accountList, level = 0) => {\n    return accountList.map(account => /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: account.id,\n        children: ['-'.repeat(level * 2), \" \", account.code, \" - \", account.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 9\n      }, this), account.children && account.children.length > 0 && renderAccountOptions(account.children, level + 1)]\n    }, account.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 7\n    }, this));\n  };\n\n  // const paymentAmount = parseFloat(formData.amount) || 0;\n  // const remainingAmount = amount - paymentAmount;\n  // const isFullPayment = paymentAmount >= amount;\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-white rounded-xl shadow-2xl max-w-md w-full\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"px-6 py-4 border-b border-gray-200\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center justify-between\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"text-xl font-semibold text-gray-900\",\n            children: \"Record a payment for this invoice\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 388,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: onClose,\n            className: \"text-gray-400 hover:text-gray-600 transition-colors\",\n            children: /*#__PURE__*/_jsxDEV(X, {\n              size: 24\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 395,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 391,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 387,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"px-6 py-4 space-y-5\",\n        children: [errors.general && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"p-3 bg-red-50 border border-red-200 rounded-lg flex items-start gap-2\",\n          children: [/*#__PURE__*/_jsxDEV(AlertCircle, {\n            size: 20,\n            className: \"text-red-600 flex-shrink-0 mt-0.5\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 404,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-sm text-red-700\",\n            children: errors.general\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 405,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 403,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\",\n            children: [/*#__PURE__*/_jsxDEV(Calendar, {\n              size: 16\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 412,\n              columnNumber: 15\n            }, this), \"Date\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 411,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"date\",\n            value: formData.date,\n            onChange: e => handleChange('date', e.target.value),\n            className: `w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${errors.date ? 'border-red-500' : 'border-gray-300'}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 415,\n            columnNumber: 13\n          }, this), errors.date && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-xs text-red-600 mt-1\",\n            children: errors.date\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 423,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 410,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\",\n            children: [/*#__PURE__*/_jsxDEV(DollarSign, {\n              size: 16\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 429,\n              columnNumber: 15\n            }, this), \"Amount\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 428,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"relative\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"absolute left-3 top-1/2 -translate-y-1/2 text-gray-500 font-medium\",\n              children: \"Rs\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 433,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              step: \"0.01\",\n              value: formData.amount,\n              onChange: e => handleChange('amount', e.target.value),\n              className: `w-full pl-10 pr-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${errors.amount ? 'border-red-500' : 'border-gray-300'}`,\n              placeholder: \"0.00\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 436,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 432,\n            columnNumber: 13\n          }, this), errors.amount && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-xs text-red-600 mt-1\",\n            children: errors.amount\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 447,\n            columnNumber: 31\n          }, this), paymentAmount > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mt-2 text-sm\",\n            children: isFullPayment ? /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"text-green-600 font-medium\",\n              children: \"Invoice will be fully paid\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 452,\n              columnNumber: 19\n            }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"text-orange-600\",\n              children: [\"Partial payment - Remaining: \", formatCurrency(remainingAmount)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 454,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 450,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 427,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\",\n            children: [/*#__PURE__*/_jsxDEV(CreditCard, {\n              size: 16\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 465,\n              columnNumber: 15\n            }, this), \"Method\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 464,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: formData.method,\n            onChange: e => handleChange('method', e.target.value),\n            className: `w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${errors.method ? 'border-red-500' : 'border-gray-300'}`,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select a payment method...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 475,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"cash\",\n              children: \"Cash\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 476,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"check\",\n              children: \"Check\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 477,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"bank_transfer\",\n              children: \"Bank Transfer\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 478,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"credit_card\",\n              children: \"Credit Card\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 479,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"debit_card\",\n              children: \"Debit Card\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 480,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"online\",\n              children: \"Online Payment\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 481,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 468,\n            columnNumber: 13\n          }, this), errors.method && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-xs text-red-600 mt-1\",\n            children: errors.method\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 483,\n            columnNumber: 31\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 463,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\",\n            children: [/*#__PURE__*/_jsxDEV(FileText, {\n              size: 16\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 489,\n              columnNumber: 15\n            }, this), \"Account\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 488,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: formData.account,\n            onChange: e => handleChange('account', e.target.value),\n            className: `w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${errors.account ? 'border-red-500' : 'border-gray-300'}`,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select a payment account...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 499,\n              columnNumber: 15\n            }, this), renderAccountOptions(accounts)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 492,\n            columnNumber: 13\n          }, this), errors.account && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-xs text-red-600 mt-1\",\n            children: errors.account\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 502,\n            columnNumber: 32\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-xs text-gray-500 mt-1\",\n            children: [\"Any account into which you deposit and withdraw funds from.\", ' ', /*#__PURE__*/_jsxDEV(\"a\", {\n              href: \"#\",\n              className: \"text-blue-600 hover:text-blue-700\",\n              children: \"Learn more\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 505,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 503,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 487,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"text-sm font-medium text-gray-700 mb-1 block\",\n            children: \"Memo / notes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 511,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            value: formData.memo,\n            onChange: e => handleChange('memo', e.target.value),\n            rows: 3,\n            className: \"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\",\n            placeholder: \"Add any additional notes...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 514,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 510,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 401,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"px-6 py-4 border-t border-gray-200 flex items-center justify-end gap-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: onClose,\n          className: \"px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors\",\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 526,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSubmit,\n          disabled: loading || !formData.amount || parseFloat(formData.amount) <= 0,\n          className: `px-6 py-2 rounded-lg font-medium transition-colors ${loading || !formData.amount || parseFloat(formData.amount) <= 0 ? 'bg-gray-300 text-gray-500 cursor-not-allowed' : 'bg-blue-600 text-white hover:bg-blue-700'}`,\n          children: loading ? 'Processing...' : 'Submit'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 532,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 525,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 384,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 383,\n    columnNumber: 5\n  }, this);\n};\n_s(RecordPaymentModal, \"5KpUytamwm8wzReu5JHRInU0XCs=\");\n_c = RecordPaymentModal;\nexport default RecordPaymentModal;\nvar _c;\n$RefreshReg$(_c, \"RecordPaymentModal\");","map":{"version":3,"names":["React","useState","useEffect","X","Calendar","DollarSign","CreditCard","FileText","AlertCircle","formatCurrency","jsxDEV","_jsxDEV","RecordPaymentModal","invoiceId","amount","onClose","onSubmit","onPaymentComplete","customerId","_s","formData","setFormData","date","Date","toISOString","split","toString","method","account","memo","accounts","setAccounts","loading","setLoading","errors","setErrors","isAlreadyPaid","setIsAlreadyPaid","currentRemainingAmount","setCurrentRemainingAmount","existingOrders","JSON","parse","localStorage","getItem","orderIndex","findIndex","order","orderId","id","remainingAmountFromStorage","remainingAmount","paymentAmount","parseFloat","Math","max","isFullPayment","fetchAccounts","prev","find","o","paid","paymentStatus","response","fetch","data","json","assetAccounts","filter","acct","type","accountMap","forEach","children","parentId","push","tree","err","console","error","handleChange","field","value","validateForm","newErrors","Object","keys","length","handleSubmit","general","paymentData","now","paymentMethod","accountId","accountName","getAccountNameById","status","createdAt","createdBy","existingPayments","updatedPayments","setItem","stringify","lastPaymentDate","lastPaymentAmount","paymentHistory","apiUrl","payload","billUnitId","billStatus","apiResponse","headers","body","ok","Error","message","log","accountList","name","foundInChildren","renderAccountOptions","level","map","Fragment","repeat","code","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","size","onChange","e","target","step","placeholder","href","rows","disabled","_c","$RefreshReg$"],"sources":["C:/Users/Logic-Unit/my-account/src/components/AccountsReceivable/RecordPaymentModal.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { X, Calendar, DollarSign, CreditCard, FileText, AlertCircle } from 'lucide-react';\r\nimport { formatCurrency } from './AccountsReceivableUtils/formatters';\r\n\r\nconst RecordPaymentModal = ({ invoiceId, amount, onClose, onSubmit, onPaymentComplete,customerId }) => {\r\n  const [formData, setFormData] = useState({\r\n    date: new Date().toISOString().split('T')[0],\r\n    amount: amount?.toString() || '',\r\n    method: '',\r\n    account: '',\r\n    memo: ''\r\n  });\r\n  \r\n  const [accounts, setAccounts] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [errors, setErrors] = useState({});\r\n  const [isAlreadyPaid, setIsAlreadyPaid] = useState(false); // ✅ NEW\r\n  const [currentRemainingAmount, setCurrentRemainingAmount] = useState(amount);\r\nuseEffect(() => {\r\n  const existingOrders = JSON.parse(localStorage.getItem('orders') || '[]');\r\n  const orderIndex = existingOrders.findIndex(order =>\r\n    order.orderId === invoiceId || order.id === invoiceId\r\n  );\r\n\r\n  const remainingAmountFromStorage = orderIndex !== -1 \r\n    ? (existingOrders[orderIndex].remainingAmount || amount)\r\n    : amount;\r\n\r\n  setCurrentRemainingAmount(remainingAmountFromStorage);\r\n}, [invoiceId, amount]);\r\n\r\n\r\nconst paymentAmount = parseFloat(formData.amount) || 0;\r\nconst remainingAmount = Math.max(0, currentRemainingAmount - paymentAmount);\r\nconst isFullPayment = remainingAmount <= 0;\r\n  // Fetch accounts on mount\r\n  useEffect(() => {\r\n    fetchAccounts();\r\n  }, []);\r\n\r\n  // Set initial amount\r\n  useEffect(() => {\r\n    if (amount) {\r\n      setFormData(prev => ({ ...prev, amount: amount.toString() }));\r\n    }\r\n  }, [amount]);\r\n   // ✅ Check if this invoice is already fully paid\r\n  useEffect(() => {\r\n    const existingOrders = JSON.parse(localStorage.getItem('orders') || '[]');\r\n    const order = existingOrders.find(o => o.orderId === invoiceId || o.id === invoiceId);\r\n\r\n    if (order && (order.paid || order.paymentStatus === 'paid')) {\r\n      setIsAlreadyPaid(true);\r\n    }\r\n  }, [invoiceId]);\r\n  const fetchAccounts = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:8080/api/accounts');\r\n      const data = await response.json();\r\n\r\n      // Filter only asset accounts (like the commented code)\r\n      const assetAccounts = data.filter(acct => acct.type === 'assets');\r\n\r\n      // Build parent-child map (like the commented code)\r\n      const accountMap = {};\r\n      assetAccounts.forEach(acct => accountMap[acct.id] = { ...acct, children: [] });\r\n\r\n      assetAccounts.forEach(acct => {\r\n        if (acct.parentId && accountMap[acct.parentId]) {\r\n          accountMap[acct.parentId].children.push(accountMap[acct.id]);\r\n        }\r\n      });\r\n\r\n      // Top-level accounts (like the commented code)\r\n      const tree = assetAccounts.filter(acct => !acct.parentId || !accountMap[acct.parentId]);\r\n      setAccounts(tree);\r\n    } catch (err) {\r\n      console.error('Failed to fetch accounts:', err);\r\n    }\r\n  };\r\n\r\n  const handleChange = (field, value) => {\r\n    setFormData(prev => ({ ...prev, [field]: value }));\r\n    // Clear error for this field when user starts typing\r\n    if (errors[field]) {\r\n      setErrors(prev => ({ ...prev, [field]: '' }));\r\n    }\r\n  };\r\n\r\n  const validateForm = () => {\r\n    const newErrors = {};\r\n    \r\n    if (!formData.date) {\r\n      newErrors.date = 'Payment date is required';\r\n    }\r\n    \r\n    if (!formData.amount || parseFloat(formData.amount) <= 0) {\r\n      newErrors.amount = 'Valid payment amount is required';\r\n    }\r\n    \r\n    if (!formData.method) {\r\n      newErrors.method = 'Payment method is required';\r\n    }\r\n    \r\n    if (!formData.account) {\r\n      newErrors.account = 'Deposit account is required';\r\n    }\r\n\r\n    setErrors(newErrors);\r\n    return Object.keys(newErrors).length === 0;\r\n  };\r\n// const handleSubmit = async () => {\r\n//   if (isAlreadyPaid) {\r\n//     setErrors({\r\n//       general: 'This invoice has already been fully paid. No further payments allowed.'\r\n//     });\r\n//     return;\r\n//   }\r\n\r\n//   if (!validateForm()) return;\r\n\r\n//   setLoading(true);\r\n\r\n//   try {\r\n//     const existingOrders = JSON.parse(localStorage.getItem('orders') || '[]');\r\n//     const orderIndex = existingOrders.findIndex(order =>\r\n//       order.orderId === invoiceId || order.id === invoiceId\r\n//     );\r\n    \r\n//     // Get the current remaining amount, defaulting to the original amount if not found\r\n//     const currentRemainingAmount = orderIndex !== -1 \r\n//       ? existingOrders[orderIndex].remainingAmount || amount \r\n//       : amount;\r\n\r\n//     const paymentAmount = parseFloat(formData.amount);\r\n//     const remainingAmount = currentRemainingAmount - paymentAmount;\r\n//     const isFullPayment = remainingAmount <= 0;\r\n//     const paymentStatus = isFullPayment ? 'paid' : 'partial';\r\n\r\n//     // Create payment record (local save)\r\n//     const paymentData = {\r\n//       id: `PAY-${Date.now()}`,\r\n//       customerId:customerId||null,\r\n//       orderId: invoiceId,\r\n//       date: formData.date,\r\n//       amount: paymentAmount,\r\n//       paymentMethod: formData.method,\r\n//       accountId: formData.account,\r\n//       accountName: getAccountNameById(formData.account, accounts) || 'Unknown Account',\r\n//       memo: formData.memo,\r\n//       status: paymentStatus,\r\n//       remainingAmount: Math.max(0, remainingAmount),\r\n//       createdAt: new Date().toISOString(),\r\n//       createdBy: 'current_user'\r\n//     };\r\n\r\n//     // Save payment to localStorage\r\n//     const existingPayments = JSON.parse(localStorage.getItem('payments') || '[]');\r\n//     const updatedPayments = [...existingPayments, paymentData];\r\n//     localStorage.setItem('payments', JSON.stringify(updatedPayments));\r\n\r\n//     // // Update order in localStorage\r\n//     //  existingOrders = JSON.parse(localStorage.getItem('orders') || '[]');\r\n//     //  orderIndex = existingOrders.findIndex(order =>\r\n//     //   order.orderId === invoiceId || order.id === invoiceId\r\n//     // );\r\n\r\n//     if (orderIndex !== -1) {\r\n//       existingOrders[orderIndex] = {\r\n//         ...existingOrders[orderIndex],\r\n//         paid: isFullPayment,\r\n//         paymentStatus: paymentStatus,\r\n//         lastPaymentDate: formData.date,\r\n//         lastPaymentAmount: paymentAmount,\r\n//         remainingAmount: Math.max(0, remainingAmount),\r\n//         paymentHistory: [\r\n//           ...(existingOrders[orderIndex].paymentHistory || []),\r\n//           paymentData.id\r\n//         ]\r\n//       };\r\n//       localStorage.setItem('orders', JSON.stringify(existingOrders));\r\n//     }\r\n\r\n//     // ✅ CALL THE API\r\n//     const apiUrl = `https://api-pos.hulmsolutions.com/POS/accounting2/31fc8df0-61db-41e5-bb67-070fde367ea1/orders/Paid/${invoiceId}`;\r\n\r\n//     const payload = {\r\n//       customerId: customerId,  // if null string is correct\r\n//       orderId: invoiceId,\r\n//       paid: isFullPayment,  // true if fully paid, false otherwise\r\n//       billUnitId: \"2\",\r\n//       billStatus: \"pending\"\r\n//     };\r\n\r\n//    const apiResponse = await fetch(apiUrl, {\r\n//   method: \"PUT\",\r\n//   headers: {\r\n//     \"Content-Type\": \"application/json\",\r\n//     \"Authorization\": `Bearer $hAMID` // ✅ add your token\r\n//   },\r\n//   body: JSON.stringify(payload)\r\n// });\r\n\r\n\r\n//     if (!apiResponse.ok) {\r\n//       throw new Error(\"Failed to update order status in API\");\r\n//     }\r\n\r\n//     // Callbacks\r\n//     if (onSubmit) {\r\n//       onSubmit(paymentData, isFullPayment);\r\n//     }\r\n\r\n//     if (onPaymentComplete) {\r\n//       onPaymentComplete(paymentData, isFullPayment);\r\n//     }\r\n\r\n//     // Success message\r\n//     const message = isFullPayment\r\n//       ? \"Payment recorded successfully. Invoice is now fully paid.\"\r\n//       : `Partial payment of ${formatCurrency(paymentAmount)} recorded. Remaining balance: ${formatCurrency(remainingAmount)}`;\r\n\r\n//     console.log(message);\r\n\r\n//     onClose();\r\n//   } catch (error) {\r\n//     console.error(\"Error recording payment:\", error);\r\n//     setErrors({ general: \"Failed to record payment. Please try again.\" });\r\n//   } finally {\r\n//     setLoading(false);\r\n//   }\r\n// };\r\n\r\nconst handleSubmit = async () => {\r\n  if (isAlreadyPaid) {\r\n    setErrors({\r\n      general: 'This invoice has already been fully paid. No further payments allowed.'\r\n    });\r\n    return;\r\n  }\r\n\r\n  if (!validateForm()) return;\r\n\r\n  setLoading(true);\r\n\r\n  try {\r\n    // Retrieve existing orders from localStorage\r\n    const existingOrders = JSON.parse(localStorage.getItem('orders') || '[]');\r\n    const orderIndex = existingOrders.findIndex(order =>\r\n      order.orderId === invoiceId || order.id === invoiceId\r\n    );\r\n\r\n    // Determine current remaining amount\r\n    const currentRemainingAmount = orderIndex !== -1 \r\n      ? (existingOrders[orderIndex].remainingAmount || amount)\r\n      : amount;\r\n\r\n    const paymentAmount = parseFloat(formData.amount);\r\n    const remainingAmount = Math.max(0, currentRemainingAmount - paymentAmount);\r\n    const isFullPayment = remainingAmount <= 0;\r\n    const paymentStatus = isFullPayment ? 'paid' : 'partial';\r\n\r\n    // Create payment record\r\n    const paymentData = {\r\n      id: `PAY-${Date.now()}`,\r\n      customerId: customerId || null,\r\n      orderId: invoiceId,\r\n      date: formData.date,\r\n      amount: paymentAmount,\r\n      paymentMethod: formData.method,\r\n      accountId: formData.account,\r\n      accountName: getAccountNameById(formData.account, accounts) || 'Unknown Account',\r\n      memo: formData.memo,\r\n      status: paymentStatus,\r\n      remainingAmount: remainingAmount,\r\n      createdAt: new Date().toISOString(),\r\n      createdBy: 'current_user'\r\n    };\r\n\r\n    // Save payment to localStorage\r\n    const existingPayments = JSON.parse(localStorage.getItem('payments') || '[]');\r\n    const updatedPayments = [...existingPayments, paymentData];\r\n    localStorage.setItem('payments', JSON.stringify(updatedPayments));\r\n\r\n    // Update order in localStorage\r\n    if (orderIndex !== -1) {\r\n      existingOrders[orderIndex] = {\r\n        ...existingOrders[orderIndex],\r\n        paid: isFullPayment,\r\n        paymentStatus: paymentStatus,\r\n        lastPaymentDate: formData.date,\r\n        lastPaymentAmount: paymentAmount,\r\n        remainingAmount: remainingAmount,\r\n        paymentHistory: [\r\n          ...(existingOrders[orderIndex].paymentHistory || []),\r\n          paymentData.id\r\n        ]\r\n      };\r\n      localStorage.setItem('orders', JSON.stringify(existingOrders));\r\n    }\r\n\r\n    // API Call\r\n    const apiUrl = `https://api-pos.hulmsolutions.com/POS/accounting2/31fc8df0-61db-41e5-bb67-070fde367ea1/orders/Paid/${invoiceId}`;\r\n\r\n    const payload = {\r\n      customerId: customerId,\r\n      orderId: invoiceId,\r\n      paid: isFullPayment,\r\n      billUnitId: \"2\",\r\n      billStatus: \"pending\"\r\n    };\r\n\r\n    const apiResponse = await fetch(apiUrl, {\r\n      method: \"PUT\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"Authorization\": `Bearer $hAMID`\r\n      },\r\n      body: JSON.stringify(payload)\r\n    });\r\n\r\n    if (!apiResponse.ok) {\r\n      throw new Error(\"Failed to update order status in API\");\r\n    }\r\n\r\n    // Callbacks\r\n    if (onSubmit) {\r\n      onSubmit(paymentData, isFullPayment);\r\n    }\r\n\r\n    if (onPaymentComplete) {\r\n      onPaymentComplete(paymentData, isFullPayment);\r\n    }\r\n\r\n    // Success message\r\n    const message = isFullPayment\r\n      ? \"Payment recorded successfully. Invoice is now fully paid.\"\r\n      : `Partial payment of ${formatCurrency(paymentAmount)} recorded. Remaining balance: ${formatCurrency(remainingAmount)}`;\r\n\r\n    console.log(message);\r\n\r\n    onClose();\r\n  } catch (error) {\r\n    console.error(\"Error recording payment:\", error);\r\n    setErrors({ general: \"Failed to record payment. Please try again.\" });\r\n  } finally {\r\n    setLoading(false);\r\n  }\r\n};\r\n\r\n  const getAccountNameById = (accountId, accountList) => {\r\n    for (const account of accountList) {\r\n      if (account.id === accountId) {\r\n        return account.name;\r\n      }\r\n      if (account.children && account.children.length > 0) {\r\n        const foundInChildren = getAccountNameById(accountId, account.children);\r\n        if (foundInChildren) return foundInChildren;\r\n      }\r\n    }\r\n    return null;\r\n  };\r\n\r\n  // Helper function to render account options recursively\r\n  const renderAccountOptions = (accountList, level = 0) => {\r\n    return accountList.map(account => (\r\n      <React.Fragment key={account.id}>\r\n        <option value={account.id}>\r\n          {'-'.repeat(level * 2)} {account.code} - {account.name}\r\n        </option>\r\n        {account.children && account.children.length > 0 && (\r\n          renderAccountOptions(account.children, level + 1)\r\n        )}\r\n      </React.Fragment>\r\n    ));\r\n  };\r\n\r\n  // const paymentAmount = parseFloat(formData.amount) || 0;\r\n  // const remainingAmount = amount - paymentAmount;\r\n  // const isFullPayment = paymentAmount >= amount;\r\n\r\n  return (\r\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\r\n      <div className=\"bg-white rounded-xl shadow-2xl max-w-md w-full\">\r\n        {/* Header */}\r\n        <div className=\"px-6 py-4 border-b border-gray-200\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <h2 className=\"text-xl font-semibold text-gray-900\">\r\n              Record a payment for this invoice\r\n            </h2>\r\n            <button\r\n              onClick={onClose}\r\n              className=\"text-gray-400 hover:text-gray-600 transition-colors\"\r\n            >\r\n              <X size={24} />\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Form Body */}\r\n        <div className=\"px-6 py-4 space-y-5\">\r\n          {errors.general && (\r\n            <div className=\"p-3 bg-red-50 border border-red-200 rounded-lg flex items-start gap-2\">\r\n              <AlertCircle size={20} className=\"text-red-600 flex-shrink-0 mt-0.5\" />\r\n              <span className=\"text-sm text-red-700\">{errors.general}</span>\r\n            </div>\r\n          )}\r\n            \r\n          {/* Date Field */}\r\n          <div>\r\n            <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\">\r\n              <Calendar size={16} />\r\n              Date\r\n            </label>\r\n            <input\r\n              type=\"date\"\r\n              value={formData.date}\r\n              onChange={(e) => handleChange('date', e.target.value)}\r\n              className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\r\n                errors.date ? 'border-red-500' : 'border-gray-300'\r\n              }`}\r\n            />\r\n            {errors.date && <span className=\"text-xs text-red-600 mt-1\">{errors.date}</span>}\r\n          </div>\r\n\r\n          {/* Amount Field */}\r\n          <div>\r\n            <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\">\r\n              <DollarSign size={16} />\r\n              Amount\r\n            </label>\r\n            <div className=\"relative\">\r\n              <span className=\"absolute left-3 top-1/2 -translate-y-1/2 text-gray-500 font-medium\">\r\n                Rs\r\n              </span>\r\n              <input\r\n                type=\"number\"\r\n                step=\"0.01\"\r\n                value={formData.amount}\r\n                onChange={(e) => handleChange('amount', e.target.value)}\r\n                className={`w-full pl-10 pr-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\r\n                  errors.amount ? 'border-red-500' : 'border-gray-300'\r\n                }`}\r\n                placeholder=\"0.00\"\r\n              />\r\n            </div>\r\n            {errors.amount && <span className=\"text-xs text-red-600 mt-1\">{errors.amount}</span>}\r\n            \r\n            {paymentAmount > 0 && (\r\n              <div className=\"mt-2 text-sm\">\r\n                {isFullPayment ? (\r\n                  <span className=\"text-green-600 font-medium\">Invoice will be fully paid</span>\r\n                ) : (\r\n                  <span className=\"text-orange-600\">\r\n                    Partial payment - Remaining: {formatCurrency(remainingAmount)}\r\n                  </span>\r\n                )}\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          {/* Payment Method */}\r\n          <div>\r\n            <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\">\r\n              <CreditCard size={16} />\r\n              Method\r\n            </label>\r\n            <select\r\n              value={formData.method}\r\n              onChange={(e) => handleChange('method', e.target.value)}\r\n              className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\r\n                errors.method ? 'border-red-500' : 'border-gray-300'\r\n              }`}\r\n            >\r\n              <option value=\"\">Select a payment method...</option>\r\n              <option value=\"cash\">Cash</option>\r\n              <option value=\"check\">Check</option>\r\n              <option value=\"bank_transfer\">Bank Transfer</option>\r\n              <option value=\"credit_card\">Credit Card</option>\r\n              <option value=\"debit_card\">Debit Card</option>\r\n              <option value=\"online\">Online Payment</option>\r\n            </select>\r\n            {errors.method && <span className=\"text-xs text-red-600 mt-1\">{errors.method}</span>}\r\n          </div>\r\n\r\n          {/* Account */}\r\n          <div>\r\n            <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\">\r\n              <FileText size={16} />\r\n              Account\r\n            </label>\r\n            <select\r\n              value={formData.account}\r\n              onChange={(e) => handleChange('account', e.target.value)}\r\n              className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\r\n                errors.account ? 'border-red-500' : 'border-gray-300'\r\n              }`}\r\n            >\r\n              <option value=\"\">Select a payment account...</option>\r\n              {renderAccountOptions(accounts)}\r\n            </select>\r\n            {errors.account && <span className=\"text-xs text-red-600 mt-1\">{errors.account}</span>}\r\n            <p className=\"text-xs text-gray-500 mt-1\">\r\n              Any account into which you deposit and withdraw funds from.{' '}\r\n              <a href=\"#\" className=\"text-blue-600 hover:text-blue-700\">Learn more</a>\r\n            </p>\r\n          </div>\r\n\r\n          {/* Memo */}\r\n          <div>\r\n            <label className=\"text-sm font-medium text-gray-700 mb-1 block\">\r\n              Memo / notes\r\n            </label>\r\n            <textarea\r\n              value={formData.memo}\r\n              onChange={(e) => handleChange('memo', e.target.value)}\r\n              rows={3}\r\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\r\n              placeholder=\"Add any additional notes...\"\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        {/* Footer */}\r\n        <div className=\"px-6 py-4 border-t border-gray-200 flex items-center justify-end gap-3\">\r\n          <button\r\n            onClick={onClose}\r\n            className=\"px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors\"\r\n          >\r\n            Cancel\r\n          </button>\r\n          <button\r\n            onClick={handleSubmit}\r\n            disabled={loading || !formData.amount || parseFloat(formData.amount) <= 0}\r\n            className={`px-6 py-2 rounded-lg font-medium transition-colors ${\r\n              loading || !formData.amount || parseFloat(formData.amount) <= 0\r\n                ? 'bg-gray-300 text-gray-500 cursor-not-allowed'\r\n                : 'bg-blue-600 text-white hover:bg-blue-700'\r\n            }`}\r\n          >\r\n            {loading ? 'Processing...' : 'Submit'}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RecordPaymentModal;\r\n"],"mappings":"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F,QAAQ,CAACN,MAAM,IAAIuC,UAAU,CAACjC,QAAQ,CAACN,MAAM,CAAC,IAAI,CAAC,EAAE;MACxDsE,SAAS,CAACtE,MAAM,GAAG,kCAAkC;IACvD;IAEA,IAAI,CAACM,QAAQ,CAACO,MAAM,EAAE;MACpByD,SAAS,CAACzD,MAAM,GAAG,4BAA4B;IACjD;IAEA,IAAI,CAACP,QAAQ,CAACQ,OAAO,EAAE;MACrBwD,SAAS,CAACxD,OAAO,GAAG,6BAA6B;IACnD;IAEAO,SAAS,CAACiD,SAAS,CAAC;IACpB,OAAOC,MAAM,CAACC,IAAI,CAACF,SAAS,CAAC,CAACG,MAAM,KAAK,CAAC;EAC5C,CAAC;EACH;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAGA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,IAAIpD,aAAa,EAAE;MACjBD,SAAS,CAAC;QACRsD,OAAO,EAAE;MACX,CAAC,CAAC;MACF;IACF;IAEA,IAAI,CAACN,YAAY,CAAC,CAAC,EAAE;IAErBlD,UAAU,CAAC,IAAI,CAAC;IAEhB,IAAI;MACF;MACA,MAAMO,cAAc,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC,IAAI,IAAI,CAAC;MA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}