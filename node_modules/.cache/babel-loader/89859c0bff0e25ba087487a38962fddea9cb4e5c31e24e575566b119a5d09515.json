{"ast":null,"code":"// Calculate AR summary\n// export const calculateARSummary = (customers, allSalesData) => {\n//   const totalAR = customers.reduce((sum, customer) => sum + customer.totalOwed, 0);\n//   const totalOverdue = customers.reduce((sum, customer) => sum + customer.overdueAmount, 0);\n//   const customersWithBalance = customers.filter(customer => customer.totalOwed > 0).length;\n\n//   // Calculate real average days outstanding from actual order data\n//   let totalDaysOutstanding = 0;\n//   let orderCount = 0;\n\n//   if (allSalesData) {\n//     allSalesData.forEach(order => {\n//       // Convert order creation date from \"2025.08.18.10.08.54.569\" to proper date\n//       const orderDateStr = order.createdAt.split('.').slice(0, 3).join('-'); // \"2025-08-18\"\n//       const orderDate = new Date(orderDateStr);\n//       const today = new Date();\n\n//       // Calculate days between order creation and today\n//       const timeDiff = today.getTime() - orderDate.getTime();\n//       const daysDiff = Math.floor(timeDiff / (1000 * 3600 * 24));\n\n//       totalDaysOutstanding += daysDiff;\n//       orderCount++;\n//     });\n//   }\n\n//   const avgDaysOutstanding = orderCount > 0 ? Math.round(totalDaysOutstanding / orderCount) : 0;\n\n//   return {\n//     totalAR,\n//     totalOverdue,\n//     customersWithBalance,\n//     avgDaysOutstanding\n//   };\n// };\n\n// Get aging data\nexport const getAgingData = salesData => {\n  const aging = {\n    current: 0,\n    days30: 0,\n    days60: 0,\n    days90: 0,\n    over90: 0\n  };\n  salesData.forEach(order => {\n    if (order.paid) return;\n    const daysPastDue = order.daysOverdue || 0;\n    if (daysPastDue <= 0) {\n      aging.current += order.total;\n    } else if (daysPastDue <= 30) {\n      aging.days30 += order.total;\n    } else if (daysPastDue <= 60) {\n      aging.days60 += order.total;\n    } else if (daysPastDue <= 90) {\n      aging.days90 += order.total;\n    } else {\n      aging.over90 += order.total;\n    }\n  });\n  return aging;\n};\n\n// Filter customers\nexport const getFilteredCustomers = (customers, filters) => {\n  // First check if we have valid data\n  if (!customers || !Array.isArray(customers)) {\n    return [];\n  }\n\n  // Start by filtering ONLY customers WITH names\n  let filtered = customers.filter(customer => customer && customer.name && typeof customer.name === 'string' && customer.name.trim() !== '');\n\n  // Now apply the rest of the filters to our name-filtered list\n  if (filters && filters.customerType && filters.customerType !== 'all') {\n    filtered = filtered.filter(customer => customer.customerType === filters.customerType);\n  }\n  if (filters && filters.status && filters.status !== 'all') {\n    filtered = filtered.filter(customer => {\n      if (filters.status === 'overdue') return customer.overdueAmount > 0;\n      if (filters.status === 'current') return customer.totalOwed > 0 && customer.overdueAmount === 0;\n      if (filters.status === 'paid_up') return customer.totalOwed === 0;\n      return true;\n    });\n  }\n  if (filters && filters.searchTerm) {\n    const term = filters.searchTerm.toLowerCase();\n    filtered = filtered.filter(customer => customer.name.toLowerCase().includes(term) || customer.email && customer.email.toLowerCase().includes(term) || customer.id && customer.id.toLowerCase().includes(term));\n  }\n  console.log(`Filtered to ${filtered.length} customers with valid names`);\n  return filtered;\n};","map":{"version":3,"names":["getAgingData","salesData","aging","current","days30","days60","days90","over90","forEach","order","paid","daysPastDue","daysOverdue","total","getFilteredCustomers","customers","filters","Array","isArray","filtered","filter","customer","name","trim","customerType","status","overdueAmount","totalOwed","searchTerm","term","toLowerCase","includes","email","id","console","log","length"],"sources":["C:/Users/Logic-Unit/my-account/src/Utility/apCalculations.js"],"sourcesContent":["// Calculate AR summary\r\n// export const calculateARSummary = (customers, allSalesData) => {\r\n//   const totalAR = customers.reduce((sum, customer) => sum + customer.totalOwed, 0);\r\n//   const totalOverdue = customers.reduce((sum, customer) => sum + customer.overdueAmount, 0);\r\n//   const customersWithBalance = customers.filter(customer => customer.totalOwed > 0).length;\r\n\r\n  \r\n//   // Calculate real average days outstanding from actual order data\r\n//   let totalDaysOutstanding = 0;\r\n//   let orderCount = 0;\r\n  \r\n//   if (allSalesData) {\r\n//     allSalesData.forEach(order => {\r\n//       // Convert order creation date from \"2025.08.18.10.08.54.569\" to proper date\r\n//       const orderDateStr = order.createdAt.split('.').slice(0, 3).join('-'); // \"2025-08-18\"\r\n//       const orderDate = new Date(orderDateStr);\r\n//       const today = new Date();\r\n      \r\n//       // Calculate days between order creation and today\r\n//       const timeDiff = today.getTime() - orderDate.getTime();\r\n//       const daysDiff = Math.floor(timeDiff / (1000 * 3600 * 24));\r\n      \r\n//       totalDaysOutstanding += daysDiff;\r\n//       orderCount++;\r\n//     });\r\n//   }\r\n  \r\n//   const avgDaysOutstanding = orderCount > 0 ? Math.round(totalDaysOutstanding / orderCount) : 0;\r\n\r\n//   return {\r\n//     totalAR,\r\n//     totalOverdue,\r\n//     customersWithBalance,\r\n//     avgDaysOutstanding\r\n//   };\r\n// };\r\n\r\n\r\n\r\n// Get aging data\r\nexport const getAgingData = (salesData) => {\r\n  const aging = {\r\n    current: 0,\r\n    days30: 0,\r\n    days60: 0,\r\n    days90: 0,\r\n    over90: 0\r\n  };\r\n\r\n  salesData.forEach(order => {\r\n    if (order.paid) return;\r\n    \r\n    const daysPastDue = order.daysOverdue || 0;\r\n    \r\n    if (daysPastDue <= 0) {\r\n      aging.current += order.total;\r\n    } else if (daysPastDue <= 30) {\r\n      aging.days30 += order.total;\r\n    } else if (daysPastDue <= 60) {\r\n      aging.days60 += order.total;\r\n    } else if (daysPastDue <= 90) {\r\n      aging.days90 += order.total;\r\n    } else {\r\n      aging.over90 += order.total;\r\n    }\r\n  });\r\n\r\n  return aging;\r\n};\r\n\r\n// Filter customers\r\nexport const getFilteredCustomers = (customers, filters) => {\r\n  // First check if we have valid data\r\n  if (!customers || !Array.isArray(customers)) {\r\n    return [];\r\n  }\r\n  \r\n  // Start by filtering ONLY customers WITH names\r\n  let filtered = customers.filter(customer => \r\n    customer && \r\n    customer.name && \r\n    typeof customer.name === 'string' && \r\n    customer.name.trim() !== ''\r\n  );\r\n\r\n  // Now apply the rest of the filters to our name-filtered list\r\n  if (filters && filters.customerType && filters.customerType !== 'all') {\r\n    filtered = filtered.filter(customer => customer.customerType === filters.customerType);\r\n  }\r\n\r\n  if (filters && filters.status && filters.status !== 'all') {\r\n    filtered = filtered.filter(customer => {\r\n      if (filters.status === 'overdue') return customer.overdueAmount > 0;\r\n      if (filters.status === 'current') return customer.totalOwed > 0 && customer.overdueAmount === 0;\r\n      if (filters.status === 'paid_up') return customer.totalOwed === 0;\r\n      return true;\r\n    });\r\n  }\r\n\r\n  if (filters && filters.searchTerm) {\r\n    const term = filters.searchTerm.toLowerCase();\r\n    filtered = filtered.filter(customer =>\r\n      customer.name.toLowerCase().includes(term) ||\r\n      (customer.email && customer.email.toLowerCase().includes(term)) ||\r\n      (customer.id && customer.id.toLowerCase().includes(term))\r\n    );\r\n  }\r\n\r\n  console.log(`Filtered to ${filtered.length} customers with valid names`);\r\n  return filtered;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}