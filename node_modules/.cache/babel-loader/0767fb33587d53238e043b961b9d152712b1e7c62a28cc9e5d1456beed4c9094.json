{"ast":null,"code":"var _s = $RefreshSig$();\n// src/hooks/useAPData.js\nimport { useState, useEffect } from 'react';\nimport { apApiService } from '../services/apApiService';\nexport const useAPData = () => {\n  _s();\n  const [purchaseOrders, setPurchaseOrders] = useState({\n    loading: false,\n    data: [],\n    error: null\n  });\n  const [vendors, setVendors] = useState({\n    loading: false,\n    data: [],\n    error: null\n  });\n  const [products, setProducts] = useState({\n    loading: false,\n    data: [],\n    error: null\n  });\n  const fetchProducts = async () => {\n    setProducts(prev => ({\n      ...prev,\n      loading: true,\n      error: null\n    }));\n    try {\n      const data = await apApiService.fetchProducts();\n      window.productsData = data;\n      setProducts({\n        loading: false,\n        data: data,\n        error: null\n      });\n    } catch (error) {\n      console.error('Error fetching products:', error);\n      const sampleProducts = apApiService.getSampleProducts();\n      window.productsData = sampleProducts;\n      setProducts({\n        loading: false,\n        data: sampleProducts,\n        error: null\n      });\n    }\n  };\n  const fetchPurchaseOrders = async () => {\n    setPurchaseOrders(prev => ({\n      ...prev,\n      loading: true,\n      error: null\n    }));\n    try {\n      const allData = await apApiService.fetchPurchaseOrders();\n      window.allPurchaseOrdersData = allData;\n\n      // Store ALL purchase orders (including applied ones) for complete visibility\n      // Don't filter by status here - let individual components decide what to show\n      setPurchaseOrders({\n        loading: false,\n        data: allData,\n        error: null\n      });\n    } catch (error) {\n      console.error('Error fetching purchase orders:', error);\n      setPurchaseOrders({\n        loading: false,\n        data: [],\n        error: error.message\n      });\n    }\n  };\n  const fetchVendors = async () => {\n    setVendors(prev => ({\n      ...prev,\n      loading: true,\n      error: null\n    }));\n    try {\n      const data = await apApiService.fetchVendors();\n      const allPOData = window.allPurchaseOrdersData || [];\n\n      // Transform API vendors to match our structure with real calculated data\n      const transformedVendors = apApiService.transformVendors(data, allPOData);\n      setVendors({\n        loading: false,\n        data: transformedVendors,\n        error: null\n      });\n    } catch (error) {\n      console.error('Error fetching vendors:', error);\n      setVendors({\n        loading: false,\n        data: [],\n        error: error.message\n      });\n    }\n  };\n\n  // Refresh all data function\n  const refreshAllData = async () => {\n    await fetchProducts();\n    await fetchPurchaseOrders();\n    setTimeout(() => fetchVendors(), 500);\n  };\n\n  // Load data on component mount\n  useEffect(() => {\n    const loadData = async () => {\n      await fetchProducts();\n      await fetchPurchaseOrders();\n      setTimeout(() => fetchVendors(), 500);\n    };\n    loadData();\n  }, []);\n  const loading = purchaseOrders.loading || vendors.loading || products.loading;\n  const error = purchaseOrders.error || vendors.error || products.error;\n  return {\n    purchaseOrders,\n    vendors,\n    products,\n    loading,\n    error,\n    refreshAllData\n  };\n};\n_s(useAPData, \"IdzEPYBhKLnVSTsKKgujGTGcoCU=\");","map":{"version":3,"names":["useState","useEffect","apApiService","useAPData","_s","purchaseOrders","setPurchaseOrders","loading","data","error","vendors","setVendors","products","setProducts","fetchProducts","prev","window","productsData","console","sampleProducts","getSampleProducts","fetchPurchaseOrders","allData","allPurchaseOrdersData","message","fetchVendors","allPOData","transformedVendors","transformVendors","refreshAllData","setTimeout","loadData"],"sources":["C:/Users/Logic-Unit/my-account/src/AccountPayableHook/useAPData.jsx"],"sourcesContent":["// src/hooks/useAPData.js\r\nimport { useState, useEffect } from 'react';\r\nimport { apApiService } from '../services/apApiService';\r\n\r\nexport const useAPData = () => {\r\n  const [purchaseOrders, setPurchaseOrders] = useState({ loading: false, data: [], error: null });\r\n  const [vendors, setVendors] = useState({ loading: false, data: [], error: null });\r\n  const [products, setProducts] = useState({ loading: false, data: [], error: null });\r\n\r\n  const fetchProducts = async () => {\r\n    setProducts(prev => ({ ...prev, loading: true, error: null }));\r\n    try {\r\n      const data = await apApiService.fetchProducts();\r\n      window.productsData = data;\r\n      setProducts({ loading: false, data: data, error: null });\r\n    } catch (error) {\r\n      console.error('Error fetching products:', error);\r\n      const sampleProducts = apApiService.getSampleProducts();\r\n      window.productsData = sampleProducts;\r\n      setProducts({ loading: false, data: sampleProducts, error: null });\r\n    }\r\n  };\r\n\r\n  const fetchPurchaseOrders = async () => {\r\n    setPurchaseOrders(prev => ({ ...prev, loading: true, error: null }));\r\n    try {\r\n      const allData = await apApiService.fetchPurchaseOrders();\r\n      window.allPurchaseOrdersData = allData;\r\n      \r\n      // Store ALL purchase orders (including applied ones) for complete visibility\r\n      // Don't filter by status here - let individual components decide what to show\r\n      setPurchaseOrders({ loading: false, data: allData, error: null });\r\n    } catch (error) {\r\n      console.error('Error fetching purchase orders:', error);\r\n      setPurchaseOrders({ loading: false, data: [], error: error.message });\r\n    }\r\n  };\r\n\r\n  const fetchVendors = async () => {\r\n    setVendors(prev => ({ ...prev, loading: true, error: null }));\r\n    try {\r\n      const data = await apApiService.fetchVendors();\r\n      const allPOData = window.allPurchaseOrdersData || [];\r\n      \r\n      // Transform API vendors to match our structure with real calculated data\r\n      const transformedVendors = apApiService.transformVendors(data, allPOData);\r\n      setVendors({ loading: false, data: transformedVendors, error: null });\r\n    } catch (error) {\r\n      console.error('Error fetching vendors:', error);\r\n      setVendors({ loading: false, data: [], error: error.message });\r\n    }\r\n  };\r\n\r\n  // Refresh all data function\r\n  const refreshAllData = async () => {\r\n    await fetchProducts();\r\n    await fetchPurchaseOrders();\r\n    setTimeout(() => fetchVendors(), 500);\r\n  };\r\n\r\n  // Load data on component mount\r\n  useEffect(() => {\r\n    const loadData = async () => {\r\n      await fetchProducts();\r\n      await fetchPurchaseOrders();\r\n      setTimeout(() => fetchVendors(), 500);\r\n    };\r\n    loadData();\r\n  }, []);\r\n\r\n  const loading = purchaseOrders.loading || vendors.loading || products.loading;\r\n  const error = purchaseOrders.error || vendors.error || products.error;\r\n\r\n  return {\r\n    purchaseOrders,\r\n    vendors,\r\n    products,\r\n    loading,\r\n    error,\r\n    refreshAllData\r\n  };\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}