{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Logic-Unit\\\\my-account\\\\src\\\\components\\\\AccountsReceivable\\\\RecordPaymentModal.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import { X, Calendar, DollarSign, CreditCard, FileText, AlertCircle } from 'lucide-react';\n// import { formatCurrency } from './AccountsReceivableUtils/formatters';\n\n// const RecordPaymentModal = ({ invoiceId, amount, onClose, onSubmit, onPaymentComplete }) => {\n//   const [formData, setFormData] = useState({\n//     date: new Date().toISOString().split('T')[0],\n//     amount: amount?.toString() || '',\n//     method: '',\n//     account: '',\n//     memo: ''\n//   });\n\n//   const [accounts, setAccounts] = useState([]);\n//   const [loading, setLoading] = useState(false);\n//   const [errors, setErrors] = useState({});\n//   const [isAlreadyPaid, setIsAlreadyPaid] = useState(false); // ✅ NEW\n\n//   // Fetch accounts on mount\n//   useEffect(() => {\n//     fetchAccounts();\n//   }, []);\n\n//   // Set initial amount\n//   useEffect(() => {\n//     if (amount) {\n//       setFormData(prev => ({ ...prev, amount: amount.toString() }));\n//     }\n//   }, [amount]);\n//    // ✅ Check if this invoice is already fully paid\n//   useEffect(() => {\n//     const existingOrders = JSON.parse(localStorage.getItem('orders') || '[]');\n//     const order = existingOrders.find(o => o.orderId === invoiceId || o.id === invoiceId);\n\n//     if (order && (order.paid || order.paymentStatus === 'paid')) {\n//       setIsAlreadyPaid(true);\n//     }\n//   }, [invoiceId]);\n//   const fetchAccounts = async () => {\n//     try {\n//       const response = await fetch('http://localhost:8080/api/accounts');\n//       const data = await response.json();\n\n//       // Filter only asset accounts (like the commented code)\n//       const assetAccounts = data.filter(acct => acct.type === 'assets');\n\n//       // Build parent-child map (like the commented code)\n//       const accountMap = {};\n//       assetAccounts.forEach(acct => accountMap[acct.id] = { ...acct, children: [] });\n\n//       assetAccounts.forEach(acct => {\n//         if (acct.parentId && accountMap[acct.parentId]) {\n//           accountMap[acct.parentId].children.push(accountMap[acct.id]);\n//         }\n//       });\n\n//       // Top-level accounts (like the commented code)\n//       const tree = assetAccounts.filter(acct => !acct.parentId || !accountMap[acct.parentId]);\n//       setAccounts(tree);\n//     } catch (err) {\n//       console.error('Failed to fetch accounts:', err);\n//     }\n//   };\n\n//   const handleChange = (field, value) => {\n//     setFormData(prev => ({ ...prev, [field]: value }));\n//     // Clear error for this field when user starts typing\n//     if (errors[field]) {\n//       setErrors(prev => ({ ...prev, [field]: '' }));\n//     }\n//   };\n\n//   const validateForm = () => {\n//     const newErrors = {};\n\n//     if (!formData.date) {\n//       newErrors.date = 'Payment date is required';\n//     }\n\n//     if (!formData.amount || parseFloat(formData.amount) <= 0) {\n//       newErrors.amount = 'Valid payment amount is required';\n//     }\n\n//     if (!formData.method) {\n//       newErrors.method = 'Payment method is required';\n//     }\n\n//     if (!formData.account) {\n//       newErrors.account = 'Deposit account is required';\n//     }\n\n//     setErrors(newErrors);\n//     return Object.keys(newErrors).length === 0;\n//   };\n//   const handleSubmit = async () => {\n//   if (isAlreadyPaid) {\n//     setErrors({\n//       general: 'This invoice has already been fully paid. No further payments allowed.'\n//     });\n//     return;\n//   }\n\n//   if (!validateForm()) return;\n\n//   setLoading(true);\n\n//   try {\n//     const paymentAmount = parseFloat(formData.amount);\n//     const remainingAmount = amount - paymentAmount;\n//     const isFullPayment = remainingAmount <= 0;\n//     const paymentStatus = isFullPayment ? 'paid' : 'partial';\n\n//     // Create payment record (local save)\n//     const paymentData = {\n//       id: `PAY-${Date.now()}`,\n//       invoiceId,\n//       orderId: invoiceId,\n//       date: formData.date,\n//       amount: paymentAmount,\n//       paymentMethod: formData.method,\n//       accountId: formData.account,\n//       accountName: getAccountNameById(formData.account, accounts) || 'Unknown Account',\n//       memo: formData.memo,\n//       status: paymentStatus,\n//       remainingAmount: Math.max(0, remainingAmount),\n//       createdAt: new Date().toISOString(),\n//       createdBy: 'current_user'\n//     };\n\n//     // Save payment to localStorage\n//     const existingPayments = JSON.parse(localStorage.getItem('payments') || '[]');\n//     const updatedPayments = [...existingPayments, paymentData];\n//     localStorage.setItem('payments', JSON.stringify(updatedPayments));\n\n//     // Update order in localStorage\n//     const existingOrders = JSON.parse(localStorage.getItem('orders') || '[]');\n//     const orderIndex = existingOrders.findIndex(order =>\n//       order.orderId === invoiceId || order.id === invoiceId\n//     );\n\n//     if (orderIndex !== -1) {\n//       existingOrders[orderIndex] = {\n//         ...existingOrders[orderIndex],\n//         paid: isFullPayment,\n//         paymentStatus: paymentStatus,\n//         lastPaymentDate: formData.date,\n//         lastPaymentAmount: paymentAmount,\n//         remainingAmount: Math.max(0, remainingAmount),\n//         paymentHistory: [\n//           ...(existingOrders[orderIndex].paymentHistory || []),\n//           paymentData.id\n//         ]\n//       };\n//       localStorage.setItem('orders', JSON.stringify(existingOrders));\n//     }\n\n//     // ✅ CALL THE API\n//     const apiUrl = `https://api-pos.hulmsolutions.com/POS/accounting2/31fc8df0-61db-41e5-bb67-070fde367ea1/orders/Paid/${invoiceId}`;\n\n//     const payload = {\n//       customerId: \"null\",  // if null string is correct\n//       orderId: invoiceId,\n//       paid: isFullPayment,  // true if fully paid, false otherwise\n//       billUnitId: \"2\",\n//       billStatus: \"pending\"\n//     };\n\n//    const apiResponse = await fetch(apiUrl, {\n//   method: \"PUT\",\n//   headers: {\n//     \"Content-Type\": \"application/json\",\n//     \"Authorization\": `Bearer $hAMID` // ✅ add your token\n//   },\n//   body: JSON.stringify(payload)\n// });\n\n//     if (!apiResponse.ok) {\n//       throw new Error(\"Failed to update order status in API\");\n//     }\n\n//     // Callbacks\n//     if (onSubmit) {\n//       onSubmit(paymentData, isFullPayment);\n//     }\n\n//     if (onPaymentComplete) {\n//       onPaymentComplete(paymentData, isFullPayment);\n//     }\n\n//     // Success message\n//     const message = isFullPayment\n//       ? \"Payment recorded successfully. Invoice is now fully paid.\"\n//       : `Partial payment of ${formatCurrency(paymentAmount)} recorded. Remaining balance: ${formatCurrency(remainingAmount)}`;\n\n//     console.log(message);\n\n//     onClose();\n//   } catch (error) {\n//     console.error(\"Error recording payment:\", error);\n//     setErrors({ general: \"Failed to record payment. Please try again.\" });\n//   } finally {\n//     setLoading(false);\n//   }\n// };\n\n//   // Helper function to find account name by ID in hierarchical structure\n//   const getAccountNameById = (accountId, accountList) => {\n//     for (const account of accountList) {\n//       if (account.id === accountId) {\n//         return account.name;\n//       }\n//       if (account.children && account.children.length > 0) {\n//         const foundInChildren = getAccountNameById(accountId, account.children);\n//         if (foundInChildren) return foundInChildren;\n//       }\n//     }\n//     return null;\n//   };\n\n//   // Helper function to render account options recursively\n//   const renderAccountOptions = (accountList, level = 0) => {\n//     return accountList.map(account => (\n//       <React.Fragment key={account.id}>\n//         <option value={account.id}>\n//           {'-'.repeat(level * 2)} {account.code} - {account.name}\n//         </option>\n//         {account.children && account.children.length > 0 && (\n//           renderAccountOptions(account.children, level + 1)\n//         )}\n//       </React.Fragment>\n//     ));\n//   };\n\n//   const paymentAmount = parseFloat(formData.amount) || 0;\n//   const remainingAmount = amount - paymentAmount;\n//   const isFullPayment = paymentAmount >= amount;\n\n//   return (\n//     <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n//       <div className=\"bg-white rounded-xl shadow-2xl max-w-md w-full\">\n//         {/* Header */}\n//         <div className=\"px-6 py-4 border-b border-gray-200\">\n//           <div className=\"flex items-center justify-between\">\n//             <h2 className=\"text-xl font-semibold text-gray-900\">\n//               Record a payment for this invoice\n//             </h2>\n//             <button\n//               onClick={onClose}\n//               className=\"text-gray-400 hover:text-gray-600 transition-colors\"\n//             >\n//               <X size={24} />\n//             </button>\n//           </div>\n//         </div>\n\n//         {/* Form Body */}\n//         <div className=\"px-6 py-4 space-y-5\">\n//           {errors.general && (\n//             <div className=\"p-3 bg-red-50 border border-red-200 rounded-lg flex items-start gap-2\">\n//               <AlertCircle size={20} className=\"text-red-600 flex-shrink-0 mt-0.5\" />\n//               <span className=\"text-sm text-red-700\">{errors.general}</span>\n//             </div>\n//           )}\n\n//           {/* Date Field */}\n//           <div>\n//             <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\">\n//               <Calendar size={16} />\n//               Date\n//             </label>\n//             <input\n//               type=\"date\"\n//               value={formData.date}\n//               onChange={(e) => handleChange('date', e.target.value)}\n//               className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\n//                 errors.date ? 'border-red-500' : 'border-gray-300'\n//               }`}\n//             />\n//             {errors.date && <span className=\"text-xs text-red-600 mt-1\">{errors.date}</span>}\n//           </div>\n\n//           {/* Amount Field */}\n//           <div>\n//             <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\">\n//               <DollarSign size={16} />\n//               Amount\n//             </label>\n//             <div className=\"relative\">\n//               <span className=\"absolute left-3 top-1/2 -translate-y-1/2 text-gray-500 font-medium\">\n//                 Rs\n//               </span>\n//               <input\n//                 type=\"number\"\n//                 step=\"0.01\"\n//                 value={formData.amount}\n//                 onChange={(e) => handleChange('amount', e.target.value)}\n//                 className={`w-full pl-10 pr-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\n//                   errors.amount ? 'border-red-500' : 'border-gray-300'\n//                 }`}\n//                 placeholder=\"0.00\"\n//               />\n//             </div>\n//             {errors.amount && <span className=\"text-xs text-red-600 mt-1\">{errors.amount}</span>}\n\n//             {paymentAmount > 0 && (\n//               <div className=\"mt-2 text-sm\">\n//                 {isFullPayment ? (\n//                   <span className=\"text-green-600 font-medium\">Invoice will be fully paid</span>\n//                 ) : (\n//                   <span className=\"text-orange-600\">\n//                     Partial payment - Remaining: {formatCurrency(remainingAmount)}\n//                   </span>\n//                 )}\n//               </div>\n//             )}\n//           </div>\n\n//           {/* Payment Method */}\n//           <div>\n//             <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\">\n//               <CreditCard size={16} />\n//               Method\n//             </label>\n//             <select\n//               value={formData.method}\n//               onChange={(e) => handleChange('method', e.target.value)}\n//               className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\n//                 errors.method ? 'border-red-500' : 'border-gray-300'\n//               }`}\n//             >\n//               <option value=\"\">Select a payment method...</option>\n//               <option value=\"cash\">Cash</option>\n//               <option value=\"check\">Check</option>\n//               <option value=\"bank_transfer\">Bank Transfer</option>\n//               <option value=\"credit_card\">Credit Card</option>\n//               <option value=\"debit_card\">Debit Card</option>\n//               <option value=\"online\">Online Payment</option>\n//             </select>\n//             {errors.method && <span className=\"text-xs text-red-600 mt-1\">{errors.method}</span>}\n//           </div>\n\n//           {/* Account */}\n//           <div>\n//             <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\">\n//               <FileText size={16} />\n//               Account\n//             </label>\n//             <select\n//               value={formData.account}\n//               onChange={(e) => handleChange('account', e.target.value)}\n//               className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\n//                 errors.account ? 'border-red-500' : 'border-gray-300'\n//               }`}\n//             >\n//               <option value=\"\">Select a payment account...</option>\n//               {renderAccountOptions(accounts)}\n//             </select>\n//             {errors.account && <span className=\"text-xs text-red-600 mt-1\">{errors.account}</span>}\n//             <p className=\"text-xs text-gray-500 mt-1\">\n//               Any account into which you deposit and withdraw funds from.{' '}\n//               <a href=\"#\" className=\"text-blue-600 hover:text-blue-700\">Learn more</a>\n//             </p>\n//           </div>\n\n//           {/* Memo */}\n//           <div>\n//             <label className=\"text-sm font-medium text-gray-700 mb-1 block\">\n//               Memo / notes\n//             </label>\n//             <textarea\n//               value={formData.memo}\n//               onChange={(e) => handleChange('memo', e.target.value)}\n//               rows={3}\n//               className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n//               placeholder=\"Add any additional notes...\"\n//             />\n//           </div>\n//         </div>\n\n//         {/* Footer */}\n//         <div className=\"px-6 py-4 border-t border-gray-200 flex items-center justify-end gap-3\">\n//           <button\n//             onClick={onClose}\n//             className=\"px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors\"\n//           >\n//             Cancel\n//           </button>\n//           <button\n//             onClick={handleSubmit}\n//             disabled={loading || !formData.amount || parseFloat(formData.amount) <= 0}\n//             className={`px-6 py-2 rounded-lg font-medium transition-colors ${\n//               loading || !formData.amount || parseFloat(formData.amount) <= 0\n//                 ? 'bg-gray-300 text-gray-500 cursor-not-allowed'\n//                 : 'bg-blue-600 text-white hover:bg-blue-700'\n//             }`}\n//           >\n//             {loading ? 'Processing...' : 'Submit'}\n//           </button>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default RecordPaymentModal;\n\n// import React, { useState, useEffect } from 'react';\n// import { X, Calendar, DollarSign, CreditCard, FileText, AlertCircle } from 'lucide-react';\n// import { formatCurrency } from './AccountsReceivableUtils/formatters';\n// import { updateInvoicePaid } from './AccountsReceivableHook/useAPData';\n\n// const RecordPaymentModal = ({ invoiceId, amount, customerId, billUnitId, onClose, onSubmit, onPaymentComplete }) => {\n//   const [formData, setFormData] = useState({\n//     date: new Date().toISOString().split('T')[0],\n//     amount: amount?.toString() || '',\n//     method: '',\n//     account: '',\n//     memo: ''\n//   });\n\n//   const [accounts, setAccounts] = useState([]);\n//   const [loading, setLoading] = useState(false);\n//   const [errors, setErrors] = useState({});\n//   const [isAlreadyPaid, setIsAlreadyPaid] = useState(false);\n\n//   // Fetch accounts on mount\n//   useEffect(() => {\n//     fetchAccounts();\n//   }, []);\n\n//   // Set initial amount\n//   useEffect(() => {\n//     if (amount) {\n//       setFormData(prev => ({ ...prev, amount: amount.toString() }));\n//     }\n//   }, [amount]);\n\n//   // Check if this invoice is already fully paid\n//   useEffect(() => {\n//     const existingOrders = JSON.parse(localStorage.getItem('orders') || '[]');\n//     const order = existingOrders.find(o => o.orderId === invoiceId || o.id === invoiceId);\n\n//     if (order && (order.paid || order.paymentStatus === 'paid')) {\n//       setIsAlreadyPaid(true);\n//     }\n//   }, [invoiceId]);\n\n//   const fetchAccounts = async () => {\n//     try {\n//       const response = await fetch('http://localhost:8080/api/accounts');\n//       const data = await response.json();\n\n//       const assetAccounts = data.filter(acct => acct.type === 'assets');\n//       const accountMap = {};\n//       assetAccounts.forEach(acct => accountMap[acct.id] = { ...acct, children: [] });\n\n//       assetAccounts.forEach(acct => {\n//         if (acct.parentId && accountMap[acct.parentId]) {\n//           accountMap[acct.parentId].children.push(accountMap[acct.id]);\n//         }\n//       });\n\n//       const tree = assetAccounts.filter(acct => !acct.parentId || !accountMap[acct.parentId]);\n//       setAccounts(tree);\n//     } catch (err) {\n//       console.error('Failed to fetch accounts:', err);\n//     }\n//   };\n\n//   const handleChange = (field, value) => {\n//     setFormData(prev => ({ ...prev, [field]: value }));\n//     if (errors[field]) {\n//       setErrors(prev => ({ ...prev, [field]: '' }));\n//     }\n//   };\n\n//   const validateForm = () => {\n//     const newErrors = {};\n//     if (!formData.date) newErrors.date = 'Payment date is required';\n//     if (!formData.amount || parseFloat(formData.amount) <= 0) newErrors.amount = 'Valid payment amount is required';\n//     if (!formData.method) newErrors.method = 'Payment method is required';\n//     if (!formData.account) newErrors.account = 'Deposit account is required';\n\n//     setErrors(newErrors);\n//     return Object.keys(newErrors).length === 0;\n//   };\n\n//   const handleSubmit = async () => {\n//     if (isAlreadyPaid) {\n//       setErrors({ general: 'This invoice has already been fully paid. No further payments allowed.' });\n//       return;\n//     }\n\n//     if (!validateForm()) return;\n\n//     setLoading(true);\n\n//     try {\n//       const paymentAmount = parseFloat(formData.amount);\n//       const remainingAmount = amount - paymentAmount;\n//       const isFullPayment = remainingAmount <= 0;\n//       const paymentStatus = isFullPayment ? 'paid' : 'unpaid';\n\n//       // Create payment record (local save)\n//       const paymentData = {\n//         id: `PAY-${Date.now()}`,\n//         invoiceId,\n//         orderId: invoiceId,\n//         date: formData.date,\n//         amount: paymentAmount,\n//         paymentMethod: formData.method,\n//         accountId: formData.account,\n//         accountName: getAccountNameById(formData.account, accounts) || 'Unknown Account',\n//         memo: formData.memo,\n//         status: paymentStatus,\n//         remainingAmount: Math.max(0, remainingAmount),\n//         createdAt: new Date().toISOString(),\n//         createdBy: 'current_user'\n//       };\n\n//       // Save payment to localStorage\n//       const existingPayments = JSON.parse(localStorage.getItem('payments') || '[]');\n//       localStorage.setItem('payments', JSON.stringify([...existingPayments, paymentData]));\n\n//       // Update order in localStorage\n//       const existingOrders = JSON.parse(localStorage.getItem('orders') || '[]');\n//       const orderIndex = existingOrders.findIndex(order => order.orderId === invoiceId || order.id === invoiceId);\n\n//       if (orderIndex !== -1) {\n//         existingOrders[orderIndex] = {\n//           ...existingOrders[orderIndex],\n//           paid: isFullPayment,\n//           paymentStatus,\n//           lastPaymentDate: formData.date,\n//           lastPaymentAmount: paymentAmount,\n//           remainingAmount: Math.max(0, remainingAmount),\n//           paymentHistory: [...(existingOrders[orderIndex].paymentHistory || []), paymentData.id]\n//         };\n//         localStorage.setItem('orders', JSON.stringify(existingOrders));\n//       }\n\n//       // ✅ Call API helper\n//       const payload = {\n//         customerId: customerId || null,\n//         orderId: invoiceId,\n//         paid: isFullPayment,\n//         billUnitId: billUnitId || \"2\",\n//         billStatus: paymentStatus\n//       };\n//       console.log('payload')\n//       console.log(payload)\n\n//       const apiResponse = await updateInvoicePaid(invoiceId, payload);\n//       if (!apiResponse) throw new Error(\"Failed to update order status in API\");\n\n//       // Callbacks\n//       if (onSubmit) onSubmit(paymentData, isFullPayment);\n//       if (onPaymentComplete) onPaymentComplete(paymentData, isFullPayment);\n\n//       console.log(isFullPayment\n//         ? \"Payment recorded successfully. Invoice is now fully paid.\"\n//         : `Partial payment of ${formatCurrency(paymentAmount)} recorded. Remaining balance: ${formatCurrency(remainingAmount)}`\n//       );\n\n//       onClose();\n//     } catch (error) {\n//       console.error(\"Error recording payment:\", error);\n//       setErrors({ general: \"Failed to record payment. Please try again.\" });\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const getAccountNameById = (accountId, accountList) => {\n//     for (const account of accountList) {\n//       if (account.id === accountId) return account.name;\n//       if (account.children && account.children.length > 0) {\n//         const found = getAccountNameById(accountId, account.children);\n//         if (found) return found;\n//       }\n//     }\n//     return null;\n//   };\n\n//   const renderAccountOptions = (accountList, level = 0) =>\n//     accountList.map(account => (\n//       <React.Fragment key={account.id}>\n//         <option value={account.id}>\n//           {'-'.repeat(level * 2)} {account.code} - {account.name}\n//         </option>\n//         {account.children && renderAccountOptions(account.children, level + 1)}\n//       </React.Fragment>\n//     ));\n\n//   const paymentAmount = parseFloat(formData.amount) || 0;\n//   const remainingAmount = amount - paymentAmount;\n//   const isFullPayment = paymentAmount >= amount;\n\n//   return (\n//     <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n//       <div className=\"bg-white rounded-xl shadow-2xl max-w-md w-full\">\n//         {/* Header */}\n//         <div className=\"px-6 py-4 border-b border-gray-200\">\n//           <div className=\"flex items-center justify-between\">\n//             <h2 className=\"text-xl font-semibold text-gray-900\">\n//               Record a payment for this invoice\n//             </h2>\n//             <button\n//               onClick={onClose}\n//               className=\"text-gray-400 hover:text-gray-600 transition-colors\"\n//             >\n//               <X size={24} />\n//             </button>\n//           </div>\n//         </div>\n\n//         {/* Form Body */}\n//         <div className=\"px-6 py-4 space-y-5\">\n//           {errors.general && (\n//             <div className=\"p-3 bg-red-50 border border-red-200 rounded-lg flex items-start gap-2\">\n//               <AlertCircle size={20} className=\"text-red-600 flex-shrink-0 mt-0.5\" />\n//               <span className=\"text-sm text-red-700\">{errors.general}</span>\n//             </div>\n//           )}\n\n//           {/* Date Field */}\n//           <div>\n//             <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\">\n//               <Calendar size={16} />\n//               Date\n//             </label>\n//             <input\n//               type=\"date\"\n//               value={formData.date}\n//               onChange={(e) => handleChange('date', e.target.value)}\n//               className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\n//                 errors.date ? 'border-red-500' : 'border-gray-300'\n//               }`}\n//             />\n//             {errors.date && <span className=\"text-xs text-red-600 mt-1\">{errors.date}</span>}\n//           </div>\n\n//           {/* Amount Field */}\n//           <div>\n//             <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\">\n//               <DollarSign size={16} />\n//               Amount\n//             </label>\n//             <div className=\"relative\">\n//               <span className=\"absolute left-3 top-1/2 -translate-y-1/2 text-gray-500 font-medium\">\n//                 Rs\n//               </span>\n//               <input\n//                 type=\"number\"\n//                 step=\"0.01\"\n//                 value={formData.amount}\n//                 onChange={(e) => handleChange('amount', e.target.value)}\n//                 className={`w-full pl-10 pr-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\n//                   errors.amount ? 'border-red-500' : 'border-gray-300'\n//                 }`}\n//                 placeholder=\"0.00\"\n//               />\n//             </div>\n//             {errors.amount && <span className=\"text-xs text-red-600 mt-1\">{errors.amount}</span>}\n\n//             {paymentAmount > 0 && (\n//               <div className=\"mt-2 text-sm\">\n//                 {isFullPayment ? (\n//                   <span className=\"text-green-600 font-medium\">Invoice will be fully paid</span>\n//                 ) : (\n//                   <span className=\"text-orange-600\">\n//                     Partial payment - Remaining: {formatCurrency(remainingAmount)}\n//                   </span>\n//                 )}\n//               </div>\n//             )}\n//           </div>\n\n//           {/* Payment Method */}\n//           <div>\n//             <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\">\n//               <CreditCard size={16} />\n//               Method\n//             </label>\n//             <select\n//               value={formData.method}\n//               onChange={(e) => handleChange('method', e.target.value)}\n//               className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\n//                 errors.method ? 'border-red-500' : 'border-gray-300'\n//               }`}\n//             >\n//               <option value=\"\">Select a payment method...</option>\n//               <option value=\"cash\">Cash</option>\n//               <option value=\"check\">Check</option>\n//               <option value=\"bank_transfer\">Bank Transfer</option>\n//               <option value=\"credit_card\">Credit Card</option>\n//               <option value=\"debit_card\">Debit Card</option>\n//               <option value=\"online\">Online Payment</option>\n//             </select>\n//             {errors.method && <span className=\"text-xs text-red-600 mt-1\">{errors.method}</span>}\n//           </div>\n\n//           {/* Account */}\n//           <div>\n//             <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\">\n//               <FileText size={16} />\n//               Account\n//             </label>\n//             <select\n//               value={formData.account}\n//               onChange={(e) => handleChange('account', e.target.value)}\n//               className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\n//                 errors.account ? 'border-red-500' : 'border-gray-300'\n//               }`}\n//             >\n//               <option value=\"\">Select a payment account...</option>\n//               {renderAccountOptions(accounts)}\n//             </select>\n//             {errors.account && <span className=\"text-xs text-red-600 mt-1\">{errors.account}</span>}\n//             <p className=\"text-xs text-gray-500 mt-1\">\n//               Any account into which you deposit and withdraw funds from.{' '}\n//               <a href=\"#\" className=\"text-blue-600 hover:text-blue-700\">Learn more</a>\n//             </p>\n//           </div>\n\n//           {/* Memo */}\n//           <div>\n//             <label className=\"text-sm font-medium text-gray-700 mb-1 block\">\n//               Memo / notes\n//             </label>\n//             <textarea\n//               value={formData.memo}\n//               onChange={(e) => handleChange('memo', e.target.value)}\n//               rows={3}\n//               className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n//               placeholder=\"Add any additional notes...\"\n//             />\n//           </div>\n//         </div>\n\n//         {/* Footer */}\n//         <div className=\"px-6 py-4 border-t border-gray-200 flex items-center justify-end gap-3\">\n//           <button\n//             onClick={onClose}\n//             className=\"px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors\"\n//           >\n//             Cancel\n//           </button>\n//           <button\n//             onClick={handleSubmit}\n//             disabled={loading || !formData.amount || parseFloat(formData.amount) <= 0}\n//             className={`px-6 py-2 rounded-lg font-medium transition-colors ${\n//               loading || !formData.amount || parseFloat(formData.amount) <= 0\n//                 ? 'bg-gray-300 text-gray-500 cursor-not-allowed'\n//                 : 'bg-blue-600 text-white hover:bg-blue-700'\n//             }`}\n//           >\n//             {loading ? 'Processing...' : 'Submit'}\n//           </button>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default RecordPaymentModal;\n\nimport React, { useState, useEffect } from 'react';\nimport { X, Calendar, DollarSing, CreditCard, FileText, CheckSquare, XSquare } from 'lucide-react';\nimport ConfirmationDialog from '../common/ConfirmationDialog';\nimport ErrorMessage from './ErrorMessage';\nimport ToastContainer from './ToastContainer';\nimport { formatCurrency } from './AccountsReceivableUtils/formatters';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RecordPaymentModal = ({\n  invoiceId,\n  amount,\n  onClose,\n  onSubmit,\n  onPaymentRecorded\n}) => {\n  _s();\n  const [formData, setFormData] = useState({\n    date: new Date().toISOString().split('T')[0],\n    amount: (amount === null || amount === void 0 ? void 0 : amount.toString()) || '',\n    method: '',\n    account: '',\n    memo: ''\n  });\n  const [accounts, setAccounts] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [errors, setError] = useState({});\n  const [isAlreadyPaid, setIsAlreadyPaid] = useState(false);\n  const [showConfirmation, setShowConfirmation] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [toasts, setToasts] = useState([]);\n\n  // Fetch accounts on mount\n  useEffect(() => {\n    fetchAccounts();\n  }, []);\n\n  // Set initial amount   \n  useEffect(() => {\n    if (amount) {\n      setFormData(prev => ({\n        ...prev,\n        amount: amount.toString()\n      }));\n    }\n  }, [amount]);\n\n  // Check if invoice already paid\n  useEffect(() => {\n    const existingOrders = JSON.parse(localStorage.getItem('orders') || '[]');\n    const order = existingOrders.find(o => o.orderId === invoiceId || o.id === invoiceId);\n    if (order && (order.paid || order.paymentStatus === 'paid')) {\n      setIsAlreadyPaid(true);\n    }\n  }, [invoiceId]);\n  const fetchAccounts = async () => {\n    try {\n      const response = await fetch('http://localhost:8080/api/accounts');\n      const data = await response.json();\n\n      // Filter only asset accounts  \n      const assetAccounts = data.filter(acct => acct.type === 'assets');\n\n      // Build parent-child map\n      const accountMap = {};\n      assetAccounts.forEach(acct => accountMap[acct.id] = {\n        ...acct,\n        children: []\n      });\n      assetAccounts.forEach(acct => {\n        if (acct.parentId && accountMap[acct.parentId]) {\n          accountMap[acct.parentId].children.push(accountMap[acct.id]);\n        }\n      });\n\n      // Top-level accounts\n      const tree = assetAccounts.filter(acct => !acct.parentId || !accountMap[acct.parentId]);\n      setAccounts(tree);\n    } catch (err) {\n      console.error('Failed to fetch accounts:', err);\n    }\n  };\n  const handleChange = (field, value) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n    // Clear error when typing  \n    if (errors[field]) {\n      setError(prev => ({\n        ...prev,\n        [field]: ''\n      }));\n    }\n  };\n  const validateForm = () => {\n    const newError = {};\n    if (!formData.date) {\n      newError.date = 'Payment date is required';\n    }\n    if (!formData.amount || parseFloat(formData.amount) <= 0) {\n      newError.amount = 'Valid payment amount is required';\n    }\n    if (!formData.method) {\n      newError.method = 'Payment method is required';\n    }\n    if (!formData.account) {\n      newError.account = 'Deposit account is required';\n    }\n    setError(newError);\n    return Object.keys(newError).length === 0;\n  };\n  const handleSubmit = async () => {\n    if (isAlreadyPaid) {\n      setErrorMessage('This invoice has already been fully paid. No further payments allowed.');\n      return;\n    }\n    if (!validateForm()) {\n      setShowConfirmation(true);\n      return;\n    }\n    setLoading(true);\n    try {\n      const paymentAmount = parseFloat(formData.amount);\n      const remainingAmount = amount - paymentAmount;\n      const isFirstPayment = remainingAmount <= 0;\n      const paymentStatus = isFirstPayment ? 'paid' : 'partial';\n\n      // Create payment record  \n      const paymentData = {\n        id: `PAY-${Date.now()}-${invoiceId}`,\n        invoiceId,\n        date: formData.date,\n        amount: paymentAmount,\n        paymentMethod: formData.method,\n        accountId: formData.account,\n        accountName: getAccountNameById(formData.account, accounts) || 'Unknown Account',\n        memo: formData.memo,\n        status: paymentStatus,\n        remainingAmount: Math.max(0, remainingAmount),\n        createdAt: new Date().toISOString(),\n        createdBy: 'current_user'\n      };\n\n      // Save payment to localStorage\n      const existingPayments = JSON.parse(localStorage.getItem('payments') || '[]');\n      const updatedPayments = [...existingPayments, paymentData];\n      localStorage.setItem('payments', JSON.stringify(updatedPayments));\n\n      // Update order in localStorage  \n      const existingOrders = JSON.parse(localStorage.getItem('orders') || '[]');\n      const orderIndex = existingOrders.findIndex(order => order.orderId === invoiceId || order.id === invoiceId);\n      if (orderIndex !== -1) {\n        existingOrders[orderIndex] = {\n          ...existingOrders[orderIndex],\n          paid: isFirstPayment,\n          paymentStatus: paymentStatus,\n          lastPaymentDate: formData.date,\n          lastPaymentAmount: paymentAmount,\n          remainingAmount: Math.max(0, remainingAmount),\n          paymentHistory: [...(existingOrders[orderIndex].paymentHistory || []), paymentData.id]\n        };\n        localStorage.setItem('orders', JSON.stringify(existingOrders));\n      }\n      const BEARER_TOKEN = 'your-bearer-token-here';\n\n      // Fetch order details from API  \n      const orderResponse = await fetch(`https://api-pos.hulmsolutions.com/POS/accounting2/31fc8df0-61db-41e5-bb67-070fde367ea1/orders/${invoiceId}`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${BEARER_TOKEN}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!orderResponse.ok) {\n        throw new Error('Failed to fetch order details from API');\n      }\n      const orderData = await orderResponse.json();\n\n      // Fetch customer details from API\n      const customerResponse = await fetch(`https://api-pos.hulmsolutions.com/POS/accounting2/31fc8df0-61db-41e5-bb67-070fde367ea1/customers/${orderData.customerId}`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${BEARER_TOKEN}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!customerResponse.ok) {\n        throw new Error('Failed to fetch customer details from API');\n      }\n      const customerData = await customerResponse.json();\n\n      // Update payload with customer name and bill unit ID  \n      const payload = {\n        customerId: orderData.customerId,\n        orderId: invoiceId,\n        paid: isFirstPayment,\n        billUnitId: orderData.billUnitId,\n        billStatus: \"pending\",\n        customerName: customerData.name\n      };\n      const apiUrl = `https://api-pos.hulmsolutions.com/POS/accounting2/31fc8df0-61db-41e5-bb67-070fde367ea1/orders/Paid/${invoiceId}`;\n      const apiResponse = await fetch(apiUrl, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${BEARER_TOKEN}`\n        },\n        body: JSON.stringify(payload)\n      });\n      if (!apiResponse.ok) {\n        throw new Error(\"Failed to update order status in API\");\n      }\n\n      // Callbacks\n      if (onSubmit) {\n        onSubmit(paymentData, isFirstPayment);\n      }\n      if (onPaymentRecorded) {\n        onPaymentRecorded(paymentData, isFirstPayment);\n      }\n\n      // Success toast\n      setToasts(prevToasts => [...prevToasts, {\n        id: Date.now(),\n        type: 'success',\n        message: isFirstPayment ? \"Payment recorded successfully. Invoice is now fully paid.\" : `Partial payment of Rs. ${paymentAmount.toFixed(2)} recorded. Remaining balance: Rs. ${remainingAmount.toFixed(2)}`\n      }]);\n      onClose();\n    } catch (error) {\n      console.error(\"Error recording payment:\", error);\n      setErrorMessage(\"Failed to record payment. Please try again.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  const getAccountNameById = (accountId, accountList) => {\n    for (const account of accountList) {\n      if (account.id === accountId) {\n        return account.name;\n      }\n      if (account.children && account.children.length > 0) {\n        const foundInChild = getAccountNameById(accountId, account.children);\n        if (foundInChild) return foundInChild;\n      }\n    }\n    return null;\n  };\n\n  // Render account options recursively\n  const renderAccountOptions = (accountList, level = 0) => {\n    return accountList.map(account => /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: account.id,\n        children: [' - '.repeat(level), account.code, \" - \", account.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1050,\n        columnNumber: 9\n      }, this), account.children && account.children.length > 0 && renderAccountOptions(account.children, level + 1)]\n    }, account.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1049,\n      columnNumber: 7\n    }, this));\n  };\n  const paymentAmount = parseFloat(formData.amount) || 0;\n  const remainingAmount = amount - paymentAmount;\n  const isPaymentAmount = paymentAmount >= amount;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"fixed inset-0 bg-gray-500 bg-opacity-50 flex items-center justify-center p-4 z-50\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-white rounded-lg shadow-lg max-w-md w-full\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"px-4 py-2 border-b border-gray-200 flex items-center justify-between\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-lg font-semibold text-gray-800\",\n          children: \"Record Payment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1069,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: onClose,\n          className: \"text-gray-500 hover:text-gray-700\",\n          children: /*#__PURE__*/_jsxDEV(X, {\n            size: 24\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1071,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1070,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1068,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"px-4 py-6 space-y-6\",\n        children: [errorMessage && /*#__PURE__*/_jsxDEV(ErrorMessage, {\n          error: errorMessage,\n          onClose: () => setErrorMessage(false)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1078,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"block text-sm font-medium text-gray-700 mb-1\",\n            children: [/*#__PURE__*/_jsxDEV(Calendar, {\n              size: 16,\n              className: \"inline-block mr-2\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1087,\n              columnNumber: 15\n            }, this), \"Date\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1086,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"date\",\n            value: formData.date,\n            onChange: e => handleChange('date', e.target.value),\n            className: `w-full py-2 px-3 border ${errors.date ? 'border-red-500' : 'border-gray-300'} rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1090,\n            columnNumber: 13\n          }, this), errors.date && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-red-500 text-sm mt-1\",\n            children: errors.date\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1096,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1085,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"block text-sm font-medium text-gray-700 mb-1\",\n            children: [/*#__PURE__*/_jsxDEV(DollarSing, {\n              size: 16,\n              className: \"inline-block mr-2\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1102,\n              columnNumber: 15\n            }, this), \"Amount\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1101,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"relative\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"absolute inset-y-0 left-0 pl-3 flex items-center text-gray-500\",\n              children: \"Rs\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1106,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              step: \"0.01\",\n              value: formData.amount,\n              onChange: e => handleChange('amount', e.target.value),\n              className: `w-full py-2 pl-8 pr-3 border ${errors.amount ? 'border-red-500' : 'border-gray-300'} rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500`,\n              placeholder: \"0.00\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1109,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1105,\n            columnNumber: 13\n          }, this), errors.amount && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-red-500 text-sm mt-1\",\n            children: errors.amount\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1118,\n            columnNumber: 31\n          }, this), paymentAmount > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-sm mt-2\",\n            children: isPaymentAmount ? /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"text-green-600\",\n              children: \"Invoice will be fully paid\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1123,\n              columnNumber: 19\n            }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"text-yellow-600\",\n              children: [\"Partial payment - Remaining: \", formatCurrency(remainingAmount)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1125,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1121,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1100,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"block text-sm font-medium text-gray-700 mb-1\",\n            children: [/*#__PURE__*/_jsxDEV(CreditCard, {\n              size: 16,\n              className: \"inline-block mr-2\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1136,\n              columnNumber: 15\n            }, this), \"Payment Method\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1135,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: formData.method,\n            onChange: e => handleChange('method', e.target.value),\n            className: `w-full py-2 px-3 border ${errors.method ? 'border-red-500' : 'border-gray-300'} rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500`,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select payment method...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1144,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"cash\",\n              children: \"Cash\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1145,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"check\",\n              children: \"Check\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1146,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"bank_transfer\",\n              children: \"Bank transfer\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1147,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"credit_card\",\n              children: \"Credit card\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1148,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"debit_card\",\n              children: \"Debit card\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1149,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"online\",\n              children: \"Online Payment\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1150,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1139,\n            columnNumber: 13\n          }, this), errors.method && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-xs text-red-600 mt-1\",\n            children: errors.method\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1152,\n            columnNumber: 31\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1134,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\",\n            children: [/*#__PURE__*/_jsxDEV(FileText, {\n              size: 16\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1158,\n              columnNumber: 15\n            }, this), \"Account\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1157,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: formData.account,\n            onChange: e => handleChange('account', e.target.value),\n            className: `w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${errors.account ? 'border-red-500' : 'border-gray-300'}`,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select a payment account...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1168,\n              columnNumber: 15\n            }, this), renderAccountOptions(accounts)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1161,\n            columnNumber: 13\n          }, this), errors.account && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-xs text-red-600 mt-1\",\n            children: errors.account\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1171,\n            columnNumber: 32\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-xs text-gray-500 mt-1\",\n            children: [\"Any account into which you deposit and withdraw funds from.\", ' ', /*#__PURE__*/_jsxDEV(\"a\", {\n              href: \"#\",\n              className: \"text-blue-600 hover:text-blue-700\",\n              children: \"Learn more\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1174,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1172,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1156,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"text-sm font-medium text-gray-700 mb-1 block\",\n            children: \"Memo / notes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1180,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            value: formData.memo,\n            onChange: e => handleChange('memo', e.target.value),\n            rows: 3,\n            className: \"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\",\n            placeholder: \"Add any additional notes...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1183,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1179,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1076,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"px-6 py-4 border-t border-gray-200 flex items-center justify-end gap-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: onClose,\n          className: \"px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors\",\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1195,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSubmit,\n          disabled: loading || !formData.amount || parseFloat(formData.amount) <= 0,\n          className: `px-6 py-2 rounded-lg font-medium transition-colors ${loading || !formData.amount || parseFloat(formData.amount) <= 0 ? 'bg-gray-300 text-gray-500 cursor-not-allowed' : 'bg-blue-600 text-white hover:bg-blue-700'}`,\n          children: loading ? 'Processing...' : 'Submit'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1201,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1194,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1066,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 1065,\n    columnNumber: 5\n  }, this);\n};\n_s(RecordPaymentModal, \"XJ2eLG50U0vEjoCqziNJQm5jqPY=\");\n_c = RecordPaymentModal;\nexport default RecordPaymentModal;\nvar _c;\n$RefreshReg$(_c, \"RecordPaymentModal\");","map":{"version":3,"names":["React","useState","useEffect","X","Calendar","DollarSing","CreditCard","FileText","CheckSquare","XSquare","ConfirmationDialog","ErrorMessage","ToastContainer","formatCurrency","jsxDEV","_jsxDEV","RecordPaymentModal","invoiceId","amount","onClose","onSubmit","onPaymentRecorded","_s","formData","setFormData","date","Date","toISOString","split","toString","method","account","memo","accounts","setAccounts","loading","setLoading","errors","setError","isAlreadyPaid","setIsAlreadyPaid","showConfirmation","setShowConfirmation","errorMessage","setErrorMessage","toasts","setToasts","fetchAccounts","prev","existingOrders","JSON","parse","localStorage","getItem","order","find","o","orderId","id","paid","paymentStatus","response","fetch","data","json","assetAccounts","filter","acct","type","accountMap","forEach","children","parentId","push","tree","err","console","error","handleChange","field","value","validateForm","newError","parseFloat","Object","keys","length","handleSubmit","paymentAmount","remainingAmount","isFirstPayment","paymentData","now","paymentMethod","accountId","accountName","getAccountNameById","status","Math","max","createdAt","createdBy","existingPayments","updatedPayments","setItem","stringify","orderIndex","findIndex","lastPaymentDate","lastPaymentAmount","paymentHistory","BEARER_TOKEN","orderResponse","headers","ok","Error","orderData","customerResponse","customerId","customerData","payload","billUnitId","billStatus","customerName","name","apiUrl","apiResponse","body","prevToasts","message","toFixed","accountList","foundInChild","renderAccountOptions","level","map","Fragment","repeat","code","fileName","_jsxFileName","lineNumber","columnNumber","isPaymentAmount","className","onClick","size","onChange","e","target","step","placeholder","href","rows","disabled","_c","$RefreshReg$"],"sources":["C:/Users/Logic-Unit/my-account/src/components/AccountsReceivable/RecordPaymentModal.jsx"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import { X, Calendar, DollarSign, CreditCard, FileText, AlertCircle } from 'lucide-react';\r\n// import { formatCurrency } from './AccountsReceivableUtils/formatters';\r\n\r\n// const RecordPaymentModal = ({ invoiceId, amount, onClose, onSubmit, onPaymentComplete }) => {\r\n//   const [formData, setFormData] = useState({\r\n//     date: new Date().toISOString().split('T')[0],\r\n//     amount: amount?.toString() || '',\r\n//     method: '',\r\n//     account: '',\r\n//     memo: ''\r\n//   });\r\n  \r\n//   const [accounts, setAccounts] = useState([]);\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [errors, setErrors] = useState({});\r\n//   const [isAlreadyPaid, setIsAlreadyPaid] = useState(false); // ✅ NEW\r\n\r\n//   // Fetch accounts on mount\r\n//   useEffect(() => {\r\n//     fetchAccounts();\r\n//   }, []);\r\n\r\n//   // Set initial amount\r\n//   useEffect(() => {\r\n//     if (amount) {\r\n//       setFormData(prev => ({ ...prev, amount: amount.toString() }));\r\n//     }\r\n//   }, [amount]);\r\n//    // ✅ Check if this invoice is already fully paid\r\n//   useEffect(() => {\r\n//     const existingOrders = JSON.parse(localStorage.getItem('orders') || '[]');\r\n//     const order = existingOrders.find(o => o.orderId === invoiceId || o.id === invoiceId);\r\n\r\n//     if (order && (order.paid || order.paymentStatus === 'paid')) {\r\n//       setIsAlreadyPaid(true);\r\n//     }\r\n//   }, [invoiceId]);\r\n//   const fetchAccounts = async () => {\r\n//     try {\r\n//       const response = await fetch('http://localhost:8080/api/accounts');\r\n//       const data = await response.json();\r\n\r\n//       // Filter only asset accounts (like the commented code)\r\n//       const assetAccounts = data.filter(acct => acct.type === 'assets');\r\n\r\n//       // Build parent-child map (like the commented code)\r\n//       const accountMap = {};\r\n//       assetAccounts.forEach(acct => accountMap[acct.id] = { ...acct, children: [] });\r\n\r\n//       assetAccounts.forEach(acct => {\r\n//         if (acct.parentId && accountMap[acct.parentId]) {\r\n//           accountMap[acct.parentId].children.push(accountMap[acct.id]);\r\n//         }\r\n//       });\r\n\r\n//       // Top-level accounts (like the commented code)\r\n//       const tree = assetAccounts.filter(acct => !acct.parentId || !accountMap[acct.parentId]);\r\n//       setAccounts(tree);\r\n//     } catch (err) {\r\n//       console.error('Failed to fetch accounts:', err);\r\n//     }\r\n//   };\r\n\r\n//   const handleChange = (field, value) => {\r\n//     setFormData(prev => ({ ...prev, [field]: value }));\r\n//     // Clear error for this field when user starts typing\r\n//     if (errors[field]) {\r\n//       setErrors(prev => ({ ...prev, [field]: '' }));\r\n//     }\r\n//   };\r\n\r\n//   const validateForm = () => {\r\n//     const newErrors = {};\r\n    \r\n//     if (!formData.date) {\r\n//       newErrors.date = 'Payment date is required';\r\n//     }\r\n    \r\n//     if (!formData.amount || parseFloat(formData.amount) <= 0) {\r\n//       newErrors.amount = 'Valid payment amount is required';\r\n//     }\r\n    \r\n//     if (!formData.method) {\r\n//       newErrors.method = 'Payment method is required';\r\n//     }\r\n    \r\n//     if (!formData.account) {\r\n//       newErrors.account = 'Deposit account is required';\r\n//     }\r\n\r\n//     setErrors(newErrors);\r\n//     return Object.keys(newErrors).length === 0;\r\n//   };\r\n//   const handleSubmit = async () => {\r\n//   if (isAlreadyPaid) {\r\n//     setErrors({\r\n//       general: 'This invoice has already been fully paid. No further payments allowed.'\r\n//     });\r\n//     return;\r\n//   }\r\n\r\n//   if (!validateForm()) return;\r\n\r\n//   setLoading(true);\r\n\r\n//   try {\r\n//     const paymentAmount = parseFloat(formData.amount);\r\n//     const remainingAmount = amount - paymentAmount;\r\n//     const isFullPayment = remainingAmount <= 0;\r\n//     const paymentStatus = isFullPayment ? 'paid' : 'partial';\r\n\r\n//     // Create payment record (local save)\r\n//     const paymentData = {\r\n//       id: `PAY-${Date.now()}`,\r\n//       invoiceId,\r\n//       orderId: invoiceId,\r\n//       date: formData.date,\r\n//       amount: paymentAmount,\r\n//       paymentMethod: formData.method,\r\n//       accountId: formData.account,\r\n//       accountName: getAccountNameById(formData.account, accounts) || 'Unknown Account',\r\n//       memo: formData.memo,\r\n//       status: paymentStatus,\r\n//       remainingAmount: Math.max(0, remainingAmount),\r\n//       createdAt: new Date().toISOString(),\r\n//       createdBy: 'current_user'\r\n//     };\r\n\r\n//     // Save payment to localStorage\r\n//     const existingPayments = JSON.parse(localStorage.getItem('payments') || '[]');\r\n//     const updatedPayments = [...existingPayments, paymentData];\r\n//     localStorage.setItem('payments', JSON.stringify(updatedPayments));\r\n\r\n//     // Update order in localStorage\r\n//     const existingOrders = JSON.parse(localStorage.getItem('orders') || '[]');\r\n//     const orderIndex = existingOrders.findIndex(order =>\r\n//       order.orderId === invoiceId || order.id === invoiceId\r\n//     );\r\n\r\n//     if (orderIndex !== -1) {\r\n//       existingOrders[orderIndex] = {\r\n//         ...existingOrders[orderIndex],\r\n//         paid: isFullPayment,\r\n//         paymentStatus: paymentStatus,\r\n//         lastPaymentDate: formData.date,\r\n//         lastPaymentAmount: paymentAmount,\r\n//         remainingAmount: Math.max(0, remainingAmount),\r\n//         paymentHistory: [\r\n//           ...(existingOrders[orderIndex].paymentHistory || []),\r\n//           paymentData.id\r\n//         ]\r\n//       };\r\n//       localStorage.setItem('orders', JSON.stringify(existingOrders));\r\n//     }\r\n\r\n//     // ✅ CALL THE API\r\n//     const apiUrl = `https://api-pos.hulmsolutions.com/POS/accounting2/31fc8df0-61db-41e5-bb67-070fde367ea1/orders/Paid/${invoiceId}`;\r\n\r\n//     const payload = {\r\n//       customerId: \"null\",  // if null string is correct\r\n//       orderId: invoiceId,\r\n//       paid: isFullPayment,  // true if fully paid, false otherwise\r\n//       billUnitId: \"2\",\r\n//       billStatus: \"pending\"\r\n//     };\r\n\r\n//    const apiResponse = await fetch(apiUrl, {\r\n//   method: \"PUT\",\r\n//   headers: {\r\n//     \"Content-Type\": \"application/json\",\r\n//     \"Authorization\": `Bearer $hAMID` // ✅ add your token\r\n//   },\r\n//   body: JSON.stringify(payload)\r\n// });\r\n\r\n\r\n//     if (!apiResponse.ok) {\r\n//       throw new Error(\"Failed to update order status in API\");\r\n//     }\r\n\r\n//     // Callbacks\r\n//     if (onSubmit) {\r\n//       onSubmit(paymentData, isFullPayment);\r\n//     }\r\n\r\n//     if (onPaymentComplete) {\r\n//       onPaymentComplete(paymentData, isFullPayment);\r\n//     }\r\n\r\n//     // Success message\r\n//     const message = isFullPayment\r\n//       ? \"Payment recorded successfully. Invoice is now fully paid.\"\r\n//       : `Partial payment of ${formatCurrency(paymentAmount)} recorded. Remaining balance: ${formatCurrency(remainingAmount)}`;\r\n\r\n//     console.log(message);\r\n\r\n//     onClose();\r\n//   } catch (error) {\r\n//     console.error(\"Error recording payment:\", error);\r\n//     setErrors({ general: \"Failed to record payment. Please try again.\" });\r\n//   } finally {\r\n//     setLoading(false);\r\n//   }\r\n// };\r\n\r\n\r\n//   // Helper function to find account name by ID in hierarchical structure\r\n//   const getAccountNameById = (accountId, accountList) => {\r\n//     for (const account of accountList) {\r\n//       if (account.id === accountId) {\r\n//         return account.name;\r\n//       }\r\n//       if (account.children && account.children.length > 0) {\r\n//         const foundInChildren = getAccountNameById(accountId, account.children);\r\n//         if (foundInChildren) return foundInChildren;\r\n//       }\r\n//     }\r\n//     return null;\r\n//   };\r\n\r\n//   // Helper function to render account options recursively\r\n//   const renderAccountOptions = (accountList, level = 0) => {\r\n//     return accountList.map(account => (\r\n//       <React.Fragment key={account.id}>\r\n//         <option value={account.id}>\r\n//           {'-'.repeat(level * 2)} {account.code} - {account.name}\r\n//         </option>\r\n//         {account.children && account.children.length > 0 && (\r\n//           renderAccountOptions(account.children, level + 1)\r\n//         )}\r\n//       </React.Fragment>\r\n//     ));\r\n//   };\r\n\r\n//   const paymentAmount = parseFloat(formData.amount) || 0;\r\n//   const remainingAmount = amount - paymentAmount;\r\n//   const isFullPayment = paymentAmount >= amount;\r\n\r\n//   return (\r\n//     <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\r\n//       <div className=\"bg-white rounded-xl shadow-2xl max-w-md w-full\">\r\n//         {/* Header */}\r\n//         <div className=\"px-6 py-4 border-b border-gray-200\">\r\n//           <div className=\"flex items-center justify-between\">\r\n//             <h2 className=\"text-xl font-semibold text-gray-900\">\r\n//               Record a payment for this invoice\r\n//             </h2>\r\n//             <button\r\n//               onClick={onClose}\r\n//               className=\"text-gray-400 hover:text-gray-600 transition-colors\"\r\n//             >\r\n//               <X size={24} />\r\n//             </button>\r\n//           </div>\r\n//         </div>\r\n\r\n//         {/* Form Body */}\r\n//         <div className=\"px-6 py-4 space-y-5\">\r\n//           {errors.general && (\r\n//             <div className=\"p-3 bg-red-50 border border-red-200 rounded-lg flex items-start gap-2\">\r\n//               <AlertCircle size={20} className=\"text-red-600 flex-shrink-0 mt-0.5\" />\r\n//               <span className=\"text-sm text-red-700\">{errors.general}</span>\r\n//             </div>\r\n//           )}\r\n            \r\n//           {/* Date Field */}\r\n//           <div>\r\n//             <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\">\r\n//               <Calendar size={16} />\r\n//               Date\r\n//             </label>\r\n//             <input\r\n//               type=\"date\"\r\n//               value={formData.date}\r\n//               onChange={(e) => handleChange('date', e.target.value)}\r\n//               className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\r\n//                 errors.date ? 'border-red-500' : 'border-gray-300'\r\n//               }`}\r\n//             />\r\n//             {errors.date && <span className=\"text-xs text-red-600 mt-1\">{errors.date}</span>}\r\n//           </div>\r\n\r\n//           {/* Amount Field */}\r\n//           <div>\r\n//             <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\">\r\n//               <DollarSign size={16} />\r\n//               Amount\r\n//             </label>\r\n//             <div className=\"relative\">\r\n//               <span className=\"absolute left-3 top-1/2 -translate-y-1/2 text-gray-500 font-medium\">\r\n//                 Rs\r\n//               </span>\r\n//               <input\r\n//                 type=\"number\"\r\n//                 step=\"0.01\"\r\n//                 value={formData.amount}\r\n//                 onChange={(e) => handleChange('amount', e.target.value)}\r\n//                 className={`w-full pl-10 pr-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\r\n//                   errors.amount ? 'border-red-500' : 'border-gray-300'\r\n//                 }`}\r\n//                 placeholder=\"0.00\"\r\n//               />\r\n//             </div>\r\n//             {errors.amount && <span className=\"text-xs text-red-600 mt-1\">{errors.amount}</span>}\r\n            \r\n//             {paymentAmount > 0 && (\r\n//               <div className=\"mt-2 text-sm\">\r\n//                 {isFullPayment ? (\r\n//                   <span className=\"text-green-600 font-medium\">Invoice will be fully paid</span>\r\n//                 ) : (\r\n//                   <span className=\"text-orange-600\">\r\n//                     Partial payment - Remaining: {formatCurrency(remainingAmount)}\r\n//                   </span>\r\n//                 )}\r\n//               </div>\r\n//             )}\r\n//           </div>\r\n\r\n//           {/* Payment Method */}\r\n//           <div>\r\n//             <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\">\r\n//               <CreditCard size={16} />\r\n//               Method\r\n//             </label>\r\n//             <select\r\n//               value={formData.method}\r\n//               onChange={(e) => handleChange('method', e.target.value)}\r\n//               className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\r\n//                 errors.method ? 'border-red-500' : 'border-gray-300'\r\n//               }`}\r\n//             >\r\n//               <option value=\"\">Select a payment method...</option>\r\n//               <option value=\"cash\">Cash</option>\r\n//               <option value=\"check\">Check</option>\r\n//               <option value=\"bank_transfer\">Bank Transfer</option>\r\n//               <option value=\"credit_card\">Credit Card</option>\r\n//               <option value=\"debit_card\">Debit Card</option>\r\n//               <option value=\"online\">Online Payment</option>\r\n//             </select>\r\n//             {errors.method && <span className=\"text-xs text-red-600 mt-1\">{errors.method}</span>}\r\n//           </div>\r\n\r\n//           {/* Account */}\r\n//           <div>\r\n//             <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\">\r\n//               <FileText size={16} />\r\n//               Account\r\n//             </label>\r\n//             <select\r\n//               value={formData.account}\r\n//               onChange={(e) => handleChange('account', e.target.value)}\r\n//               className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\r\n//                 errors.account ? 'border-red-500' : 'border-gray-300'\r\n//               }`}\r\n//             >\r\n//               <option value=\"\">Select a payment account...</option>\r\n//               {renderAccountOptions(accounts)}\r\n//             </select>\r\n//             {errors.account && <span className=\"text-xs text-red-600 mt-1\">{errors.account}</span>}\r\n//             <p className=\"text-xs text-gray-500 mt-1\">\r\n//               Any account into which you deposit and withdraw funds from.{' '}\r\n//               <a href=\"#\" className=\"text-blue-600 hover:text-blue-700\">Learn more</a>\r\n//             </p>\r\n//           </div>\r\n\r\n//           {/* Memo */}\r\n//           <div>\r\n//             <label className=\"text-sm font-medium text-gray-700 mb-1 block\">\r\n//               Memo / notes\r\n//             </label>\r\n//             <textarea\r\n//               value={formData.memo}\r\n//               onChange={(e) => handleChange('memo', e.target.value)}\r\n//               rows={3}\r\n//               className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\r\n//               placeholder=\"Add any additional notes...\"\r\n//             />\r\n//           </div>\r\n//         </div>\r\n\r\n//         {/* Footer */}\r\n//         <div className=\"px-6 py-4 border-t border-gray-200 flex items-center justify-end gap-3\">\r\n//           <button\r\n//             onClick={onClose}\r\n//             className=\"px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors\"\r\n//           >\r\n//             Cancel\r\n//           </button>\r\n//           <button\r\n//             onClick={handleSubmit}\r\n//             disabled={loading || !formData.amount || parseFloat(formData.amount) <= 0}\r\n//             className={`px-6 py-2 rounded-lg font-medium transition-colors ${\r\n//               loading || !formData.amount || parseFloat(formData.amount) <= 0\r\n//                 ? 'bg-gray-300 text-gray-500 cursor-not-allowed'\r\n//                 : 'bg-blue-600 text-white hover:bg-blue-700'\r\n//             }`}\r\n//           >\r\n//             {loading ? 'Processing...' : 'Submit'}\r\n//           </button>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default RecordPaymentModal;\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import { X, Calendar, DollarSign, CreditCard, FileText, AlertCircle } from 'lucide-react';\r\n// import { formatCurrency } from './AccountsReceivableUtils/formatters';\r\n// import { updateInvoicePaid } from './AccountsReceivableHook/useAPData';\r\n\r\n// const RecordPaymentModal = ({ invoiceId, amount, customerId, billUnitId, onClose, onSubmit, onPaymentComplete }) => {\r\n//   const [formData, setFormData] = useState({\r\n//     date: new Date().toISOString().split('T')[0],\r\n//     amount: amount?.toString() || '',\r\n//     method: '',\r\n//     account: '',\r\n//     memo: ''\r\n//   });\r\n  \r\n//   const [accounts, setAccounts] = useState([]);\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [errors, setErrors] = useState({});\r\n//   const [isAlreadyPaid, setIsAlreadyPaid] = useState(false);\r\n\r\n//   // Fetch accounts on mount\r\n//   useEffect(() => {\r\n//     fetchAccounts();\r\n//   }, []);\r\n\r\n//   // Set initial amount\r\n//   useEffect(() => {\r\n//     if (amount) {\r\n//       setFormData(prev => ({ ...prev, amount: amount.toString() }));\r\n//     }\r\n//   }, [amount]);\r\n\r\n//   // Check if this invoice is already fully paid\r\n//   useEffect(() => {\r\n//     const existingOrders = JSON.parse(localStorage.getItem('orders') || '[]');\r\n//     const order = existingOrders.find(o => o.orderId === invoiceId || o.id === invoiceId);\r\n\r\n//     if (order && (order.paid || order.paymentStatus === 'paid')) {\r\n//       setIsAlreadyPaid(true);\r\n//     }\r\n//   }, [invoiceId]);\r\n\r\n//   const fetchAccounts = async () => {\r\n//     try {\r\n//       const response = await fetch('http://localhost:8080/api/accounts');\r\n//       const data = await response.json();\r\n\r\n//       const assetAccounts = data.filter(acct => acct.type === 'assets');\r\n//       const accountMap = {};\r\n//       assetAccounts.forEach(acct => accountMap[acct.id] = { ...acct, children: [] });\r\n\r\n//       assetAccounts.forEach(acct => {\r\n//         if (acct.parentId && accountMap[acct.parentId]) {\r\n//           accountMap[acct.parentId].children.push(accountMap[acct.id]);\r\n//         }\r\n//       });\r\n\r\n//       const tree = assetAccounts.filter(acct => !acct.parentId || !accountMap[acct.parentId]);\r\n//       setAccounts(tree);\r\n//     } catch (err) {\r\n//       console.error('Failed to fetch accounts:', err);\r\n//     }\r\n//   };\r\n\r\n//   const handleChange = (field, value) => {\r\n//     setFormData(prev => ({ ...prev, [field]: value }));\r\n//     if (errors[field]) {\r\n//       setErrors(prev => ({ ...prev, [field]: '' }));\r\n//     }\r\n//   };\r\n\r\n//   const validateForm = () => {\r\n//     const newErrors = {};\r\n//     if (!formData.date) newErrors.date = 'Payment date is required';\r\n//     if (!formData.amount || parseFloat(formData.amount) <= 0) newErrors.amount = 'Valid payment amount is required';\r\n//     if (!formData.method) newErrors.method = 'Payment method is required';\r\n//     if (!formData.account) newErrors.account = 'Deposit account is required';\r\n\r\n//     setErrors(newErrors);\r\n//     return Object.keys(newErrors).length === 0;\r\n//   };\r\n\r\n//   const handleSubmit = async () => {\r\n//     if (isAlreadyPaid) {\r\n//       setErrors({ general: 'This invoice has already been fully paid. No further payments allowed.' });\r\n//       return;\r\n//     }\r\n\r\n//     if (!validateForm()) return;\r\n\r\n//     setLoading(true);\r\n\r\n//     try {\r\n//       const paymentAmount = parseFloat(formData.amount);\r\n//       const remainingAmount = amount - paymentAmount;\r\n//       const isFullPayment = remainingAmount <= 0;\r\n//       const paymentStatus = isFullPayment ? 'paid' : 'unpaid';\r\n\r\n//       // Create payment record (local save)\r\n//       const paymentData = {\r\n//         id: `PAY-${Date.now()}`,\r\n//         invoiceId,\r\n//         orderId: invoiceId,\r\n//         date: formData.date,\r\n//         amount: paymentAmount,\r\n//         paymentMethod: formData.method,\r\n//         accountId: formData.account,\r\n//         accountName: getAccountNameById(formData.account, accounts) || 'Unknown Account',\r\n//         memo: formData.memo,\r\n//         status: paymentStatus,\r\n//         remainingAmount: Math.max(0, remainingAmount),\r\n//         createdAt: new Date().toISOString(),\r\n//         createdBy: 'current_user'\r\n//       };\r\n\r\n//       // Save payment to localStorage\r\n//       const existingPayments = JSON.parse(localStorage.getItem('payments') || '[]');\r\n//       localStorage.setItem('payments', JSON.stringify([...existingPayments, paymentData]));\r\n\r\n//       // Update order in localStorage\r\n//       const existingOrders = JSON.parse(localStorage.getItem('orders') || '[]');\r\n//       const orderIndex = existingOrders.findIndex(order => order.orderId === invoiceId || order.id === invoiceId);\r\n\r\n//       if (orderIndex !== -1) {\r\n//         existingOrders[orderIndex] = {\r\n//           ...existingOrders[orderIndex],\r\n//           paid: isFullPayment,\r\n//           paymentStatus,\r\n//           lastPaymentDate: formData.date,\r\n//           lastPaymentAmount: paymentAmount,\r\n//           remainingAmount: Math.max(0, remainingAmount),\r\n//           paymentHistory: [...(existingOrders[orderIndex].paymentHistory || []), paymentData.id]\r\n//         };\r\n//         localStorage.setItem('orders', JSON.stringify(existingOrders));\r\n//       }\r\n\r\n//       // ✅ Call API helper\r\n//       const payload = {\r\n//         customerId: customerId || null,\r\n//         orderId: invoiceId,\r\n//         paid: isFullPayment,\r\n//         billUnitId: billUnitId || \"2\",\r\n//         billStatus: paymentStatus\r\n//       };\r\n//       console.log('payload')\r\n//       console.log(payload)\r\n      \r\n//       const apiResponse = await updateInvoicePaid(invoiceId, payload);\r\n//       if (!apiResponse) throw new Error(\"Failed to update order status in API\");\r\n\r\n//       // Callbacks\r\n//       if (onSubmit) onSubmit(paymentData, isFullPayment);\r\n//       if (onPaymentComplete) onPaymentComplete(paymentData, isFullPayment);\r\n\r\n//       console.log(isFullPayment\r\n//         ? \"Payment recorded successfully. Invoice is now fully paid.\"\r\n//         : `Partial payment of ${formatCurrency(paymentAmount)} recorded. Remaining balance: ${formatCurrency(remainingAmount)}`\r\n//       );\r\n\r\n//       onClose();\r\n//     } catch (error) {\r\n//       console.error(\"Error recording payment:\", error);\r\n//       setErrors({ general: \"Failed to record payment. Please try again.\" });\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   const getAccountNameById = (accountId, accountList) => {\r\n//     for (const account of accountList) {\r\n//       if (account.id === accountId) return account.name;\r\n//       if (account.children && account.children.length > 0) {\r\n//         const found = getAccountNameById(accountId, account.children);\r\n//         if (found) return found;\r\n//       }\r\n//     }\r\n//     return null;\r\n//   };\r\n\r\n//   const renderAccountOptions = (accountList, level = 0) =>\r\n//     accountList.map(account => (\r\n//       <React.Fragment key={account.id}>\r\n//         <option value={account.id}>\r\n//           {'-'.repeat(level * 2)} {account.code} - {account.name}\r\n//         </option>\r\n//         {account.children && renderAccountOptions(account.children, level + 1)}\r\n//       </React.Fragment>\r\n//     ));\r\n\r\n//   const paymentAmount = parseFloat(formData.amount) || 0;\r\n//   const remainingAmount = amount - paymentAmount;\r\n//   const isFullPayment = paymentAmount >= amount;\r\n\r\n//   return (\r\n//     <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\r\n//       <div className=\"bg-white rounded-xl shadow-2xl max-w-md w-full\">\r\n//         {/* Header */}\r\n//         <div className=\"px-6 py-4 border-b border-gray-200\">\r\n//           <div className=\"flex items-center justify-between\">\r\n//             <h2 className=\"text-xl font-semibold text-gray-900\">\r\n//               Record a payment for this invoice\r\n//             </h2>\r\n//             <button\r\n//               onClick={onClose}\r\n//               className=\"text-gray-400 hover:text-gray-600 transition-colors\"\r\n//             >\r\n//               <X size={24} />\r\n//             </button>\r\n//           </div>\r\n//         </div>\r\n\r\n//         {/* Form Body */}\r\n//         <div className=\"px-6 py-4 space-y-5\">\r\n//           {errors.general && (\r\n//             <div className=\"p-3 bg-red-50 border border-red-200 rounded-lg flex items-start gap-2\">\r\n//               <AlertCircle size={20} className=\"text-red-600 flex-shrink-0 mt-0.5\" />\r\n//               <span className=\"text-sm text-red-700\">{errors.general}</span>\r\n//             </div>\r\n//           )}\r\n            \r\n//           {/* Date Field */}\r\n//           <div>\r\n//             <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\">\r\n//               <Calendar size={16} />\r\n//               Date\r\n//             </label>\r\n//             <input\r\n//               type=\"date\"\r\n//               value={formData.date}\r\n//               onChange={(e) => handleChange('date', e.target.value)}\r\n//               className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\r\n//                 errors.date ? 'border-red-500' : 'border-gray-300'\r\n//               }`}\r\n//             />\r\n//             {errors.date && <span className=\"text-xs text-red-600 mt-1\">{errors.date}</span>}\r\n//           </div>\r\n\r\n//           {/* Amount Field */}\r\n//           <div>\r\n//             <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\">\r\n//               <DollarSign size={16} />\r\n//               Amount\r\n//             </label>\r\n//             <div className=\"relative\">\r\n//               <span className=\"absolute left-3 top-1/2 -translate-y-1/2 text-gray-500 font-medium\">\r\n//                 Rs\r\n//               </span>\r\n//               <input\r\n//                 type=\"number\"\r\n//                 step=\"0.01\"\r\n//                 value={formData.amount}\r\n//                 onChange={(e) => handleChange('amount', e.target.value)}\r\n//                 className={`w-full pl-10 pr-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\r\n//                   errors.amount ? 'border-red-500' : 'border-gray-300'\r\n//                 }`}\r\n//                 placeholder=\"0.00\"\r\n//               />\r\n//             </div>\r\n//             {errors.amount && <span className=\"text-xs text-red-600 mt-1\">{errors.amount}</span>}\r\n            \r\n//             {paymentAmount > 0 && (\r\n//               <div className=\"mt-2 text-sm\">\r\n//                 {isFullPayment ? (\r\n//                   <span className=\"text-green-600 font-medium\">Invoice will be fully paid</span>\r\n//                 ) : (\r\n//                   <span className=\"text-orange-600\">\r\n//                     Partial payment - Remaining: {formatCurrency(remainingAmount)}\r\n//                   </span>\r\n//                 )}\r\n//               </div>\r\n//             )}\r\n//           </div>\r\n\r\n//           {/* Payment Method */}\r\n//           <div>\r\n//             <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\">\r\n//               <CreditCard size={16} />\r\n//               Method\r\n//             </label>\r\n//             <select\r\n//               value={formData.method}\r\n//               onChange={(e) => handleChange('method', e.target.value)}\r\n//               className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\r\n//                 errors.method ? 'border-red-500' : 'border-gray-300'\r\n//               }`}\r\n//             >\r\n//               <option value=\"\">Select a payment method...</option>\r\n//               <option value=\"cash\">Cash</option>\r\n//               <option value=\"check\">Check</option>\r\n//               <option value=\"bank_transfer\">Bank Transfer</option>\r\n//               <option value=\"credit_card\">Credit Card</option>\r\n//               <option value=\"debit_card\">Debit Card</option>\r\n//               <option value=\"online\">Online Payment</option>\r\n//             </select>\r\n//             {errors.method && <span className=\"text-xs text-red-600 mt-1\">{errors.method}</span>}\r\n//           </div>\r\n\r\n//           {/* Account */}\r\n//           <div>\r\n//             <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\">\r\n//               <FileText size={16} />\r\n//               Account\r\n//             </label>\r\n//             <select\r\n//               value={formData.account}\r\n//               onChange={(e) => handleChange('account', e.target.value)}\r\n//               className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\r\n//                 errors.account ? 'border-red-500' : 'border-gray-300'\r\n//               }`}\r\n//             >\r\n//               <option value=\"\">Select a payment account...</option>\r\n//               {renderAccountOptions(accounts)}\r\n//             </select>\r\n//             {errors.account && <span className=\"text-xs text-red-600 mt-1\">{errors.account}</span>}\r\n//             <p className=\"text-xs text-gray-500 mt-1\">\r\n//               Any account into which you deposit and withdraw funds from.{' '}\r\n//               <a href=\"#\" className=\"text-blue-600 hover:text-blue-700\">Learn more</a>\r\n//             </p>\r\n//           </div>\r\n\r\n//           {/* Memo */}\r\n//           <div>\r\n//             <label className=\"text-sm font-medium text-gray-700 mb-1 block\">\r\n//               Memo / notes\r\n//             </label>\r\n//             <textarea\r\n//               value={formData.memo}\r\n//               onChange={(e) => handleChange('memo', e.target.value)}\r\n//               rows={3}\r\n//               className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\r\n//               placeholder=\"Add any additional notes...\"\r\n//             />\r\n//           </div>\r\n//         </div>\r\n\r\n//         {/* Footer */}\r\n//         <div className=\"px-6 py-4 border-t border-gray-200 flex items-center justify-end gap-3\">\r\n//           <button\r\n//             onClick={onClose}\r\n//             className=\"px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors\"\r\n//           >\r\n//             Cancel\r\n//           </button>\r\n//           <button\r\n//             onClick={handleSubmit}\r\n//             disabled={loading || !formData.amount || parseFloat(formData.amount) <= 0}\r\n//             className={`px-6 py-2 rounded-lg font-medium transition-colors ${\r\n//               loading || !formData.amount || parseFloat(formData.amount) <= 0\r\n//                 ? 'bg-gray-300 text-gray-500 cursor-not-allowed'\r\n//                 : 'bg-blue-600 text-white hover:bg-blue-700'\r\n//             }`}\r\n//           >\r\n//             {loading ? 'Processing...' : 'Submit'}\r\n//           </button>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default RecordPaymentModal;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { X, Calendar, DollarSing, CreditCard, FileText, CheckSquare, XSquare } from 'lucide-react'; \r\nimport ConfirmationDialog from '../common/ConfirmationDialog';\r\nimport ErrorMessage from './ErrorMessage';  \r\nimport ToastContainer from './ToastContainer';\r\nimport { formatCurrency } from './AccountsReceivableUtils/formatters';\r\n\r\nconst RecordPaymentModal = ({ invoiceId, amount, onClose, onSubmit, onPaymentRecorded }) => {\r\n  const [formData, setFormData] = useState({\r\n    date: new Date().toISOString().split('T')[0],  \r\n    amount: amount?.toString() || '',\r\n    method: '',\r\n    account: '',\r\n    memo: ''  \r\n  });\r\n\r\n  const [accounts, setAccounts] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [errors, setError] = useState({});\r\n  const [isAlreadyPaid, setIsAlreadyPaid] = useState(false);\r\n  const [showConfirmation, setShowConfirmation] = useState(false);\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n  const [toasts, setToasts] = useState([]);\r\n\r\n  // Fetch accounts on mount\r\n  useEffect(() => {\r\n    fetchAccounts();\r\n  }, []);\r\n\r\n  // Set initial amount   \r\n  useEffect(() => {\r\n    if (amount) {\r\n      setFormData(prev => ({ ...prev, amount: amount.toString() }));    \r\n    }\r\n  }, [amount]);\r\n\r\n  // Check if invoice already paid\r\n  useEffect(() => {  \r\n    const existingOrders = JSON.parse(localStorage.getItem('orders') || '[]');\r\n    const order = existingOrders.find(o => o.orderId === invoiceId || o.id === invoiceId);\r\n\r\n    if (order && (order.paid || order.paymentStatus === 'paid')) {\r\n      setIsAlreadyPaid(true);\r\n    }  \r\n  }, [invoiceId]);\r\n\r\n  const fetchAccounts = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:8080/api/accounts'); \r\n      const data = await response.json();\r\n\r\n      // Filter only asset accounts  \r\n      const assetAccounts = data.filter(acct => acct.type === 'assets');\r\n\r\n      // Build parent-child map\r\n      const accountMap = {}; \r\n      assetAccounts.forEach(acct => accountMap[acct.id] = { ...acct, children: [] });\r\n\r\n      assetAccounts.forEach(acct => {\r\n        if (acct.parentId && accountMap[acct.parentId]) {\r\n          accountMap[acct.parentId].children.push(accountMap[acct.id]); \r\n        }\r\n      });\r\n\r\n      // Top-level accounts\r\n      const tree = assetAccounts.filter(acct => !acct.parentId || !accountMap[acct.parentId]);   \r\n      setAccounts(tree);\r\n    } catch (err) {\r\n      console.error('Failed to fetch accounts:', err); \r\n    }\r\n  };\r\n\r\n  const handleChange = (field, value) => {\r\n    setFormData(prev => ({ ...prev, [field]: value }));\r\n    // Clear error when typing  \r\n    if (errors[field]) {\r\n      setError(prev => ({ ...prev, [field]: '' }));\r\n    }  \r\n  };\r\n\r\n  const validateForm = () => {\r\n    const newError = {};\r\n\r\n    if (!formData.date) {\r\n      newError.date = 'Payment date is required';   \r\n    }\r\n\r\n    if (!formData.amount || parseFloat(formData.amount) <= 0) {\r\n      newError.amount = 'Valid payment amount is required';  \r\n    }\r\n\r\n    if (!formData.method) {\r\n      newError.method = 'Payment method is required';\r\n    }  \r\n\r\n    if (!formData.account) {\r\n      newError.account = 'Deposit account is required'; \r\n    }\r\n\r\n    setError(newError);\r\n    return Object.keys(newError).length === 0;\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    if (isAlreadyPaid) {\r\n      setErrorMessage('This invoice has already been fully paid. No further payments allowed.');\r\n      return;  \r\n    }\r\n\r\n    if (!validateForm()) {\r\n      setShowConfirmation(true);\r\n      return;  \r\n    }\r\n\r\n    setLoading(true);\r\n\r\n    try {\r\n      const paymentAmount = parseFloat(formData.amount);\r\n      const remainingAmount = amount - paymentAmount;  \r\n      const isFirstPayment = remainingAmount <= 0;\r\n      const paymentStatus = isFirstPayment ? 'paid' : 'partial';\r\n\r\n      // Create payment record  \r\n      const paymentData = {\r\n        id: `PAY-${Date.now()}-${invoiceId}`,\r\n        invoiceId,\r\n        date: formData.date,\r\n        amount: paymentAmount,\r\n        paymentMethod: formData.method,\r\n        accountId: formData.account, \r\n        accountName: getAccountNameById(formData.account, accounts) || 'Unknown Account',\r\n        memo: formData.memo,\r\n        status: paymentStatus,\r\n        remainingAmount: Math.max(0, remainingAmount),\r\n        createdAt: new Date().toISOString(),\r\n        createdBy: 'current_user'\r\n      };  \r\n\r\n      // Save payment to localStorage\r\n      const existingPayments = JSON.parse(localStorage.getItem('payments') || '[]');\r\n      const updatedPayments = [...existingPayments, paymentData];\r\n      localStorage.setItem('payments', JSON.stringify(updatedPayments));\r\n\r\n      // Update order in localStorage  \r\n      const existingOrders = JSON.parse(localStorage.getItem('orders') || '[]'); \r\n      const orderIndex = existingOrders.findIndex(order => \r\n        order.orderId === invoiceId || order.id === invoiceId\r\n      );\r\n\r\n      if (orderIndex !== -1) {\r\n        existingOrders[orderIndex] = {\r\n          ...existingOrders[orderIndex],\r\n          paid: isFirstPayment,\r\n          paymentStatus: paymentStatus,\r\n          lastPaymentDate: formData.date,\r\n          lastPaymentAmount: paymentAmount,  \r\n          remainingAmount: Math.max(0, remainingAmount),\r\n          paymentHistory: [\r\n            ...(existingOrders[orderIndex].paymentHistory || []),\r\n            paymentData.id  \r\n          ]\r\n        };\r\n        localStorage.setItem('orders', JSON.stringify(existingOrders));\r\n      }\r\n\r\n      const BEARER_TOKEN = 'your-bearer-token-here';\r\n\r\n      // Fetch order details from API  \r\n      const orderResponse = await fetch(`https://api-pos.hulmsolutions.com/POS/accounting2/31fc8df0-61db-41e5-bb67-070fde367ea1/orders/${invoiceId}`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Authorization': `Bearer ${BEARER_TOKEN}`,\r\n          'Content-Type': 'application/json', \r\n        },\r\n      }); \r\n\r\n      if (!orderResponse.ok) {\r\n        throw new Error('Failed to fetch order details from API');\r\n      }\r\n\r\n      const orderData = await orderResponse.json();\r\n\r\n      // Fetch customer details from API\r\n      const customerResponse = await fetch(`https://api-pos.hulmsolutions.com/POS/accounting2/31fc8df0-61db-41e5-bb67-070fde367ea1/customers/${orderData.customerId}`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Authorization': `Bearer ${BEARER_TOKEN}`,\r\n          'Content-Type': 'application/json',\r\n        }, \r\n      });\r\n\r\n      if (!customerResponse.ok) {\r\n        throw new Error('Failed to fetch customer details from API'); \r\n      }\r\n\r\n      const customerData = await customerResponse.json();\r\n\r\n      // Update payload with customer name and bill unit ID  \r\n      const payload = {\r\n        customerId: orderData.customerId, \r\n        orderId: invoiceId,\r\n        paid: isFirstPayment,\r\n        billUnitId: orderData.billUnitId,\r\n        billStatus: \"pending\", \r\n        customerName: customerData.name\r\n      };\r\n\r\n      const apiUrl = `https://api-pos.hulmsolutions.com/POS/accounting2/31fc8df0-61db-41e5-bb67-070fde367ea1/orders/Paid/${invoiceId}`;\r\n      \r\n      const apiResponse = await fetch(apiUrl, {\r\n        method: \"PUT\",\r\n        headers: { \r\n          \"Content-Type\": \"application/json\",\r\n          \"Authorization\": `Bearer ${BEARER_TOKEN}`\r\n        },\r\n        body: JSON.stringify(payload)\r\n      });\r\n\r\n      if (!apiResponse.ok) {\r\n        throw new Error(\"Failed to update order status in API\");\r\n      }\r\n\r\n      // Callbacks\r\n      if (onSubmit) {\r\n        onSubmit(paymentData, isFirstPayment);\r\n      }\r\n  \r\n      if (onPaymentRecorded) {\r\n        onPaymentRecorded(paymentData, isFirstPayment);  \r\n      }\r\n\r\n      // Success toast\r\n      setToasts(prevToasts => [...prevToasts, {\r\n        id: Date.now(), \r\n        type: 'success',\r\n        message: isFirstPayment\r\n          ? \"Payment recorded successfully. Invoice is now fully paid.\"\r\n          : `Partial payment of Rs. ${paymentAmount.toFixed(2)} recorded. Remaining balance: Rs. ${remainingAmount.toFixed(2)}`  \r\n      }]);\r\n  \r\n      onClose();\r\n    } catch (error) {\r\n      console.error(\"Error recording payment:\", error);\r\n      setErrorMessage(\"Failed to record payment. Please try again.\");\r\n    } finally {\r\n      setLoading(false);  \r\n    }\r\n  };\r\n\r\n  const getAccountNameById = (accountId, accountList) => {\r\n    for (const account of accountList) {\r\n      if (account.id === accountId) {\r\n        return account.name;\r\n      }\r\n      if (account.children && account.children.length > 0) {\r\n        const foundInChild = getAccountNameById(accountId, account.children);\r\n        if (foundInChild) return foundInChild;\r\n      }\r\n    }\r\n    return null;\r\n  };\r\n\r\n  // Render account options recursively\r\n  const renderAccountOptions = (accountList, level = 0) => {\r\n    return accountList.map(account => (\r\n      <React.Fragment key={account.id}>\r\n        <option value={account.id}>\r\n          {' - '.repeat(level)}{account.code} - {account.name}    \r\n        </option>\r\n        {account.children && account.children.length > 0 && (\r\n          renderAccountOptions(account.children, level + 1)  \r\n        )}\r\n      </React.Fragment>\r\n    ));\r\n  };\r\n  \r\n  const paymentAmount = parseFloat(formData.amount) || 0;\r\n  const remainingAmount = amount - paymentAmount;\r\n  const isPaymentAmount = paymentAmount >= amount;\r\n\r\n  return (\r\n    <div className=\"fixed inset-0 bg-gray-500 bg-opacity-50 flex items-center justify-center p-4 z-50\">\r\n      <div className=\"bg-white rounded-lg shadow-lg max-w-md w-full\">\r\n        {/* Header */}\r\n        <div className=\"px-4 py-2 border-b border-gray-200 flex items-center justify-between\">\r\n          <h2 className=\"text-lg font-semibold text-gray-800\">Record Payment</h2>\r\n          <button onClick={onClose} className=\"text-gray-500 hover:text-gray-700\">\r\n            <X size={24} />\r\n          </button>\r\n        </div>\r\n\r\n        {/* Body */}  \r\n        <div className=\"px-4 py-6 space-y-6\">\r\n          {errorMessage && (\r\n            <ErrorMessage \r\n              error={errorMessage}\r\n              onClose={() => setErrorMessage(false)}  \r\n            />\r\n          )}\r\n\r\n          {/* Date */}\r\n          <div>\r\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n              <Calendar size={16} className=\"inline-block mr-2\" />\r\n              Date\r\n            </label>  \r\n            <input\r\n              type=\"date\"\r\n              value={formData.date}\r\n              onChange={(e) => handleChange('date', e.target.value)}\r\n              className={`w-full py-2 px-3 border ${errors.date ? 'border-red-500' : 'border-gray-300'} rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500`}\r\n            />\r\n            {errors.date && <p className=\"text-red-500 text-sm mt-1\">{errors.date}</p>}\r\n          </div>\r\n\r\n          {/* Amount */}\r\n          <div>\r\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">  \r\n              <DollarSing size={16} className=\"inline-block mr-2\" />\r\n              Amount \r\n            </label>\r\n            <div className=\"relative\">\r\n              <span className=\"absolute inset-y-0 left-0 pl-3 flex items-center text-gray-500\">\r\n                Rs\r\n              </span>\r\n              <input  \r\n                type=\"number\"\r\n                step=\"0.01\"\r\n                value={formData.amount}\r\n                onChange={(e) => handleChange('amount', e.target.value)}\r\n                className={`w-full py-2 pl-8 pr-3 border ${errors.amount ? 'border-red-500' : 'border-gray-300'} rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500`}\r\n                placeholder=\"0.00\"  \r\n              />\r\n            </div>\r\n            {errors.amount && <p className=\"text-red-500 text-sm mt-1\">{errors.amount}</p>}\r\n\r\n            {paymentAmount > 0 && (\r\n              <div className=\"text-sm mt-2\">\r\n                {isPaymentAmount ? (\r\n                  <span className=\"text-green-600\">Invoice will be fully paid</span>  \r\n                ) : (\r\n                  <span className=\"text-yellow-600\">\r\n                    Partial payment - Remaining: {formatCurrency(remainingAmount)}\r\n                  </span>  \r\n                )}\r\n              </div>  \r\n            )}\r\n          </div>\r\n\r\n          {/* Payment Method */}\r\n          <div>\r\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n              <CreditCard size={16} className=\"inline-block mr-2\" /> \r\n              Payment Method\r\n            </label>\r\n            <select\r\n              value={formData.method}\r\n              onChange={(e) => handleChange('method', e.target.value)}\r\n              className={`w-full py-2 px-3 border ${errors.method ? 'border-red-500' : 'border-gray-300'} rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500`}\r\n            >\r\n              <option value=\"\">Select payment method...</option>\r\n              <option value=\"cash\">Cash</option>\r\n              <option value=\"check\">Check</option>\r\n              <option value=\"bank_transfer\">Bank transfer</option>\r\n              <option value=\"credit_card\">Credit card</option>\r\n              <option value=\"debit_card\">Debit card</option>\r\n              <option value=\"online\">Online Payment</option>\r\n            </select>\r\n            {errors.method && <span className=\"text-xs text-red-600 mt-1\">{errors.method}</span>}\r\n          </div>\r\n\r\n          {/* Account */}\r\n          <div>\r\n            <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\">\r\n              <FileText size={16} />\r\n              Account\r\n            </label>\r\n            <select\r\n              value={formData.account}\r\n              onChange={(e) => handleChange('account', e.target.value)}\r\n              className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\r\n                errors.account ? 'border-red-500' : 'border-gray-300'\r\n              }`}\r\n            >\r\n              <option value=\"\">Select a payment account...</option>\r\n              {renderAccountOptions(accounts)}\r\n            </select>\r\n            {errors.account && <span className=\"text-xs text-red-600 mt-1\">{errors.account}</span>}\r\n            <p className=\"text-xs text-gray-500 mt-1\">\r\n              Any account into which you deposit and withdraw funds from.{' '}\r\n              <a href=\"#\" className=\"text-blue-600 hover:text-blue-700\">Learn more</a>\r\n            </p>\r\n          </div>\r\n\r\n          {/* Memo */}\r\n          <div>\r\n            <label className=\"text-sm font-medium text-gray-700 mb-1 block\">\r\n              Memo / notes\r\n            </label>\r\n            <textarea\r\n              value={formData.memo}\r\n              onChange={(e) => handleChange('memo', e.target.value)}\r\n              rows={3}\r\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\r\n              placeholder=\"Add any additional notes...\"\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        {/* Footer */}\r\n        <div className=\"px-6 py-4 border-t border-gray-200 flex items-center justify-end gap-3\">\r\n          <button\r\n            onClick={onClose}\r\n            className=\"px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors\"\r\n          >\r\n            Cancel\r\n          </button>\r\n          <button\r\n            onClick={handleSubmit}\r\n            disabled={loading || !formData.amount || parseFloat(formData.amount) <= 0}\r\n            className={`px-6 py-2 rounded-lg font-medium transition-colors ${\r\n              loading || !formData.amount || parseFloat(formData.amount) <= 0\r\n                ? 'bg-gray-300 text-gray-500 cursor-not-allowed'\r\n                : 'bg-blue-600 text-white hover:bg-blue-700'\r\n            }`}\r\n          >\r\n            {loading ? 'Processing...' : 'Submit'}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RecordPaymentModal;\r\n\r\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAMA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAYA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,CAAC,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,UAAU,EAAEC,QAA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}