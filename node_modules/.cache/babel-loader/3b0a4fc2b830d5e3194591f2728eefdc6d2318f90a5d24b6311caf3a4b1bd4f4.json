{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback } from 'react';\nimport { API_CONFIG } from '../utils/apiConfig';\nimport { flattenAccounts } from '../utils/accountHelpers';\nexport const useGeneralLedgerData = () => {\n  _s();\n  const [accounts, setAccounts] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const loadChartsOfAccounts = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(API_CONFIG.CHARTS_OF_ACCOUNTS, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`Failed to fetch accounts: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('Raw accounts data from API:', data);\n      if (!Array.isArray(data)) {\n        throw new Error('API response is not an array');\n      }\n      const allAccounts = flattenAccounts(data);\n      console.log('All flattened accounts:', allAccounts.length);\n      const usableAccounts = allAccounts.filter(account => account.category === 'account' && account.id && account.code && account.name && account.type);\n      console.log('Usable accounts (category=account):', usableAccounts.length);\n      if (usableAccounts.length === 0) {\n        console.log('No usable accounts found, using fallback');\n        throw new Error('No usable accounts returned from API');\n      }\n      usableAccounts.sort((a, b) => a.code.localeCompare(b.code));\n      setAccounts(usableAccounts);\n      setLoading(false);\n      console.log(`Successfully loaded ${usableAccounts.length} accounts from API`);\n      return usableAccounts;\n    } catch (error) {\n      console.error('Error loading charts of accounts:', error);\n      setError(error.message);\n      setLoading(false);\n      console.log('Using fallback chart of accounts');\n      setAccounts([]);\n      return [];\n    }\n  }, []);\n  return {\n    accounts,\n    loading,\n    error,\n    loadChartsOfAccounts\n  };\n};\n_s(useGeneralLedgerData, \"C+07IEPb8IH0DhwckeFl19Igvpc=\");","map":{"version":3,"names":["useState","useCallback","API_CONFIG","flattenAccounts","useGeneralLedgerData","_s","accounts","setAccounts","loading","setLoading","error","setError","loadChartsOfAccounts","response","fetch","CHARTS_OF_ACCOUNTS","method","headers","ok","Error","status","data","json","console","log","Array","isArray","allAccounts","length","usableAccounts","filter","account","category","id","code","name","type","sort","a","b","localeCompare","message"],"sources":["C:/Users/Logic-Unit/my-account/src/hooks/useGeneralLedgerData.js"],"sourcesContent":["import { useState, useCallback } from 'react';\r\nimport { API_CONFIG } from '../utils/apiConfig';\r\nimport { flattenAccounts } from '../utils/accountHelpers';\r\n\r\nexport const useGeneralLedgerData = () => {\r\n  const [accounts, setAccounts] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const loadChartsOfAccounts = useCallback(async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const response = await fetch(API_CONFIG.CHARTS_OF_ACCOUNTS, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`Failed to fetch accounts: ${response.status}`);\r\n      }\r\n      \r\n      const data = await response.json();\r\n      console.log('Raw accounts data from API:', data);\r\n      \r\n      if (!Array.isArray(data)) {\r\n        throw new Error('API response is not an array');\r\n      }\r\n      \r\n      const allAccounts = flattenAccounts(data);\r\n      console.log('All flattened accounts:', allAccounts.length);\r\n      \r\n      const usableAccounts = allAccounts.filter(account => \r\n        account.category === 'account' && \r\n        account.id && \r\n        account.code && \r\n        account.name && \r\n        account.type\r\n      );\r\n      \r\n      console.log('Usable accounts (category=account):', usableAccounts.length);\r\n      \r\n      if (usableAccounts.length === 0) {\r\n        console.log('No usable accounts found, using fallback');\r\n        throw new Error('No usable accounts returned from API');\r\n      }\r\n      \r\n      usableAccounts.sort((a, b) => a.code.localeCompare(b.code));\r\n      \r\n      setAccounts(usableAccounts);\r\n      setLoading(false);\r\n      \r\n      console.log(`Successfully loaded ${usableAccounts.length} accounts from API`);\r\n      return usableAccounts;\r\n      \r\n    } catch (error) {\r\n      console.error('Error loading charts of accounts:', error);\r\n      setError(error.message);\r\n      setLoading(false);\r\n      \r\n      console.log('Using fallback chart of accounts');\r\n      setAccounts([]);\r\n      return [];\r\n    }\r\n  }, []);\r\n\r\n  return {\r\n    accounts,\r\n    loading,\r\n    error,\r\n    loadChartsOfAccounts\r\n  };\r\n};"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AAC7C,SAASC,UAAU,QAAQ,oBAAoB;AAC/C,SAASC,eAAe,QAAQ,yBAAyB;AAEzD,OAAO,MAAMC,oBAAoB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxC,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAExC,MAAMY,oBAAoB,GAAGX,WAAW,CAAC,YAAY;IACnDQ,UAAU,CAAC,IAAI,CAAC;IAChBE,QAAQ,CAAC,IAAI,CAAC;IAEd,IAAI;MACF,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAACZ,UAAU,CAACa,kBAAkB,EAAE;QAC1DC,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;MAEF,IAAI,CAACJ,QAAQ,CAACK,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6BN,QAAQ,CAACO,MAAM,EAAE,CAAC;MACjE;MAEA,MAAMC,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;MAClCC,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEH,IAAI,CAAC;MAEhD,IAAI,CAACI,KAAK,CAACC,OAAO,CAACL,IAAI,CAAC,EAAE;QACxB,MAAM,IAAIF,KAAK,CAAC,8BAA8B,CAAC;MACjD;MAEA,MAAMQ,WAAW,GAAGxB,eAAe,CAACkB,IAAI,CAAC;MACzCE,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEG,WAAW,CAACC,MAAM,CAAC;MAE1D,MAAMC,cAAc,GAAGF,WAAW,CAACG,MAAM,CAACC,OAAO,IAC/CA,OAAO,CAACC,QAAQ,KAAK,SAAS,IAC9BD,OAAO,CAACE,EAAE,IACVF,OAAO,CAACG,IAAI,IACZH,OAAO,CAACI,IAAI,IACZJ,OAAO,CAACK,IACV,CAAC;MAEDb,OAAO,CAACC,GAAG,CAAC,qCAAqC,EAAEK,cAAc,CAACD,MAAM,CAAC;MAEzE,IAAIC,cAAc,CAACD,MAAM,KAAK,CAAC,EAAE;QAC/BL,OAAO,CAACC,GAAG,CAAC,0CAA0C,CAAC;QACvD,MAAM,IAAIL,KAAK,CAAC,sCAAsC,CAAC;MACzD;MAEAU,cAAc,CAACQ,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACJ,IAAI,CAACM,aAAa,CAACD,CAAC,CAACL,IAAI,CAAC,CAAC;MAE3D3B,WAAW,CAACsB,cAAc,CAAC;MAC3BpB,UAAU,CAAC,KAAK,CAAC;MAEjBc,OAAO,CAACC,GAAG,CAAC,uBAAuBK,cAAc,CAACD,MAAM,oBAAoB,CAAC;MAC7E,OAAOC,cAAc;IAEvB,CAAC,CAAC,OAAOnB,KAAK,EAAE;MACda,OAAO,CAACb,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;MACzDC,QAAQ,CAACD,KAAK,CAAC+B,OAAO,CAAC;MACvBhC,UAAU,CAAC,KAAK,CAAC;MAEjBc,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;MAC/CjB,WAAW,CAAC,EAAE,CAAC;MACf,OAAO,EAAE;IACX;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IACLD,QAAQ;IACRE,OAAO;IACPE,KAAK;IACLE;EACF,CAAC;AACH,CAAC;AAACP,EAAA,CAvEWD,oBAAoB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}