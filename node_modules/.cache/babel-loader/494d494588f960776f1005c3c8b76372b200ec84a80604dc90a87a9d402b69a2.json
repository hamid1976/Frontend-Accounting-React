{"ast":null,"code":"// Helper function to flatten hierarchical account structure\nexport const flattenAccounts = accounts => {\n  const result = [];\n  const processAccount = account => {\n    result.push(account);\n    if (account.children && Array.isArray(account.children)) {\n      account.children.forEach(child => processAccount(child));\n    }\n  };\n  accounts.forEach(account => processAccount(account));\n  return result;\n};\n\n// Find account by type\nexport const findAccountByType = (accountsList, type, preferredId = null) => {\n  if (preferredId) {\n    const specificAccount = accountsList.find(acc => acc.id === preferredId);\n    if (specificAccount) return specificAccount;\n  }\n  const matchingAccount = accountsList.find(acc => acc.type && acc.type.toLowerCase() === type.toLowerCase());\n  if (matchingAccount) return matchingAccount;\n  return {\n    id: 'UNKNOWN',\n    name: `Unknown ${type} Account`,\n    code: 'N/A'\n  };\n};","map":{"version":3,"names":["flattenAccounts","accounts","result","processAccount","account","push","children","Array","isArray","forEach","child","findAccountByType","accountsList","type","preferredId","specificAccount","find","acc","id","matchingAccount","toLowerCase","name","code"],"sources":["C:/Users/Logic-Unit/my-account/src/utils/accountHelpers.js"],"sourcesContent":["// Helper function to flatten hierarchical account structure\r\nexport const flattenAccounts = (accounts) => {\r\n  const result = [];\r\n  \r\n  const processAccount = (account) => {\r\n    result.push(account);\r\n    \r\n    if (account.children && Array.isArray(account.children)) {\r\n      account.children.forEach(child => processAccount(child));\r\n    }\r\n  };\r\n  \r\n  accounts.forEach(account => processAccount(account));\r\n  return result;\r\n};\r\n\r\n// Find account by type\r\nexport const findAccountByType = (accountsList, type, preferredId = null) => {\r\n  if (preferredId) {\r\n    const specificAccount = accountsList.find(acc => acc.id === preferredId);\r\n    if (specificAccount) return specificAccount;\r\n  }\r\n  \r\n  const matchingAccount = accountsList.find(acc => \r\n    acc.type && acc.type.toLowerCase() === type.toLowerCase()\r\n  );\r\n  \r\n  if (matchingAccount) return matchingAccount;\r\n  \r\n  return { \r\n    id: 'UNKNOWN', \r\n    name: `Unknown ${type} Account`, \r\n    code: 'N/A' \r\n  };\r\n};"],"mappings":"AAAA;AACA,OAAO,MAAMA,eAAe,GAAIC,QAAQ,IAAK;EAC3C,MAAMC,MAAM,GAAG,EAAE;EAEjB,MAAMC,cAAc,GAAIC,OAAO,IAAK;IAClCF,MAAM,CAACG,IAAI,CAACD,OAAO,CAAC;IAEpB,IAAIA,OAAO,CAACE,QAAQ,IAAIC,KAAK,CAACC,OAAO,CAACJ,OAAO,CAACE,QAAQ,CAAC,EAAE;MACvDF,OAAO,CAACE,QAAQ,CAACG,OAAO,CAACC,KAAK,IAAIP,cAAc,CAACO,KAAK,CAAC,CAAC;IAC1D;EACF,CAAC;EAEDT,QAAQ,CAACQ,OAAO,CAACL,OAAO,IAAID,cAAc,CAACC,OAAO,CAAC,CAAC;EACpD,OAAOF,MAAM;AACf,CAAC;;AAED;AACA,OAAO,MAAMS,iBAAiB,GAAGA,CAACC,YAAY,EAAEC,IAAI,EAAEC,WAAW,GAAG,IAAI,KAAK;EAC3E,IAAIA,WAAW,EAAE;IACf,MAAMC,eAAe,GAAGH,YAAY,CAACI,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,EAAE,KAAKJ,WAAW,CAAC;IACxE,IAAIC,eAAe,EAAE,OAAOA,eAAe;EAC7C;EAEA,MAAMI,eAAe,GAAGP,YAAY,CAACI,IAAI,CAACC,GAAG,IAC3CA,GAAG,CAACJ,IAAI,IAAII,GAAG,CAACJ,IAAI,CAACO,WAAW,CAAC,CAAC,KAAKP,IAAI,CAACO,WAAW,CAAC,CAC1D,CAAC;EAED,IAAID,eAAe,EAAE,OAAOA,eAAe;EAE3C,OAAO;IACLD,EAAE,EAAE,SAAS;IACbG,IAAI,EAAE,WAAWR,IAAI,UAAU;IAC/BS,IAAI,EAAE;EACR,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}