{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Logic-Unit\\\\my-account\\\\src\\\\components\\\\AccountsReceivable\\\\RecordPaymentModal.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import { X, Calendar, DollarSign, CreditCard, FileText, AlertCircle } from 'lucide-react';\n// import { formatCurrency } from './AccountsReceivableUtils/formatters';\n\n// const RecordPaymentModal = ({ invoiceId, amount, onClose, onSubmit, onPaymentComplete }) => {\n//   const [formData, setFormData] = useState({\n//     date: new Date().toISOString().split('T')[0],\n//     amount: amount?.toString() || '',\n//     method: '',\n//     account: '',\n//     memo: ''\n//   });\n\n//   const [accounts, setAccounts] = useState([]);\n//   const [loading, setLoading] = useState(false);\n//   const [errors, setErrors] = useState({});\n//   const [isAlreadyPaid, setIsAlreadyPaid] = useState(false); // ✅ NEW\n\n//   // Fetch accounts on mount\n//   useEffect(() => {\n//     fetchAccounts();\n//   }, []);\n\n//   // Set initial amount\n//   useEffect(() => {\n//     if (amount) {\n//       setFormData(prev => ({ ...prev, amount: amount.toString() }));\n//     }\n//   }, [amount]);\n//    // ✅ Check if this invoice is already fully paid\n//   useEffect(() => {\n//     const existingOrders = JSON.parse(localStorage.getItem('orders') || '[]');\n//     const order = existingOrders.find(o => o.orderId === invoiceId || o.id === invoiceId);\n\n//     if (order && (order.paid || order.paymentStatus === 'paid')) {\n//       setIsAlreadyPaid(true);\n//     }\n//   }, [invoiceId]);\n//   const fetchAccounts = async () => {\n//     try {\n//       const response = await fetch('http://localhost:8080/api/accounts');\n//       const data = await response.json();\n\n//       // Filter only asset accounts (like the commented code)\n//       const assetAccounts = data.filter(acct => acct.type === 'assets');\n\n//       // Build parent-child map (like the commented code)\n//       const accountMap = {};\n//       assetAccounts.forEach(acct => accountMap[acct.id] = { ...acct, children: [] });\n\n//       assetAccounts.forEach(acct => {\n//         if (acct.parentId && accountMap[acct.parentId]) {\n//           accountMap[acct.parentId].children.push(accountMap[acct.id]);\n//         }\n//       });\n\n//       // Top-level accounts (like the commented code)\n//       const tree = assetAccounts.filter(acct => !acct.parentId || !accountMap[acct.parentId]);\n//       setAccounts(tree);\n//     } catch (err) {\n//       console.error('Failed to fetch accounts:', err);\n//     }\n//   };\n\n//   const handleChange = (field, value) => {\n//     setFormData(prev => ({ ...prev, [field]: value }));\n//     // Clear error for this field when user starts typing\n//     if (errors[field]) {\n//       setErrors(prev => ({ ...prev, [field]: '' }));\n//     }\n//   };\n\n//   const validateForm = () => {\n//     const newErrors = {};\n\n//     if (!formData.date) {\n//       newErrors.date = 'Payment date is required';\n//     }\n\n//     if (!formData.amount || parseFloat(formData.amount) <= 0) {\n//       newErrors.amount = 'Valid payment amount is required';\n//     }\n\n//     if (!formData.method) {\n//       newErrors.method = 'Payment method is required';\n//     }\n\n//     if (!formData.account) {\n//       newErrors.account = 'Deposit account is required';\n//     }\n\n//     setErrors(newErrors);\n//     return Object.keys(newErrors).length === 0;\n//   };\n//   const handleSubmit = async () => {\n//   if (isAlreadyPaid) {\n//     setErrors({\n//       general: 'This invoice has already been fully paid. No further payments allowed.'\n//     });\n//     return;\n//   }\n\n//   if (!validateForm()) return;\n\n//   setLoading(true);\n\n//   try {\n//     const paymentAmount = parseFloat(formData.amount);\n//     const remainingAmount = amount - paymentAmount;\n//     const isFullPayment = remainingAmount <= 0;\n//     const paymentStatus = isFullPayment ? 'paid' : 'partial';\n\n//     // Create payment record (local save)\n//     const paymentData = {\n//       id: `PAY-${Date.now()}`,\n//       invoiceId,\n//       orderId: invoiceId,\n//       date: formData.date,\n//       amount: paymentAmount,\n//       paymentMethod: formData.method,\n//       accountId: formData.account,\n//       accountName: getAccountNameById(formData.account, accounts) || 'Unknown Account',\n//       memo: formData.memo,\n//       status: paymentStatus,\n//       remainingAmount: Math.max(0, remainingAmount),\n//       createdAt: new Date().toISOString(),\n//       createdBy: 'current_user'\n//     };\n\n//     // Save payment to localStorage\n//     const existingPayments = JSON.parse(localStorage.getItem('payments') || '[]');\n//     const updatedPayments = [...existingPayments, paymentData];\n//     localStorage.setItem('payments', JSON.stringify(updatedPayments));\n\n//     // Update order in localStorage\n//     const existingOrders = JSON.parse(localStorage.getItem('orders') || '[]');\n//     const orderIndex = existingOrders.findIndex(order =>\n//       order.orderId === invoiceId || order.id === invoiceId\n//     );\n\n//     if (orderIndex !== -1) {\n//       existingOrders[orderIndex] = {\n//         ...existingOrders[orderIndex],\n//         paid: isFullPayment,\n//         paymentStatus: paymentStatus,\n//         lastPaymentDate: formData.date,\n//         lastPaymentAmount: paymentAmount,\n//         remainingAmount: Math.max(0, remainingAmount),\n//         paymentHistory: [\n//           ...(existingOrders[orderIndex].paymentHistory || []),\n//           paymentData.id\n//         ]\n//       };\n//       localStorage.setItem('orders', JSON.stringify(existingOrders));\n//     }\n\n//     // ✅ CALL THE API\n//     const apiUrl = `https://api-pos.hulmsolutions.com/POS/accounting2/31fc8df0-61db-41e5-bb67-070fde367ea1/orders/Paid/${invoiceId}`;\n\n//     const payload = {\n//       customerId: \"null\",  // if null string is correct\n//       orderId: invoiceId,\n//       paid: isFullPayment,  // true if fully paid, false otherwise\n//       billUnitId: \"2\",\n//       billStatus: \"pending\"\n//     };\n\n//    const apiResponse = await fetch(apiUrl, {\n//   method: \"PUT\",\n//   headers: {\n//     \"Content-Type\": \"application/json\",\n//     \"Authorization\": `Bearer $hAMID` // ✅ add your token\n//   },\n//   body: JSON.stringify(payload)\n// });\n\n//     if (!apiResponse.ok) {\n//       throw new Error(\"Failed to update order status in API\");\n//     }\n\n//     // Callbacks\n//     if (onSubmit) {\n//       onSubmit(paymentData, isFullPayment);\n//     }\n\n//     if (onPaymentComplete) {\n//       onPaymentComplete(paymentData, isFullPayment);\n//     }\n\n//     // Success message\n//     const message = isFullPayment\n//       ? \"Payment recorded successfully. Invoice is now fully paid.\"\n//       : `Partial payment of ${formatCurrency(paymentAmount)} recorded. Remaining balance: ${formatCurrency(remainingAmount)}`;\n\n//     console.log(message);\n\n//     onClose();\n//   } catch (error) {\n//     console.error(\"Error recording payment:\", error);\n//     setErrors({ general: \"Failed to record payment. Please try again.\" });\n//   } finally {\n//     setLoading(false);\n//   }\n// };\n\n//   // Helper function to find account name by ID in hierarchical structure\n//   const getAccountNameById = (accountId, accountList) => {\n//     for (const account of accountList) {\n//       if (account.id === accountId) {\n//         return account.name;\n//       }\n//       if (account.children && account.children.length > 0) {\n//         const foundInChildren = getAccountNameById(accountId, account.children);\n//         if (foundInChildren) return foundInChildren;\n//       }\n//     }\n//     return null;\n//   };\n\n//   // Helper function to render account options recursively\n//   const renderAccountOptions = (accountList, level = 0) => {\n//     return accountList.map(account => (\n//       <React.Fragment key={account.id}>\n//         <option value={account.id}>\n//           {'-'.repeat(level * 2)} {account.code} - {account.name}\n//         </option>\n//         {account.children && account.children.length > 0 && (\n//           renderAccountOptions(account.children, level + 1)\n//         )}\n//       </React.Fragment>\n//     ));\n//   };\n\n//   const paymentAmount = parseFloat(formData.amount) || 0;\n//   const remainingAmount = amount - paymentAmount;\n//   const isFullPayment = paymentAmount >= amount;\n\n//   return (\n//     <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n//       <div className=\"bg-white rounded-xl shadow-2xl max-w-md w-full\">\n//         {/* Header */}\n//         <div className=\"px-6 py-4 border-b border-gray-200\">\n//           <div className=\"flex items-center justify-between\">\n//             <h2 className=\"text-xl font-semibold text-gray-900\">\n//               Record a payment for this invoice\n//             </h2>\n//             <button\n//               onClick={onClose}\n//               className=\"text-gray-400 hover:text-gray-600 transition-colors\"\n//             >\n//               <X size={24} />\n//             </button>\n//           </div>\n//         </div>\n\n//         {/* Form Body */}\n//         <div className=\"px-6 py-4 space-y-5\">\n//           {errors.general && (\n//             <div className=\"p-3 bg-red-50 border border-red-200 rounded-lg flex items-start gap-2\">\n//               <AlertCircle size={20} className=\"text-red-600 flex-shrink-0 mt-0.5\" />\n//               <span className=\"text-sm text-red-700\">{errors.general}</span>\n//             </div>\n//           )}\n\n//           {/* Date Field */}\n//           <div>\n//             <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\">\n//               <Calendar size={16} />\n//               Date\n//             </label>\n//             <input\n//               type=\"date\"\n//               value={formData.date}\n//               onChange={(e) => handleChange('date', e.target.value)}\n//               className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\n//                 errors.date ? 'border-red-500' : 'border-gray-300'\n//               }`}\n//             />\n//             {errors.date && <span className=\"text-xs text-red-600 mt-1\">{errors.date}</span>}\n//           </div>\n\n//           {/* Amount Field */}\n//           <div>\n//             <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\">\n//               <DollarSign size={16} />\n//               Amount\n//             </label>\n//             <div className=\"relative\">\n//               <span className=\"absolute left-3 top-1/2 -translate-y-1/2 text-gray-500 font-medium\">\n//                 Rs\n//               </span>\n//               <input\n//                 type=\"number\"\n//                 step=\"0.01\"\n//                 value={formData.amount}\n//                 onChange={(e) => handleChange('amount', e.target.value)}\n//                 className={`w-full pl-10 pr-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\n//                   errors.amount ? 'border-red-500' : 'border-gray-300'\n//                 }`}\n//                 placeholder=\"0.00\"\n//               />\n//             </div>\n//             {errors.amount && <span className=\"text-xs text-red-600 mt-1\">{errors.amount}</span>}\n\n//             {paymentAmount > 0 && (\n//               <div className=\"mt-2 text-sm\">\n//                 {isFullPayment ? (\n//                   <span className=\"text-green-600 font-medium\">Invoice will be fully paid</span>\n//                 ) : (\n//                   <span className=\"text-orange-600\">\n//                     Partial payment - Remaining: {formatCurrency(remainingAmount)}\n//                   </span>\n//                 )}\n//               </div>\n//             )}\n//           </div>\n\n//           {/* Payment Method */}\n//           <div>\n//             <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\">\n//               <CreditCard size={16} />\n//               Method\n//             </label>\n//             <select\n//               value={formData.method}\n//               onChange={(e) => handleChange('method', e.target.value)}\n//               className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\n//                 errors.method ? 'border-red-500' : 'border-gray-300'\n//               }`}\n//             >\n//               <option value=\"\">Select a payment method...</option>\n//               <option value=\"cash\">Cash</option>\n//               <option value=\"check\">Check</option>\n//               <option value=\"bank_transfer\">Bank Transfer</option>\n//               <option value=\"credit_card\">Credit Card</option>\n//               <option value=\"debit_card\">Debit Card</option>\n//               <option value=\"online\">Online Payment</option>\n//             </select>\n//             {errors.method && <span className=\"text-xs text-red-600 mt-1\">{errors.method}</span>}\n//           </div>\n\n//           {/* Account */}\n//           <div>\n//             <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\">\n//               <FileText size={16} />\n//               Account\n//             </label>\n//             <select\n//               value={formData.account}\n//               onChange={(e) => handleChange('account', e.target.value)}\n//               className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\n//                 errors.account ? 'border-red-500' : 'border-gray-300'\n//               }`}\n//             >\n//               <option value=\"\">Select a payment account...</option>\n//               {renderAccountOptions(accounts)}\n//             </select>\n//             {errors.account && <span className=\"text-xs text-red-600 mt-1\">{errors.account}</span>}\n//             <p className=\"text-xs text-gray-500 mt-1\">\n//               Any account into which you deposit and withdraw funds from.{' '}\n//               <a href=\"#\" className=\"text-blue-600 hover:text-blue-700\">Learn more</a>\n//             </p>\n//           </div>\n\n//           {/* Memo */}\n//           <div>\n//             <label className=\"text-sm font-medium text-gray-700 mb-1 block\">\n//               Memo / notes\n//             </label>\n//             <textarea\n//               value={formData.memo}\n//               onChange={(e) => handleChange('memo', e.target.value)}\n//               rows={3}\n//               className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n//               placeholder=\"Add any additional notes...\"\n//             />\n//           </div>\n//         </div>\n\n//         {/* Footer */}\n//         <div className=\"px-6 py-4 border-t border-gray-200 flex items-center justify-end gap-3\">\n//           <button\n//             onClick={onClose}\n//             className=\"px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors\"\n//           >\n//             Cancel\n//           </button>\n//           <button\n//             onClick={handleSubmit}\n//             disabled={loading || !formData.amount || parseFloat(formData.amount) <= 0}\n//             className={`px-6 py-2 rounded-lg font-medium transition-colors ${\n//               loading || !formData.amount || parseFloat(formData.amount) <= 0\n//                 ? 'bg-gray-300 text-gray-500 cursor-not-allowed'\n//                 : 'bg-blue-600 text-white hover:bg-blue-700'\n//             }`}\n//           >\n//             {loading ? 'Processing...' : 'Submit'}\n//           </button>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default RecordPaymentModal;\n\nimport React, { useState, useEffect } from 'react';\nimport { X, Calendar, DollarSign, CreditCard, FileText, AlertCircle } from 'lucide-react';\nimport { formatCurrency } from './AccountsReceivableUtils/formatters';\nimport { updateInvoicePaid } from './AccountsReceivableHook/useAPData';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RecordPaymentModal = ({\n  invoiceId,\n  amount,\n  onClose,\n  onSubmit,\n  onPaymentComplete\n}) => {\n  _s();\n  const [formData, setFormData] = useState({\n    date: new Date().toISOString().split('T')[0],\n    amount: (amount === null || amount === void 0 ? void 0 : amount.toString()) || '',\n    method: '',\n    account: '',\n    memo: ''\n  });\n  const [accounts, setAccounts] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [errors, setErrors] = useState({});\n  const [isAlreadyPaid, setIsAlreadyPaid] = useState(false); // ✅ NEW\n\n  // Fetch accounts on mount\n  useEffect(() => {\n    fetchAccounts();\n  }, []);\n\n  // Set initial amount\n  useEffect(() => {\n    if (amount) {\n      setFormData(prev => ({\n        ...prev,\n        amount: amount.toString()\n      }));\n    }\n  }, [amount]);\n  // ✅ Check if this invoice is already fully paid\n  useEffect(() => {\n    const existingOrders = JSON.parse(localStorage.getItem('orders') || '[]');\n    const order = existingOrders.find(o => o.orderId === invoiceId || o.id === invoiceId);\n    if (order && (order.paid || order.paymentStatus === 'paid')) {\n      setIsAlreadyPaid(true);\n    }\n  }, [invoiceId]);\n  const fetchAccounts = async () => {\n    try {\n      const response = await fetch('http://localhost:8080/api/accounts');\n      const data = await response.json();\n\n      // Filter only asset accounts (like the commented code)\n      const assetAccounts = data.filter(acct => acct.type === 'assets');\n\n      // Build parent-child map (like the commented code)\n      const accountMap = {};\n      assetAccounts.forEach(acct => accountMap[acct.id] = {\n        ...acct,\n        children: []\n      });\n      assetAccounts.forEach(acct => {\n        if (acct.parentId && accountMap[acct.parentId]) {\n          accountMap[acct.parentId].children.push(accountMap[acct.id]);\n        }\n      });\n\n      // Top-level accounts (like the commented code)\n      const tree = assetAccounts.filter(acct => !acct.parentId || !accountMap[acct.parentId]);\n      setAccounts(tree);\n    } catch (err) {\n      console.error('Failed to fetch accounts:', err);\n    }\n  };\n  const handleChange = (field, value) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n    // Clear error for this field when user starts typing\n    if (errors[field]) {\n      setErrors(prev => ({\n        ...prev,\n        [field]: ''\n      }));\n    }\n  };\n  const validateForm = () => {\n    const newErrors = {};\n    if (!formData.date) {\n      newErrors.date = 'Payment date is required';\n    }\n    if (!formData.amount || parseFloat(formData.amount) <= 0) {\n      newErrors.amount = 'Valid payment amount is required';\n    }\n    if (!formData.method) {\n      newErrors.method = 'Payment method is required';\n    }\n    if (!formData.account) {\n      newErrors.account = 'Deposit account is required';\n    }\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n  const handleSubmit = async () => {\n    if (isAlreadyPaid) {\n      setErrors({\n        general: 'This invoice has already been fully paid. No further payments allowed.'\n      });\n      return;\n    }\n    if (!validateForm()) return;\n    setLoading(true);\n    try {\n      const paymentAmount = parseFloat(formData.amount);\n      const remainingAmount = amount - paymentAmount;\n      const isFullPayment = remainingAmount <= 0;\n      const paymentStatus = isFullPayment ? 'paid' : 'partial';\n\n      // Create payment record (local save)\n      const paymentData = {\n        id: `PAY-${Date.now()}`,\n        invoiceId,\n        orderId: invoiceId,\n        date: formData.date,\n        amount: paymentAmount,\n        paymentMethod: formData.method,\n        accountId: formData.account,\n        accountName: getAccountNameById(formData.account, accounts) || 'Unknown Account',\n        memo: formData.memo,\n        status: paymentStatus,\n        remainingAmount: Math.max(0, remainingAmount),\n        createdAt: new Date().toISOString(),\n        createdBy: 'current_user'\n      };\n\n      // Save payment to localStorage\n      const existingPayments = JSON.parse(localStorage.getItem('payments') || '[]');\n      const updatedPayments = [...existingPayments, paymentData];\n      localStorage.setItem('payments', JSON.stringify(updatedPayments));\n\n      // Update order in localStorage\n      const existingOrders = JSON.parse(localStorage.getItem('orders') || '[]');\n      const orderIndex = existingOrders.findIndex(order => order.orderId === invoiceId || order.id === invoiceId);\n      if (orderIndex !== -1) {\n        existingOrders[orderIndex] = {\n          ...existingOrders[orderIndex],\n          paid: isFullPayment,\n          paymentStatus: paymentStatus,\n          lastPaymentDate: formData.date,\n          lastPaymentAmount: paymentAmount,\n          remainingAmount: Math.max(0, remainingAmount),\n          paymentHistory: [...(existingOrders[orderIndex].paymentHistory || []), paymentData.id]\n        };\n        localStorage.setItem('orders', JSON.stringify(existingOrders));\n      }\n\n      // ✅ Use helper instead of raw fetch\n      const payload = {\n        customerId: paymentData.customerId || null,\n        // if you link customers\n        orderId: invoiceId,\n        paid: isFullPayment,\n        billUnitId: paymentData.billUnitId || \"2\",\n        // use real billUnitId from order if available\n        billStatus: isFullPayment ? \"paid\" : \"partial\"\n      };\n      const apiResponse = await updateInvoicePaid(invoiceId, payload);\n      if (!apiResponse) {\n        throw new Error(\"Failed to update order status in API\");\n      }\n      if (!apiResponse.ok) {\n        throw new Error(\"Failed to update order status in API\");\n      }\n\n      // Callbacks\n      if (onSubmit) {\n        onSubmit(paymentData, isFullPayment);\n      }\n      if (onPaymentComplete) {\n        onPaymentComplete(paymentData, isFullPayment);\n      }\n\n      // Success message\n      const message = isFullPayment ? \"Payment recorded successfully. Invoice is now fully paid.\" : `Partial payment of ${formatCurrency(paymentAmount)} recorded. Remaining balance: ${formatCurrency(remainingAmount)}`;\n      console.log(message);\n      onClose();\n    } catch (error) {\n      console.error(\"Error recording payment:\", error);\n      setErrors({\n        general: \"Failed to record payment. Please try again.\"\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Helper function to find account name by ID in hierarchical structure\n  const getAccountNameById = (accountId, accountList) => {\n    for (const account of accountList) {\n      if (account.id === accountId) {\n        return account.name;\n      }\n      if (account.children && account.children.length > 0) {\n        const foundInChildren = getAccountNameById(accountId, account.children);\n        if (foundInChildren) return foundInChildren;\n      }\n    }\n    return null;\n  };\n\n  // Helper function to render account options recursively\n  const renderAccountOptions = (accountList, level = 0) => {\n    return accountList.map(account => /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: account.id,\n        children: ['-'.repeat(level * 2), \" \", account.code, \" - \", account.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 635,\n        columnNumber: 9\n      }, this), account.children && account.children.length > 0 && renderAccountOptions(account.children, level + 1)]\n    }, account.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 634,\n      columnNumber: 7\n    }, this));\n  };\n  const paymentAmount = parseFloat(formData.amount) || 0;\n  const remainingAmount = amount - paymentAmount;\n  const isFullPayment = paymentAmount >= amount;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-white rounded-xl shadow-2xl max-w-md w-full\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"px-6 py-4 border-b border-gray-200\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center justify-between\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"text-xl font-semibold text-gray-900\",\n            children: \"Record a payment for this invoice\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 655,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: onClose,\n            className: \"text-gray-400 hover:text-gray-600 transition-colors\",\n            children: /*#__PURE__*/_jsxDEV(X, {\n              size: 24\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 662,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 658,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 654,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 653,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"px-6 py-4 space-y-5\",\n        children: [errors.general && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"p-3 bg-red-50 border border-red-200 rounded-lg flex items-start gap-2\",\n          children: [/*#__PURE__*/_jsxDEV(AlertCircle, {\n            size: 20,\n            className: \"text-red-600 flex-shrink-0 mt-0.5\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 671,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-sm text-red-700\",\n            children: errors.general\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 672,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 670,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\",\n            children: [/*#__PURE__*/_jsxDEV(Calendar, {\n              size: 16\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 679,\n              columnNumber: 15\n            }, this), \"Date\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 678,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"date\",\n            value: formData.date,\n            onChange: e => handleChange('date', e.target.value),\n            className: `w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${errors.date ? 'border-red-500' : 'border-gray-300'}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 682,\n            columnNumber: 13\n          }, this), errors.date && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-xs text-red-600 mt-1\",\n            children: errors.date\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 690,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 677,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\",\n            children: [/*#__PURE__*/_jsxDEV(DollarSign, {\n              size: 16\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 696,\n              columnNumber: 15\n            }, this), \"Amount\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 695,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"relative\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"absolute left-3 top-1/2 -translate-y-1/2 text-gray-500 font-medium\",\n              children: \"Rs\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 700,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              step: \"0.01\",\n              value: formData.amount,\n              onChange: e => handleChange('amount', e.target.value),\n              className: `w-full pl-10 pr-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${errors.amount ? 'border-red-500' : 'border-gray-300'}`,\n              placeholder: \"0.00\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 703,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 699,\n            columnNumber: 13\n          }, this), errors.amount && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-xs text-red-600 mt-1\",\n            children: errors.amount\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 714,\n            columnNumber: 31\n          }, this), paymentAmount > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mt-2 text-sm\",\n            children: isFullPayment ? /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"text-green-600 font-medium\",\n              children: \"Invoice will be fully paid\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 719,\n              columnNumber: 19\n            }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"text-orange-600\",\n              children: [\"Partial payment - Remaining: \", formatCurrency(remainingAmount)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 721,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 717,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 694,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\",\n            children: [/*#__PURE__*/_jsxDEV(CreditCard, {\n              size: 16\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 732,\n              columnNumber: 15\n            }, this), \"Method\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 731,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: formData.method,\n            onChange: e => handleChange('method', e.target.value),\n            className: `w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${errors.method ? 'border-red-500' : 'border-gray-300'}`,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select a payment method...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 742,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"cash\",\n              children: \"Cash\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 743,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"check\",\n              children: \"Check\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 744,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"bank_transfer\",\n              children: \"Bank Transfer\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 745,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"credit_card\",\n              children: \"Credit Card\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 746,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"debit_card\",\n              children: \"Debit Card\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 747,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"online\",\n              children: \"Online Payment\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 748,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 735,\n            columnNumber: 13\n          }, this), errors.method && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-xs text-red-600 mt-1\",\n            children: errors.method\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 750,\n            columnNumber: 31\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 730,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\",\n            children: [/*#__PURE__*/_jsxDEV(FileText, {\n              size: 16\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 756,\n              columnNumber: 15\n            }, this), \"Account\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 755,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: formData.account,\n            onChange: e => handleChange('account', e.target.value),\n            className: `w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${errors.account ? 'border-red-500' : 'border-gray-300'}`,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select a payment account...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 766,\n              columnNumber: 15\n            }, this), renderAccountOptions(accounts)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 759,\n            columnNumber: 13\n          }, this), errors.account && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-xs text-red-600 mt-1\",\n            children: errors.account\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 769,\n            columnNumber: 32\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-xs text-gray-500 mt-1\",\n            children: [\"Any account into which you deposit and withdraw funds from.\", ' ', /*#__PURE__*/_jsxDEV(\"a\", {\n              href: \"#\",\n              className: \"text-blue-600 hover:text-blue-700\",\n              children: \"Learn more\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 772,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 770,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 754,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"text-sm font-medium text-gray-700 mb-1 block\",\n            children: \"Memo / notes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 778,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            value: formData.memo,\n            onChange: e => handleChange('memo', e.target.value),\n            rows: 3,\n            className: \"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\",\n            placeholder: \"Add any additional notes...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 781,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 777,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 668,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"px-6 py-4 border-t border-gray-200 flex items-center justify-end gap-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: onClose,\n          className: \"px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors\",\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 793,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSubmit,\n          disabled: loading || !formData.amount || parseFloat(formData.amount) <= 0,\n          className: `px-6 py-2 rounded-lg font-medium transition-colors ${loading || !formData.amount || parseFloat(formData.amount) <= 0 ? 'bg-gray-300 text-gray-500 cursor-not-allowed' : 'bg-blue-600 text-white hover:bg-blue-700'}`,\n          children: loading ? 'Processing...' : 'Submit'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 799,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 792,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 651,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 650,\n    columnNumber: 5\n  }, this);\n};\n_s(RecordPaymentModal, \"5SdSQ69mnlErMIr/O5wMiWoDArQ=\");\n_c = RecordPaymentModal;\nexport default RecordPaymentModal;\nvar _c;\n$RefreshReg$(_c, \"RecordPaymentModal\");","map":{"version":3,"names":["React","useState","useEffect","X","Calendar","DollarSign","CreditCard","FileText","AlertCircle","formatCurrency","updateInvoicePaid","jsxDEV","_jsxDEV","RecordPaymentModal","invoiceId","amount","onClose","onSubmit","onPaymentComplete","_s","formData","setFormData","date","Date","toISOString","split","toString","method","account","memo","accounts","setAccounts","loading","setLoading","errors","setErrors","isAlreadyPaid","setIsAlreadyPaid","fetchAccounts","prev","existingOrders","JSON","parse","localStorage","getItem","order","find","o","orderId","id","paid","paymentStatus","response","fetch","data","json","assetAccounts","filter","acct","type","accountMap","forEach","children","parentId","push","tree","err","console","error","handleChange","field","value","validateForm","newErrors","parseFloat","Object","keys","length","handleSubmit","general","paymentAmount","remainingAmount","isFullPayment","paymentData","now","paymentMethod","accountId","accountName","getAccountNameById","status","Math","max","createdAt","createdBy","existingPayments","updatedPayments","setItem","stringify","orderIndex","findIndex","lastPaymentDate","lastPaymentAmount","paymentHistory","payload","customerId","billUnitId","billStatus","apiResponse","Error","ok","message","log","accountList","name","foundInChildren","renderAccountOptions","level","map","Fragment","repeat","code","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","size","onChange","e","target","step","placeholder","href","rows","disabled","_c","$RefreshReg$"],"sources":["C:/Users/Logic-Unit/my-account/src/components/AccountsReceivable/RecordPaymentModal.jsx"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import { X, Calendar, DollarSign, CreditCard, FileText, AlertCircle } from 'lucide-react';\r\n// import { formatCurrency } from './AccountsReceivableUtils/formatters';\r\n\r\n// const RecordPaymentModal = ({ invoiceId, amount, onClose, onSubmit, onPaymentComplete }) => {\r\n//   const [formData, setFormData] = useState({\r\n//     date: new Date().toISOString().split('T')[0],\r\n//     amount: amount?.toString() || '',\r\n//     method: '',\r\n//     account: '',\r\n//     memo: ''\r\n//   });\r\n  \r\n//   const [accounts, setAccounts] = useState([]);\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [errors, setErrors] = useState({});\r\n//   const [isAlreadyPaid, setIsAlreadyPaid] = useState(false); // ✅ NEW\r\n\r\n//   // Fetch accounts on mount\r\n//   useEffect(() => {\r\n//     fetchAccounts();\r\n//   }, []);\r\n\r\n//   // Set initial amount\r\n//   useEffect(() => {\r\n//     if (amount) {\r\n//       setFormData(prev => ({ ...prev, amount: amount.toString() }));\r\n//     }\r\n//   }, [amount]);\r\n//    // ✅ Check if this invoice is already fully paid\r\n//   useEffect(() => {\r\n//     const existingOrders = JSON.parse(localStorage.getItem('orders') || '[]');\r\n//     const order = existingOrders.find(o => o.orderId === invoiceId || o.id === invoiceId);\r\n\r\n//     if (order && (order.paid || order.paymentStatus === 'paid')) {\r\n//       setIsAlreadyPaid(true);\r\n//     }\r\n//   }, [invoiceId]);\r\n//   const fetchAccounts = async () => {\r\n//     try {\r\n//       const response = await fetch('http://localhost:8080/api/accounts');\r\n//       const data = await response.json();\r\n\r\n//       // Filter only asset accounts (like the commented code)\r\n//       const assetAccounts = data.filter(acct => acct.type === 'assets');\r\n\r\n//       // Build parent-child map (like the commented code)\r\n//       const accountMap = {};\r\n//       assetAccounts.forEach(acct => accountMap[acct.id] = { ...acct, children: [] });\r\n\r\n//       assetAccounts.forEach(acct => {\r\n//         if (acct.parentId && accountMap[acct.parentId]) {\r\n//           accountMap[acct.parentId].children.push(accountMap[acct.id]);\r\n//         }\r\n//       });\r\n\r\n//       // Top-level accounts (like the commented code)\r\n//       const tree = assetAccounts.filter(acct => !acct.parentId || !accountMap[acct.parentId]);\r\n//       setAccounts(tree);\r\n//     } catch (err) {\r\n//       console.error('Failed to fetch accounts:', err);\r\n//     }\r\n//   };\r\n\r\n//   const handleChange = (field, value) => {\r\n//     setFormData(prev => ({ ...prev, [field]: value }));\r\n//     // Clear error for this field when user starts typing\r\n//     if (errors[field]) {\r\n//       setErrors(prev => ({ ...prev, [field]: '' }));\r\n//     }\r\n//   };\r\n\r\n//   const validateForm = () => {\r\n//     const newErrors = {};\r\n    \r\n//     if (!formData.date) {\r\n//       newErrors.date = 'Payment date is required';\r\n//     }\r\n    \r\n//     if (!formData.amount || parseFloat(formData.amount) <= 0) {\r\n//       newErrors.amount = 'Valid payment amount is required';\r\n//     }\r\n    \r\n//     if (!formData.method) {\r\n//       newErrors.method = 'Payment method is required';\r\n//     }\r\n    \r\n//     if (!formData.account) {\r\n//       newErrors.account = 'Deposit account is required';\r\n//     }\r\n\r\n//     setErrors(newErrors);\r\n//     return Object.keys(newErrors).length === 0;\r\n//   };\r\n//   const handleSubmit = async () => {\r\n//   if (isAlreadyPaid) {\r\n//     setErrors({\r\n//       general: 'This invoice has already been fully paid. No further payments allowed.'\r\n//     });\r\n//     return;\r\n//   }\r\n\r\n//   if (!validateForm()) return;\r\n\r\n//   setLoading(true);\r\n\r\n//   try {\r\n//     const paymentAmount = parseFloat(formData.amount);\r\n//     const remainingAmount = amount - paymentAmount;\r\n//     const isFullPayment = remainingAmount <= 0;\r\n//     const paymentStatus = isFullPayment ? 'paid' : 'partial';\r\n\r\n//     // Create payment record (local save)\r\n//     const paymentData = {\r\n//       id: `PAY-${Date.now()}`,\r\n//       invoiceId,\r\n//       orderId: invoiceId,\r\n//       date: formData.date,\r\n//       amount: paymentAmount,\r\n//       paymentMethod: formData.method,\r\n//       accountId: formData.account,\r\n//       accountName: getAccountNameById(formData.account, accounts) || 'Unknown Account',\r\n//       memo: formData.memo,\r\n//       status: paymentStatus,\r\n//       remainingAmount: Math.max(0, remainingAmount),\r\n//       createdAt: new Date().toISOString(),\r\n//       createdBy: 'current_user'\r\n//     };\r\n\r\n//     // Save payment to localStorage\r\n//     const existingPayments = JSON.parse(localStorage.getItem('payments') || '[]');\r\n//     const updatedPayments = [...existingPayments, paymentData];\r\n//     localStorage.setItem('payments', JSON.stringify(updatedPayments));\r\n\r\n//     // Update order in localStorage\r\n//     const existingOrders = JSON.parse(localStorage.getItem('orders') || '[]');\r\n//     const orderIndex = existingOrders.findIndex(order =>\r\n//       order.orderId === invoiceId || order.id === invoiceId\r\n//     );\r\n\r\n//     if (orderIndex !== -1) {\r\n//       existingOrders[orderIndex] = {\r\n//         ...existingOrders[orderIndex],\r\n//         paid: isFullPayment,\r\n//         paymentStatus: paymentStatus,\r\n//         lastPaymentDate: formData.date,\r\n//         lastPaymentAmount: paymentAmount,\r\n//         remainingAmount: Math.max(0, remainingAmount),\r\n//         paymentHistory: [\r\n//           ...(existingOrders[orderIndex].paymentHistory || []),\r\n//           paymentData.id\r\n//         ]\r\n//       };\r\n//       localStorage.setItem('orders', JSON.stringify(existingOrders));\r\n//     }\r\n\r\n//     // ✅ CALL THE API\r\n//     const apiUrl = `https://api-pos.hulmsolutions.com/POS/accounting2/31fc8df0-61db-41e5-bb67-070fde367ea1/orders/Paid/${invoiceId}`;\r\n\r\n//     const payload = {\r\n//       customerId: \"null\",  // if null string is correct\r\n//       orderId: invoiceId,\r\n//       paid: isFullPayment,  // true if fully paid, false otherwise\r\n//       billUnitId: \"2\",\r\n//       billStatus: \"pending\"\r\n//     };\r\n\r\n//    const apiResponse = await fetch(apiUrl, {\r\n//   method: \"PUT\",\r\n//   headers: {\r\n//     \"Content-Type\": \"application/json\",\r\n//     \"Authorization\": `Bearer $hAMID` // ✅ add your token\r\n//   },\r\n//   body: JSON.stringify(payload)\r\n// });\r\n\r\n\r\n//     if (!apiResponse.ok) {\r\n//       throw new Error(\"Failed to update order status in API\");\r\n//     }\r\n\r\n//     // Callbacks\r\n//     if (onSubmit) {\r\n//       onSubmit(paymentData, isFullPayment);\r\n//     }\r\n\r\n//     if (onPaymentComplete) {\r\n//       onPaymentComplete(paymentData, isFullPayment);\r\n//     }\r\n\r\n//     // Success message\r\n//     const message = isFullPayment\r\n//       ? \"Payment recorded successfully. Invoice is now fully paid.\"\r\n//       : `Partial payment of ${formatCurrency(paymentAmount)} recorded. Remaining balance: ${formatCurrency(remainingAmount)}`;\r\n\r\n//     console.log(message);\r\n\r\n//     onClose();\r\n//   } catch (error) {\r\n//     console.error(\"Error recording payment:\", error);\r\n//     setErrors({ general: \"Failed to record payment. Please try again.\" });\r\n//   } finally {\r\n//     setLoading(false);\r\n//   }\r\n// };\r\n\r\n\r\n//   // Helper function to find account name by ID in hierarchical structure\r\n//   const getAccountNameById = (accountId, accountList) => {\r\n//     for (const account of accountList) {\r\n//       if (account.id === accountId) {\r\n//         return account.name;\r\n//       }\r\n//       if (account.children && account.children.length > 0) {\r\n//         const foundInChildren = getAccountNameById(accountId, account.children);\r\n//         if (foundInChildren) return foundInChildren;\r\n//       }\r\n//     }\r\n//     return null;\r\n//   };\r\n\r\n//   // Helper function to render account options recursively\r\n//   const renderAccountOptions = (accountList, level = 0) => {\r\n//     return accountList.map(account => (\r\n//       <React.Fragment key={account.id}>\r\n//         <option value={account.id}>\r\n//           {'-'.repeat(level * 2)} {account.code} - {account.name}\r\n//         </option>\r\n//         {account.children && account.children.length > 0 && (\r\n//           renderAccountOptions(account.children, level + 1)\r\n//         )}\r\n//       </React.Fragment>\r\n//     ));\r\n//   };\r\n\r\n//   const paymentAmount = parseFloat(formData.amount) || 0;\r\n//   const remainingAmount = amount - paymentAmount;\r\n//   const isFullPayment = paymentAmount >= amount;\r\n\r\n//   return (\r\n//     <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\r\n//       <div className=\"bg-white rounded-xl shadow-2xl max-w-md w-full\">\r\n//         {/* Header */}\r\n//         <div className=\"px-6 py-4 border-b border-gray-200\">\r\n//           <div className=\"flex items-center justify-between\">\r\n//             <h2 className=\"text-xl font-semibold text-gray-900\">\r\n//               Record a payment for this invoice\r\n//             </h2>\r\n//             <button\r\n//               onClick={onClose}\r\n//               className=\"text-gray-400 hover:text-gray-600 transition-colors\"\r\n//             >\r\n//               <X size={24} />\r\n//             </button>\r\n//           </div>\r\n//         </div>\r\n\r\n//         {/* Form Body */}\r\n//         <div className=\"px-6 py-4 space-y-5\">\r\n//           {errors.general && (\r\n//             <div className=\"p-3 bg-red-50 border border-red-200 rounded-lg flex items-start gap-2\">\r\n//               <AlertCircle size={20} className=\"text-red-600 flex-shrink-0 mt-0.5\" />\r\n//               <span className=\"text-sm text-red-700\">{errors.general}</span>\r\n//             </div>\r\n//           )}\r\n            \r\n//           {/* Date Field */}\r\n//           <div>\r\n//             <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\">\r\n//               <Calendar size={16} />\r\n//               Date\r\n//             </label>\r\n//             <input\r\n//               type=\"date\"\r\n//               value={formData.date}\r\n//               onChange={(e) => handleChange('date', e.target.value)}\r\n//               className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\r\n//                 errors.date ? 'border-red-500' : 'border-gray-300'\r\n//               }`}\r\n//             />\r\n//             {errors.date && <span className=\"text-xs text-red-600 mt-1\">{errors.date}</span>}\r\n//           </div>\r\n\r\n//           {/* Amount Field */}\r\n//           <div>\r\n//             <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\">\r\n//               <DollarSign size={16} />\r\n//               Amount\r\n//             </label>\r\n//             <div className=\"relative\">\r\n//               <span className=\"absolute left-3 top-1/2 -translate-y-1/2 text-gray-500 font-medium\">\r\n//                 Rs\r\n//               </span>\r\n//               <input\r\n//                 type=\"number\"\r\n//                 step=\"0.01\"\r\n//                 value={formData.amount}\r\n//                 onChange={(e) => handleChange('amount', e.target.value)}\r\n//                 className={`w-full pl-10 pr-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\r\n//                   errors.amount ? 'border-red-500' : 'border-gray-300'\r\n//                 }`}\r\n//                 placeholder=\"0.00\"\r\n//               />\r\n//             </div>\r\n//             {errors.amount && <span className=\"text-xs text-red-600 mt-1\">{errors.amount}</span>}\r\n            \r\n//             {paymentAmount > 0 && (\r\n//               <div className=\"mt-2 text-sm\">\r\n//                 {isFullPayment ? (\r\n//                   <span className=\"text-green-600 font-medium\">Invoice will be fully paid</span>\r\n//                 ) : (\r\n//                   <span className=\"text-orange-600\">\r\n//                     Partial payment - Remaining: {formatCurrency(remainingAmount)}\r\n//                   </span>\r\n//                 )}\r\n//               </div>\r\n//             )}\r\n//           </div>\r\n\r\n//           {/* Payment Method */}\r\n//           <div>\r\n//             <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\">\r\n//               <CreditCard size={16} />\r\n//               Method\r\n//             </label>\r\n//             <select\r\n//               value={formData.method}\r\n//               onChange={(e) => handleChange('method', e.target.value)}\r\n//               className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\r\n//                 errors.method ? 'border-red-500' : 'border-gray-300'\r\n//               }`}\r\n//             >\r\n//               <option value=\"\">Select a payment method...</option>\r\n//               <option value=\"cash\">Cash</option>\r\n//               <option value=\"check\">Check</option>\r\n//               <option value=\"bank_transfer\">Bank Transfer</option>\r\n//               <option value=\"credit_card\">Credit Card</option>\r\n//               <option value=\"debit_card\">Debit Card</option>\r\n//               <option value=\"online\">Online Payment</option>\r\n//             </select>\r\n//             {errors.method && <span className=\"text-xs text-red-600 mt-1\">{errors.method}</span>}\r\n//           </div>\r\n\r\n//           {/* Account */}\r\n//           <div>\r\n//             <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\">\r\n//               <FileText size={16} />\r\n//               Account\r\n//             </label>\r\n//             <select\r\n//               value={formData.account}\r\n//               onChange={(e) => handleChange('account', e.target.value)}\r\n//               className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\r\n//                 errors.account ? 'border-red-500' : 'border-gray-300'\r\n//               }`}\r\n//             >\r\n//               <option value=\"\">Select a payment account...</option>\r\n//               {renderAccountOptions(accounts)}\r\n//             </select>\r\n//             {errors.account && <span className=\"text-xs text-red-600 mt-1\">{errors.account}</span>}\r\n//             <p className=\"text-xs text-gray-500 mt-1\">\r\n//               Any account into which you deposit and withdraw funds from.{' '}\r\n//               <a href=\"#\" className=\"text-blue-600 hover:text-blue-700\">Learn more</a>\r\n//             </p>\r\n//           </div>\r\n\r\n//           {/* Memo */}\r\n//           <div>\r\n//             <label className=\"text-sm font-medium text-gray-700 mb-1 block\">\r\n//               Memo / notes\r\n//             </label>\r\n//             <textarea\r\n//               value={formData.memo}\r\n//               onChange={(e) => handleChange('memo', e.target.value)}\r\n//               rows={3}\r\n//               className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\r\n//               placeholder=\"Add any additional notes...\"\r\n//             />\r\n//           </div>\r\n//         </div>\r\n\r\n//         {/* Footer */}\r\n//         <div className=\"px-6 py-4 border-t border-gray-200 flex items-center justify-end gap-3\">\r\n//           <button\r\n//             onClick={onClose}\r\n//             className=\"px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors\"\r\n//           >\r\n//             Cancel\r\n//           </button>\r\n//           <button\r\n//             onClick={handleSubmit}\r\n//             disabled={loading || !formData.amount || parseFloat(formData.amount) <= 0}\r\n//             className={`px-6 py-2 rounded-lg font-medium transition-colors ${\r\n//               loading || !formData.amount || parseFloat(formData.amount) <= 0\r\n//                 ? 'bg-gray-300 text-gray-500 cursor-not-allowed'\r\n//                 : 'bg-blue-600 text-white hover:bg-blue-700'\r\n//             }`}\r\n//           >\r\n//             {loading ? 'Processing...' : 'Submit'}\r\n//           </button>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default RecordPaymentModal;\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { X, Calendar, DollarSign, CreditCard, FileText, AlertCircle } from 'lucide-react';\r\nimport { formatCurrency } from './AccountsReceivableUtils/formatters';\r\nimport { updateInvoicePaid } from './AccountsReceivableHook/useAPData';\r\nconst RecordPaymentModal = ({ invoiceId, amount, onClose, onSubmit, onPaymentComplete }) => {\r\n  const [formData, setFormData] = useState({\r\n    date: new Date().toISOString().split('T')[0],\r\n    amount: amount?.toString() || '',\r\n    method: '',\r\n    account: '',\r\n    memo: ''\r\n  });\r\n  \r\n  const [accounts, setAccounts] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [errors, setErrors] = useState({});\r\n  const [isAlreadyPaid, setIsAlreadyPaid] = useState(false); // ✅ NEW\r\n\r\n  // Fetch accounts on mount\r\n  useEffect(() => {\r\n    fetchAccounts();\r\n  }, []);\r\n\r\n  // Set initial amount\r\n  useEffect(() => {\r\n    if (amount) {\r\n      setFormData(prev => ({ ...prev, amount: amount.toString() }));\r\n    }\r\n  }, [amount]);\r\n   // ✅ Check if this invoice is already fully paid\r\n  useEffect(() => {\r\n    const existingOrders = JSON.parse(localStorage.getItem('orders') || '[]');\r\n    const order = existingOrders.find(o => o.orderId === invoiceId || o.id === invoiceId);\r\n\r\n    if (order && (order.paid || order.paymentStatus === 'paid')) {\r\n      setIsAlreadyPaid(true);\r\n    }\r\n  }, [invoiceId]);\r\n  const fetchAccounts = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:8080/api/accounts');\r\n      const data = await response.json();\r\n\r\n      // Filter only asset accounts (like the commented code)\r\n      const assetAccounts = data.filter(acct => acct.type === 'assets');\r\n\r\n      // Build parent-child map (like the commented code)\r\n      const accountMap = {};\r\n      assetAccounts.forEach(acct => accountMap[acct.id] = { ...acct, children: [] });\r\n\r\n      assetAccounts.forEach(acct => {\r\n        if (acct.parentId && accountMap[acct.parentId]) {\r\n          accountMap[acct.parentId].children.push(accountMap[acct.id]);\r\n        }\r\n      });\r\n\r\n      // Top-level accounts (like the commented code)\r\n      const tree = assetAccounts.filter(acct => !acct.parentId || !accountMap[acct.parentId]);\r\n      setAccounts(tree);\r\n    } catch (err) {\r\n      console.error('Failed to fetch accounts:', err);\r\n    }\r\n  };\r\n\r\n  const handleChange = (field, value) => {\r\n    setFormData(prev => ({ ...prev, [field]: value }));\r\n    // Clear error for this field when user starts typing\r\n    if (errors[field]) {\r\n      setErrors(prev => ({ ...prev, [field]: '' }));\r\n    }\r\n  };\r\n\r\n  const validateForm = () => {\r\n    const newErrors = {};\r\n    \r\n    if (!formData.date) {\r\n      newErrors.date = 'Payment date is required';\r\n    }\r\n    \r\n    if (!formData.amount || parseFloat(formData.amount) <= 0) {\r\n      newErrors.amount = 'Valid payment amount is required';\r\n    }\r\n    \r\n    if (!formData.method) {\r\n      newErrors.method = 'Payment method is required';\r\n    }\r\n    \r\n    if (!formData.account) {\r\n      newErrors.account = 'Deposit account is required';\r\n    }\r\n\r\n    setErrors(newErrors);\r\n    return Object.keys(newErrors).length === 0;\r\n  };\r\n  const handleSubmit = async () => {\r\n  if (isAlreadyPaid) {\r\n    setErrors({\r\n      general: 'This invoice has already been fully paid. No further payments allowed.'\r\n    });\r\n    return;\r\n  }\r\n\r\n  if (!validateForm()) return;\r\n\r\n  setLoading(true);\r\n\r\n  try {\r\n    const paymentAmount = parseFloat(formData.amount);\r\n    const remainingAmount = amount - paymentAmount;\r\n    const isFullPayment = remainingAmount <= 0;\r\n    const paymentStatus = isFullPayment ? 'paid' : 'partial';\r\n\r\n    // Create payment record (local save)\r\n    const paymentData = {\r\n      id: `PAY-${Date.now()}`,\r\n      invoiceId,\r\n      orderId: invoiceId,\r\n      date: formData.date,\r\n      amount: paymentAmount,\r\n      paymentMethod: formData.method,\r\n      accountId: formData.account,\r\n      accountName: getAccountNameById(formData.account, accounts) || 'Unknown Account',\r\n      memo: formData.memo,\r\n      status: paymentStatus,\r\n      remainingAmount: Math.max(0, remainingAmount),\r\n      createdAt: new Date().toISOString(),\r\n      createdBy: 'current_user'\r\n    };\r\n\r\n    // Save payment to localStorage\r\n    const existingPayments = JSON.parse(localStorage.getItem('payments') || '[]');\r\n    const updatedPayments = [...existingPayments, paymentData];\r\n    localStorage.setItem('payments', JSON.stringify(updatedPayments));\r\n\r\n    // Update order in localStorage\r\n    const existingOrders = JSON.parse(localStorage.getItem('orders') || '[]');\r\n    const orderIndex = existingOrders.findIndex(order =>\r\n      order.orderId === invoiceId || order.id === invoiceId\r\n    );\r\n\r\n    if (orderIndex !== -1) {\r\n      existingOrders[orderIndex] = {\r\n        ...existingOrders[orderIndex],\r\n        paid: isFullPayment,\r\n        paymentStatus: paymentStatus,\r\n        lastPaymentDate: formData.date,\r\n        lastPaymentAmount: paymentAmount,\r\n        remainingAmount: Math.max(0, remainingAmount),\r\n        paymentHistory: [\r\n          ...(existingOrders[orderIndex].paymentHistory || []),\r\n          paymentData.id\r\n        ]\r\n      };\r\n      localStorage.setItem('orders', JSON.stringify(existingOrders));\r\n    }\r\n\r\n   // ✅ Use helper instead of raw fetch\r\nconst payload = {\r\n  customerId: paymentData.customerId || null,  // if you link customers\r\n  orderId: invoiceId,\r\n  paid: isFullPayment,\r\n  billUnitId: paymentData.billUnitId || \"2\",   // use real billUnitId from order if available\r\n  billStatus: isFullPayment ? \"paid\" : \"partial\"\r\n};\r\n\r\nconst apiResponse = await updateInvoicePaid(invoiceId, payload);\r\n\r\nif (!apiResponse) {\r\n  throw new Error(\"Failed to update order status in API\");\r\n}\r\n\r\n\r\n\r\n    if (!apiResponse.ok) {\r\n      throw new Error(\"Failed to update order status in API\");\r\n    }\r\n\r\n    // Callbacks\r\n    if (onSubmit) {\r\n      onSubmit(paymentData, isFullPayment);\r\n    }\r\n\r\n    if (onPaymentComplete) {\r\n      onPaymentComplete(paymentData, isFullPayment);\r\n    }\r\n\r\n    // Success message\r\n    const message = isFullPayment\r\n      ? \"Payment recorded successfully. Invoice is now fully paid.\"\r\n      : `Partial payment of ${formatCurrency(paymentAmount)} recorded. Remaining balance: ${formatCurrency(remainingAmount)}`;\r\n\r\n    console.log(message);\r\n\r\n    onClose();\r\n  } catch (error) {\r\n    console.error(\"Error recording payment:\", error);\r\n    setErrors({ general: \"Failed to record payment. Please try again.\" });\r\n  } finally {\r\n    setLoading(false);\r\n  }\r\n};\r\n\r\n\r\n  // Helper function to find account name by ID in hierarchical structure\r\n  const getAccountNameById = (accountId, accountList) => {\r\n    for (const account of accountList) {\r\n      if (account.id === accountId) {\r\n        return account.name;\r\n      }\r\n      if (account.children && account.children.length > 0) {\r\n        const foundInChildren = getAccountNameById(accountId, account.children);\r\n        if (foundInChildren) return foundInChildren;\r\n      }\r\n    }\r\n    return null;\r\n  };\r\n\r\n  // Helper function to render account options recursively\r\n  const renderAccountOptions = (accountList, level = 0) => {\r\n    return accountList.map(account => (\r\n      <React.Fragment key={account.id}>\r\n        <option value={account.id}>\r\n          {'-'.repeat(level * 2)} {account.code} - {account.name}\r\n        </option>\r\n        {account.children && account.children.length > 0 && (\r\n          renderAccountOptions(account.children, level + 1)\r\n        )}\r\n      </React.Fragment>\r\n    ));\r\n  };\r\n\r\n  const paymentAmount = parseFloat(formData.amount) || 0;\r\n  const remainingAmount = amount - paymentAmount;\r\n  const isFullPayment = paymentAmount >= amount;\r\n\r\n  return (\r\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\r\n      <div className=\"bg-white rounded-xl shadow-2xl max-w-md w-full\">\r\n        {/* Header */}\r\n        <div className=\"px-6 py-4 border-b border-gray-200\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <h2 className=\"text-xl font-semibold text-gray-900\">\r\n              Record a payment for this invoice\r\n            </h2>\r\n            <button\r\n              onClick={onClose}\r\n              className=\"text-gray-400 hover:text-gray-600 transition-colors\"\r\n            >\r\n              <X size={24} />\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Form Body */}\r\n        <div className=\"px-6 py-4 space-y-5\">\r\n          {errors.general && (\r\n            <div className=\"p-3 bg-red-50 border border-red-200 rounded-lg flex items-start gap-2\">\r\n              <AlertCircle size={20} className=\"text-red-600 flex-shrink-0 mt-0.5\" />\r\n              <span className=\"text-sm text-red-700\">{errors.general}</span>\r\n            </div>\r\n          )}\r\n            \r\n          {/* Date Field */}\r\n          <div>\r\n            <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\">\r\n              <Calendar size={16} />\r\n              Date\r\n            </label>\r\n            <input\r\n              type=\"date\"\r\n              value={formData.date}\r\n              onChange={(e) => handleChange('date', e.target.value)}\r\n              className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\r\n                errors.date ? 'border-red-500' : 'border-gray-300'\r\n              }`}\r\n            />\r\n            {errors.date && <span className=\"text-xs text-red-600 mt-1\">{errors.date}</span>}\r\n          </div>\r\n\r\n          {/* Amount Field */}\r\n          <div>\r\n            <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\">\r\n              <DollarSign size={16} />\r\n              Amount\r\n            </label>\r\n            <div className=\"relative\">\r\n              <span className=\"absolute left-3 top-1/2 -translate-y-1/2 text-gray-500 font-medium\">\r\n                Rs\r\n              </span>\r\n              <input\r\n                type=\"number\"\r\n                step=\"0.01\"\r\n                value={formData.amount}\r\n                onChange={(e) => handleChange('amount', e.target.value)}\r\n                className={`w-full pl-10 pr-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\r\n                  errors.amount ? 'border-red-500' : 'border-gray-300'\r\n                }`}\r\n                placeholder=\"0.00\"\r\n              />\r\n            </div>\r\n            {errors.amount && <span className=\"text-xs text-red-600 mt-1\">{errors.amount}</span>}\r\n            \r\n            {paymentAmount > 0 && (\r\n              <div className=\"mt-2 text-sm\">\r\n                {isFullPayment ? (\r\n                  <span className=\"text-green-600 font-medium\">Invoice will be fully paid</span>\r\n                ) : (\r\n                  <span className=\"text-orange-600\">\r\n                    Partial payment - Remaining: {formatCurrency(remainingAmount)}\r\n                  </span>\r\n                )}\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          {/* Payment Method */}\r\n          <div>\r\n            <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\">\r\n              <CreditCard size={16} />\r\n              Method\r\n            </label>\r\n            <select\r\n              value={formData.method}\r\n              onChange={(e) => handleChange('method', e.target.value)}\r\n              className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\r\n                errors.method ? 'border-red-500' : 'border-gray-300'\r\n              }`}\r\n            >\r\n              <option value=\"\">Select a payment method...</option>\r\n              <option value=\"cash\">Cash</option>\r\n              <option value=\"check\">Check</option>\r\n              <option value=\"bank_transfer\">Bank Transfer</option>\r\n              <option value=\"credit_card\">Credit Card</option>\r\n              <option value=\"debit_card\">Debit Card</option>\r\n              <option value=\"online\">Online Payment</option>\r\n            </select>\r\n            {errors.method && <span className=\"text-xs text-red-600 mt-1\">{errors.method}</span>}\r\n          </div>\r\n\r\n          {/* Account */}\r\n          <div>\r\n            <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\">\r\n              <FileText size={16} />\r\n              Account\r\n            </label>\r\n            <select\r\n              value={formData.account}\r\n              onChange={(e) => handleChange('account', e.target.value)}\r\n              className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\r\n                errors.account ? 'border-red-500' : 'border-gray-300'\r\n              }`}\r\n            >\r\n              <option value=\"\">Select a payment account...</option>\r\n              {renderAccountOptions(accounts)}\r\n            </select>\r\n            {errors.account && <span className=\"text-xs text-red-600 mt-1\">{errors.account}</span>}\r\n            <p className=\"text-xs text-gray-500 mt-1\">\r\n              Any account into which you deposit and withdraw funds from.{' '}\r\n              <a href=\"#\" className=\"text-blue-600 hover:text-blue-700\">Learn more</a>\r\n            </p>\r\n          </div>\r\n\r\n          {/* Memo */}\r\n          <div>\r\n            <label className=\"text-sm font-medium text-gray-700 mb-1 block\">\r\n              Memo / notes\r\n            </label>\r\n            <textarea\r\n              value={formData.memo}\r\n              onChange={(e) => handleChange('memo', e.target.value)}\r\n              rows={3}\r\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\r\n              placeholder=\"Add any additional notes...\"\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        {/* Footer */}\r\n        <div className=\"px-6 py-4 border-t border-gray-200 flex items-center justify-end gap-3\">\r\n          <button\r\n            onClick={onClose}\r\n            className=\"px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors\"\r\n          >\r\n            Cancel\r\n          </button>\r\n          <button\r\n            onClick={handleSubmit}\r\n            disabled={loading || !formData.amount || parseFloat(formData.amount) <= 0}\r\n            className={`px-6 py-2 rounded-lg font-medium transition-colors ${\r\n              loading || !formData.amount || parseFloat(formData.amount) <= 0\r\n                ? 'bg-gray-300 text-gray-500 cursor-not-allowed'\r\n                : 'bg-blue-600 text-white hover:bg-blue-700'\r\n            }`}\r\n          >\r\n            {loading ? 'Processing...' : 'Submit'}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RecordPaymentModal;"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAOA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,CAAC,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,WAAW,QAAQ,cAAc;AACzF,SAASC,cAAc,QAAQ,sCAAsC;AACrE,SAASC,iBAAiB,QAAQ,oCAAoC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AACvE,MAAMC,kBAAkB,GAAGA,CAAC;EAAEC,SAAS;EAAEC,MAAM;EAAEC,OAAO;EAAEC,QAAQ;EAAEC;AAAkB,CAAC,KAAK;EAAAC,EAAA;EAC1F,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGpB,QAAQ,CAAC;IACvCqB,IAAI,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAC5CV,MAAM,EAAE,CAAAA,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEW,QAAQ,CAAC,CAAC,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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}