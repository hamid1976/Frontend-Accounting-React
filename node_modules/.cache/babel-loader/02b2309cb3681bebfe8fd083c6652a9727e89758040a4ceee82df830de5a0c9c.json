{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Logic-Unit\\\\my-account\\\\src\\\\components\\\\AccountsReceivable\\\\RecordPaymentModal.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import { X, Calendar, DollarSign, CreditCard, FileText, AlertCircle } from 'lucide-react';\n// import { formatCurrency } from './AccountsReceivableUtils/formatters';\n\n// const RecordPaymentModal = ({ invoiceId, amount, onClose, onSubmit, onPaymentComplete }) => {\n//   const [formData, setFormData] = useState({\n//     date: new Date().toISOString().split('T')[0],\n//     amount: amount?.toString() || '',\n//     method: '',\n//     account: '',\n//     memo: ''\n//   });\n\n//   const [accounts, setAccounts] = useState([]);\n//   const [loading, setLoading] = useState(false);\n//   const [errors, setErrors] = useState({});\n//   const [isAlreadyPaid, setIsAlreadyPaid] = useState(false); // ✅ NEW\n\n//   // Fetch accounts on mount\n//   useEffect(() => {\n//     fetchAccounts();\n//   }, []);\n\n//   // Set initial amount\n//   useEffect(() => {\n//     if (amount) {\n//       setFormData(prev => ({ ...prev, amount: amount.toString() }));\n//     }\n//   }, [amount]);\n//    // ✅ Check if this invoice is already fully paid\n//   useEffect(() => {\n//     const existingOrders = JSON.parse(localStorage.getItem('orders') || '[]');\n//     const order = existingOrders.find(o => o.orderId === invoiceId || o.id === invoiceId);\n\n//     if (order && (order.paid || order.paymentStatus === 'paid')) {\n//       setIsAlreadyPaid(true);\n//     }\n//   }, [invoiceId]);\n//   const fetchAccounts = async () => {\n//     try {\n//       const response = await fetch('http://localhost:8080/api/accounts');\n//       const data = await response.json();\n\n//       // Filter only asset accounts (like the commented code)\n//       const assetAccounts = data.filter(acct => acct.type === 'assets');\n\n//       // Build parent-child map (like the commented code)\n//       const accountMap = {};\n//       assetAccounts.forEach(acct => accountMap[acct.id] = { ...acct, children: [] });\n\n//       assetAccounts.forEach(acct => {\n//         if (acct.parentId && accountMap[acct.parentId]) {\n//           accountMap[acct.parentId].children.push(accountMap[acct.id]);\n//         }\n//       });\n\n//       // Top-level accounts (like the commented code)\n//       const tree = assetAccounts.filter(acct => !acct.parentId || !accountMap[acct.parentId]);\n//       setAccounts(tree);\n//     } catch (err) {\n//       console.error('Failed to fetch accounts:', err);\n//     }\n//   };\n\n//   const handleChange = (field, value) => {\n//     setFormData(prev => ({ ...prev, [field]: value }));\n//     // Clear error for this field when user starts typing\n//     if (errors[field]) {\n//       setErrors(prev => ({ ...prev, [field]: '' }));\n//     }\n//   };\n\n//   const validateForm = () => {\n//     const newErrors = {};\n\n//     if (!formData.date) {\n//       newErrors.date = 'Payment date is required';\n//     }\n\n//     if (!formData.amount || parseFloat(formData.amount) <= 0) {\n//       newErrors.amount = 'Valid payment amount is required';\n//     }\n\n//     if (!formData.method) {\n//       newErrors.method = 'Payment method is required';\n//     }\n\n//     if (!formData.account) {\n//       newErrors.account = 'Deposit account is required';\n//     }\n\n//     setErrors(newErrors);\n//     return Object.keys(newErrors).length === 0;\n//   };\n\n//   const handleSubmit = async () => {\n//     if (isAlreadyPaid) {\n//       setErrors({\n//         general: 'This invoice has already been fully paid. No further payments allowed.'\n//       });\n//       return;\n//     }\n\n//     if (!validateForm()) return;\n\n//     setLoading(true);\n\n//     try {\n//       const paymentAmount = parseFloat(formData.amount);\n//       const remainingAmount = amount - paymentAmount;\n//       const isFullPayment = remainingAmount <= 0;\n//       const paymentStatus = isFullPayment ? 'paid' : 'partial';\n\n//       // Create payment record\n//       const paymentData = {\n//         id: `PAY-${Date.now()}`,\n//         invoiceId,\n//         orderId: invoiceId,\n//         date: formData.date,\n//         amount: paymentAmount,\n//         paymentMethod: formData.method,\n//         accountId: formData.account,\n//         // Get account name from the hierarchical structure\n//         accountName: getAccountNameById(formData.account, accounts) || 'Unknown Account',\n//         memo: formData.memo,\n//         status: paymentStatus,\n//         remainingAmount: Math.max(0, remainingAmount),\n//         createdAt: new Date().toISOString(),\n//         createdBy: 'current_user' // Replace with actual user\n//       };\n\n//       // Save payment to localStorage\n//       const existingPayments = JSON.parse(localStorage.getItem('payments') || '[]');\n//       const updatedPayments = [...existingPayments, paymentData];\n//       localStorage.setItem('payments', JSON.stringify(updatedPayments));\n\n//       // Update the invoice/order status\n//       const existingOrders = JSON.parse(localStorage.getItem('orders') || '[]');\n//       const orderIndex = existingOrders.findIndex(order => \n//         order.orderId === invoiceId || order.id === invoiceId\n//       );\n\n//       if (orderIndex !== -1) {\n//         existingOrders[orderIndex] = {\n//           ...existingOrders[orderIndex],\n//           paid: isFullPayment,\n//           paymentStatus: paymentStatus,\n//           lastPaymentDate: formData.date,\n//           lastPaymentAmount: paymentAmount,\n//           remainingAmount: Math.max(0, remainingAmount),\n//           paymentHistory: [\n//             ...(existingOrders[orderIndex].paymentHistory || []),\n//             paymentData.id\n//           ]\n//         };\n\n//         localStorage.setItem('orders', JSON.stringify(existingOrders));\n//       }\n\n//       // Call the callback with payment details\n//       if (onSubmit) {\n//         onSubmit(paymentData, isFullPayment);\n//       }\n\n//       // Trigger any additional completion actions\n//       if (onPaymentComplete) {\n//         onPaymentComplete(paymentData, isFullPayment);\n//       }\n\n//       // Show success message and close\n//       const message = isFullPayment \n//         ? 'Payment recorded successfully. Invoice is now fully paid.'\n//         : `Partial payment of ${formatCurrency(paymentAmount)} recorded. Remaining balance: ${formatCurrency(remainingAmount)}`;\n\n//       // You can show this message using a toast notification if available\n//       console.log(message);\n\n//       onClose();\n//     } catch (error) {\n//       console.error('Error recording payment:', error);\n//       setErrors({ general: 'Failed to record payment. Please try again.' });\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   // Helper function to find account name by ID in hierarchical structure\n//   const getAccountNameById = (accountId, accountList) => {\n//     for (const account of accountList) {\n//       if (account.id === accountId) {\n//         return account.name;\n//       }\n//       if (account.children && account.children.length > 0) {\n//         const foundInChildren = getAccountNameById(accountId, account.children);\n//         if (foundInChildren) return foundInChildren;\n//       }\n//     }\n//     return null;\n//   };\n\n//   // Helper function to render account options recursively\n//   const renderAccountOptions = (accountList, level = 0) => {\n//     return accountList.map(account => (\n//       <React.Fragment key={account.id}>\n//         <option value={account.id}>\n//           {'-'.repeat(level * 2)} {account.code} - {account.name}\n//         </option>\n//         {account.children && account.children.length > 0 && (\n//           renderAccountOptions(account.children, level + 1)\n//         )}\n//       </React.Fragment>\n//     ));\n//   };\n\n//   const paymentAmount = parseFloat(formData.amount) || 0;\n//   const remainingAmount = amount - paymentAmount;\n//   const isFullPayment = paymentAmount >= amount;\n\n//   return (\n//     <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n//       <div className=\"bg-white rounded-xl shadow-2xl max-w-md w-full\">\n//         {/* Header */}\n//         <div className=\"px-6 py-4 border-b border-gray-200\">\n//           <div className=\"flex items-center justify-between\">\n//             <h2 className=\"text-xl font-semibold text-gray-900\">\n//               Record a payment for this invoice\n//             </h2>\n//             <button\n//               onClick={onClose}\n//               className=\"text-gray-400 hover:text-gray-600 transition-colors\"\n//             >\n//               <X size={24} />\n//             </button>\n//           </div>\n//         </div>\n\n//         {/* Form Body */}\n//         <div className=\"px-6 py-4 space-y-5\">\n//           {errors.general && (\n//             <div className=\"p-3 bg-red-50 border border-red-200 rounded-lg flex items-start gap-2\">\n//               <AlertCircle size={20} className=\"text-red-600 flex-shrink-0 mt-0.5\" />\n//               <span className=\"text-sm text-red-700\">{errors.general}</span>\n//             </div>\n//           )}\n//            {isAlreadyPaid ? (\n//     <div className=\"p-3 bg-red-50 border border-red-200 rounded-lg text-sm text-red-700\">\n//       This invoice is already fully paid. No further payments allowed.\n//     </div>\n//   ) : (\n//     <>\n//           {/* Date Field */}\n//           <div>\n//             <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\">\n//               <Calendar size={16} />\n//               Date\n//             </label>\n//             <input\n//               type=\"date\"\n//               value={formData.date}\n//               onChange={(e) => handleChange('date', e.target.value)}\n//               className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\n//                 errors.date ? 'border-red-500' : 'border-gray-300'\n//               }`}\n//             />\n//             {errors.date && <span className=\"text-xs text-red-600 mt-1\">{errors.date}</span>}\n//           </div>\n\n//           {/* Amount Field */}\n//           <div>\n//             <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\">\n//               <DollarSign size={16} />\n//               Amount\n//             </label>\n//             <div className=\"relative\">\n//               <span className=\"absolute left-3 top-1/2 -translate-y-1/2 text-gray-500 font-medium\">\n//                 Rs\n//               </span>\n//               <input\n//                 type=\"number\"\n//                 step=\"0.01\"\n//                 value={formData.amount}\n//                 onChange={(e) => handleChange('amount', e.target.value)}\n//                 className={`w-full pl-10 pr-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\n//                   errors.amount ? 'border-red-500' : 'border-gray-300'\n//                 }`}\n//                 placeholder=\"0.00\"\n//               />\n//             </div>\n//             {errors.amount && <span className=\"text-xs text-red-600 mt-1\">{errors.amount}</span>}\n\n//             {paymentAmount > 0 && (\n//               <div className=\"mt-2 text-sm\">\n//                 {isFullPayment ? (\n//                   <span className=\"text-green-600 font-medium\">Invoice will be fully paid</span>\n//                 ) : (\n//                   <span className=\"text-orange-600\">\n//                     Partial payment - Remaining: {formatCurrency(remainingAmount)}\n//                   </span>\n//                 )}\n//               </div>\n//             )}\n//           </div>\n\n//           {/* Payment Method */}\n//           <div>\n//             <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\">\n//               <CreditCard size={16} />\n//               Method\n//             </label>\n//             <select\n//               value={formData.method}\n//               onChange={(e) => handleChange('method', e.target.value)}\n//               className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\n//                 errors.method ? 'border-red-500' : 'border-gray-300'\n//               }`}\n//             >\n//               <option value=\"\">Select a payment method...</option>\n//               <option value=\"cash\">Cash</option>\n//               <option value=\"check\">Check</option>\n//               <option value=\"bank_transfer\">Bank Transfer</option>\n//               <option value=\"credit_card\">Credit Card</option>\n//               <option value=\"debit_card\">Debit Card</option>\n//               <option value=\"online\">Online Payment</option>\n//             </select>\n//             {errors.method && <span className=\"text-xs text-red-600 mt-1\">{errors.method}</span>}\n//           </div>\n\n//           {/* Account */}\n//           <div>\n//             <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\">\n//               <FileText size={16} />\n//               Account\n//             </label>\n//             <select\n//               value={formData.account}\n//               onChange={(e) => handleChange('account', e.target.value)}\n//               className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\n//                 errors.account ? 'border-red-500' : 'border-gray-300'\n//               }`}\n//             >\n//               <option value=\"\">Select a payment account...</option>\n//               {renderAccountOptions(accounts)}\n//             </select>\n//             {errors.account && <span className=\"text-xs text-red-600 mt-1\">{errors.account}</span>}\n//             <p className=\"text-xs text-gray-500 mt-1\">\n//               Any account into which you deposit and withdraw funds from.{' '}\n//               <a href=\"#\" className=\"text-blue-600 hover:text-blue-700\">Learn more</a>\n//             </p>\n//           </div>\n\n//           {/* Memo */}\n//           <div>\n//             <label className=\"text-sm font-medium text-gray-700 mb-1 block\">\n//               Memo / notes\n//             </label>\n//             <textarea\n//               value={formData.memo}\n//               onChange={(e) => handleChange('memo', e.target.value)}\n//               rows={3}\n//               className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n//               placeholder=\"Add any additional notes...\"\n//             />\n//           </div>\n//         </div>\n\n//         {/* Footer */}\n//         <div className=\"px-6 py-4 border-t border-gray-200 flex items-center justify-end gap-3\">\n//           <button\n//             onClick={onClose}\n//             className=\"px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors\"\n//           >\n//             Cancel\n//           </button>\n//           <button\n//             onClick={handleSubmit}\n//             disabled={loading || !formData.amount || parseFloat(formData.amount) <= 0}\n//             className={`px-6 py-2 rounded-lg font-medium transition-colors ${\n//               loading || !formData.amount || parseFloat(formData.amount) <= 0\n//                 ? 'bg-gray-300 text-gray-500 cursor-not-allowed'\n//                 : 'bg-blue-600 text-white hover:bg-blue-700'\n//             }`}\n//           >\n//             {loading ? 'Processing...' : 'Submit'}\n//           </button>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default RecordPaymentModal;\n\nimport React, { useState, useEffect } from \"react\";\nimport { AlertCircle, Calendar, DollarSign, CreditCard, FileText } from \"lucide-react\";\nimport { formatCurrency } from \"../AccountsReceivableUtils/formatters\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst RecordPaymentModal = ({\n  invoiceId,\n  amount,\n  accounts,\n  onClose,\n  onRefresh\n}) => {\n  _s();\n  const [formData, setFormData] = useState({\n    date: \"\",\n    amount: \"\",\n    method: \"\",\n    account: \"\",\n    memo: \"\"\n  });\n  const [errors, setErrors] = useState({});\n  const [loading, setLoading] = useState(false);\n  const [isAlreadyPaid, setIsAlreadyPaid] = useState(false);\n\n  // Derived values\n  const paymentAmount = parseFloat(formData.amount) || 0;\n  const remainingAmount = amount - paymentAmount;\n  const isFullPayment = remainingAmount <= 0;\n\n  // ✅ Check if invoice is already paid on mount\n  useEffect(() => {\n    const existingOrders = JSON.parse(localStorage.getItem(\"orders\") || \"[]\");\n    const order = existingOrders.find(o => o.orderId === invoiceId || o.id === invoiceId);\n    if (order && (order.paid || order.paymentStatus === \"paid\")) {\n      setIsAlreadyPaid(true);\n    }\n  }, [invoiceId]);\n\n  // Handle form field change\n  const handleChange = (field, value) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n    setErrors(prev => ({\n      ...prev,\n      [field]: null\n    }));\n  };\n\n  // Validate form\n  const validateForm = () => {\n    let valid = true;\n    let newErrors = {};\n    if (!formData.date) {\n      newErrors.date = \"Payment date is required.\";\n      valid = false;\n    }\n    if (!formData.amount || parseFloat(formData.amount) <= 0) {\n      newErrors.amount = \"Enter a valid payment amount.\";\n      valid = false;\n    }\n    if (!formData.method) {\n      newErrors.method = \"Select a payment method.\";\n      valid = false;\n    }\n    if (!formData.account) {\n      newErrors.account = \"Select a payment account.\";\n      valid = false;\n    }\n    setErrors(newErrors);\n    return valid;\n  };\n\n  // Handle submit\n  const handleSubmit = async () => {\n    if (isAlreadyPaid) {\n      setErrors({\n        general: \"This invoice has already been fully paid. No further payments allowed.\"\n      });\n      return;\n    }\n    if (!validateForm()) return;\n    setLoading(true);\n    try {\n      const paymentAmount = parseFloat(formData.amount);\n      const remainingAmount = amount - paymentAmount;\n      const isFullPayment = remainingAmount <= 0;\n      const paymentStatus = isFullPayment ? \"paid\" : \"partial\";\n\n      // Update localStorage orders\n      const existingOrders = JSON.parse(localStorage.getItem(\"orders\") || \"[]\");\n      const orderIndex = existingOrders.findIndex(o => o.orderId === invoiceId || o.id === invoiceId);\n      if (orderIndex !== -1) {\n        existingOrders[orderIndex] = {\n          ...existingOrders[orderIndex],\n          paid: isFullPayment,\n          paymentStatus,\n          paymentDate: formData.date,\n          remainingAmount: remainingAmount > 0 ? remainingAmount : 0\n        };\n        localStorage.setItem(\"orders\", JSON.stringify(existingOrders));\n      }\n\n      // Refresh parent\n      if (onRefresh) onRefresh();\n      onClose();\n    } catch (error) {\n      console.error(\"Error recording payment:\", error);\n      setErrors({\n        general: \"Failed to record payment. Please try again.\"\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Render account options\n  const renderAccountOptions = accounts => {\n    if (!accounts || accounts.length === 0) return null;\n    return accounts.map(acc => /*#__PURE__*/_jsxDEV(\"option\", {\n      value: acc.id,\n      children: acc.name\n    }, acc.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 516,\n      columnNumber: 7\n    }, this));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"fixed inset-0 flex items-center justify-center bg-black/30 z-50\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-white rounded-lg shadow-lg w-full max-w-lg\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"px-6 py-4 border-b border-gray-200 flex items-center justify-between\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-lg font-semibold text-gray-900\",\n          children: \"Record Payment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 527,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: onClose,\n          className: \"text-gray-500 hover:text-gray-700\",\n          children: \"\\u2715\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 530,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 526,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"px-6 py-4 space-y-5\",\n        children: [errors.general && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"p-3 bg-red-50 border border-red-200 rounded-lg flex items-start gap-2\",\n          children: [/*#__PURE__*/_jsxDEV(AlertCircle, {\n            size: 20,\n            className: \"text-red-600 flex-shrink-0 mt-0.5\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 539,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-sm text-red-700\",\n            children: errors.general\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 543,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 538,\n          columnNumber: 13\n        }, this), isAlreadyPaid ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"p-3 bg-red-50 border border-red-200 rounded-lg text-sm text-red-700\",\n          children: \"This invoice is already fully paid. No further payments allowed.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 548,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\",\n              children: [/*#__PURE__*/_jsxDEV(Calendar, {\n                size: 16\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 556,\n                columnNumber: 19\n              }, this), \"Date\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 555,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"date\",\n              value: formData.date,\n              onChange: e => handleChange(\"date\", e.target.value),\n              className: `w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${errors.date ? \"border-red-500\" : \"border-gray-300\"}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 559,\n              columnNumber: 17\n            }, this), errors.date && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"text-xs text-red-600 mt-1\",\n              children: errors.date\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 568,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 554,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\",\n              children: [/*#__PURE__*/_jsxDEV(DollarSign, {\n                size: 16\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 577,\n                columnNumber: 19\n              }, this), \"Amount\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 576,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"relative\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"absolute left-3 top-1/2 -translate-y-1/2 text-gray-500 font-medium\",\n                children: \"Rs\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 581,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"number\",\n                step: \"0.01\",\n                value: formData.amount,\n                onChange: e => handleChange(\"amount\", e.target.value),\n                className: `w-full pl-10 pr-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${errors.amount ? \"border-red-500\" : \"border-gray-300\"}`,\n                placeholder: \"0.00\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 584,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 580,\n              columnNumber: 17\n            }, this), errors.amount && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"text-xs text-red-600 mt-1\",\n              children: errors.amount\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 596,\n              columnNumber: 19\n            }, this), paymentAmount > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mt-2 text-sm\",\n              children: isFullPayment ? /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"text-green-600 font-medium\",\n                children: \"Invoice will be fully paid\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 604,\n                columnNumber: 23\n              }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"text-orange-600\",\n                children: [\"Partial payment - Remaining:\", \" \", formatCurrency(remainingAmount)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 608,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 602,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 575,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\",\n              children: [/*#__PURE__*/_jsxDEV(CreditCard, {\n                size: 16\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 620,\n                columnNumber: 19\n              }, this), \"Method\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 619,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              value: formData.method,\n              onChange: e => handleChange(\"method\", e.target.value),\n              className: `w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${errors.method ? \"border-red-500\" : \"border-gray-300\"}`,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Select a payment method...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 630,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"cash\",\n                children: \"Cash\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 631,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"check\",\n                children: \"Check\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 632,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"bank_transfer\",\n                children: \"Bank Transfer\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 633,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"credit_card\",\n                children: \"Credit Card\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 634,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"debit_card\",\n                children: \"Debit Card\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 635,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"online\",\n                children: \"Online Payment\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 636,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 623,\n              columnNumber: 17\n            }, this), errors.method && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"text-xs text-red-600 mt-1\",\n              children: errors.method\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 639,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 618,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\",\n              children: [/*#__PURE__*/_jsxDEV(FileText, {\n                size: 16\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 648,\n                columnNumber: 19\n              }, this), \"Account\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 647,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              value: formData.account,\n              onChange: e => handleChange(\"account\", e.target.value),\n              className: `w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${errors.account ? \"border-red-500\" : \"border-gray-300\"}`,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Select a payment account...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 658,\n                columnNumber: 19\n              }, this), renderAccountOptions(accounts)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 651,\n              columnNumber: 17\n            }, this), errors.account && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"text-xs text-red-600 mt-1\",\n              children: errors.account\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 662,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-xs text-gray-500 mt-1\",\n              children: [\"Any account into which you deposit and withdraw funds from.\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n                href: \"#\",\n                className: \"text-blue-600 hover:text-blue-700\",\n                children: \"Learn more\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 668,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 666,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 646,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"text-sm font-medium text-gray-700 mb-1 block\",\n              children: \"Memo / notes\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 676,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n              value: formData.memo,\n              onChange: e => handleChange(\"memo\", e.target.value),\n              rows: 3,\n              className: \"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\",\n              placeholder: \"Add any additional notes...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 679,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 675,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 536,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"px-6 py-4 border-t border-gray-200 flex items-center justify-end gap-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: onClose,\n          className: \"px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors\",\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 693,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSubmit,\n          disabled: loading || !formData.amount || parseFloat(formData.amount) <= 0,\n          className: `px-6 py-2 rounded-lg font-medium transition-colors ${loading || !formData.amount || parseFloat(formData.amount) <= 0 ? \"bg-gray-300 text-gray-500 cursor-not-allowed\" : \"bg-blue-600 text-white hover:bg-blue-700\"}`,\n          children: loading ? \"Processing...\" : \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 699,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 692,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 524,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 523,\n    columnNumber: 5\n  }, this);\n};\n_s(RecordPaymentModal, \"E9Mfco1DtXy2Kexnb9ASlEE9a1U=\");\n_c = RecordPaymentModal;\nexport default RecordPaymentModal;\nvar _c;\n$RefreshReg$(_c, \"RecordPaymentModal\");","map":{"version":3,"names":["React","useState","useEffect","AlertCircle","Calendar","DollarSign","CreditCard","FileText","formatCurrency","jsxDEV","_jsxDEV","Fragment","_Fragment","RecordPaymentModal","invoiceId","amount","accounts","onClose","onRefresh","_s","formData","setFormData","date","method","account","memo","errors","setErrors","loading","setLoading","isAlreadyPaid","setIsAlreadyPaid","paymentAmount","parseFloat","remainingAmount","isFullPayment","existingOrders","JSON","parse","localStorage","getItem","order","find","o","orderId","id","paid","paymentStatus","handleChange","field","value","prev","validateForm","valid","newErrors","handleSubmit","general","orderIndex","findIndex","paymentDate","setItem","stringify","error","console","renderAccountOptions","length","map","acc","children","name","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","size","type","onChange","e","target","step","placeholder","href","rows","disabled","_c","$RefreshReg$"],"sources":["C:/Users/Logic-Unit/my-account/src/components/AccountsReceivable/RecordPaymentModal.jsx"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import { X, Calendar, DollarSign, CreditCard, FileText, AlertCircle } from 'lucide-react';\r\n// import { formatCurrency } from './AccountsReceivableUtils/formatters';\r\n\r\n// const RecordPaymentModal = ({ invoiceId, amount, onClose, onSubmit, onPaymentComplete }) => {\r\n//   const [formData, setFormData] = useState({\r\n//     date: new Date().toISOString().split('T')[0],\r\n//     amount: amount?.toString() || '',\r\n//     method: '',\r\n//     account: '',\r\n//     memo: ''\r\n//   });\r\n  \r\n//   const [accounts, setAccounts] = useState([]);\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [errors, setErrors] = useState({});\r\n//   const [isAlreadyPaid, setIsAlreadyPaid] = useState(false); // ✅ NEW\r\n\r\n//   // Fetch accounts on mount\r\n//   useEffect(() => {\r\n//     fetchAccounts();\r\n//   }, []);\r\n\r\n//   // Set initial amount\r\n//   useEffect(() => {\r\n//     if (amount) {\r\n//       setFormData(prev => ({ ...prev, amount: amount.toString() }));\r\n//     }\r\n//   }, [amount]);\r\n//    // ✅ Check if this invoice is already fully paid\r\n//   useEffect(() => {\r\n//     const existingOrders = JSON.parse(localStorage.getItem('orders') || '[]');\r\n//     const order = existingOrders.find(o => o.orderId === invoiceId || o.id === invoiceId);\r\n\r\n//     if (order && (order.paid || order.paymentStatus === 'paid')) {\r\n//       setIsAlreadyPaid(true);\r\n//     }\r\n//   }, [invoiceId]);\r\n//   const fetchAccounts = async () => {\r\n//     try {\r\n//       const response = await fetch('http://localhost:8080/api/accounts');\r\n//       const data = await response.json();\r\n\r\n//       // Filter only asset accounts (like the commented code)\r\n//       const assetAccounts = data.filter(acct => acct.type === 'assets');\r\n\r\n//       // Build parent-child map (like the commented code)\r\n//       const accountMap = {};\r\n//       assetAccounts.forEach(acct => accountMap[acct.id] = { ...acct, children: [] });\r\n\r\n//       assetAccounts.forEach(acct => {\r\n//         if (acct.parentId && accountMap[acct.parentId]) {\r\n//           accountMap[acct.parentId].children.push(accountMap[acct.id]);\r\n//         }\r\n//       });\r\n\r\n//       // Top-level accounts (like the commented code)\r\n//       const tree = assetAccounts.filter(acct => !acct.parentId || !accountMap[acct.parentId]);\r\n//       setAccounts(tree);\r\n//     } catch (err) {\r\n//       console.error('Failed to fetch accounts:', err);\r\n//     }\r\n//   };\r\n\r\n//   const handleChange = (field, value) => {\r\n//     setFormData(prev => ({ ...prev, [field]: value }));\r\n//     // Clear error for this field when user starts typing\r\n//     if (errors[field]) {\r\n//       setErrors(prev => ({ ...prev, [field]: '' }));\r\n//     }\r\n//   };\r\n\r\n//   const validateForm = () => {\r\n//     const newErrors = {};\r\n    \r\n//     if (!formData.date) {\r\n//       newErrors.date = 'Payment date is required';\r\n//     }\r\n    \r\n//     if (!formData.amount || parseFloat(formData.amount) <= 0) {\r\n//       newErrors.amount = 'Valid payment amount is required';\r\n//     }\r\n    \r\n//     if (!formData.method) {\r\n//       newErrors.method = 'Payment method is required';\r\n//     }\r\n    \r\n//     if (!formData.account) {\r\n//       newErrors.account = 'Deposit account is required';\r\n//     }\r\n\r\n//     setErrors(newErrors);\r\n//     return Object.keys(newErrors).length === 0;\r\n//   };\r\n\r\n//   const handleSubmit = async () => {\r\n//     if (isAlreadyPaid) {\r\n//       setErrors({\r\n//         general: 'This invoice has already been fully paid. No further payments allowed.'\r\n//       });\r\n//       return;\r\n//     }\r\n\r\n//     if (!validateForm()) return;\r\n\r\n//     setLoading(true);\r\n    \r\n//     try {\r\n//       const paymentAmount = parseFloat(formData.amount);\r\n//       const remainingAmount = amount - paymentAmount;\r\n//       const isFullPayment = remainingAmount <= 0;\r\n//       const paymentStatus = isFullPayment ? 'paid' : 'partial';\r\n      \r\n//       // Create payment record\r\n//       const paymentData = {\r\n//         id: `PAY-${Date.now()}`,\r\n//         invoiceId,\r\n//         orderId: invoiceId,\r\n//         date: formData.date,\r\n//         amount: paymentAmount,\r\n//         paymentMethod: formData.method,\r\n//         accountId: formData.account,\r\n//         // Get account name from the hierarchical structure\r\n//         accountName: getAccountNameById(formData.account, accounts) || 'Unknown Account',\r\n//         memo: formData.memo,\r\n//         status: paymentStatus,\r\n//         remainingAmount: Math.max(0, remainingAmount),\r\n//         createdAt: new Date().toISOString(),\r\n//         createdBy: 'current_user' // Replace with actual user\r\n//       };\r\n\r\n//       // Save payment to localStorage\r\n//       const existingPayments = JSON.parse(localStorage.getItem('payments') || '[]');\r\n//       const updatedPayments = [...existingPayments, paymentData];\r\n//       localStorage.setItem('payments', JSON.stringify(updatedPayments));\r\n\r\n//       // Update the invoice/order status\r\n//       const existingOrders = JSON.parse(localStorage.getItem('orders') || '[]');\r\n//       const orderIndex = existingOrders.findIndex(order => \r\n//         order.orderId === invoiceId || order.id === invoiceId\r\n//       );\r\n      \r\n//       if (orderIndex !== -1) {\r\n//         existingOrders[orderIndex] = {\r\n//           ...existingOrders[orderIndex],\r\n//           paid: isFullPayment,\r\n//           paymentStatus: paymentStatus,\r\n//           lastPaymentDate: formData.date,\r\n//           lastPaymentAmount: paymentAmount,\r\n//           remainingAmount: Math.max(0, remainingAmount),\r\n//           paymentHistory: [\r\n//             ...(existingOrders[orderIndex].paymentHistory || []),\r\n//             paymentData.id\r\n//           ]\r\n//         };\r\n        \r\n//         localStorage.setItem('orders', JSON.stringify(existingOrders));\r\n//       }\r\n\r\n//       // Call the callback with payment details\r\n//       if (onSubmit) {\r\n//         onSubmit(paymentData, isFullPayment);\r\n//       }\r\n      \r\n//       // Trigger any additional completion actions\r\n//       if (onPaymentComplete) {\r\n//         onPaymentComplete(paymentData, isFullPayment);\r\n//       }\r\n\r\n//       // Show success message and close\r\n//       const message = isFullPayment \r\n//         ? 'Payment recorded successfully. Invoice is now fully paid.'\r\n//         : `Partial payment of ${formatCurrency(paymentAmount)} recorded. Remaining balance: ${formatCurrency(remainingAmount)}`;\r\n      \r\n//       // You can show this message using a toast notification if available\r\n//       console.log(message);\r\n      \r\n//       onClose();\r\n//     } catch (error) {\r\n//       console.error('Error recording payment:', error);\r\n//       setErrors({ general: 'Failed to record payment. Please try again.' });\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   // Helper function to find account name by ID in hierarchical structure\r\n//   const getAccountNameById = (accountId, accountList) => {\r\n//     for (const account of accountList) {\r\n//       if (account.id === accountId) {\r\n//         return account.name;\r\n//       }\r\n//       if (account.children && account.children.length > 0) {\r\n//         const foundInChildren = getAccountNameById(accountId, account.children);\r\n//         if (foundInChildren) return foundInChildren;\r\n//       }\r\n//     }\r\n//     return null;\r\n//   };\r\n\r\n//   // Helper function to render account options recursively\r\n//   const renderAccountOptions = (accountList, level = 0) => {\r\n//     return accountList.map(account => (\r\n//       <React.Fragment key={account.id}>\r\n//         <option value={account.id}>\r\n//           {'-'.repeat(level * 2)} {account.code} - {account.name}\r\n//         </option>\r\n//         {account.children && account.children.length > 0 && (\r\n//           renderAccountOptions(account.children, level + 1)\r\n//         )}\r\n//       </React.Fragment>\r\n//     ));\r\n//   };\r\n\r\n//   const paymentAmount = parseFloat(formData.amount) || 0;\r\n//   const remainingAmount = amount - paymentAmount;\r\n//   const isFullPayment = paymentAmount >= amount;\r\n\r\n//   return (\r\n//     <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\r\n//       <div className=\"bg-white rounded-xl shadow-2xl max-w-md w-full\">\r\n//         {/* Header */}\r\n//         <div className=\"px-6 py-4 border-b border-gray-200\">\r\n//           <div className=\"flex items-center justify-between\">\r\n//             <h2 className=\"text-xl font-semibold text-gray-900\">\r\n//               Record a payment for this invoice\r\n//             </h2>\r\n//             <button\r\n//               onClick={onClose}\r\n//               className=\"text-gray-400 hover:text-gray-600 transition-colors\"\r\n//             >\r\n//               <X size={24} />\r\n//             </button>\r\n//           </div>\r\n//         </div>\r\n\r\n//         {/* Form Body */}\r\n//         <div className=\"px-6 py-4 space-y-5\">\r\n//           {errors.general && (\r\n//             <div className=\"p-3 bg-red-50 border border-red-200 rounded-lg flex items-start gap-2\">\r\n//               <AlertCircle size={20} className=\"text-red-600 flex-shrink-0 mt-0.5\" />\r\n//               <span className=\"text-sm text-red-700\">{errors.general}</span>\r\n//             </div>\r\n//           )}\r\n//            {isAlreadyPaid ? (\r\n//     <div className=\"p-3 bg-red-50 border border-red-200 rounded-lg text-sm text-red-700\">\r\n//       This invoice is already fully paid. No further payments allowed.\r\n//     </div>\r\n//   ) : (\r\n//     <>\r\n//           {/* Date Field */}\r\n//           <div>\r\n//             <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\">\r\n//               <Calendar size={16} />\r\n//               Date\r\n//             </label>\r\n//             <input\r\n//               type=\"date\"\r\n//               value={formData.date}\r\n//               onChange={(e) => handleChange('date', e.target.value)}\r\n//               className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\r\n//                 errors.date ? 'border-red-500' : 'border-gray-300'\r\n//               }`}\r\n//             />\r\n//             {errors.date && <span className=\"text-xs text-red-600 mt-1\">{errors.date}</span>}\r\n//           </div>\r\n\r\n//           {/* Amount Field */}\r\n//           <div>\r\n//             <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\">\r\n//               <DollarSign size={16} />\r\n//               Amount\r\n//             </label>\r\n//             <div className=\"relative\">\r\n//               <span className=\"absolute left-3 top-1/2 -translate-y-1/2 text-gray-500 font-medium\">\r\n//                 Rs\r\n//               </span>\r\n//               <input\r\n//                 type=\"number\"\r\n//                 step=\"0.01\"\r\n//                 value={formData.amount}\r\n//                 onChange={(e) => handleChange('amount', e.target.value)}\r\n//                 className={`w-full pl-10 pr-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\r\n//                   errors.amount ? 'border-red-500' : 'border-gray-300'\r\n//                 }`}\r\n//                 placeholder=\"0.00\"\r\n//               />\r\n//             </div>\r\n//             {errors.amount && <span className=\"text-xs text-red-600 mt-1\">{errors.amount}</span>}\r\n            \r\n//             {paymentAmount > 0 && (\r\n//               <div className=\"mt-2 text-sm\">\r\n//                 {isFullPayment ? (\r\n//                   <span className=\"text-green-600 font-medium\">Invoice will be fully paid</span>\r\n//                 ) : (\r\n//                   <span className=\"text-orange-600\">\r\n//                     Partial payment - Remaining: {formatCurrency(remainingAmount)}\r\n//                   </span>\r\n//                 )}\r\n//               </div>\r\n//             )}\r\n//           </div>\r\n\r\n//           {/* Payment Method */}\r\n//           <div>\r\n//             <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\">\r\n//               <CreditCard size={16} />\r\n//               Method\r\n//             </label>\r\n//             <select\r\n//               value={formData.method}\r\n//               onChange={(e) => handleChange('method', e.target.value)}\r\n//               className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\r\n//                 errors.method ? 'border-red-500' : 'border-gray-300'\r\n//               }`}\r\n//             >\r\n//               <option value=\"\">Select a payment method...</option>\r\n//               <option value=\"cash\">Cash</option>\r\n//               <option value=\"check\">Check</option>\r\n//               <option value=\"bank_transfer\">Bank Transfer</option>\r\n//               <option value=\"credit_card\">Credit Card</option>\r\n//               <option value=\"debit_card\">Debit Card</option>\r\n//               <option value=\"online\">Online Payment</option>\r\n//             </select>\r\n//             {errors.method && <span className=\"text-xs text-red-600 mt-1\">{errors.method}</span>}\r\n//           </div>\r\n\r\n//           {/* Account */}\r\n//           <div>\r\n//             <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\">\r\n//               <FileText size={16} />\r\n//               Account\r\n//             </label>\r\n//             <select\r\n//               value={formData.account}\r\n//               onChange={(e) => handleChange('account', e.target.value)}\r\n//               className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\r\n//                 errors.account ? 'border-red-500' : 'border-gray-300'\r\n//               }`}\r\n//             >\r\n//               <option value=\"\">Select a payment account...</option>\r\n//               {renderAccountOptions(accounts)}\r\n//             </select>\r\n//             {errors.account && <span className=\"text-xs text-red-600 mt-1\">{errors.account}</span>}\r\n//             <p className=\"text-xs text-gray-500 mt-1\">\r\n//               Any account into which you deposit and withdraw funds from.{' '}\r\n//               <a href=\"#\" className=\"text-blue-600 hover:text-blue-700\">Learn more</a>\r\n//             </p>\r\n//           </div>\r\n\r\n//           {/* Memo */}\r\n//           <div>\r\n//             <label className=\"text-sm font-medium text-gray-700 mb-1 block\">\r\n//               Memo / notes\r\n//             </label>\r\n//             <textarea\r\n//               value={formData.memo}\r\n//               onChange={(e) => handleChange('memo', e.target.value)}\r\n//               rows={3}\r\n//               className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\r\n//               placeholder=\"Add any additional notes...\"\r\n//             />\r\n//           </div>\r\n//         </div>\r\n\r\n//         {/* Footer */}\r\n//         <div className=\"px-6 py-4 border-t border-gray-200 flex items-center justify-end gap-3\">\r\n//           <button\r\n//             onClick={onClose}\r\n//             className=\"px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors\"\r\n//           >\r\n//             Cancel\r\n//           </button>\r\n//           <button\r\n//             onClick={handleSubmit}\r\n//             disabled={loading || !formData.amount || parseFloat(formData.amount) <= 0}\r\n//             className={`px-6 py-2 rounded-lg font-medium transition-colors ${\r\n//               loading || !formData.amount || parseFloat(formData.amount) <= 0\r\n//                 ? 'bg-gray-300 text-gray-500 cursor-not-allowed'\r\n//                 : 'bg-blue-600 text-white hover:bg-blue-700'\r\n//             }`}\r\n//           >\r\n//             {loading ? 'Processing...' : 'Submit'}\r\n//           </button>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default RecordPaymentModal;\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport {\r\n  AlertCircle,\r\n  Calendar,\r\n  DollarSign,\r\n  CreditCard,\r\n  FileText,\r\n} from \"lucide-react\";\r\nimport { formatCurrency } from \"../AccountsReceivableUtils/formatters\";\r\n\r\nconst RecordPaymentModal = ({ invoiceId, amount, accounts, onClose, onRefresh }) => {\r\n  const [formData, setFormData] = useState({\r\n    date: \"\",\r\n    amount: \"\",\r\n    method: \"\",\r\n    account: \"\",\r\n    memo: \"\",\r\n  });\r\n  const [errors, setErrors] = useState({});\r\n  const [loading, setLoading] = useState(false);\r\n  const [isAlreadyPaid, setIsAlreadyPaid] = useState(false);\r\n\r\n  // Derived values\r\n  const paymentAmount = parseFloat(formData.amount) || 0;\r\n  const remainingAmount = amount - paymentAmount;\r\n  const isFullPayment = remainingAmount <= 0;\r\n\r\n  // ✅ Check if invoice is already paid on mount\r\n  useEffect(() => {\r\n    const existingOrders = JSON.parse(localStorage.getItem(\"orders\") || \"[]\");\r\n    const order = existingOrders.find(\r\n      (o) => o.orderId === invoiceId || o.id === invoiceId\r\n    );\r\n\r\n    if (order && (order.paid || order.paymentStatus === \"paid\")) {\r\n      setIsAlreadyPaid(true);\r\n    }\r\n  }, [invoiceId]);\r\n\r\n  // Handle form field change\r\n  const handleChange = (field, value) => {\r\n    setFormData((prev) => ({ ...prev, [field]: value }));\r\n    setErrors((prev) => ({ ...prev, [field]: null }));\r\n  };\r\n\r\n  // Validate form\r\n  const validateForm = () => {\r\n    let valid = true;\r\n    let newErrors = {};\r\n\r\n    if (!formData.date) {\r\n      newErrors.date = \"Payment date is required.\";\r\n      valid = false;\r\n    }\r\n    if (!formData.amount || parseFloat(formData.amount) <= 0) {\r\n      newErrors.amount = \"Enter a valid payment amount.\";\r\n      valid = false;\r\n    }\r\n    if (!formData.method) {\r\n      newErrors.method = \"Select a payment method.\";\r\n      valid = false;\r\n    }\r\n    if (!formData.account) {\r\n      newErrors.account = \"Select a payment account.\";\r\n      valid = false;\r\n    }\r\n\r\n    setErrors(newErrors);\r\n    return valid;\r\n  };\r\n\r\n  // Handle submit\r\n  const handleSubmit = async () => {\r\n    if (isAlreadyPaid) {\r\n      setErrors({\r\n        general:\r\n          \"This invoice has already been fully paid. No further payments allowed.\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (!validateForm()) return;\r\n\r\n    setLoading(true);\r\n    try {\r\n      const paymentAmount = parseFloat(formData.amount);\r\n      const remainingAmount = amount - paymentAmount;\r\n      const isFullPayment = remainingAmount <= 0;\r\n      const paymentStatus = isFullPayment ? \"paid\" : \"partial\";\r\n\r\n      // Update localStorage orders\r\n      const existingOrders = JSON.parse(localStorage.getItem(\"orders\") || \"[]\");\r\n      const orderIndex = existingOrders.findIndex(\r\n        (o) => o.orderId === invoiceId || o.id === invoiceId\r\n      );\r\n\r\n      if (orderIndex !== -1) {\r\n        existingOrders[orderIndex] = {\r\n          ...existingOrders[orderIndex],\r\n          paid: isFullPayment,\r\n          paymentStatus,\r\n          paymentDate: formData.date,\r\n          remainingAmount: remainingAmount > 0 ? remainingAmount : 0,\r\n        };\r\n        localStorage.setItem(\"orders\", JSON.stringify(existingOrders));\r\n      }\r\n\r\n      // Refresh parent\r\n      if (onRefresh) onRefresh();\r\n\r\n      onClose();\r\n    } catch (error) {\r\n      console.error(\"Error recording payment:\", error);\r\n      setErrors({ general: \"Failed to record payment. Please try again.\" });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Render account options\r\n  const renderAccountOptions = (accounts) => {\r\n    if (!accounts || accounts.length === 0) return null;\r\n    return accounts.map((acc) => (\r\n      <option key={acc.id} value={acc.id}>\r\n        {acc.name}\r\n      </option>\r\n    ));\r\n  };\r\n\r\n  return (\r\n    <div className=\"fixed inset-0 flex items-center justify-center bg-black/30 z-50\">\r\n      <div className=\"bg-white rounded-lg shadow-lg w-full max-w-lg\">\r\n        {/* Header */}\r\n        <div className=\"px-6 py-4 border-b border-gray-200 flex items-center justify-between\">\r\n          <h2 className=\"text-lg font-semibold text-gray-900\">\r\n            Record Payment\r\n          </h2>\r\n          <button onClick={onClose} className=\"text-gray-500 hover:text-gray-700\">\r\n            ✕\r\n          </button>\r\n        </div>\r\n\r\n        {/* Form Body */}\r\n        <div className=\"px-6 py-4 space-y-5\">\r\n          {errors.general && (\r\n            <div className=\"p-3 bg-red-50 border border-red-200 rounded-lg flex items-start gap-2\">\r\n              <AlertCircle\r\n                size={20}\r\n                className=\"text-red-600 flex-shrink-0 mt-0.5\"\r\n              />\r\n              <span className=\"text-sm text-red-700\">{errors.general}</span>\r\n            </div>\r\n          )}\r\n\r\n          {isAlreadyPaid ? (\r\n            <div className=\"p-3 bg-red-50 border border-red-200 rounded-lg text-sm text-red-700\">\r\n              This invoice is already fully paid. No further payments allowed.\r\n            </div>\r\n          ) : (\r\n            <>\r\n              {/* Date Field */}\r\n              <div>\r\n                <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\">\r\n                  <Calendar size={16} />\r\n                  Date\r\n                </label>\r\n                <input\r\n                  type=\"date\"\r\n                  value={formData.date}\r\n                  onChange={(e) => handleChange(\"date\", e.target.value)}\r\n                  className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\r\n                    errors.date ? \"border-red-500\" : \"border-gray-300\"\r\n                  }`}\r\n                />\r\n                {errors.date && (\r\n                  <span className=\"text-xs text-red-600 mt-1\">\r\n                    {errors.date}\r\n                  </span>\r\n                )}\r\n              </div>\r\n\r\n              {/* Amount Field */}\r\n              <div>\r\n                <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\">\r\n                  <DollarSign size={16} />\r\n                  Amount\r\n                </label>\r\n                <div className=\"relative\">\r\n                  <span className=\"absolute left-3 top-1/2 -translate-y-1/2 text-gray-500 font-medium\">\r\n                    Rs\r\n                  </span>\r\n                  <input\r\n                    type=\"number\"\r\n                    step=\"0.01\"\r\n                    value={formData.amount}\r\n                    onChange={(e) => handleChange(\"amount\", e.target.value)}\r\n                    className={`w-full pl-10 pr-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\r\n                      errors.amount ? \"border-red-500\" : \"border-gray-300\"\r\n                    }`}\r\n                    placeholder=\"0.00\"\r\n                  />\r\n                </div>\r\n                {errors.amount && (\r\n                  <span className=\"text-xs text-red-600 mt-1\">\r\n                    {errors.amount}\r\n                  </span>\r\n                )}\r\n\r\n                {paymentAmount > 0 && (\r\n                  <div className=\"mt-2 text-sm\">\r\n                    {isFullPayment ? (\r\n                      <span className=\"text-green-600 font-medium\">\r\n                        Invoice will be fully paid\r\n                      </span>\r\n                    ) : (\r\n                      <span className=\"text-orange-600\">\r\n                        Partial payment - Remaining:{\" \"}\r\n                        {formatCurrency(remainingAmount)}\r\n                      </span>\r\n                    )}\r\n                  </div>\r\n                )}\r\n              </div>\r\n\r\n              {/* Payment Method */}\r\n              <div>\r\n                <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\">\r\n                  <CreditCard size={16} />\r\n                  Method\r\n                </label>\r\n                <select\r\n                  value={formData.method}\r\n                  onChange={(e) => handleChange(\"method\", e.target.value)}\r\n                  className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\r\n                    errors.method ? \"border-red-500\" : \"border-gray-300\"\r\n                  }`}\r\n                >\r\n                  <option value=\"\">Select a payment method...</option>\r\n                  <option value=\"cash\">Cash</option>\r\n                  <option value=\"check\">Check</option>\r\n                  <option value=\"bank_transfer\">Bank Transfer</option>\r\n                  <option value=\"credit_card\">Credit Card</option>\r\n                  <option value=\"debit_card\">Debit Card</option>\r\n                  <option value=\"online\">Online Payment</option>\r\n                </select>\r\n                {errors.method && (\r\n                  <span className=\"text-xs text-red-600 mt-1\">\r\n                    {errors.method}\r\n                  </span>\r\n                )}\r\n              </div>\r\n\r\n              {/* Account */}\r\n              <div>\r\n                <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\">\r\n                  <FileText size={16} />\r\n                  Account\r\n                </label>\r\n                <select\r\n                  value={formData.account}\r\n                  onChange={(e) => handleChange(\"account\", e.target.value)}\r\n                  className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\r\n                    errors.account ? \"border-red-500\" : \"border-gray-300\"\r\n                  }`}\r\n                >\r\n                  <option value=\"\">Select a payment account...</option>\r\n                  {renderAccountOptions(accounts)}\r\n                </select>\r\n                {errors.account && (\r\n                  <span className=\"text-xs text-red-600 mt-1\">\r\n                    {errors.account}\r\n                  </span>\r\n                )}\r\n                <p className=\"text-xs text-gray-500 mt-1\">\r\n                  Any account into which you deposit and withdraw funds from.{\" \"}\r\n                  <a href=\"#\" className=\"text-blue-600 hover:text-blue-700\">\r\n                    Learn more\r\n                  </a>\r\n                </p>\r\n              </div>\r\n\r\n              {/* Memo */}\r\n              <div>\r\n                <label className=\"text-sm font-medium text-gray-700 mb-1 block\">\r\n                  Memo / notes\r\n                </label>\r\n                <textarea\r\n                  value={formData.memo}\r\n                  onChange={(e) => handleChange(\"memo\", e.target.value)}\r\n                  rows={3}\r\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\r\n                  placeholder=\"Add any additional notes...\"\r\n                />\r\n              </div>\r\n            </>\r\n          )}\r\n        </div>\r\n\r\n        {/* Footer */}\r\n        <div className=\"px-6 py-4 border-t border-gray-200 flex items-center justify-end gap-3\">\r\n          <button\r\n            onClick={onClose}\r\n            className=\"px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors\"\r\n          >\r\n            Cancel\r\n          </button>\r\n          <button\r\n            onClick={handleSubmit}\r\n            disabled={loading || !formData.amount || parseFloat(formData.amount) <= 0}\r\n            className={`px-6 py-2 rounded-lg font-medium transition-colors ${\r\n              loading || !formData.amount || parseFloat(formData.amount) <= 0\r\n                ? \"bg-gray-300 text-gray-500 cursor-not-allowed\"\r\n                : \"bg-blue-600 text-white hover:bg-blue-700\"\r\n            }`}\r\n          >\r\n            {loading ? \"Processing...\" : \"Submit\"}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RecordPaymentModal;\r\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SACEC,WAAW,EACXC,QAAQ,EACRC,UAAU,EACVC,UAAU,EACVC,QAAQ,QACH,cAAc;AACrB,SAASC,cAAc,QAAQ,uCAAuC;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEvE,MAAMC,kBAAkB,GAAGA,CAAC;EAAEC,SAAS;EAAEC,MAAM;EAAEC,QAAQ;EAAEC,OAAO;EAAEC;AAAU,CAAC,KAAK;EAAAC,EAAA;EAClF,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGpB,QAAQ,CAAC;IACvCqB,IAAI,EAAE,EAAE;IACRP,MAAM,EAAE,EAAE;IACVQ,MAAM,EAAE,EAAE;IACVC,OAAO,EAAE,EAAE;IACXC,IAAI,EAAE;EACR,CAAC,CAAC;EACF,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAG1B,QAAQ,CAAC,CAAC,CAAC,CAAC;EACxC,MAAM,CAAC2B,OAAO,EAAEC,UAAU,CAAC,GAAG5B,QAAQ,CAAC,KAAK,CAAC;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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}