{"ast":null,"code":"// Calculate AR summary\n// export const calculateARSummary = (customers, allSalesData) => {\n//   const totalAR = customers.reduce((sum, customer) => sum + customer.totalOwed, 0);\n//   const totalOverdue = customers.reduce((sum, customer) => sum + customer.overdueAmount, 0);\n//   const customersWithBalance = customers.filter(customer => customer.totalOwed > 0).length;\n\n//   // Calculate real average days outstanding from actual order data\n//   let totalDaysOutstanding = 0;\n//   let orderCount = 0;\n\n//   if (allSalesData) {\n//     allSalesData.forEach(order => {\n//       // Convert order creation date from \"2025.08.18.10.08.54.569\" to proper date\n//       const orderDateStr = order.createdAt.split('.').slice(0, 3).join('-'); // \"2025-08-18\"\n//       const orderDate = new Date(orderDateStr);\n//       const today = new Date();\n\n//       // Calculate days between order creation and today\n//       const timeDiff = today.getTime() - orderDate.getTime();\n//       const daysDiff = Math.floor(timeDiff / (1000 * 3600 * 24));\n\n//       totalDaysOutstanding += daysDiff;\n//       orderCount++;\n//     });\n//   }\n\n//   const avgDaysOutstanding = orderCount > 0 ? Math.round(totalDaysOutstanding / orderCount) : 0;\n\n//   return {\n//     totalAR,\n//     totalOverdue,\n//     customersWithBalance,\n//     avgDaysOutstanding\n//   };\n// };\nexport const calculateARSummary = (customers, allSalesData) => {\n  if (!allSalesData) allSalesData = [];\n  let totalAR = 0;\n  let totalOverdue = 0;\n  let totalDaysOutstanding = 0;\n  let unpaidOrderCount = 0;\n  allSalesData.forEach(order => {\n    const amount = order.totalAmount || 0;\n    const overdue = order.overdueAmount || 0;\n    totalAR += amount;\n    totalOverdue += overdue;\n\n    // Only count orders with unpaid amounts for avg days calculation\n    if (amount > 0) {\n      // Convert order creation date from \"2025.08.18.10.08.54.569\" to proper date\n      const orderDateParts = order.createdAt.split('.').slice(0, 3); // [\"2025\",\"08\",\"18\"]\n      const orderDateStr = orderDateParts.join('-'); // \"2025-08-18\"\n      const orderDate = new Date(orderDateStr);\n      const today = new Date();\n      const timeDiff = today.getTime() - orderDate.getTime();\n      const daysDiff = Math.floor(timeDiff / (1000 * 3600 * 24));\n      totalDaysOutstanding += daysDiff;\n      unpaidOrderCount++;\n    }\n  });\n  const avgDaysOutstanding = unpaidOrderCount > 0 ? Math.round(totalDaysOutstanding / unpaidOrderCount) : 0;\n\n  // Count customers with any unpaid orders\n  const customersWithBalance = customers.filter(customer => customer.totalOwed > 0).length;\n  return {\n    totalAR,\n    totalOverdue,\n    customersWithBalance,\n    avgDaysOutstanding\n  };\n};\n\n// Get aging data\nexport const getAgingData = salesData => {\n  const aging = {\n    current: 0,\n    days30: 0,\n    days60: 0,\n    days90: 0,\n    over90: 0\n  };\n  salesData.forEach(order => {\n    if (order.paid) return;\n    const daysPastDue = order.daysOverdue || 0;\n    if (daysPastDue <= 0) {\n      aging.current += order.total;\n    } else if (daysPastDue <= 30) {\n      aging.days30 += order.total;\n    } else if (daysPastDue <= 60) {\n      aging.days60 += order.total;\n    } else if (daysPastDue <= 90) {\n      aging.days90 += order.total;\n    } else {\n      aging.over90 += order.total;\n    }\n  });\n  return aging;\n};\n\n// Filter customers\nexport const getFilteredCustomers = (customers, filters) => {\n  // First check if we have valid data\n  if (!customers || !Array.isArray(customers)) {\n    return [];\n  }\n\n  // Start by filtering ONLY customers WITH names\n  let filtered = customers.filter(customer => customer && customer.name && typeof customer.name === 'string' && customer.name.trim() !== '');\n\n  // Now apply the rest of the filters to our name-filtered list\n  if (filters && filters.customerType && filters.customerType !== 'all') {\n    filtered = filtered.filter(customer => customer.customerType === filters.customerType);\n  }\n  if (filters && filters.status && filters.status !== 'all') {\n    filtered = filtered.filter(customer => {\n      if (filters.status === 'overdue') return customer.overdueAmount > 0;\n      if (filters.status === 'current') return customer.totalOwed > 0 && customer.overdueAmount === 0;\n      if (filters.status === 'paid_up') return customer.totalOwed === 0;\n      return true;\n    });\n  }\n  if (filters && filters.searchTerm) {\n    const term = filters.searchTerm.toLowerCase();\n    filtered = filtered.filter(customer => customer.name.toLowerCase().includes(term) || customer.email && customer.email.toLowerCase().includes(term) || customer.id && customer.id.toLowerCase().includes(term));\n  }\n  console.log(`Filtered to ${filtered.length} customers with valid names`);\n  return filtered;\n};","map":{"version":3,"names":["calculateARSummary","customers","allSalesData","totalAR","totalOverdue","totalDaysOutstanding","unpaidOrderCount","forEach","order","amount","totalAmount","overdue","overdueAmount","orderDateParts","createdAt","split","slice","orderDateStr","join","orderDate","Date","today","timeDiff","getTime","daysDiff","Math","floor","avgDaysOutstanding","round","customersWithBalance","filter","customer","totalOwed","length","getAgingData","salesData","aging","current","days30","days60","days90","over90","paid","daysPastDue","daysOverdue","total","getFilteredCustomers","filters","Array","isArray","filtered","name","trim","customerType","status","searchTerm","term","toLowerCase","includes","email","id","console","log"],"sources":["C:/Users/Logic-Unit/my-account/src/Utility/apCalculations.js"],"sourcesContent":["// Calculate AR summary\r\n// export const calculateARSummary = (customers, allSalesData) => {\r\n//   const totalAR = customers.reduce((sum, customer) => sum + customer.totalOwed, 0);\r\n//   const totalOverdue = customers.reduce((sum, customer) => sum + customer.overdueAmount, 0);\r\n//   const customersWithBalance = customers.filter(customer => customer.totalOwed > 0).length;\r\n  \r\n//   // Calculate real average days outstanding from actual order data\r\n//   let totalDaysOutstanding = 0;\r\n//   let orderCount = 0;\r\n  \r\n//   if (allSalesData) {\r\n//     allSalesData.forEach(order => {\r\n//       // Convert order creation date from \"2025.08.18.10.08.54.569\" to proper date\r\n//       const orderDateStr = order.createdAt.split('.').slice(0, 3).join('-'); // \"2025-08-18\"\r\n//       const orderDate = new Date(orderDateStr);\r\n//       const today = new Date();\r\n      \r\n//       // Calculate days between order creation and today\r\n//       const timeDiff = today.getTime() - orderDate.getTime();\r\n//       const daysDiff = Math.floor(timeDiff / (1000 * 3600 * 24));\r\n      \r\n//       totalDaysOutstanding += daysDiff;\r\n//       orderCount++;\r\n//     });\r\n//   }\r\n  \r\n//   const avgDaysOutstanding = orderCount > 0 ? Math.round(totalDaysOutstanding / orderCount) : 0;\r\n\r\n//   return {\r\n//     totalAR,\r\n//     totalOverdue,\r\n//     customersWithBalance,\r\n//     avgDaysOutstanding\r\n//   };\r\n// };\r\nexport const calculateARSummary = (customers, allSalesData) => {\r\n  if (!allSalesData) allSalesData = [];\r\n\r\n  let totalAR = 0;\r\n  let totalOverdue = 0;\r\n  let totalDaysOutstanding = 0;\r\n  let unpaidOrderCount = 0;\r\n\r\n  allSalesData.forEach(order => {\r\n    const amount = order.totalAmount || 0;\r\n    const overdue = order.overdueAmount || 0;\r\n    \r\n    totalAR += amount;\r\n    totalOverdue += overdue;\r\n\r\n    // Only count orders with unpaid amounts for avg days calculation\r\n    if (amount > 0) {\r\n      // Convert order creation date from \"2025.08.18.10.08.54.569\" to proper date\r\n      const orderDateParts = order.createdAt.split('.').slice(0, 3); // [\"2025\",\"08\",\"18\"]\r\n      const orderDateStr = orderDateParts.join('-'); // \"2025-08-18\"\r\n      const orderDate = new Date(orderDateStr);\r\n      const today = new Date();\r\n\r\n      const timeDiff = today.getTime() - orderDate.getTime();\r\n      const daysDiff = Math.floor(timeDiff / (1000 * 3600 * 24));\r\n\r\n      totalDaysOutstanding += daysDiff;\r\n      unpaidOrderCount++;\r\n    }\r\n  });\r\n\r\n  const avgDaysOutstanding = unpaidOrderCount > 0 \r\n    ? Math.round(totalDaysOutstanding / unpaidOrderCount) \r\n    : 0;\r\n\r\n  // Count customers with any unpaid orders\r\n  const customersWithBalance = customers.filter(customer => customer.totalOwed > 0).length;\r\n\r\n  return {\r\n    totalAR,\r\n    totalOverdue,\r\n    customersWithBalance,\r\n    avgDaysOutstanding\r\n  };\r\n};\r\n\r\n// Get aging data\r\nexport const getAgingData = (salesData) => {\r\n  const aging = {\r\n    current: 0,\r\n    days30: 0,\r\n    days60: 0,\r\n    days90: 0,\r\n    over90: 0\r\n  };\r\n\r\n  salesData.forEach(order => {\r\n    if (order.paid) return;\r\n    \r\n    const daysPastDue = order.daysOverdue || 0;\r\n    \r\n    if (daysPastDue <= 0) {\r\n      aging.current += order.total;\r\n    } else if (daysPastDue <= 30) {\r\n      aging.days30 += order.total;\r\n    } else if (daysPastDue <= 60) {\r\n      aging.days60 += order.total;\r\n    } else if (daysPastDue <= 90) {\r\n      aging.days90 += order.total;\r\n    } else {\r\n      aging.over90 += order.total;\r\n    }\r\n  });\r\n\r\n  return aging;\r\n};\r\n\r\n// Filter customers\r\nexport const getFilteredCustomers = (customers, filters) => {\r\n  // First check if we have valid data\r\n  if (!customers || !Array.isArray(customers)) {\r\n    return [];\r\n  }\r\n  \r\n  // Start by filtering ONLY customers WITH names\r\n  let filtered = customers.filter(customer => \r\n    customer && \r\n    customer.name && \r\n    typeof customer.name === 'string' && \r\n    customer.name.trim() !== ''\r\n  );\r\n\r\n  // Now apply the rest of the filters to our name-filtered list\r\n  if (filters && filters.customerType && filters.customerType !== 'all') {\r\n    filtered = filtered.filter(customer => customer.customerType === filters.customerType);\r\n  }\r\n\r\n  if (filters && filters.status && filters.status !== 'all') {\r\n    filtered = filtered.filter(customer => {\r\n      if (filters.status === 'overdue') return customer.overdueAmount > 0;\r\n      if (filters.status === 'current') return customer.totalOwed > 0 && customer.overdueAmount === 0;\r\n      if (filters.status === 'paid_up') return customer.totalOwed === 0;\r\n      return true;\r\n    });\r\n  }\r\n\r\n  if (filters && filters.searchTerm) {\r\n    const term = filters.searchTerm.toLowerCase();\r\n    filtered = filtered.filter(customer =>\r\n      customer.name.toLowerCase().includes(term) ||\r\n      (customer.email && customer.email.toLowerCase().includes(term)) ||\r\n      (customer.id && customer.id.toLowerCase().includes(term))\r\n    );\r\n  }\r\n\r\n  console.log(`Filtered to ${filtered.length} customers with valid names`);\r\n  return filtered;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}