{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Logic-Unit\\\\my-account\\\\src\\\\pages\\\\ChartOfAccounts.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import { ChevronDown, ChevronRight, Plus, Edit, Trash2, Save, X, Search, Filter, RefreshCw, CheckCircle, AlertCircle, XCircle, AlertTriangle } from 'lucide-react';\n\n// const ChartOfAccounts = () => {\n//   const [accounts, setAccounts] = useState([]);\n//   const [expandedNodes, setExpandedNodes] = useState(new Set());\n//   const [searchTerm, setSearchTerm] = useState('');\n//   const [selectedCategory, setSelectedCategory] = useState('all');\n//   const [isAddingAccount, setIsAddingAccount] = useState(false);\n//   const [editingAccount, setEditingAccount] = useState(null);\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState(null);\n//   const [toasts, setToasts] = useState([]);\n//   const [confirmDialog, setConfirmDialog] = useState(null);\n//   const [formData, setFormData] = useState({\n//     code: '',\n//     name: '',\n//     type: 'assets',\n//     category: 'account',\n//     parentId: null,\n//     description: '',\n//     active: true\n//   });\n\n//   // API Base URL\n//   const API_BASE_URL = 'http://localhost:8080/api/accounts';\n\n//   // Toast notification system\n//   const showToast = (message, type = 'success') => {\n//     const id = Date.now();\n//     const toast = { id, message, type };\n//     setToasts(prev => [...prev, toast]);\n\n//     // Auto remove after 5 seconds\n//     setTimeout(() => {\n//       setToasts(prev => prev.filter(t => t.id !== id));\n//     }, 5000);\n//   };\n\n//   const removeToast = (id) => {\n//     setToasts(prev => prev.filter(t => t.id !== id));\n//   };\n\n//   // Confirmation Dialog Component\n//   const ConfirmationDialog = ({ isOpen, title, message, onConfirm, onCancel, confirmText = \"Confirm\", cancelText = \"Cancel\", type = \"warning\" }) => {\n//     if (!isOpen) return null;\n\n//     const typeStyles = {\n//       warning: {\n//         icon: <AlertTriangle className=\"text-yellow-600\" size={24} />,\n//         iconBg: 'bg-yellow-100',\n//         confirmBtn: 'bg-yellow-600 hover:bg-yellow-700'\n//       },\n//       danger: {\n//         icon: <XCircle className=\"text-red-600\" size={24} />,\n//         iconBg: 'bg-red-100',\n//         confirmBtn: 'bg-red-600 hover:bg-red-700'\n//       },\n//       info: {\n//         icon: <AlertCircle className=\"text-blue-600\" size={24} />,\n//         iconBg: 'bg-blue-100',\n//         confirmBtn: 'bg-blue-600 hover:bg-blue-700'\n//       }\n//     };\n\n//     const style = typeStyles[type] || typeStyles.warning;\n\n//     return (\n//       <div className=\"fixed inset-0 z-50 overflow-y-auto\">\n//         <div className=\"flex min-h-screen items-center justify-center p-4 text-center\">\n//           <div className=\"fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity\" onClick={onCancel}></div>\n\n//           <div className=\"relative transform overflow-hidden rounded-lg bg-white text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-lg\">\n//             <div className=\"bg-white px-4 pb-4 pt-5 sm:p-6 sm:pb-4\">\n//               <div className=\"sm:flex sm:items-start\">\n//                 <div className={`mx-auto flex h-12 w-12 flex-shrink-0 items-center justify-center rounded-full sm:mx-0 sm:h-10 sm:w-10 ${style.iconBg}`}>\n//                   {style.icon}\n//                 </div>\n//                 <div className=\"mt-3 text-center sm:ml-4 sm:mt-0 sm:text-left\">\n//                   <h3 className=\"text-lg font-semibold leading-6 text-gray-900\">\n//                     {title}\n//                   </h3>\n//                   <div className=\"mt-2\">\n//                     <p className=\"text-sm text-gray-500\">\n//                       {message}\n//                     </p>\n//                   </div>\n//                 </div>\n//               </div>\n//             </div>\n//             <div className=\"bg-gray-50 px-4 py-3 sm:flex sm:flex-row-reverse sm:px-6\">\n//               <button\n//                 type=\"button\"\n//                 className={`inline-flex w-full justify-center rounded-md px-3 py-2 text-sm font-semibold text-white shadow-sm sm:ml-3 sm:w-auto ${style.confirmBtn}`}\n//                 onClick={onConfirm}\n//               >\n//                 {confirmText}\n//               </button>\n//               <button\n//                 type=\"button\"\n//                 className=\"mt-3 inline-flex w-full justify-center rounded-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50 sm:mt-0 sm:w-auto\"\n//                 onClick={onCancel}\n//               >\n//                 {cancelText}\n//               </button>\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n//     );\n//   };\n\n//   // Account types configuration\n//   const accountTypes = {\n//     assets: { label: 'Assets', color: 'bg-green-100 text-green-800', codeRange: '1000-1999' },\n//     liabilities: { label: 'Liabilities', color: 'bg-red-100 text-red-800', codeRange: '2000-2999' },\n//     equity: { label: 'Equity', color: 'bg-blue-100 text-blue-800', codeRange: '3000-3999' },\n//     revenue: { label: 'Revenue', color: 'bg-purple-100 text-purple-800', codeRange: '4000-4999' },\n//     expenses: { label: 'Expenses', color: 'bg-orange-100 text-orange-800', codeRange: '5000-5999' }\n//   };\n\n//   // Fetch accounts from API\n//   const fetchAccounts = async () => {\n//     try {\n//       setLoading(true);\n//       setError(null);\n//       const response = await fetch(API_BASE_URL);\n\n//       if (!response.ok) {\n//         throw new Error(`HTTP error! status: ${response.status}`);\n//       }\n\n//       const data = await response.json();\n//       setAccounts(data);\n\n//       // Expand main categories by default\n//       const mainCategories = data\n//         .filter(account => account.level === 0)\n//         .map(account => account.id);\n//       setExpandedNodes(new Set(mainCategories));\n\n//     } catch (err) {\n//       const errorMsg = 'Failed to fetch accounts: ' + err.message;\n//       setError(errorMsg);\n//       showToast(errorMsg, 'error');\n//       console.error('Error fetching accounts:', err);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   // Initialize component\n//   useEffect(() => {\n//     fetchAccounts();\n//   }, []);\n\n//   // Create account\n//   const createAccount = async (accountData) => {\n//     try {\n//       setLoading(true);\n//       const response = await fetch(API_BASE_URL, {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify(accountData)\n//       });\n\n//       if (!response.ok) {\n//         const errorText = await response.text();\n//         throw new Error(errorText || `HTTP error! status: ${response.status}`);\n//       }\n\n//       const result = await response.text();\n//       showToast(result || 'Account created successfully!', 'success');\n//       await fetchAccounts(); // Refresh the list\n//       return true;\n//     } catch (err) {\n//       const errorMsg = 'Failed to create account: ' + err.message;\n//       setError(errorMsg);\n//       showToast(errorMsg, 'error');\n//       console.error('Error creating account:', err);\n//       return false;\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   // Update account\n//   const updateAccount = async (accountId, accountData) => {\n//     try {\n//       setLoading(true);\n//       const response = await fetch(`${API_BASE_URL}/${accountId}`, {\n//         method: 'PUT',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify(accountData)\n//       });\n\n//       if (!response.ok) {\n//         const errorText = await response.text();\n//         throw new Error(errorText || `HTTP error! status: ${response.status}`);\n//       }\n\n//       const result = await response.text();\n//       showToast(result || 'Account updated successfully!', 'success');\n//       await fetchAccounts(); // Refresh the list\n//       return true;\n//     } catch (err) {\n//       const errorMsg = 'Failed to update account: ' + err.message;\n//       setError(errorMsg);\n//       showToast(errorMsg, 'error');\n//       console.error('Error updating account:', err);\n//       return false;\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   // Delete account\n//   const deleteAccount = async (accountId) => {\n//     try {\n//       setLoading(true);\n//       const response = await fetch(`${API_BASE_URL}/${accountId}`, {\n//         method: 'DELETE'\n//       });\n\n//       if (!response.ok) {\n//         const errorText = await response.text();\n//         throw new Error(errorText || `HTTP error! status: ${response.status}`);\n//       }\n\n//       const result = await response.text();\n//       showToast(result || 'Account deleted successfully!', 'success');\n//       await fetchAccounts(); // Refresh the list\n//       return true;\n//     } catch (err) {\n//       const errorMsg = 'Failed to delete account: ' + err.message;\n//       setError(errorMsg);\n//       showToast(errorMsg, 'error');\n//       console.error('Error deleting account:', err);\n//       return false;\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   // Helper function to flatten hierarchy for filtering\n//   const flattenAccounts = (accounts) => {\n//     const result = [];\n//     const flatten = (items) => {\n//       items.forEach(item => {\n//         result.push(item);\n//         if (item.children && item.children.length > 0) {\n//           flatten(item.children);\n//         }\n//       });\n//     };\n//     flatten(accounts);\n//     return result;\n//   };\n\n//   // Filter accounts based on search and category\n//   const getFilteredAccounts = () => {\n//     const flatAccounts = flattenAccounts(accounts);\n//     let filtered = flatAccounts;\n\n//     if (searchTerm) {\n//       filtered = filtered.filter(account => \n//         account.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n//         account.code.includes(searchTerm) ||\n//         (account.description && account.description.toLowerCase().includes(searchTerm.toLowerCase()))\n//       );\n//     }\n\n//     if (selectedCategory !== 'all') {\n//       filtered = filtered.filter(account => account.type === selectedCategory);\n//     }\n\n//     return filtered;\n//   };\n\n//   // Build hierarchy from flat accounts (for display when not searching)\n//   const buildHierarchy = (accounts, parentId = null) => {\n//     return accounts\n//       .filter(account => account.parentId === parentId)\n//       .sort((a, b) => a.code.localeCompare(b.code))\n//       .map(account => ({\n//         ...account,\n//         children: buildHierarchy(accounts, account.id)\n//       }));\n//   };\n\n//   // Toggle expand/collapse\n//   const toggleExpand = (nodeId) => {\n//     const newExpanded = new Set(expandedNodes);\n//     if (newExpanded.has(nodeId)) {\n//       newExpanded.delete(nodeId);\n//     } else {\n//       newExpanded.add(nodeId);\n//     }\n//     setExpandedNodes(newExpanded);\n//   };\n\n//   // Handle add account\n//   const handleAddAccount = (parentId = null) => {\n//     const flatAccounts = flattenAccounts(accounts);\n//     const parentAccount = parentId ? flatAccounts.find(a => a.id === parentId) : null;\n//     const accountType = parentAccount ? parentAccount.type : 'assets';\n\n//     setFormData({\n//       code: '', // Will be generated by backend\n//       name: '',\n//       type: accountType,\n//       category: 'account',\n//       parentId,\n//       description: '',\n//       active: true\n//     });\n//     setIsAddingAccount(true);\n//   };\n\n//   // Handle edit account\n//   const handleEditAccount = (account) => {\n//     setFormData({\n//       code: account.code,\n//       name: account.name,\n//       type: account.type,\n//       category: account.category,\n//       parentId: account.parentId,\n//       description: account.description || '',\n//       active: account.active !== undefined ? account.active : true\n//     });\n//     setEditingAccount(account.id);\n//   };\n\n//   // Handle save account\n//   const handleSaveAccount = async () => {\n//     if (!formData.name) {\n//       showToast('Please fill in the account name', 'error');\n//       return;\n//     }\n\n//     const success = editingAccount \n//       ? await updateAccount(editingAccount, formData)\n//       : await createAccount(formData);\n\n//     if (success) {\n//       // Reset form\n//       setFormData({\n//         code: '',\n//         name: '',\n//         type: 'assets',\n//         category: 'account',\n//         parentId: null,\n//         description: '',\n//         active: true\n//       });\n//       setIsAddingAccount(false);\n//       setEditingAccount(null);\n//     }\n//   };\n\n//   // Handle delete account with confirmation popup\n//   const handleDeleteAccount = async (account) => {\n//     const flatAccounts = flattenAccounts(accounts);\n//     const hasChildren = flatAccounts.some(a => a.parentId === account.id);\n\n//     if (hasChildren) {\n//       showToast('Cannot delete account with sub-accounts. Please delete sub-accounts first.', 'error');\n//       return;\n//     }\n\n//     setConfirmDialog({\n//       title: 'Delete Account',\n//       message: `Are you sure you want to delete the account \"${account.name}\" (${account.code})? This action cannot be undone.`,\n//       type: 'danger',\n//       confirmText: 'Delete',\n//       cancelText: 'Cancel',\n//       onConfirm: async () => {\n//         await deleteAccount(account.id);\n//         setConfirmDialog(null);\n//       },\n//       onCancel: () => {\n//         setConfirmDialog(null);\n//       }\n//     });\n//   };\n\n//   // Handle cancel\n//   const handleCancel = () => {\n//     setIsAddingAccount(false);\n//     setEditingAccount(null);\n//     setFormData({\n//       code: '',\n//       name: '',\n//       type: 'assets',\n//       category: 'account',\n//       parentId: null,\n//       description: '',\n//       active: true\n//     });\n//   };\n\n//   // Render account node\n//   const renderAccountNode = (account) => {\n//     const hasChildren = account.children && account.children.length > 0;\n//     const isExpanded = expandedNodes.has(account.id);\n//     const typeConfig = accountTypes[account.type];\n\n//     return (\n//       <div key={account.id} className=\"account-node\">\n//         <div \n//           className={`flex items-center py-2 px-4 hover:bg-gray-50 border-l-4 ${\n//             account.category === 'header' ? 'border-gray-400 bg-gray-100 font-bold' :\n//             account.category === 'group' ? 'border-gray-300 bg-gray-50 font-semibold' :\n//             'border-transparent'\n//           }`}\n//           style={{ paddingLeft: `${account.level * 20 + 16}px` }}\n//         >\n//           {hasChildren && (\n//             <button\n//               onClick={() => toggleExpand(account.id)}\n//               className=\"mr-2 p-1 hover:bg-gray-200 rounded\"\n//             >\n//               {isExpanded ? <ChevronDown size={16} /> : <ChevronRight size={16} />}\n//             </button>\n//           )}\n\n//           <div className=\"flex-1 flex items-center space-x-4\">\n//             <span className=\"font-mono text-sm text-gray-600 min-w-[80px]\">\n//               {account.code}\n//             </span>\n\n//             <span className={`flex-1 ${account.category === 'header' ? 'text-lg' : ''}`}>\n//               {account.name}\n//               {!account.active && <span className=\"ml-2 text-red-500 text-xs\">(Inactive)</span>}\n//             </span>\n\n//             <span className={`px-2 py-1 rounded-full text-xs font-medium ${typeConfig.color}`}>\n//               {typeConfig.label}\n//             </span>\n\n//             <div className=\"flex space-x-1\">\n//               <button\n//                 onClick={() => handleEditAccount(account)}\n//                 className=\"p-1 hover:bg-blue-100 rounded text-blue-600\"\n//                 title=\"Edit Account\"\n//                 disabled={loading}\n//               >\n//                 <Edit size={14} />\n//               </button>\n//               <button\n//                 onClick={() => handleDeleteAccount(account)}\n//                 className=\"p-1 hover:bg-red-100 rounded text-red-600\"\n//                 title=\"Delete Account\"\n//                 disabled={loading}\n//               >\n//                 <Trash2 size={14} />\n//               </button>\n//               <button\n//                 onClick={() => handleAddAccount(account.id)}\n//                 className=\"p-1 hover:bg-green-100 rounded text-green-600\"\n//                 title=\"Add Sub-Account\"\n//                 disabled={loading}\n//               >\n//                 <Plus size={14} />\n//               </button>\n//             </div>\n//           </div>\n//         </div>\n\n//         {account.description && (\n//           <div className=\"px-4 py-1 text-sm text-gray-500\" style={{ paddingLeft: `${account.level * 20 + 36}px` }}>\n//             {account.description}\n//           </div>\n//         )}\n\n//         {isExpanded && hasChildren && (\n//           <div>\n//             {account.children.map(child => renderAccountNode(child))}\n//           </div>\n//         )}\n//       </div>\n//     );\n//   };\n\n//   const flatAccounts = flattenAccounts(accounts);\n//   const filteredAccounts = getFilteredAccounts();\n//   const displayAccounts = searchTerm || selectedCategory !== 'all' \n//     ? filteredAccounts \n//     : buildHierarchy(flatAccounts);\n\n//   return (\n//     <div className=\"max-w-7xl mx-auto p-6 bg-white\">\n//       {/* Confirmation Dialog */}\n//       {confirmDialog && (\n//         <ConfirmationDialog\n//           isOpen={true}\n//           title={confirmDialog.title}\n//           message={confirmDialog.message}\n//           type={confirmDialog.type}\n//           confirmText={confirmDialog.confirmText}\n//           cancelText={confirmDialog.cancelText}\n//           onConfirm={confirmDialog.onConfirm}\n//           onCancel={confirmDialog.onCancel}\n//         />\n//       )}\n\n//       {/* Toast Notifications */}\n//       <div className=\"fixed top-4 right-4 z-40 space-y-2\">\n//         {toasts.map((toast) => (\n//           <div\n//             key={toast.id}\n//             className={`flex items-center p-4 rounded-lg shadow-lg max-w-sm transform transition-all duration-300 ease-in-out ${\n//               toast.type === 'success' \n//                 ? 'bg-green-50 border border-green-200 text-green-800' \n//                 : toast.type === 'error'\n//                 ? 'bg-red-50 border border-red-200 text-red-800'\n//                 : 'bg-blue-50 border border-blue-200 text-blue-800'\n//             }`}\n//           >\n//             <div className=\"flex-shrink-0\">\n//               {toast.type === 'success' && <CheckCircle size={20} className=\"text-green-600\" />}\n//               {toast.type === 'error' && <XCircle size={20} className=\"text-red-600\" />}\n//               {toast.type === 'info' && <AlertCircle size={20} className=\"text-blue-600\" />}\n//             </div>\n//             <div className=\"ml-3 flex-1\">\n//               <p className=\"text-sm font-medium\">{toast.message}</p>\n//             </div>\n//             <button\n//               onClick={() => removeToast(toast.id)}\n//               className={`ml-3 flex-shrink-0 rounded-md p-1.5 inline-flex focus:outline-none focus:ring-2 focus:ring-offset-2 ${\n//                 toast.type === 'success' \n//                   ? 'text-green-400 hover:bg-green-100 focus:ring-green-600' \n//                   : toast.type === 'error'\n//                   ? 'text-red-400 hover:bg-red-100 focus:ring-red-600'\n//                   : 'text-blue-400 hover:bg-blue-100 focus:ring-blue-600'\n//               }`}\n//             >\n//               <X size={16} />\n//             </button>\n//           </div>\n//         ))}\n//       </div>\n\n//       <div className=\"mb-6\">\n//         <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Chart of Accounts</h1>\n//         <p className=\"text-gray-600\">Manage your company's account structure and hierarchy</p>\n//       </div>\n\n//       {/* Error Message */}\n//       {error && (\n//         <div className=\"mb-4 p-4 bg-red-50 border border-red-200 rounded-lg\">\n//           <div className=\"flex\">\n//             <div className=\"flex-1\">\n//               <p className=\"text-red-700\">{error}</p>\n//             </div>\n//             <button\n//               onClick={() => setError(null)}\n//               className=\"text-red-400 hover:text-red-600\"\n//             >\n//               <X size={16} />\n//             </button>\n//           </div>\n//         </div>\n//       )}\n\n//       {/* Controls */}\n//       <div className=\"mb-6 flex flex-wrap items-center justify-between gap-4\">\n//         <div className=\"flex items-center space-x-4\">\n//           <div className=\"relative\">\n//             <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" size={20} />\n//             <input\n//               type=\"text\"\n//               placeholder=\"Search accounts...\"\n//               value={searchTerm}\n//               onChange={(e) => setSearchTerm(e.target.value)}\n//               className=\"pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n//             />\n//           </div>\n\n//           <div className=\"relative\">\n//             <Filter className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" size={20} />\n//             <select\n//               value={selectedCategory}\n//               onChange={(e) => setSelectedCategory(e.target.value)}\n//               className=\"pl-10 pr-8 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n//             >\n//               <option value=\"all\">All Types</option>\n//               {Object.entries(accountTypes).map(([key, type]) => (\n//                 <option key={key} value={key}>{type.label}</option>\n//               ))}\n//             </select>\n//           </div>\n\n//           <button\n//             onClick={fetchAccounts}\n//             className=\"px-3 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 flex items-center space-x-2\"\n//             disabled={loading}\n//           >\n//             <RefreshCw size={16} className={loading ? 'animate-spin' : ''} />\n//             <span>Refresh</span>\n//           </button>\n//         </div>\n\n//         <button\n//           onClick={() => handleAddAccount()}\n//           className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center space-x-2\"\n//           disabled={loading}\n//         >\n//           <Plus size={20} />\n//           <span>Add Account</span>\n//         </button>\n//       </div>\n\n//       {/* Account Form */}\n//       {(isAddingAccount || editingAccount) && (\n//         <div className=\"mb-6 p-6 bg-gray-50 rounded-lg border\">\n//           <h3 className=\"text-lg font-semibold mb-4\">\n//             {editingAccount ? 'Edit Account' : 'Add New Account'}\n//           </h3>\n\n//           <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n//             <div>\n//               <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n//                 Account Code\n//               </label>\n//               <input\n//                 type=\"text\"\n//                 value={formData.code}\n//                 onChange={(e) => setFormData({...formData, code: e.target.value})}\n//                 placeholder=\"Auto-generated if empty\"\n//                 className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n//               />\n//               <p className=\"text-xs text-gray-500 mt-1\">Leave empty for auto-generation</p>\n//             </div>\n\n//             <div>\n//               <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n//                 Account Name *\n//               </label>\n//               <input\n//                 type=\"text\"\n//                 value={formData.name}\n//                 onChange={(e) => setFormData({...formData, name: e.target.value})}\n//                 placeholder=\"Enter account name\"\n//                 className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n//                 required\n//               />\n//             </div>\n\n//             <div>\n//               <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n//                 Account Type\n//               </label>\n//               <select\n//                 value={formData.type}\n//                 onChange={(e) => setFormData({...formData, type: e.target.value})}\n//                 className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n//               >\n//                 {Object.entries(accountTypes).map(([key, type]) => (\n//                   <option key={key} value={key}>{type.label} ({type.codeRange})</option>\n//                 ))}\n//               </select>\n//             </div>\n\n//             <div>\n//               <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n//                 Category\n//               </label>\n//               <select\n//                 value={formData.category}\n//                 onChange={(e) => setFormData({...formData, category: e.target.value})}\n//                 className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n//               >\n//                 <option value=\"header\">Header</option>\n//                 <option value=\"group\">Group</option>\n//                 <option value=\"account\">Account</option>\n//               </select>\n//             </div>\n\n//             <div>\n//               <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n//                 Parent Account\n//               </label>\n//               <select\n//                 value={formData.parentId || ''}\n//                 onChange={(e) => setFormData({...formData, parentId: e.target.value || null})}\n//                 className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n//               >\n//                 <option value=\"\">None (Top Level)</option>\n//                 {flatAccounts\n//                   .filter(a => a.id !== editingAccount && a.category !== 'account')\n//                   .map(account => (\n//                     <option key={account.id} value={account.id}>\n//                       {account.code} - {account.name}\n//                     </option>\n//                   ))\n//                 }\n//               </select>\n//             </div>\n\n//             <div className=\"flex items-center\">\n//               <input\n//                 type=\"checkbox\"\n//                 id=\"active\"\n//                 checked={formData.active}\n//                 onChange={(e) => setFormData({...formData, active: e.target.checked})}\n//                 className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n//               />\n//               <label htmlFor=\"active\" className=\"ml-2 block text-sm text-gray-900\">\n//                 Active\n//               </label>\n//             </div>\n\n//             <div className=\"md:col-span-2 lg:col-span-3\">\n//               <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n//                 Description\n//               </label>\n//               <textarea\n//                 value={formData.description}\n//                 onChange={(e) => setFormData({...formData, description: e.target.value})}\n//                 rows={2}\n//                 placeholder=\"Enter account description\"\n//                 className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n//               />\n//             </div>\n//           </div>\n\n//           <div className=\"mt-4 flex space-x-3\">\n//             <button\n//               onClick={handleSaveAccount}\n//               className=\"px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 flex items-center space-x-2\"\n//               disabled={loading}\n//             >\n//               <Save size={16} />\n//               <span>{loading ? 'Saving...' : 'Save'}</span>\n//             </button>\n//             <button\n//               onClick={handleCancel}\n//               className=\"px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 flex items-center space-x-2\"\n//               disabled={loading}\n//             >\n//               <X size={16} />\n//               <span>Cancel</span>\n//             </button>\n//           </div>\n//         </div>\n//       )}\n\n//       {/* Accounts Tree */}\n//       <div className=\"bg-white border border-gray-200 rounded-lg overflow-hidden\">\n//         <div className=\"px-4 py-3 bg-gray-50 border-b border-gray-200\">\n//           <div className=\"flex items-center justify-between\">\n//             <h2 className=\"text-lg font-semibold text-gray-900\">Account Structure</h2>\n//             <span className=\"text-sm text-gray-500\">\n//               {filteredAccounts.length} accounts\n//               {loading && <span className=\"ml-2 text-blue-600\">Loading...</span>}\n//             </span>\n//           </div>\n//         </div>\n\n//         <div className=\"max-h-[600px] overflow-y-auto\">\n//           {loading && accounts.length === 0 ? (\n//             <div className=\"p-8 text-center text-gray-500\">\n//               <RefreshCw className=\"animate-spin mx-auto mb-2\" size={24} />\n//               Loading accounts...\n//             </div>\n//           ) : displayAccounts.length > 0 ? (\n//             searchTerm || selectedCategory !== 'all' ? (\n//               // Flat view for search results\n//               <div>\n//                 {filteredAccounts.map(account => (\n//                   <div key={account.id}>\n//                     {renderAccountNode({...account, children: []})}\n//                   </div>\n//                 ))}\n//               </div>\n//             ) : (\n//               // Hierarchical view\n//               displayAccounts.map(account => renderAccountNode(account))\n//             )\n//           ) : (\n//             <div className=\"p-8 text-center text-gray-500\">\n//               No accounts found matching your criteria.\n//             </div>\n//           )}\n//         </div>\n//       </div>\n\n//       {/* Account Type Legend */}\n//       <div className=\"mt-6 p-4 bg-gray-50 rounded-lg\">\n//         <h3 className=\"text-sm font-semibold text-gray-700 mb-3\">Account Types & Code Ranges</h3>\n//         <div className=\"flex flex-wrap gap-4\">\n//           {Object.entries(accountTypes).map(([key, type]) => (\n//             <div key={key} className=\"flex items-center space-x-2\">\n//               <span className={`px-2 py-1 rounded-full text-xs font-medium ${type.color}`}>\n//                 {type.label}\n//               </span>\n//               <span className=\"text-sm text-gray-600 font-mono\">{type.codeRange}</span>\n//             </div>\n//           ))}\n//         </div>\n//       </div>\n\n//       {/* API Integration Info */}\n//       <div className=\"mt-6 p-4 bg-blue-50 rounded-lg\">\n//         <h3 className=\"text-sm font-semibold text-blue-800 mb-2\">API Integration Status</h3>\n//         <div className=\"text-xs text-blue-700 space-y-1\">\n//           <p>• Connected to: {API_BASE_URL}</p>\n//           <p>• Auto-refresh after CRUD operations</p>\n//           <p>• Real-time data from Spring Boot backend</p>\n//           <p>• Hierarchical structure maintained server-side</p>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ChartOfAccounts;\n\nimport React, { useState, useEffect } from 'react';\nimport { Plus } from 'lucide-react';\nimport { useAccounts } from '../Hook/useAccounts';\nimport { useToast } from '../Hook/useToast';\nimport COAHeader from '../components/ChartOfAccounts/COAHeader';\nimport COAControls from '../components/ChartOfAccounts/COAControls';\nimport COAAccountForm from '../components/ChartOfAccounts/COAAccountForm';\nimport COAAccountTree from '../components/ChartOfAccounts/COAAccountTree';\nimport COATypeLegend from '../components/ChartOfAccounts/COATypeLegend';\nimport COAAPIStatus from '../components/ChartOfAccounts/COAAPIStatus';\nimport ConfirmationDialog from '../components/common/ConfirmationDialog';\nimport ToastContainer from '../components/common/ToastContainer';\nimport ErrorMessage from '../components/common/ErrorMessage';\nimport { accountTypes } from '../utils/accountConfig';\nimport { buildHierarchy, flattenAccounts, getFilteredAccounts } from '../utils/accountHelpers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChartOfAccounts = () => {\n  _s();\n  const [expandedNodes, setExpandedNodes] = useState(new Set());\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedCategory, setSelectedCategory] = useState('all');\n  const [isAddingAccount, setIsAddingAccount] = useState(false);\n  const [editingAccount, setEditingAccount] = useState(null);\n  const [confirmDialog, setConfirmDialog] = useState(null);\n  const [formData, setFormData] = useState({\n    code: '',\n    name: '',\n    type: 'assets',\n    category: 'account',\n    parentId: null,\n    description: '',\n    active: true\n  });\n  const {\n    toasts,\n    showToast,\n    removeToast\n  } = useToast();\n  const {\n    accounts,\n    loading,\n    error,\n    setError,\n    fetchAccounts,\n    createAccount,\n    updateAccount,\n    deleteAccount\n  } = useAccounts(showToast);\n\n  // Initialize component\n  useEffect(() => {\n    const initializeAccounts = async () => {\n      await fetchAccounts();\n      // Expand main categories by default after fetching\n      if (accounts.length > 0) {\n        const mainCategories = accounts.filter(account => account.level === 0).map(account => account.id);\n        setExpandedNodes(new Set(mainCategories));\n      }\n    };\n    initializeAccounts();\n  }, []);\n\n  // Update expanded nodes when accounts change\n  useEffect(() => {\n    if (accounts.length > 0 && expandedNodes.size === 0) {\n      const mainCategories = accounts.filter(account => account.level === 0).map(account => account.id);\n      setExpandedNodes(new Set(mainCategories));\n    }\n  }, [accounts]);\n\n  // Toggle expand/collapse\n  const toggleExpand = nodeId => {\n    const newExpanded = new Set(expandedNodes);\n    if (newExpanded.has(nodeId)) {\n      newExpanded.delete(nodeId);\n    } else {\n      newExpanded.add(nodeId);\n    }\n    setExpandedNodes(newExpanded);\n  };\n\n  // Handle add account\n  const handleAddAccount = (parentId = null) => {\n    const flatAccountsList = flattenAccounts(accounts);\n    const parentAccount = parentId ? flatAccountsList.find(a => a.id === parentId) : null;\n    const accountType = parentAccount ? parentAccount.type : 'assets';\n    setFormData({\n      code: '',\n      name: '',\n      type: accountType,\n      category: 'account',\n      parentId,\n      description: '',\n      active: true\n    });\n    setIsAddingAccount(true);\n  };\n\n  // Handle edit account\n  const handleEditAccount = account => {\n    setFormData({\n      code: account.code,\n      name: account.name,\n      type: account.type,\n      category: account.category,\n      parentId: account.parentId,\n      description: account.description || '',\n      active: account.active !== undefined ? account.active : true\n    });\n    setEditingAccount(account.id);\n  };\n\n  // Handle save account\n  const handleSaveAccount = async () => {\n    if (!formData.name) {\n      showToast('Please fill in the account name', 'error');\n      return;\n    }\n    const success = editingAccount ? await updateAccount(editingAccount, formData) : await createAccount(formData);\n    if (success) {\n      // Reset form\n      setFormData({\n        code: '',\n        name: '',\n        type: 'assets',\n        category: 'account',\n        parentId: null,\n        description: '',\n        active: true\n      });\n      setIsAddingAccount(false);\n      setEditingAccount(null);\n    }\n  };\n\n  // Handle delete account with confirmation\n  const handleDeleteAccount = async account => {\n    const flatAccountsList = flattenAccounts(accounts);\n    const hasChildren = flatAccountsList.some(a => a.parentId === account.id);\n    if (hasChildren) {\n      showToast('Cannot delete account with sub-accounts. Please delete sub-accounts first.', 'error');\n      return;\n    }\n    setConfirmDialog({\n      title: 'Delete Account',\n      message: `Are you sure you want to delete the account \"${account.name}\" (${account.code})? This action cannot be undone.`,\n      type: 'danger',\n      confirmText: 'Delete',\n      cancelText: 'Cancel',\n      onConfirm: async () => {\n        await deleteAccount(account.id);\n        setConfirmDialog(null);\n      },\n      onCancel: () => {\n        setConfirmDialog(null);\n      }\n    });\n  };\n\n  // Handle cancel\n  const handleCancel = () => {\n    setIsAddingAccount(false);\n    setEditingAccount(null);\n    setFormData({\n      code: '',\n      name: '',\n      type: 'assets',\n      category: 'account',\n      parentId: null,\n      description: '',\n      active: true\n    });\n  };\n\n  // Get display data\n  const flatAccountsList = flattenAccounts(accounts);\n  const filteredAccounts = getFilteredAccounts(flatAccountsList, searchTerm, selectedCategory);\n  const displayAccounts = searchTerm || selectedCategory !== 'all' ? filteredAccounts : buildHierarchy(flatAccountsList);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"max-w-7xl mx-auto p-6 bg-white\",\n    children: [confirmDialog && /*#__PURE__*/_jsxDEV(ConfirmationDialog, {\n      isOpen: true,\n      ...confirmDialog\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1018,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {\n      toasts: toasts,\n      removeToast: removeToast\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1025,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(COAHeader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1027,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(ErrorMessage, {\n      error: error,\n      onClose: () => setError(null)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1031,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(COAControls, {\n      searchTerm: searchTerm,\n      setSearchTerm: setSearchTerm,\n      selectedCategory: selectedCategory,\n      setSelectedCategory: setSelectedCategory,\n      onRefresh: fetchAccounts,\n      onAddAccount: () => handleAddAccount(),\n      loading: loading,\n      accountTypes: accountTypes\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1035,\n      columnNumber: 7\n    }, this), (isAddingAccount || editingAccount) && /*#__PURE__*/_jsxDEV(COAAccountForm, {\n      formData: formData,\n      setFormData: setFormData,\n      editingAccount: editingAccount,\n      flatAccounts: flatAccountsList,\n      onSave: handleSaveAccount,\n      onCancel: handleCancel,\n      loading: loading,\n      accountTypes: accountTypes\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1048,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(COAAccountTree, {\n      accounts: accounts,\n      displayAccounts: displayAccounts,\n      filteredAccounts: filteredAccounts,\n      expandedNodes: expandedNodes,\n      searchTerm: searchTerm,\n      selectedCategory: selectedCategory,\n      loading: loading,\n      onToggleExpand: toggleExpand,\n      onEditAccount: handleEditAccount,\n      onDeleteAccount: handleDeleteAccount,\n      onAddAccount: handleAddAccount\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1061,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(COATypeLegend, {\n      accountTypes: accountTypes\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1076,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(COAAPIStatus, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1079,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1015,\n    columnNumber: 5\n  }, this);\n};\n_s(ChartOfAccounts, \"VI9isQqfskq7PdjVtevYZXfcI3I=\", false, function () {\n  return [useToast, useAccounts];\n});\n_c = ChartOfAccounts;\nexport default ChartOfAccounts;\nvar _c;\n$RefreshReg$(_c, \"ChartOfAccounts\");","map":{"version":3,"names":["React","useState","useEffect","Plus","useAccounts","useToast","COAHeader","COAControls","COAAccountForm","COAAccountTree","COATypeLegend","COAAPIStatus","ConfirmationDialog","ToastContainer","ErrorMessage","accountTypes","buildHierarchy","flattenAccounts","getFilteredAccounts","jsxDEV","_jsxDEV","ChartOfAccounts","_s","expandedNodes","setExpandedNodes","Set","searchTerm","setSearchTerm","selectedCategory","setSelectedCategory","isAddingAccount","setIsAddingAccount","editingAccount","setEditingAccount","confirmDialog","setConfirmDialog","formData","setFormData","code","name","type","category","parentId","description","active","toasts","showToast","removeToast","accounts","loading","error","setError","fetchAccounts","createAccount","updateAccount","deleteAccount","initializeAccounts","length","mainCategories","filter","account","level","map","id","size","toggleExpand","nodeId","newExpanded","has","delete","add","handleAddAccount","flatAccountsList","parentAccount","find","a","accountType","handleEditAccount","undefined","handleSaveAccount","success","handleDeleteAccount","hasChildren","some","title","message","confirmText","cancelText","onConfirm","onCancel","handleCancel","filteredAccounts","displayAccounts","className","children","isOpen","fileName","_jsxFileName","lineNumber","columnNumber","onClose","onRefresh","onAddAccount","flatAccounts","onSave","onToggleExpand","onEditAccount","onDeleteAccount","_c","$RefreshReg$"],"sources":["C:/Users/Logic-Unit/my-account/src/pages/ChartOfAccounts.jsx"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import { ChevronDown, ChevronRight, Plus, Edit, Trash2, Save, X, Search, Filter, RefreshCw, CheckCircle, AlertCircle, XCircle, AlertTriangle } from 'lucide-react';\r\n\r\n// const ChartOfAccounts = () => {\r\n//   const [accounts, setAccounts] = useState([]);\r\n//   const [expandedNodes, setExpandedNodes] = useState(new Set());\r\n//   const [searchTerm, setSearchTerm] = useState('');\r\n//   const [selectedCategory, setSelectedCategory] = useState('all');\r\n//   const [isAddingAccount, setIsAddingAccount] = useState(false);\r\n//   const [editingAccount, setEditingAccount] = useState(null);\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [error, setError] = useState(null);\r\n//   const [toasts, setToasts] = useState([]);\r\n//   const [confirmDialog, setConfirmDialog] = useState(null);\r\n//   const [formData, setFormData] = useState({\r\n//     code: '',\r\n//     name: '',\r\n//     type: 'assets',\r\n//     category: 'account',\r\n//     parentId: null,\r\n//     description: '',\r\n//     active: true\r\n//   });\r\n\r\n//   // API Base URL\r\n//   const API_BASE_URL = 'http://localhost:8080/api/accounts';\r\n\r\n//   // Toast notification system\r\n//   const showToast = (message, type = 'success') => {\r\n//     const id = Date.now();\r\n//     const toast = { id, message, type };\r\n//     setToasts(prev => [...prev, toast]);\r\n    \r\n//     // Auto remove after 5 seconds\r\n//     setTimeout(() => {\r\n//       setToasts(prev => prev.filter(t => t.id !== id));\r\n//     }, 5000);\r\n//   };\r\n\r\n//   const removeToast = (id) => {\r\n//     setToasts(prev => prev.filter(t => t.id !== id));\r\n//   };\r\n\r\n//   // Confirmation Dialog Component\r\n//   const ConfirmationDialog = ({ isOpen, title, message, onConfirm, onCancel, confirmText = \"Confirm\", cancelText = \"Cancel\", type = \"warning\" }) => {\r\n//     if (!isOpen) return null;\r\n\r\n//     const typeStyles = {\r\n//       warning: {\r\n//         icon: <AlertTriangle className=\"text-yellow-600\" size={24} />,\r\n//         iconBg: 'bg-yellow-100',\r\n//         confirmBtn: 'bg-yellow-600 hover:bg-yellow-700'\r\n//       },\r\n//       danger: {\r\n//         icon: <XCircle className=\"text-red-600\" size={24} />,\r\n//         iconBg: 'bg-red-100',\r\n//         confirmBtn: 'bg-red-600 hover:bg-red-700'\r\n//       },\r\n//       info: {\r\n//         icon: <AlertCircle className=\"text-blue-600\" size={24} />,\r\n//         iconBg: 'bg-blue-100',\r\n//         confirmBtn: 'bg-blue-600 hover:bg-blue-700'\r\n//       }\r\n//     };\r\n\r\n//     const style = typeStyles[type] || typeStyles.warning;\r\n\r\n//     return (\r\n//       <div className=\"fixed inset-0 z-50 overflow-y-auto\">\r\n//         <div className=\"flex min-h-screen items-center justify-center p-4 text-center\">\r\n//           <div className=\"fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity\" onClick={onCancel}></div>\r\n          \r\n//           <div className=\"relative transform overflow-hidden rounded-lg bg-white text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-lg\">\r\n//             <div className=\"bg-white px-4 pb-4 pt-5 sm:p-6 sm:pb-4\">\r\n//               <div className=\"sm:flex sm:items-start\">\r\n//                 <div className={`mx-auto flex h-12 w-12 flex-shrink-0 items-center justify-center rounded-full sm:mx-0 sm:h-10 sm:w-10 ${style.iconBg}`}>\r\n//                   {style.icon}\r\n//                 </div>\r\n//                 <div className=\"mt-3 text-center sm:ml-4 sm:mt-0 sm:text-left\">\r\n//                   <h3 className=\"text-lg font-semibold leading-6 text-gray-900\">\r\n//                     {title}\r\n//                   </h3>\r\n//                   <div className=\"mt-2\">\r\n//                     <p className=\"text-sm text-gray-500\">\r\n//                       {message}\r\n//                     </p>\r\n//                   </div>\r\n//                 </div>\r\n//               </div>\r\n//             </div>\r\n//             <div className=\"bg-gray-50 px-4 py-3 sm:flex sm:flex-row-reverse sm:px-6\">\r\n//               <button\r\n//                 type=\"button\"\r\n//                 className={`inline-flex w-full justify-center rounded-md px-3 py-2 text-sm font-semibold text-white shadow-sm sm:ml-3 sm:w-auto ${style.confirmBtn}`}\r\n//                 onClick={onConfirm}\r\n//               >\r\n//                 {confirmText}\r\n//               </button>\r\n//               <button\r\n//                 type=\"button\"\r\n//                 className=\"mt-3 inline-flex w-full justify-center rounded-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50 sm:mt-0 sm:w-auto\"\r\n//                 onClick={onCancel}\r\n//               >\r\n//                 {cancelText}\r\n//               </button>\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//     );\r\n//   };\r\n\r\n//   // Account types configuration\r\n//   const accountTypes = {\r\n//     assets: { label: 'Assets', color: 'bg-green-100 text-green-800', codeRange: '1000-1999' },\r\n//     liabilities: { label: 'Liabilities', color: 'bg-red-100 text-red-800', codeRange: '2000-2999' },\r\n//     equity: { label: 'Equity', color: 'bg-blue-100 text-blue-800', codeRange: '3000-3999' },\r\n//     revenue: { label: 'Revenue', color: 'bg-purple-100 text-purple-800', codeRange: '4000-4999' },\r\n//     expenses: { label: 'Expenses', color: 'bg-orange-100 text-orange-800', codeRange: '5000-5999' }\r\n//   };\r\n\r\n//   // Fetch accounts from API\r\n//   const fetchAccounts = async () => {\r\n//     try {\r\n//       setLoading(true);\r\n//       setError(null);\r\n//       const response = await fetch(API_BASE_URL);\r\n      \r\n//       if (!response.ok) {\r\n//         throw new Error(`HTTP error! status: ${response.status}`);\r\n//       }\r\n      \r\n//       const data = await response.json();\r\n//       setAccounts(data);\r\n      \r\n//       // Expand main categories by default\r\n//       const mainCategories = data\r\n//         .filter(account => account.level === 0)\r\n//         .map(account => account.id);\r\n//       setExpandedNodes(new Set(mainCategories));\r\n      \r\n//     } catch (err) {\r\n//       const errorMsg = 'Failed to fetch accounts: ' + err.message;\r\n//       setError(errorMsg);\r\n//       showToast(errorMsg, 'error');\r\n//       console.error('Error fetching accounts:', err);\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   // Initialize component\r\n//   useEffect(() => {\r\n//     fetchAccounts();\r\n//   }, []);\r\n\r\n//   // Create account\r\n//   const createAccount = async (accountData) => {\r\n//     try {\r\n//       setLoading(true);\r\n//       const response = await fetch(API_BASE_URL, {\r\n//         method: 'POST',\r\n//         headers: {\r\n//           'Content-Type': 'application/json',\r\n//         },\r\n//         body: JSON.stringify(accountData)\r\n//       });\r\n\r\n//       if (!response.ok) {\r\n//         const errorText = await response.text();\r\n//         throw new Error(errorText || `HTTP error! status: ${response.status}`);\r\n//       }\r\n\r\n//       const result = await response.text();\r\n//       showToast(result || 'Account created successfully!', 'success');\r\n//       await fetchAccounts(); // Refresh the list\r\n//       return true;\r\n//     } catch (err) {\r\n//       const errorMsg = 'Failed to create account: ' + err.message;\r\n//       setError(errorMsg);\r\n//       showToast(errorMsg, 'error');\r\n//       console.error('Error creating account:', err);\r\n//       return false;\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   // Update account\r\n//   const updateAccount = async (accountId, accountData) => {\r\n//     try {\r\n//       setLoading(true);\r\n//       const response = await fetch(`${API_BASE_URL}/${accountId}`, {\r\n//         method: 'PUT',\r\n//         headers: {\r\n//           'Content-Type': 'application/json',\r\n//         },\r\n//         body: JSON.stringify(accountData)\r\n//       });\r\n\r\n//       if (!response.ok) {\r\n//         const errorText = await response.text();\r\n//         throw new Error(errorText || `HTTP error! status: ${response.status}`);\r\n//       }\r\n\r\n//       const result = await response.text();\r\n//       showToast(result || 'Account updated successfully!', 'success');\r\n//       await fetchAccounts(); // Refresh the list\r\n//       return true;\r\n//     } catch (err) {\r\n//       const errorMsg = 'Failed to update account: ' + err.message;\r\n//       setError(errorMsg);\r\n//       showToast(errorMsg, 'error');\r\n//       console.error('Error updating account:', err);\r\n//       return false;\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   // Delete account\r\n//   const deleteAccount = async (accountId) => {\r\n//     try {\r\n//       setLoading(true);\r\n//       const response = await fetch(`${API_BASE_URL}/${accountId}`, {\r\n//         method: 'DELETE'\r\n//       });\r\n\r\n//       if (!response.ok) {\r\n//         const errorText = await response.text();\r\n//         throw new Error(errorText || `HTTP error! status: ${response.status}`);\r\n//       }\r\n\r\n//       const result = await response.text();\r\n//       showToast(result || 'Account deleted successfully!', 'success');\r\n//       await fetchAccounts(); // Refresh the list\r\n//       return true;\r\n//     } catch (err) {\r\n//       const errorMsg = 'Failed to delete account: ' + err.message;\r\n//       setError(errorMsg);\r\n//       showToast(errorMsg, 'error');\r\n//       console.error('Error deleting account:', err);\r\n//       return false;\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   // Helper function to flatten hierarchy for filtering\r\n//   const flattenAccounts = (accounts) => {\r\n//     const result = [];\r\n//     const flatten = (items) => {\r\n//       items.forEach(item => {\r\n//         result.push(item);\r\n//         if (item.children && item.children.length > 0) {\r\n//           flatten(item.children);\r\n//         }\r\n//       });\r\n//     };\r\n//     flatten(accounts);\r\n//     return result;\r\n//   };\r\n\r\n//   // Filter accounts based on search and category\r\n//   const getFilteredAccounts = () => {\r\n//     const flatAccounts = flattenAccounts(accounts);\r\n//     let filtered = flatAccounts;\r\n\r\n//     if (searchTerm) {\r\n//       filtered = filtered.filter(account => \r\n//         account.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n//         account.code.includes(searchTerm) ||\r\n//         (account.description && account.description.toLowerCase().includes(searchTerm.toLowerCase()))\r\n//       );\r\n//     }\r\n\r\n//     if (selectedCategory !== 'all') {\r\n//       filtered = filtered.filter(account => account.type === selectedCategory);\r\n//     }\r\n\r\n//     return filtered;\r\n//   };\r\n\r\n//   // Build hierarchy from flat accounts (for display when not searching)\r\n//   const buildHierarchy = (accounts, parentId = null) => {\r\n//     return accounts\r\n//       .filter(account => account.parentId === parentId)\r\n//       .sort((a, b) => a.code.localeCompare(b.code))\r\n//       .map(account => ({\r\n//         ...account,\r\n//         children: buildHierarchy(accounts, account.id)\r\n//       }));\r\n//   };\r\n\r\n//   // Toggle expand/collapse\r\n//   const toggleExpand = (nodeId) => {\r\n//     const newExpanded = new Set(expandedNodes);\r\n//     if (newExpanded.has(nodeId)) {\r\n//       newExpanded.delete(nodeId);\r\n//     } else {\r\n//       newExpanded.add(nodeId);\r\n//     }\r\n//     setExpandedNodes(newExpanded);\r\n//   };\r\n\r\n//   // Handle add account\r\n//   const handleAddAccount = (parentId = null) => {\r\n//     const flatAccounts = flattenAccounts(accounts);\r\n//     const parentAccount = parentId ? flatAccounts.find(a => a.id === parentId) : null;\r\n//     const accountType = parentAccount ? parentAccount.type : 'assets';\r\n    \r\n//     setFormData({\r\n//       code: '', // Will be generated by backend\r\n//       name: '',\r\n//       type: accountType,\r\n//       category: 'account',\r\n//       parentId,\r\n//       description: '',\r\n//       active: true\r\n//     });\r\n//     setIsAddingAccount(true);\r\n//   };\r\n\r\n//   // Handle edit account\r\n//   const handleEditAccount = (account) => {\r\n//     setFormData({\r\n//       code: account.code,\r\n//       name: account.name,\r\n//       type: account.type,\r\n//       category: account.category,\r\n//       parentId: account.parentId,\r\n//       description: account.description || '',\r\n//       active: account.active !== undefined ? account.active : true\r\n//     });\r\n//     setEditingAccount(account.id);\r\n//   };\r\n\r\n//   // Handle save account\r\n//   const handleSaveAccount = async () => {\r\n//     if (!formData.name) {\r\n//       showToast('Please fill in the account name', 'error');\r\n//       return;\r\n//     }\r\n\r\n//     const success = editingAccount \r\n//       ? await updateAccount(editingAccount, formData)\r\n//       : await createAccount(formData);\r\n\r\n//     if (success) {\r\n//       // Reset form\r\n//       setFormData({\r\n//         code: '',\r\n//         name: '',\r\n//         type: 'assets',\r\n//         category: 'account',\r\n//         parentId: null,\r\n//         description: '',\r\n//         active: true\r\n//       });\r\n//       setIsAddingAccount(false);\r\n//       setEditingAccount(null);\r\n//     }\r\n//   };\r\n\r\n//   // Handle delete account with confirmation popup\r\n//   const handleDeleteAccount = async (account) => {\r\n//     const flatAccounts = flattenAccounts(accounts);\r\n//     const hasChildren = flatAccounts.some(a => a.parentId === account.id);\r\n    \r\n//     if (hasChildren) {\r\n//       showToast('Cannot delete account with sub-accounts. Please delete sub-accounts first.', 'error');\r\n//       return;\r\n//     }\r\n\r\n//     setConfirmDialog({\r\n//       title: 'Delete Account',\r\n//       message: `Are you sure you want to delete the account \"${account.name}\" (${account.code})? This action cannot be undone.`,\r\n//       type: 'danger',\r\n//       confirmText: 'Delete',\r\n//       cancelText: 'Cancel',\r\n//       onConfirm: async () => {\r\n//         await deleteAccount(account.id);\r\n//         setConfirmDialog(null);\r\n//       },\r\n//       onCancel: () => {\r\n//         setConfirmDialog(null);\r\n//       }\r\n//     });\r\n//   };\r\n\r\n//   // Handle cancel\r\n//   const handleCancel = () => {\r\n//     setIsAddingAccount(false);\r\n//     setEditingAccount(null);\r\n//     setFormData({\r\n//       code: '',\r\n//       name: '',\r\n//       type: 'assets',\r\n//       category: 'account',\r\n//       parentId: null,\r\n//       description: '',\r\n//       active: true\r\n//     });\r\n//   };\r\n\r\n//   // Render account node\r\n//   const renderAccountNode = (account) => {\r\n//     const hasChildren = account.children && account.children.length > 0;\r\n//     const isExpanded = expandedNodes.has(account.id);\r\n//     const typeConfig = accountTypes[account.type];\r\n\r\n//     return (\r\n//       <div key={account.id} className=\"account-node\">\r\n//         <div \r\n//           className={`flex items-center py-2 px-4 hover:bg-gray-50 border-l-4 ${\r\n//             account.category === 'header' ? 'border-gray-400 bg-gray-100 font-bold' :\r\n//             account.category === 'group' ? 'border-gray-300 bg-gray-50 font-semibold' :\r\n//             'border-transparent'\r\n//           }`}\r\n//           style={{ paddingLeft: `${account.level * 20 + 16}px` }}\r\n//         >\r\n//           {hasChildren && (\r\n//             <button\r\n//               onClick={() => toggleExpand(account.id)}\r\n//               className=\"mr-2 p-1 hover:bg-gray-200 rounded\"\r\n//             >\r\n//               {isExpanded ? <ChevronDown size={16} /> : <ChevronRight size={16} />}\r\n//             </button>\r\n//           )}\r\n          \r\n//           <div className=\"flex-1 flex items-center space-x-4\">\r\n//             <span className=\"font-mono text-sm text-gray-600 min-w-[80px]\">\r\n//               {account.code}\r\n//             </span>\r\n            \r\n//             <span className={`flex-1 ${account.category === 'header' ? 'text-lg' : ''}`}>\r\n//               {account.name}\r\n//               {!account.active && <span className=\"ml-2 text-red-500 text-xs\">(Inactive)</span>}\r\n//             </span>\r\n            \r\n//             <span className={`px-2 py-1 rounded-full text-xs font-medium ${typeConfig.color}`}>\r\n//               {typeConfig.label}\r\n//             </span>\r\n            \r\n//             <div className=\"flex space-x-1\">\r\n//               <button\r\n//                 onClick={() => handleEditAccount(account)}\r\n//                 className=\"p-1 hover:bg-blue-100 rounded text-blue-600\"\r\n//                 title=\"Edit Account\"\r\n//                 disabled={loading}\r\n//               >\r\n//                 <Edit size={14} />\r\n//               </button>\r\n//               <button\r\n//                 onClick={() => handleDeleteAccount(account)}\r\n//                 className=\"p-1 hover:bg-red-100 rounded text-red-600\"\r\n//                 title=\"Delete Account\"\r\n//                 disabled={loading}\r\n//               >\r\n//                 <Trash2 size={14} />\r\n//               </button>\r\n//               <button\r\n//                 onClick={() => handleAddAccount(account.id)}\r\n//                 className=\"p-1 hover:bg-green-100 rounded text-green-600\"\r\n//                 title=\"Add Sub-Account\"\r\n//                 disabled={loading}\r\n//               >\r\n//                 <Plus size={14} />\r\n//               </button>\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n        \r\n//         {account.description && (\r\n//           <div className=\"px-4 py-1 text-sm text-gray-500\" style={{ paddingLeft: `${account.level * 20 + 36}px` }}>\r\n//             {account.description}\r\n//           </div>\r\n//         )}\r\n\r\n//         {isExpanded && hasChildren && (\r\n//           <div>\r\n//             {account.children.map(child => renderAccountNode(child))}\r\n//           </div>\r\n//         )}\r\n//       </div>\r\n//     );\r\n//   };\r\n\r\n//   const flatAccounts = flattenAccounts(accounts);\r\n//   const filteredAccounts = getFilteredAccounts();\r\n//   const displayAccounts = searchTerm || selectedCategory !== 'all' \r\n//     ? filteredAccounts \r\n//     : buildHierarchy(flatAccounts);\r\n\r\n//   return (\r\n//     <div className=\"max-w-7xl mx-auto p-6 bg-white\">\r\n//       {/* Confirmation Dialog */}\r\n//       {confirmDialog && (\r\n//         <ConfirmationDialog\r\n//           isOpen={true}\r\n//           title={confirmDialog.title}\r\n//           message={confirmDialog.message}\r\n//           type={confirmDialog.type}\r\n//           confirmText={confirmDialog.confirmText}\r\n//           cancelText={confirmDialog.cancelText}\r\n//           onConfirm={confirmDialog.onConfirm}\r\n//           onCancel={confirmDialog.onCancel}\r\n//         />\r\n//       )}\r\n\r\n//       {/* Toast Notifications */}\r\n//       <div className=\"fixed top-4 right-4 z-40 space-y-2\">\r\n//         {toasts.map((toast) => (\r\n//           <div\r\n//             key={toast.id}\r\n//             className={`flex items-center p-4 rounded-lg shadow-lg max-w-sm transform transition-all duration-300 ease-in-out ${\r\n//               toast.type === 'success' \r\n//                 ? 'bg-green-50 border border-green-200 text-green-800' \r\n//                 : toast.type === 'error'\r\n//                 ? 'bg-red-50 border border-red-200 text-red-800'\r\n//                 : 'bg-blue-50 border border-blue-200 text-blue-800'\r\n//             }`}\r\n//           >\r\n//             <div className=\"flex-shrink-0\">\r\n//               {toast.type === 'success' && <CheckCircle size={20} className=\"text-green-600\" />}\r\n//               {toast.type === 'error' && <XCircle size={20} className=\"text-red-600\" />}\r\n//               {toast.type === 'info' && <AlertCircle size={20} className=\"text-blue-600\" />}\r\n//             </div>\r\n//             <div className=\"ml-3 flex-1\">\r\n//               <p className=\"text-sm font-medium\">{toast.message}</p>\r\n//             </div>\r\n//             <button\r\n//               onClick={() => removeToast(toast.id)}\r\n//               className={`ml-3 flex-shrink-0 rounded-md p-1.5 inline-flex focus:outline-none focus:ring-2 focus:ring-offset-2 ${\r\n//                 toast.type === 'success' \r\n//                   ? 'text-green-400 hover:bg-green-100 focus:ring-green-600' \r\n//                   : toast.type === 'error'\r\n//                   ? 'text-red-400 hover:bg-red-100 focus:ring-red-600'\r\n//                   : 'text-blue-400 hover:bg-blue-100 focus:ring-blue-600'\r\n//               }`}\r\n//             >\r\n//               <X size={16} />\r\n//             </button>\r\n//           </div>\r\n//         ))}\r\n//       </div>\r\n\r\n//       <div className=\"mb-6\">\r\n//         <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Chart of Accounts</h1>\r\n//         <p className=\"text-gray-600\">Manage your company's account structure and hierarchy</p>\r\n//       </div>\r\n\r\n//       {/* Error Message */}\r\n//       {error && (\r\n//         <div className=\"mb-4 p-4 bg-red-50 border border-red-200 rounded-lg\">\r\n//           <div className=\"flex\">\r\n//             <div className=\"flex-1\">\r\n//               <p className=\"text-red-700\">{error}</p>\r\n//             </div>\r\n//             <button\r\n//               onClick={() => setError(null)}\r\n//               className=\"text-red-400 hover:text-red-600\"\r\n//             >\r\n//               <X size={16} />\r\n//             </button>\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n\r\n//       {/* Controls */}\r\n//       <div className=\"mb-6 flex flex-wrap items-center justify-between gap-4\">\r\n//         <div className=\"flex items-center space-x-4\">\r\n//           <div className=\"relative\">\r\n//             <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" size={20} />\r\n//             <input\r\n//               type=\"text\"\r\n//               placeholder=\"Search accounts...\"\r\n//               value={searchTerm}\r\n//               onChange={(e) => setSearchTerm(e.target.value)}\r\n//               className=\"pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n//             />\r\n//           </div>\r\n          \r\n//           <div className=\"relative\">\r\n//             <Filter className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" size={20} />\r\n//             <select\r\n//               value={selectedCategory}\r\n//               onChange={(e) => setSelectedCategory(e.target.value)}\r\n//               className=\"pl-10 pr-8 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n//             >\r\n//               <option value=\"all\">All Types</option>\r\n//               {Object.entries(accountTypes).map(([key, type]) => (\r\n//                 <option key={key} value={key}>{type.label}</option>\r\n//               ))}\r\n//             </select>\r\n//           </div>\r\n\r\n//           <button\r\n//             onClick={fetchAccounts}\r\n//             className=\"px-3 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 flex items-center space-x-2\"\r\n//             disabled={loading}\r\n//           >\r\n//             <RefreshCw size={16} className={loading ? 'animate-spin' : ''} />\r\n//             <span>Refresh</span>\r\n//           </button>\r\n//         </div>\r\n\r\n//         <button\r\n//           onClick={() => handleAddAccount()}\r\n//           className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center space-x-2\"\r\n//           disabled={loading}\r\n//         >\r\n//           <Plus size={20} />\r\n//           <span>Add Account</span>\r\n//         </button>\r\n//       </div>\r\n\r\n//       {/* Account Form */}\r\n//       {(isAddingAccount || editingAccount) && (\r\n//         <div className=\"mb-6 p-6 bg-gray-50 rounded-lg border\">\r\n//           <h3 className=\"text-lg font-semibold mb-4\">\r\n//             {editingAccount ? 'Edit Account' : 'Add New Account'}\r\n//           </h3>\r\n          \r\n//           <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\r\n//             <div>\r\n//               <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n//                 Account Code\r\n//               </label>\r\n//               <input\r\n//                 type=\"text\"\r\n//                 value={formData.code}\r\n//                 onChange={(e) => setFormData({...formData, code: e.target.value})}\r\n//                 placeholder=\"Auto-generated if empty\"\r\n//                 className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n//               />\r\n//               <p className=\"text-xs text-gray-500 mt-1\">Leave empty for auto-generation</p>\r\n//             </div>\r\n            \r\n//             <div>\r\n//               <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n//                 Account Name *\r\n//               </label>\r\n//               <input\r\n//                 type=\"text\"\r\n//                 value={formData.name}\r\n//                 onChange={(e) => setFormData({...formData, name: e.target.value})}\r\n//                 placeholder=\"Enter account name\"\r\n//                 className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n//                 required\r\n//               />\r\n//             </div>\r\n            \r\n//             <div>\r\n//               <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n//                 Account Type\r\n//               </label>\r\n//               <select\r\n//                 value={formData.type}\r\n//                 onChange={(e) => setFormData({...formData, type: e.target.value})}\r\n//                 className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n//               >\r\n//                 {Object.entries(accountTypes).map(([key, type]) => (\r\n//                   <option key={key} value={key}>{type.label} ({type.codeRange})</option>\r\n//                 ))}\r\n//               </select>\r\n//             </div>\r\n            \r\n//             <div>\r\n//               <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n//                 Category\r\n//               </label>\r\n//               <select\r\n//                 value={formData.category}\r\n//                 onChange={(e) => setFormData({...formData, category: e.target.value})}\r\n//                 className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n//               >\r\n//                 <option value=\"header\">Header</option>\r\n//                 <option value=\"group\">Group</option>\r\n//                 <option value=\"account\">Account</option>\r\n//               </select>\r\n//             </div>\r\n            \r\n//             <div>\r\n//               <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n//                 Parent Account\r\n//               </label>\r\n//               <select\r\n//                 value={formData.parentId || ''}\r\n//                 onChange={(e) => setFormData({...formData, parentId: e.target.value || null})}\r\n//                 className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n//               >\r\n//                 <option value=\"\">None (Top Level)</option>\r\n//                 {flatAccounts\r\n//                   .filter(a => a.id !== editingAccount && a.category !== 'account')\r\n//                   .map(account => (\r\n//                     <option key={account.id} value={account.id}>\r\n//                       {account.code} - {account.name}\r\n//                     </option>\r\n//                   ))\r\n//                 }\r\n//               </select>\r\n//             </div>\r\n            \r\n//             <div className=\"flex items-center\">\r\n//               <input\r\n//                 type=\"checkbox\"\r\n//                 id=\"active\"\r\n//                 checked={formData.active}\r\n//                 onChange={(e) => setFormData({...formData, active: e.target.checked})}\r\n//                 className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\r\n//               />\r\n//               <label htmlFor=\"active\" className=\"ml-2 block text-sm text-gray-900\">\r\n//                 Active\r\n//               </label>\r\n//             </div>\r\n            \r\n//             <div className=\"md:col-span-2 lg:col-span-3\">\r\n//               <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n//                 Description\r\n//               </label>\r\n//               <textarea\r\n//                 value={formData.description}\r\n//                 onChange={(e) => setFormData({...formData, description: e.target.value})}\r\n//                 rows={2}\r\n//                 placeholder=\"Enter account description\"\r\n//                 className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n//               />\r\n//             </div>\r\n//           </div>\r\n          \r\n//           <div className=\"mt-4 flex space-x-3\">\r\n//             <button\r\n//               onClick={handleSaveAccount}\r\n//               className=\"px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 flex items-center space-x-2\"\r\n//               disabled={loading}\r\n//             >\r\n//               <Save size={16} />\r\n//               <span>{loading ? 'Saving...' : 'Save'}</span>\r\n//             </button>\r\n//             <button\r\n//               onClick={handleCancel}\r\n//               className=\"px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 flex items-center space-x-2\"\r\n//               disabled={loading}\r\n//             >\r\n//               <X size={16} />\r\n//               <span>Cancel</span>\r\n//             </button>\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n\r\n//       {/* Accounts Tree */}\r\n//       <div className=\"bg-white border border-gray-200 rounded-lg overflow-hidden\">\r\n//         <div className=\"px-4 py-3 bg-gray-50 border-b border-gray-200\">\r\n//           <div className=\"flex items-center justify-between\">\r\n//             <h2 className=\"text-lg font-semibold text-gray-900\">Account Structure</h2>\r\n//             <span className=\"text-sm text-gray-500\">\r\n//               {filteredAccounts.length} accounts\r\n//               {loading && <span className=\"ml-2 text-blue-600\">Loading...</span>}\r\n//             </span>\r\n//           </div>\r\n//         </div>\r\n        \r\n//         <div className=\"max-h-[600px] overflow-y-auto\">\r\n//           {loading && accounts.length === 0 ? (\r\n//             <div className=\"p-8 text-center text-gray-500\">\r\n//               <RefreshCw className=\"animate-spin mx-auto mb-2\" size={24} />\r\n//               Loading accounts...\r\n//             </div>\r\n//           ) : displayAccounts.length > 0 ? (\r\n//             searchTerm || selectedCategory !== 'all' ? (\r\n//               // Flat view for search results\r\n//               <div>\r\n//                 {filteredAccounts.map(account => (\r\n//                   <div key={account.id}>\r\n//                     {renderAccountNode({...account, children: []})}\r\n//                   </div>\r\n//                 ))}\r\n//               </div>\r\n//             ) : (\r\n//               // Hierarchical view\r\n//               displayAccounts.map(account => renderAccountNode(account))\r\n//             )\r\n//           ) : (\r\n//             <div className=\"p-8 text-center text-gray-500\">\r\n//               No accounts found matching your criteria.\r\n//             </div>\r\n//           )}\r\n//         </div>\r\n//       </div>\r\n\r\n//       {/* Account Type Legend */}\r\n//       <div className=\"mt-6 p-4 bg-gray-50 rounded-lg\">\r\n//         <h3 className=\"text-sm font-semibold text-gray-700 mb-3\">Account Types & Code Ranges</h3>\r\n//         <div className=\"flex flex-wrap gap-4\">\r\n//           {Object.entries(accountTypes).map(([key, type]) => (\r\n//             <div key={key} className=\"flex items-center space-x-2\">\r\n//               <span className={`px-2 py-1 rounded-full text-xs font-medium ${type.color}`}>\r\n//                 {type.label}\r\n//               </span>\r\n//               <span className=\"text-sm text-gray-600 font-mono\">{type.codeRange}</span>\r\n//             </div>\r\n//           ))}\r\n//         </div>\r\n//       </div>\r\n\r\n//       {/* API Integration Info */}\r\n//       <div className=\"mt-6 p-4 bg-blue-50 rounded-lg\">\r\n//         <h3 className=\"text-sm font-semibold text-blue-800 mb-2\">API Integration Status</h3>\r\n//         <div className=\"text-xs text-blue-700 space-y-1\">\r\n//           <p>• Connected to: {API_BASE_URL}</p>\r\n//           <p>• Auto-refresh after CRUD operations</p>\r\n//           <p>• Real-time data from Spring Boot backend</p>\r\n//           <p>• Hierarchical structure maintained server-side</p>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default ChartOfAccounts;\r\n\r\n\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Plus } from 'lucide-react';\r\nimport { useAccounts } from '../Hook/useAccounts';\r\nimport { useToast } from '../Hook/useToast';\r\nimport COAHeader from '../components/ChartOfAccounts/COAHeader';\r\nimport COAControls from '../components/ChartOfAccounts/COAControls';\r\nimport COAAccountForm from '../components/ChartOfAccounts/COAAccountForm';\r\nimport COAAccountTree from '../components/ChartOfAccounts/COAAccountTree';\r\nimport COATypeLegend from '../components/ChartOfAccounts/COATypeLegend';\r\nimport COAAPIStatus from '../components/ChartOfAccounts/COAAPIStatus';\r\nimport ConfirmationDialog from '../components/common/ConfirmationDialog';\r\nimport ToastContainer from '../components/common/ToastContainer';\r\nimport ErrorMessage from '../components/common/ErrorMessage';\r\nimport { accountTypes } from '../utils/accountConfig';\r\nimport { buildHierarchy, flattenAccounts, getFilteredAccounts } from '../utils/accountHelpers';\r\n\r\nconst ChartOfAccounts = () => {\r\n  const [expandedNodes, setExpandedNodes] = useState(new Set());\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [selectedCategory, setSelectedCategory] = useState('all');\r\n  const [isAddingAccount, setIsAddingAccount] = useState(false);\r\n  const [editingAccount, setEditingAccount] = useState(null);\r\n  const [confirmDialog, setConfirmDialog] = useState(null);\r\n  const [formData, setFormData] = useState({\r\n    code: '',\r\n    name: '',\r\n    type: 'assets',\r\n    category: 'account',\r\n    parentId: null,\r\n    description: '',\r\n    active: true\r\n  });\r\n\r\n  const { toasts, showToast, removeToast } = useToast();\r\n  const {\r\n    accounts,\r\n    loading,\r\n    error,\r\n    setError,\r\n    fetchAccounts,\r\n    createAccount,\r\n    updateAccount,\r\n    deleteAccount\r\n  } = useAccounts(showToast);\r\n\r\n  // Initialize component\r\n  useEffect(() => {\r\n    const initializeAccounts = async () => {\r\n      await fetchAccounts();\r\n      // Expand main categories by default after fetching\r\n      if (accounts.length > 0) {\r\n        const mainCategories = accounts\r\n          .filter(account => account.level === 0)\r\n          .map(account => account.id);\r\n        setExpandedNodes(new Set(mainCategories));\r\n      }\r\n    };\r\n    initializeAccounts();\r\n  }, []);\r\n\r\n  // Update expanded nodes when accounts change\r\n  useEffect(() => {\r\n    if (accounts.length > 0 && expandedNodes.size === 0) {\r\n      const mainCategories = accounts\r\n        .filter(account => account.level === 0)\r\n        .map(account => account.id);\r\n      setExpandedNodes(new Set(mainCategories));\r\n    }\r\n  }, [accounts]);\r\n\r\n  // Toggle expand/collapse\r\n  const toggleExpand = (nodeId) => {\r\n    const newExpanded = new Set(expandedNodes);\r\n    if (newExpanded.has(nodeId)) {\r\n      newExpanded.delete(nodeId);\r\n    } else {\r\n      newExpanded.add(nodeId);\r\n    }\r\n    setExpandedNodes(newExpanded);\r\n  };\r\n\r\n  // Handle add account\r\n  const handleAddAccount = (parentId = null) => {\r\n    const flatAccountsList = flattenAccounts(accounts);\r\n    const parentAccount = parentId ? flatAccountsList.find(a => a.id === parentId) : null;\r\n    const accountType = parentAccount ? parentAccount.type : 'assets';\r\n    \r\n    setFormData({\r\n      code: '',\r\n      name: '',\r\n      type: accountType,\r\n      category: 'account',\r\n      parentId,\r\n      description: '',\r\n      active: true\r\n    });\r\n    setIsAddingAccount(true);\r\n  };\r\n\r\n  // Handle edit account\r\n  const handleEditAccount = (account) => {\r\n    setFormData({\r\n      code: account.code,\r\n      name: account.name,\r\n      type: account.type,\r\n      category: account.category,\r\n      parentId: account.parentId,\r\n      description: account.description || '',\r\n      active: account.active !== undefined ? account.active : true\r\n    });\r\n    setEditingAccount(account.id);\r\n  };\r\n\r\n  // Handle save account\r\n  const handleSaveAccount = async () => {\r\n    if (!formData.name) {\r\n      showToast('Please fill in the account name', 'error');\r\n      return;\r\n    }\r\n\r\n    const success = editingAccount \r\n      ? await updateAccount(editingAccount, formData)\r\n      : await createAccount(formData);\r\n\r\n    if (success) {\r\n      // Reset form\r\n      setFormData({\r\n        code: '',\r\n        name: '',\r\n        type: 'assets',\r\n        category: 'account',\r\n        parentId: null,\r\n        description: '',\r\n        active: true\r\n      });\r\n      setIsAddingAccount(false);\r\n      setEditingAccount(null);\r\n    }\r\n  };\r\n\r\n  // Handle delete account with confirmation\r\n  const handleDeleteAccount = async (account) => {\r\n    const flatAccountsList = flattenAccounts(accounts);\r\n    const hasChildren = flatAccountsList.some(a => a.parentId === account.id);\r\n    \r\n    if (hasChildren) {\r\n      showToast('Cannot delete account with sub-accounts. Please delete sub-accounts first.', 'error');\r\n      return;\r\n    }\r\n\r\n    setConfirmDialog({\r\n      title: 'Delete Account',\r\n      message: `Are you sure you want to delete the account \"${account.name}\" (${account.code})? This action cannot be undone.`,\r\n      type: 'danger',\r\n      confirmText: 'Delete',\r\n      cancelText: 'Cancel',\r\n      onConfirm: async () => {\r\n        await deleteAccount(account.id);\r\n        setConfirmDialog(null);\r\n      },\r\n      onCancel: () => {\r\n        setConfirmDialog(null);\r\n      }\r\n    });\r\n  };\r\n\r\n  // Handle cancel\r\n  const handleCancel = () => {\r\n    setIsAddingAccount(false);\r\n    setEditingAccount(null);\r\n    setFormData({\r\n      code: '',\r\n      name: '',\r\n      type: 'assets',\r\n      category: 'account',\r\n      parentId: null,\r\n      description: '',\r\n      active: true\r\n    });\r\n  };\r\n\r\n  // Get display data\r\n  const flatAccountsList = flattenAccounts(accounts);\r\n  const filteredAccounts = getFilteredAccounts(flatAccountsList, searchTerm, selectedCategory);\r\n  const displayAccounts = searchTerm || selectedCategory !== 'all' \r\n    ? filteredAccounts \r\n    : buildHierarchy(flatAccountsList);\r\n\r\n  return (\r\n    <div className=\"max-w-7xl mx-auto p-6 bg-white\">\r\n      {/* Confirmation Dialog */}\r\n      {confirmDialog && (\r\n        <ConfirmationDialog\r\n          isOpen={true}\r\n          {...confirmDialog}\r\n        />\r\n      )}\r\n\r\n      {/* Toast Notifications */}\r\n      <ToastContainer toasts={toasts} removeToast={removeToast} />\r\n\r\n      <COAHeader />\r\n\r\n      {/* Error Message */}\r\n      {error && (\r\n        <ErrorMessage error={error} onClose={() => setError(null)} />\r\n      )}\r\n\r\n      {/* Controls */}\r\n      <COAControls\r\n        searchTerm={searchTerm}\r\n        setSearchTerm={setSearchTerm}\r\n        selectedCategory={selectedCategory}\r\n        setSelectedCategory={setSelectedCategory}\r\n        onRefresh={fetchAccounts}\r\n        onAddAccount={() => handleAddAccount()}\r\n        loading={loading}\r\n        accountTypes={accountTypes}\r\n      />\r\n\r\n      {/* Account Form */}\r\n      {(isAddingAccount || editingAccount) && (\r\n        <COAAccountForm\r\n          formData={formData}\r\n          setFormData={setFormData}\r\n          editingAccount={editingAccount}\r\n          flatAccounts={flatAccountsList}\r\n          onSave={handleSaveAccount}\r\n          onCancel={handleCancel}\r\n          loading={loading}\r\n          accountTypes={accountTypes}\r\n        />\r\n      )}\r\n\r\n      {/* Accounts Tree */}\r\n      <COAAccountTree\r\n        accounts={accounts}\r\n        displayAccounts={displayAccounts}\r\n        filteredAccounts={filteredAccounts}\r\n        expandedNodes={expandedNodes}\r\n        searchTerm={searchTerm}\r\n        selectedCategory={selectedCategory}\r\n        loading={loading}\r\n        onToggleExpand={toggleExpand}\r\n        onEditAccount={handleEditAccount}\r\n        onDeleteAccount={handleDeleteAccount}\r\n        onAddAccount={handleAddAccount}\r\n      />\r\n\r\n      {/* Account Type Legend */}\r\n      <COATypeLegend accountTypes={accountTypes} />\r\n\r\n      {/* API Integration Info */}\r\n      <COAAPIStatus />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChartOfAccounts;"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}