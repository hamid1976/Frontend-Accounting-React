{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Logic-Unit\\\\my-account\\\\src\\\\components\\\\AccountsReceivable\\\\RecordPaymentModal.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import { X, Calendar, DollarSign, CreditCard, FileText, AlertCircle } from 'lucide-react';\n// import { formatCurrency } from './AccountsReceivableUtils/formatters';\n\n// const RecordPaymentModal = ({ invoiceId, amount, onClose, onSubmit, onPaymentComplete,customerId }) => {\n//   const [formData, setFormData] = useState({\n//     date: new Date().toISOString().split('T')[0],\n//     amount: amount?.toString() || '',\n//     method: '',\n//     account: '',\n//     memo: ''\n//   });\n//   console.log('Initial Props:', {\n//   invoiceId,\n//   amount,\n//   customerId\n// });\n//   const [accounts, setAccounts] = useState([]);\n//   const [loading, setLoading] = useState(false);\n//   const [errors, setErrors] = useState({});\n//   const [isAlreadyPaid, setIsAlreadyPaid] = useState(false); // ✅ NEW\n//   const [currentRemainingAmount, setCurrentRemainingAmount] = useState(amount);\n// useEffect(() => {\n//   const existingOrders = JSON.parse(localStorage.getItem('orders') || '[]');\n//   const orderIndex = existingOrders.findIndex(order =>\n//     order.orderId === invoiceId || order.id === invoiceId\n//   );\n\n//   const remainingAmountFromStorage = orderIndex !== -1 \n//     ? (existingOrders[orderIndex].remainingAmount || amount)\n//     : amount;\n\n//   setCurrentRemainingAmount(remainingAmountFromStorage);\n// }, [invoiceId, amount]);\n\n// const paymentAmount = parseFloat(formData.amount) || 0;\n// const remainingAmount = Math.max(0, currentRemainingAmount - paymentAmount);\n// const isFullPayment = remainingAmount <= 0;\n//   // Fetch accounts on mount\n//   useEffect(() => {\n//     fetchAccounts();\n//   }, []);\n\n//   // Set initial amount\n//   useEffect(() => {\n//     if (amount) {\n//       setFormData(prev => ({ ...prev, amount: amount.toString() }));\n//     }\n//   }, [amount]);\n//    // ✅ Check if this invoice is already fully paid\n//   useEffect(() => {\n//     const existingOrders = JSON.parse(localStorage.getItem('orders') || '[]');\n//     const order = existingOrders.find(o => o.orderId === invoiceId || o.id === invoiceId);\n\n//     if (order && (order.paid || order.paymentStatus === 'paid')) {\n//       setIsAlreadyPaid(true);\n//     }\n//   }, [invoiceId]);\n//   const fetchAccounts = async () => {\n//     try {\n//       const response = await fetch('http://localhost:8080/api/accounts');\n//       const data = await response.json();\n\n//       // Filter only asset accounts (like the commented code)\n//       const assetAccounts = data.filter(acct => acct.type === 'assets');\n\n//       // Build parent-child map (like the commented code)\n//       const accountMap = {};\n//       assetAccounts.forEach(acct => accountMap[acct.id] = { ...acct, children: [] });\n\n//       assetAccounts.forEach(acct => {\n//         if (acct.parentId && accountMap[acct.parentId]) {\n//           accountMap[acct.parentId].children.push(accountMap[acct.id]);\n//         }\n//       });\n\n//       // Top-level accounts (like the commented code)\n//       const tree = assetAccounts.filter(acct => !acct.parentId || !accountMap[acct.parentId]);\n//       setAccounts(tree);\n//     } catch (err) {\n//       console.error('Failed to fetch accounts:', err);\n//     }\n//   };\n\n//   const handleChange = (field, value) => {\n//     setFormData(prev => ({ ...prev, [field]: value }));\n//     // Clear error for this field when user starts typing\n//     if (errors[field]) {\n//       setErrors(prev => ({ ...prev, [field]: '' }));\n//     }\n//   };\n\n//   const validateForm = () => {\n//     const newErrors = {};\n\n//     if (!formData.date) {\n//       newErrors.date = 'Payment date is required';\n//     }\n\n//     if (!formData.amount || parseFloat(formData.amount) <= 0) {\n//       newErrors.amount = 'Valid payment amount is required';\n//     }\n\n//     if (!formData.method) {\n//       newErrors.method = 'Payment method is required';\n//     }\n\n//     if (!formData.account) {\n//       newErrors.account = 'Deposit account is required';\n//     }\n\n//     setErrors(newErrors);\n//     return Object.keys(newErrors).length === 0;\n//   };\n// // const handleSubmit = async () => {\n// //   if (isAlreadyPaid) {\n// //     setErrors({\n// //       general: 'This invoice has already been fully paid. No further payments allowed.'\n// //     });\n// //     return;\n// //   }\n\n// //   if (!validateForm()) return;\n\n// //   setLoading(true);\n\n// //   try {\n// //     const existingOrders = JSON.parse(localStorage.getItem('orders') || '[]');\n// //     const orderIndex = existingOrders.findIndex(order =>\n// //       order.orderId === invoiceId || order.id === invoiceId\n// //     );\n\n// //     // Get the current remaining amount, defaulting to the original amount if not found\n// //     const currentRemainingAmount = orderIndex !== -1 \n// //       ? existingOrders[orderIndex].remainingAmount || amount \n// //       : amount;\n\n// //     const paymentAmount = parseFloat(formData.amount);\n// //     const remainingAmount = currentRemainingAmount - paymentAmount;\n// //     const isFullPayment = remainingAmount <= 0;\n// //     const paymentStatus = isFullPayment ? 'paid' : 'partial';\n\n// //     // Create payment record (local save)\n// //     const paymentData = {\n// //       id: `PAY-${Date.now()}`,\n// //       customerId:customerId||null,\n// //       orderId: invoiceId,\n// //       date: formData.date,\n// //       amount: paymentAmount,\n// //       paymentMethod: formData.method,\n// //       accountId: formData.account,\n// //       accountName: getAccountNameById(formData.account, accounts) || 'Unknown Account',\n// //       memo: formData.memo,\n// //       status: paymentStatus,\n// //       remainingAmount: Math.max(0, remainingAmount),\n// //       createdAt: new Date().toISOString(),\n// //       createdBy: 'current_user'\n// //     };\n\n// //     // Save payment to localStorage\n// //     const existingPayments = JSON.parse(localStorage.getItem('payments') || '[]');\n// //     const updatedPayments = [...existingPayments, paymentData];\n// //     localStorage.setItem('payments', JSON.stringify(updatedPayments));\n\n// //     // // Update order in localStorage\n// //     //  existingOrders = JSON.parse(localStorage.getItem('orders') || '[]');\n// //     //  orderIndex = existingOrders.findIndex(order =>\n// //     //   order.orderId === invoiceId || order.id === invoiceId\n// //     // );\n\n// //     if (orderIndex !== -1) {\n// //       existingOrders[orderIndex] = {\n// //         ...existingOrders[orderIndex],\n// //         paid: isFullPayment,\n// //         paymentStatus: paymentStatus,\n// //         lastPaymentDate: formData.date,\n// //         lastPaymentAmount: paymentAmount,\n// //         remainingAmount: Math.max(0, remainingAmount),\n// //         paymentHistory: [\n// //           ...(existingOrders[orderIndex].paymentHistory || []),\n// //           paymentData.id\n// //         ]\n// //       };\n// //       localStorage.setItem('orders', JSON.stringify(existingOrders));\n// //     }\n\n// //     // ✅ CALL THE API\n// //     const apiUrl = `https://api-pos.hulmsolutions.com/POS/accounting2/31fc8df0-61db-41e5-bb67-070fde367ea1/orders/Paid/${invoiceId}`;\n\n// //     const payload = {\n// //       customerId: customerId,  // if null string is correct\n// //       orderId: invoiceId,\n// //       paid: isFullPayment,  // true if fully paid, false otherwise\n// //       billUnitId: \"2\",\n// //       billStatus: \"pending\"\n// //     };\n\n// //    const apiResponse = await fetch(apiUrl, {\n// //   method: \"PUT\",\n// //   headers: {\n// //     \"Content-Type\": \"application/json\",\n// //     \"Authorization\": `Bearer $hAMID` // ✅ add your token\n// //   },\n// //   body: JSON.stringify(payload)\n// // });\n\n// //     if (!apiResponse.ok) {\n// //       throw new Error(\"Failed to update order status in API\");\n// //     }\n\n// //     // Callbacks\n// //     if (onSubmit) {\n// //       onSubmit(paymentData, isFullPayment);\n// //     }\n\n// //     if (onPaymentComplete) {\n// //       onPaymentComplete(paymentData, isFullPayment);\n// //     }\n\n// //     // Success message\n// //     const message = isFullPayment\n// //       ? \"Payment recorded successfully. Invoice is now fully paid.\"\n// //       : `Partial payment of ${formatCurrency(paymentAmount)} recorded. Remaining balance: ${formatCurrency(remainingAmount)}`;\n\n// //     console.log(message);\n\n// //     onClose();\n// //   } catch (error) {\n// //     console.error(\"Error recording payment:\", error);\n// //     setErrors({ general: \"Failed to record payment. Please try again.\" });\n// //   } finally {\n// //     setLoading(false);\n// //   }\n// // };\n\n// const handleSubmit = async () => {\n//   if (isAlreadyPaid) {\n//     setErrors({\n//       general: 'This invoice has already been fully paid. No further payments allowed.'\n//     });\n//     return;\n//   }\n\n//   if (!validateForm()) return;\n\n//   setLoading(true);\n\n//   try {\n//     // Retrieve existing orders from localStorage\n//     const existingOrders = JSON.parse(localStorage.getItem('orders') || '[]');\n//     const orderIndex = existingOrders.findIndex(order =>\n//       order.orderId === invoiceId || order.id === invoiceId\n//     );\n\n//     // Determine current remaining amount\n//     const currentRemainingAmount = orderIndex !== -1 \n//       ? (existingOrders[orderIndex].remainingAmount || amount)\n//       : amount;\n\n//     const paymentAmount = parseFloat(formData.amount);\n//     const remainingAmount = Math.max(0, currentRemainingAmount - paymentAmount);\n//     const isFullPayment = remainingAmount <= 0;\n//     const paymentStatus = isFullPayment ? 'paid' : 'partial';\n\n//     // Create payment record\n//     const paymentData = {\n//       id: `PAY-${Date.now()}`,\n//       customerId: customerId || null,\n//       orderId: invoiceId,\n//       date: formData.date,\n//       amount: paymentAmount,\n//       paymentMethod: formData.method,\n//       accountId: formData.account,\n//       accountName: getAccountNameById(formData.account, accounts) || 'Unknown Account',\n//       memo: formData.memo,\n//       status: paymentStatus,\n//       remainingAmount: remainingAmount,\n//       createdAt: new Date().toISOString(),\n//       createdBy: 'current_user'\n//     };\n\n//     // Save payment to localStorage\n//     const existingPayments = JSON.parse(localStorage.getItem('payments') || '[]');\n//     const updatedPayments = [...existingPayments, paymentData];\n//     localStorage.setItem('payments', JSON.stringify(updatedPayments));\n\n//     // Update order in localStorage\n//     if (orderIndex !== -1) {\n//       existingOrders[orderIndex] = {\n//         ...existingOrders[orderIndex],\n//         paid: isFullPayment,\n//         paymentStatus: paymentStatus,\n//         lastPaymentDate: formData.date,\n//         lastPaymentAmount: paymentAmount,\n//         remainingAmount: remainingAmount,\n//         paymentHistory: [\n//           ...(existingOrders[orderIndex].paymentHistory || []),\n//           paymentData.id\n//         ]\n//       };\n//       localStorage.setItem('orders', JSON.stringify(existingOrders));\n//     }\n\n//     // API Call\n//     const apiUrl = `https://api-pos.hulmsolutions.com/POS/accounting2/31fc8df0-61db-41e5-bb67-070fde367ea1/orders/Paid/${invoiceId}`;\n\n//     const payload = {\n//       customerId: customerId,\n//       orderId: invoiceId,\n//       paid: isFullPayment,\n//       billUnitId: \"2\",\n//       billStatus: \"pending\"\n//     };\n\n//     const apiResponse = await fetch(apiUrl, {\n//       method: \"PUT\",\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//         \"Authorization\": `Bearer $hAMID`\n//       },\n//       body: JSON.stringify(payload)\n//     });\n\n//     if (!apiResponse.ok) {\n//       throw new Error(\"Failed to update order status in API\");\n//     }\n\n//     // Callbacks\n//     if (onSubmit) {\n//       onSubmit(paymentData, isFullPayment);\n//     }\n\n//     if (onPaymentComplete) {\n//       onPaymentComplete(paymentData, isFullPayment);\n//     }\n\n//     // Success message\n//     const message = isFullPayment\n//       ? \"Payment recorded successfully. Invoice is now fully paid.\"\n//       : `Partial payment of ${formatCurrency(paymentAmount)} recorded. Remaining balance: ${formatCurrency(remainingAmount)}`;\n\n//     console.log(message);\n\n//     onClose();\n//   } catch (error) {\n//     console.error(\"Error recording payment:\", error);\n//     setErrors({ general: \"Failed to record payment. Please try again.\" });\n//   } finally {\n//     setLoading(false);\n//   }\n// };\n\n//   const getAccountNameById = (accountId, accountList) => {\n//     for (const account of accountList) {\n//       if (account.id === accountId) {\n//         return account.name;\n//       }\n//       if (account.children && account.children.length > 0) {\n//         const foundInChildren = getAccountNameById(accountId, account.children);\n//         if (foundInChildren) return foundInChildren;\n//       }\n//     }\n//     return null;\n//   };\n\n//   // Helper function to render account options recursively\n//   const renderAccountOptions = (accountList, level = 0) => {\n//     return accountList.map(account => (\n//       <React.Fragment key={account.id}>\n//         <option value={account.id}>\n//           {'-'.repeat(level * 2)} {account.code} - {account.name}\n//         </option>\n//         {account.children && account.children.length > 0 && (\n//           renderAccountOptions(account.children, level + 1)\n//         )}\n//       </React.Fragment>\n//     ));\n//   };\n\n//   // const paymentAmount = parseFloat(formData.amount) || 0;\n//   // const remainingAmount = amount - paymentAmount;\n//   // const isFullPayment = paymentAmount >= amount;\n\n//   return (\n//     <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n//       <div className=\"bg-white rounded-xl shadow-2xl max-w-md w-full\">\n//         {/* Header */}\n//         <div className=\"px-6 py-4 border-b border-gray-200\">\n//           <div className=\"flex items-center justify-between\">\n//             <h2 className=\"text-xl font-semibold text-gray-900\">\n//               Record a payment for this invoice\n//             </h2>\n//             <button\n//               onClick={onClose}\n//               className=\"text-gray-400 hover:text-gray-600 transition-colors\"\n//             >\n//               <X size={24} />\n//             </button>\n//           </div>\n//         </div>\n\n//         {/* Form Body */}\n//         <div className=\"px-6 py-4 space-y-5\">\n//           {errors.general && (\n//             <div className=\"p-3 bg-red-50 border border-red-200 rounded-lg flex items-start gap-2\">\n//               <AlertCircle size={20} className=\"text-red-600 flex-shrink-0 mt-0.5\" />\n//               <span className=\"text-sm text-red-700\">{errors.general}</span>\n//             </div>\n//           )}\n\n//           {/* Date Field */}\n//           <div>\n//             <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\">\n//               <Calendar size={16} />\n//               Date\n//             </label>\n//             <input\n//               type=\"date\"\n//               value={formData.date}\n//               onChange={(e) => handleChange('date', e.target.value)}\n//               className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\n//                 errors.date ? 'border-red-500' : 'border-gray-300'\n//               }`}\n//             />\n//             {errors.date && <span className=\"text-xs text-red-600 mt-1\">{errors.date}</span>}\n//           </div>\n\n//           {/* Amount Field */}\n//           <div>\n//             <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\">\n//               <DollarSign size={16} />\n//               Amount\n//             </label>\n//             <div className=\"relative\">\n//               <span className=\"absolute left-3 top-1/2 -translate-y-1/2 text-gray-500 font-medium\">\n//                 Rs\n//               </span>\n//               <input\n//                 type=\"number\"\n//                 step=\"0.01\"\n//                 value={formData.amount}\n//                 onChange={(e) => handleChange('amount', e.target.value)}\n//                 className={`w-full pl-10 pr-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\n//                   errors.amount ? 'border-red-500' : 'border-gray-300'\n//                 }`}\n//                 placeholder=\"0.00\"\n//               />\n//             </div>\n//             {errors.amount && <span className=\"text-xs text-red-600 mt-1\">{errors.amount}</span>}\n\n//             {paymentAmount > 0 && (\n//               <div className=\"mt-2 text-sm\">\n//                 {isFullPayment ? (\n//                   <span className=\"text-green-600 font-medium\">Invoice will be fully paid</span>\n//                 ) : (\n//                   <span className=\"text-orange-600\">\n//                     Partial payment - Remaining: {formatCurrency(remainingAmount)}\n//                   </span>\n//                 )}\n//               </div>\n//             )}\n//           </div>\n\n//           {/* Payment Method */}\n//           <div>\n//             <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\">\n//               <CreditCard size={16} />\n//               Method\n//             </label>\n//             <select\n//               value={formData.method}\n//               onChange={(e) => handleChange('method', e.target.value)}\n//               className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\n//                 errors.method ? 'border-red-500' : 'border-gray-300'\n//               }`}\n//             >\n//               <option value=\"\">Select a payment method...</option>\n//               <option value=\"cash\">Cash</option>\n//               <option value=\"check\">Check</option>\n//               <option value=\"bank_transfer\">Bank Transfer</option>\n//               <option value=\"credit_card\">Credit Card</option>\n//               <option value=\"debit_card\">Debit Card</option>\n//               <option value=\"online\">Online Payment</option>\n//             </select>\n//             {errors.method && <span className=\"text-xs text-red-600 mt-1\">{errors.method}</span>}\n//           </div>\n\n//           {/* Account */}\n//           <div>\n//             <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\">\n//               <FileText size={16} />\n//               Account\n//             </label>\n//             <select\n//               value={formData.account}\n//               onChange={(e) => handleChange('account', e.target.value)}\n//               className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\n//                 errors.account ? 'border-red-500' : 'border-gray-300'\n//               }`}\n//             >\n//               <option value=\"\">Select a payment account...</option>\n//               {renderAccountOptions(accounts)}\n//             </select>\n//             {errors.account && <span className=\"text-xs text-red-600 mt-1\">{errors.account}</span>}\n//             <p className=\"text-xs text-gray-500 mt-1\">\n//               Any account into which you deposit and withdraw funds from.{' '}\n//               <a href=\"#\" className=\"text-blue-600 hover:text-blue-700\">Learn more</a>\n//             </p>\n//           </div>\n\n//           {/* Memo */}\n//           <div>\n//             <label className=\"text-sm font-medium text-gray-700 mb-1 block\">\n//               Memo / notes\n//             </label>\n//             <textarea\n//               value={formData.memo}\n//               onChange={(e) => handleChange('memo', e.target.value)}\n//               rows={3}\n//               className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n//               placeholder=\"Add any additional notes...\"\n//             />\n//           </div>\n//         </div>\n\n//         {/* Footer */}\n//         <div className=\"px-6 py-4 border-t border-gray-200 flex items-center justify-end gap-3\">\n//           <button\n//             onClick={onClose}\n//             className=\"px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors\"\n//           >\n//             Cancel\n//           </button>\n//           <button\n//             onClick={handleSubmit}\n//             disabled={loading || !formData.amount || parseFloat(formData.amount) <= 0}\n//             className={`px-6 py-2 rounded-lg font-medium transition-colors ${\n//               loading || !formData.amount || parseFloat(formData.amount) <= 0\n//                 ? 'bg-gray-300 text-gray-500 cursor-not-allowed'\n//                 : 'bg-blue-600 text-white hover:bg-blue-700'\n//             }`}\n//           >\n//             {loading ? 'Processing...' : 'Submit'}\n//           </button>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default RecordPaymentModal;\n\nimport React, { useState, useEffect } from 'react';\nimport { X, Calendar, DollarSign, CreditCard, FileText, AlertCircle } from 'lucide-react';\nimport { formatCurrency } from './AccountsReceivableUtils/formatters';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RecordPaymentModal = ({\n  invoiceId,\n  amount,\n  onClose,\n  onSubmit,\n  onPaymentComplete,\n  customerId\n}) => {\n  _s();\n  const [formData, setFormData] = useState({\n    date: new Date().toISOString().split('T')[0],\n    amount: '',\n    method: '',\n    account: '',\n    memo: ''\n  });\n  const [accounts, setAccounts] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [errors, setErrors] = useState({});\n  const [isAlreadyPaid, setIsAlreadyPaid] = useState(false);\n  const [currentRemainingAmount, setCurrentRemainingAmount] = useState(amount);\n  const [originalTotalAmount, setOriginalTotalAmount] = useState(amount);\n\n  // Fetch the current remaining amount from localStorage\n  useEffect(() => {\n    const existingOrders = JSON.parse(localStorage.getItem('orders') || '[]');\n    const order = existingOrders.find(o => o.orderId === invoiceId || o.id === invoiceId);\n    if (order) {\n      // If remainingAmount exists, use it; otherwise use the total amount\n      const remaining = order.remainingAmount !== undefined ? order.remainingAmount : order.total;\n      setCurrentRemainingAmount(remaining);\n      setOriginalTotalAmount(order.total);\n\n      // Set the form amount to the remaining amount by default\n      setFormData(prev => ({\n        ...prev,\n        amount: remaining.toString()\n      }));\n\n      // Check if already paid\n      if (order.paid || order.paymentStatus === 'paid' || remaining <= 0) {\n        setIsAlreadyPaid(true);\n      }\n    } else {\n      // If no order found, use the amount prop\n      setCurrentRemainingAmount(amount);\n      setOriginalTotalAmount(amount);\n      setFormData(prev => ({\n        ...prev,\n        amount: amount.toString()\n      }));\n    }\n  }, [invoiceId, amount]);\n\n  // Fetch accounts on mount\n  useEffect(() => {\n    fetchAccounts();\n  }, []);\n  const fetchAccounts = async () => {\n    try {\n      const response = await fetch('http://localhost:8080/api/accounts');\n      const data = await response.json();\n      const assetAccounts = data.filter(acct => acct.type === 'assets');\n      const accountMap = {};\n      assetAccounts.forEach(acct => accountMap[acct.id] = {\n        ...acct,\n        children: []\n      });\n      assetAccounts.forEach(acct => {\n        if (acct.parentId && accountMap[acct.parentId]) {\n          accountMap[acct.parentId].children.push(accountMap[acct.id]);\n        }\n      });\n      const tree = assetAccounts.filter(acct => !acct.parentId || !accountMap[acct.parentId]);\n      setAccounts(tree);\n    } catch (err) {\n      console.error('Failed to fetch accounts:', err);\n    }\n  };\n  const handleChange = (field, value) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n    if (errors[field]) {\n      setErrors(prev => ({\n        ...prev,\n        [field]: ''\n      }));\n    }\n  };\n  const validateForm = () => {\n    const newErrors = {};\n    if (!formData.date) {\n      newErrors.date = 'Payment date is required';\n    }\n    const paymentAmount = parseFloat(formData.amount);\n    if (!formData.amount || paymentAmount <= 0) {\n      newErrors.amount = 'Valid payment amount is required';\n    } else if (paymentAmount > currentRemainingAmount) {\n      newErrors.amount = `Payment cannot exceed remaining amount of ${formatCurrency(currentRemainingAmount)}`;\n    }\n    if (!formData.method) {\n      newErrors.method = 'Payment method is required';\n    }\n    if (!formData.account) {\n      newErrors.account = 'Deposit account is required';\n    }\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n  const handleSubmit = async () => {\n    if (isAlreadyPaid) {\n      setErrors({\n        general: 'This invoice has already been fully paid. No further payments allowed.'\n      });\n      return;\n    }\n    if (!validateForm()) return;\n    setLoading(true);\n    try {\n      const paymentAmount = parseFloat(formData.amount);\n      const newRemainingAmount = Math.max(0, currentRemainingAmount - paymentAmount);\n      const isFullPayment = newRemainingAmount <= 0;\n      const paymentStatus = isFullPayment ? 'paid' : 'partial';\n\n      // Create payment record\n      const paymentData = {\n        id: `PAY-${Date.now()}`,\n        customerId: customerId || null,\n        orderId: invoiceId,\n        date: formData.date,\n        amount: paymentAmount,\n        paymentMethod: formData.method,\n        accountId: formData.account,\n        accountName: getAccountNameById(formData.account, accounts) || 'Unknown Account',\n        memo: formData.memo,\n        status: paymentStatus,\n        remainingAmount: newRemainingAmount,\n        createdAt: new Date().toISOString(),\n        createdBy: 'current_user'\n      };\n\n      // Save payment to localStorage\n      const existingPayments = JSON.parse(localStorage.getItem('payments') || '[]');\n      const updatedPayments = [...existingPayments, paymentData];\n      localStorage.setItem('payments', JSON.stringify(updatedPayments));\n\n      // Update order in localStorage\n      const existingOrders = JSON.parse(localStorage.getItem('orders') || '[]');\n      const orderIndex = existingOrders.findIndex(order => order.orderId === invoiceId || order.id === invoiceId);\n      if (orderIndex !== -1) {\n        existingOrders[orderIndex] = {\n          ...existingOrders[orderIndex],\n          paid: isFullPayment,\n          paymentStatus: paymentStatus,\n          lastPaymentDate: formData.date,\n          lastPaymentAmount: paymentAmount,\n          remainingAmount: newRemainingAmount,\n          paymentHistory: [...(existingOrders[orderIndex].paymentHistory || []), paymentData.id]\n        };\n        localStorage.setItem('orders', JSON.stringify(existingOrders));\n      }\n\n      // API Call\n      const apiUrl = `https://api-pos.hulmsolutions.com/POS/accounting2/31fc8df0-61db-41e5-bb67-070fde367ea1/orders/Paid/${invoiceId}`;\n      const payload = {\n        customerId: customerId,\n        orderId: invoiceId,\n        paid: isFullPayment,\n        billUnitId: \"2\",\n        billStatus: \"pending\"\n      };\n      const apiResponse = await fetch(apiUrl, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer $hAMID`\n        },\n        body: JSON.stringify(payload)\n      });\n      if (!apiResponse.ok) {\n        throw new Error(\"Failed to update order status in API\");\n      }\n\n      // Callbacks\n      if (onSubmit) {\n        onSubmit(paymentData, isFullPayment);\n      }\n      if (onPaymentComplete) {\n        onPaymentComplete(paymentData, isFullPayment);\n      }\n      const message = isFullPayment ? \"Payment recorded successfully. Invoice is now fully paid.\" : `Partial payment of ${formatCurrency(paymentAmount)} recorded. Remaining balance: ${formatCurrency(newRemainingAmount)}`;\n      console.log(message);\n      onClose();\n    } catch (error) {\n      console.error(\"Error recording payment:\", error);\n      setErrors({\n        general: \"Failed to record payment. Please try again.\"\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n  const getAccountNameById = (accountId, accountList) => {\n    for (const account of accountList) {\n      if (account.id === accountId) {\n        return account.name;\n      }\n      if (account.children && account.children.length > 0) {\n        const foundInChildren = getAccountNameById(accountId, account.children);\n        if (foundInChildren) return foundInChildren;\n      }\n    }\n    return null;\n  };\n  const renderAccountOptions = (accountList, level = 0) => {\n    return accountList.map(account => /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: account.id,\n        children: ['-'.repeat(level * 2), \" \", account.code, \" - \", account.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 790,\n        columnNumber: 9\n      }, this), account.children && account.children.length > 0 && renderAccountOptions(account.children, level + 1)]\n    }, account.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 789,\n      columnNumber: 7\n    }, this));\n  };\n  const paymentAmount = parseFloat(formData.amount) || 0;\n  const remainingAmount = Math.max(0, currentRemainingAmount - paymentAmount);\n  const isFullPayment = remainingAmount <= 0 && paymentAmount > 0;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-white rounded-xl shadow-2xl max-w-md w-full\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"px-6 py-4 border-b border-gray-200\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center justify-between\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"text-xl font-semibold text-gray-900\",\n            children: \"Record a payment for this invoice\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 810,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: onClose,\n            className: \"text-gray-400 hover:text-gray-600 transition-colors\",\n            children: /*#__PURE__*/_jsxDEV(X, {\n              size: 24\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 817,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 813,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 809,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 808,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"px-6 py-4 space-y-5\",\n        children: [errors.general && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"p-3 bg-red-50 border border-red-200 rounded-lg flex items-start gap-2\",\n          children: [/*#__PURE__*/_jsxDEV(AlertCircle, {\n            size: 20,\n            className: \"text-red-600 flex-shrink-0 mt-0.5\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 826,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-sm text-red-700\",\n            children: errors.general\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 827,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 825,\n          columnNumber: 13\n        }, this), currentRemainingAmount > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"p-3 bg-blue-50 border border-blue-200 rounded-lg\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-sm text-blue-800\",\n            children: [\"Current remaining balance: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: formatCurrency(currentRemainingAmount)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 835,\n              columnNumber: 44\n            }, this), originalTotalAmount > currentRemainingAmount && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"text-xs ml-2\",\n              children: [\"(Original total: \", formatCurrency(originalTotalAmount), \")\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 837,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 834,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 833,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\",\n            children: [/*#__PURE__*/_jsxDEV(Calendar, {\n              size: 16\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 848,\n              columnNumber: 15\n            }, this), \"Date\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 847,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"date\",\n            value: formData.date,\n            onChange: e => handleChange('date', e.target.value),\n            className: `w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${errors.date ? 'border-red-500' : 'border-gray-300'}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 851,\n            columnNumber: 13\n          }, this), errors.date && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-xs text-red-600 mt-1\",\n            children: errors.date\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 859,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 846,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\",\n            children: [/*#__PURE__*/_jsxDEV(DollarSign, {\n              size: 16\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 865,\n              columnNumber: 15\n            }, this), \"Amount\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 864,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"relative\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"absolute left-3 top-1/2 -translate-y-1/2 text-gray-500 font-medium\",\n              children: \"Rs\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 869,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              step: \"0.01\",\n              value: formData.amount,\n              onChange: e => handleChange('amount', e.target.value),\n              className: `w-full pl-10 pr-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${errors.amount ? 'border-red-500' : 'border-gray-300'}`,\n              placeholder: \"0.00\",\n              max: currentRemainingAmount\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 872,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 868,\n            columnNumber: 13\n          }, this), errors.amount && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-xs text-red-600 mt-1\",\n            children: errors.amount\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 884,\n            columnNumber: 31\n          }, this), paymentAmount > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mt-2 text-sm\",\n            children: isFullPayment ? /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"text-green-600 font-medium\",\n              children: \"Invoice will be fully paid\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 889,\n              columnNumber: 19\n            }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"text-orange-600\",\n              children: [\"Partial payment - Remaining: \", formatCurrency(remainingAmount)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 891,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 887,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 863,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\",\n            children: [/*#__PURE__*/_jsxDEV(CreditCard, {\n              size: 16\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 902,\n              columnNumber: 15\n            }, this), \"Method\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 901,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: formData.method,\n            onChange: e => handleChange('method', e.target.value),\n            className: `w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${errors.method ? 'border-red-500' : 'border-gray-300'}`,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select a payment method...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 912,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"cash\",\n              children: \"Cash\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 913,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"check\",\n              children: \"Check\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 914,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"bank_transfer\",\n              children: \"Bank Transfer\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 915,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"credit_card\",\n              children: \"Credit Card\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 916,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"debit_card\",\n              children: \"Debit Card\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 917,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"online\",\n              children: \"Online Payment\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 918,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 905,\n            columnNumber: 13\n          }, this), errors.method && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-xs text-red-600 mt-1\",\n            children: errors.method\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 920,\n            columnNumber: 31\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 900,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\",\n            children: [/*#__PURE__*/_jsxDEV(FileText, {\n              size: 16\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 926,\n              columnNumber: 15\n            }, this), \"Account\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 925,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: formData.account,\n            onChange: e => handleChange('account', e.target.value),\n            className: `w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${errors.account ? 'border-red-500' : 'border-gray-300'}`,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select a payment account...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 936,\n              columnNumber: 15\n            }, this), renderAccountOptions(accounts)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 929,\n            columnNumber: 13\n          }, this), errors.account && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-xs text-red-600 mt-1\",\n            children: errors.account\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 939,\n            columnNumber: 32\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-xs text-gray-500 mt-1\",\n            children: [\"Any account into which you deposit and withdraw funds from.\", ' ', /*#__PURE__*/_jsxDEV(\"a\", {\n              href: \"#\",\n              className: \"text-blue-600 hover:text-blue-700\",\n              children: \"Learn more\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 942,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 940,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 924,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"text-sm font-medium text-gray-700 mb-1 block\",\n            children: \"Memo / notes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 948,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            value: formData.memo,\n            onChange: e => handleChange('memo', e.target.value),\n            rows: 3,\n            className: \"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\",\n            placeholder: \"Add any additional notes...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 951,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 947,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 823,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"px-6 py-4 border-t border-gray-200 flex items-center justify-end gap-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: onClose,\n          className: \"px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors\",\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 963,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSubmit,\n          disabled: loading || !formData.amount || parseFloat(formData.amount) <= 0 || parseFloat(formData.amount) > currentRemainingAmount,\n          className: `px-6 py-2 rounded-lg font-medium transition-colors ${loading || !formData.amount || parseFloat(formData.amount) <= 0 || parseFloat(formData.amount) > currentRemainingAmount ? 'bg-gray-300 text-gray-500 cursor-not-allowed' : 'bg-blue-600 text-white hover:bg-blue-700'}`,\n          children: loading ? 'Processing...' : 'Submit'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 969,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 962,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 806,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 805,\n    columnNumber: 5\n  }, this);\n};\n_s(RecordPaymentModal, \"8LWCMDSvvtXzbkMYf5G6mu0o6pA=\");\n_c = RecordPaymentModal;\nexport default RecordPaymentModal;\nvar _c;\n$RefreshReg$(_c, \"RecordPaymentModal\");","map":{"version":3,"names":["React","useState","useEffect","X","Calendar","DollarSign","CreditCard","FileText","AlertCircle","formatCurrency","jsxDEV","_jsxDEV","RecordPaymentModal","invoiceId","amount","onClose","onSubmit","onPaymentComplete","customerId","_s","formData","setFormData","date","Date","toISOString","split","method","account","memo","accounts","setAccounts","loading","setLoading","errors","setErrors","isAlreadyPaid","setIsAlreadyPaid","currentRemainingAmount","setCurrentRemainingAmount","originalTotalAmount","setOriginalTotalAmount","existingOrders","JSON","parse","localStorage","getItem","order","find","o","orderId","id","remaining","remainingAmount","undefined","total","prev","toString","paid","paymentStatus","fetchAccounts","response","fetch","data","json","assetAccounts","filter","acct","type","accountMap","forEach","children","parentId","push","tree","err","console","error","handleChange","field","value","validateForm","newErrors","paymentAmount","parseFloat","Object","keys","length","handleSubmit","general","newRemainingAmount","Math","max","isFullPayment","paymentData","now","paymentMethod","accountId","accountName","getAccountNameById","status","createdAt","createdBy","existingPayments","updatedPayments","setItem","stringify","orderIndex","findIndex","lastPaymentDate","lastPaymentAmount","paymentHistory","apiUrl","payload","billUnitId","billStatus","apiResponse","headers","body","ok","Error","message","log","accountList","name","foundInChildren","renderAccountOptions","level","map","Fragment","repeat","code","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","size","onChange","e","target","step","placeholder","href","rows","disabled","_c","$RefreshReg$"],"sources":["C:/Users/Logic-Unit/my-account/src/components/AccountsReceivable/RecordPaymentModal.jsx"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import { X, Calendar, DollarSign, CreditCard, FileText, AlertCircle } from 'lucide-react';\r\n// import { formatCurrency } from './AccountsReceivableUtils/formatters';\r\n\r\n// const RecordPaymentModal = ({ invoiceId, amount, onClose, onSubmit, onPaymentComplete,customerId }) => {\r\n//   const [formData, setFormData] = useState({\r\n//     date: new Date().toISOString().split('T')[0],\r\n//     amount: amount?.toString() || '',\r\n//     method: '',\r\n//     account: '',\r\n//     memo: ''\r\n//   });\r\n//   console.log('Initial Props:', {\r\n//   invoiceId,\r\n//   amount,\r\n//   customerId\r\n// });\r\n//   const [accounts, setAccounts] = useState([]);\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [errors, setErrors] = useState({});\r\n//   const [isAlreadyPaid, setIsAlreadyPaid] = useState(false); // ✅ NEW\r\n//   const [currentRemainingAmount, setCurrentRemainingAmount] = useState(amount);\r\n// useEffect(() => {\r\n//   const existingOrders = JSON.parse(localStorage.getItem('orders') || '[]');\r\n//   const orderIndex = existingOrders.findIndex(order =>\r\n//     order.orderId === invoiceId || order.id === invoiceId\r\n//   );\r\n\r\n//   const remainingAmountFromStorage = orderIndex !== -1 \r\n//     ? (existingOrders[orderIndex].remainingAmount || amount)\r\n//     : amount;\r\n\r\n//   setCurrentRemainingAmount(remainingAmountFromStorage);\r\n// }, [invoiceId, amount]);\r\n\r\n\r\n// const paymentAmount = parseFloat(formData.amount) || 0;\r\n// const remainingAmount = Math.max(0, currentRemainingAmount - paymentAmount);\r\n// const isFullPayment = remainingAmount <= 0;\r\n//   // Fetch accounts on mount\r\n//   useEffect(() => {\r\n//     fetchAccounts();\r\n//   }, []);\r\n\r\n//   // Set initial amount\r\n//   useEffect(() => {\r\n//     if (amount) {\r\n//       setFormData(prev => ({ ...prev, amount: amount.toString() }));\r\n//     }\r\n//   }, [amount]);\r\n//    // ✅ Check if this invoice is already fully paid\r\n//   useEffect(() => {\r\n//     const existingOrders = JSON.parse(localStorage.getItem('orders') || '[]');\r\n//     const order = existingOrders.find(o => o.orderId === invoiceId || o.id === invoiceId);\r\n\r\n//     if (order && (order.paid || order.paymentStatus === 'paid')) {\r\n//       setIsAlreadyPaid(true);\r\n//     }\r\n//   }, [invoiceId]);\r\n//   const fetchAccounts = async () => {\r\n//     try {\r\n//       const response = await fetch('http://localhost:8080/api/accounts');\r\n//       const data = await response.json();\r\n\r\n//       // Filter only asset accounts (like the commented code)\r\n//       const assetAccounts = data.filter(acct => acct.type === 'assets');\r\n\r\n//       // Build parent-child map (like the commented code)\r\n//       const accountMap = {};\r\n//       assetAccounts.forEach(acct => accountMap[acct.id] = { ...acct, children: [] });\r\n\r\n//       assetAccounts.forEach(acct => {\r\n//         if (acct.parentId && accountMap[acct.parentId]) {\r\n//           accountMap[acct.parentId].children.push(accountMap[acct.id]);\r\n//         }\r\n//       });\r\n\r\n//       // Top-level accounts (like the commented code)\r\n//       const tree = assetAccounts.filter(acct => !acct.parentId || !accountMap[acct.parentId]);\r\n//       setAccounts(tree);\r\n//     } catch (err) {\r\n//       console.error('Failed to fetch accounts:', err);\r\n//     }\r\n//   };\r\n\r\n//   const handleChange = (field, value) => {\r\n//     setFormData(prev => ({ ...prev, [field]: value }));\r\n//     // Clear error for this field when user starts typing\r\n//     if (errors[field]) {\r\n//       setErrors(prev => ({ ...prev, [field]: '' }));\r\n//     }\r\n//   };\r\n\r\n//   const validateForm = () => {\r\n//     const newErrors = {};\r\n    \r\n//     if (!formData.date) {\r\n//       newErrors.date = 'Payment date is required';\r\n//     }\r\n    \r\n//     if (!formData.amount || parseFloat(formData.amount) <= 0) {\r\n//       newErrors.amount = 'Valid payment amount is required';\r\n//     }\r\n    \r\n//     if (!formData.method) {\r\n//       newErrors.method = 'Payment method is required';\r\n//     }\r\n    \r\n//     if (!formData.account) {\r\n//       newErrors.account = 'Deposit account is required';\r\n//     }\r\n\r\n//     setErrors(newErrors);\r\n//     return Object.keys(newErrors).length === 0;\r\n//   };\r\n// // const handleSubmit = async () => {\r\n// //   if (isAlreadyPaid) {\r\n// //     setErrors({\r\n// //       general: 'This invoice has already been fully paid. No further payments allowed.'\r\n// //     });\r\n// //     return;\r\n// //   }\r\n\r\n// //   if (!validateForm()) return;\r\n\r\n// //   setLoading(true);\r\n\r\n// //   try {\r\n// //     const existingOrders = JSON.parse(localStorage.getItem('orders') || '[]');\r\n// //     const orderIndex = existingOrders.findIndex(order =>\r\n// //       order.orderId === invoiceId || order.id === invoiceId\r\n// //     );\r\n    \r\n// //     // Get the current remaining amount, defaulting to the original amount if not found\r\n// //     const currentRemainingAmount = orderIndex !== -1 \r\n// //       ? existingOrders[orderIndex].remainingAmount || amount \r\n// //       : amount;\r\n\r\n// //     const paymentAmount = parseFloat(formData.amount);\r\n// //     const remainingAmount = currentRemainingAmount - paymentAmount;\r\n// //     const isFullPayment = remainingAmount <= 0;\r\n// //     const paymentStatus = isFullPayment ? 'paid' : 'partial';\r\n\r\n// //     // Create payment record (local save)\r\n// //     const paymentData = {\r\n// //       id: `PAY-${Date.now()}`,\r\n// //       customerId:customerId||null,\r\n// //       orderId: invoiceId,\r\n// //       date: formData.date,\r\n// //       amount: paymentAmount,\r\n// //       paymentMethod: formData.method,\r\n// //       accountId: formData.account,\r\n// //       accountName: getAccountNameById(formData.account, accounts) || 'Unknown Account',\r\n// //       memo: formData.memo,\r\n// //       status: paymentStatus,\r\n// //       remainingAmount: Math.max(0, remainingAmount),\r\n// //       createdAt: new Date().toISOString(),\r\n// //       createdBy: 'current_user'\r\n// //     };\r\n\r\n// //     // Save payment to localStorage\r\n// //     const existingPayments = JSON.parse(localStorage.getItem('payments') || '[]');\r\n// //     const updatedPayments = [...existingPayments, paymentData];\r\n// //     localStorage.setItem('payments', JSON.stringify(updatedPayments));\r\n\r\n// //     // // Update order in localStorage\r\n// //     //  existingOrders = JSON.parse(localStorage.getItem('orders') || '[]');\r\n// //     //  orderIndex = existingOrders.findIndex(order =>\r\n// //     //   order.orderId === invoiceId || order.id === invoiceId\r\n// //     // );\r\n\r\n// //     if (orderIndex !== -1) {\r\n// //       existingOrders[orderIndex] = {\r\n// //         ...existingOrders[orderIndex],\r\n// //         paid: isFullPayment,\r\n// //         paymentStatus: paymentStatus,\r\n// //         lastPaymentDate: formData.date,\r\n// //         lastPaymentAmount: paymentAmount,\r\n// //         remainingAmount: Math.max(0, remainingAmount),\r\n// //         paymentHistory: [\r\n// //           ...(existingOrders[orderIndex].paymentHistory || []),\r\n// //           paymentData.id\r\n// //         ]\r\n// //       };\r\n// //       localStorage.setItem('orders', JSON.stringify(existingOrders));\r\n// //     }\r\n\r\n// //     // ✅ CALL THE API\r\n// //     const apiUrl = `https://api-pos.hulmsolutions.com/POS/accounting2/31fc8df0-61db-41e5-bb67-070fde367ea1/orders/Paid/${invoiceId}`;\r\n\r\n// //     const payload = {\r\n// //       customerId: customerId,  // if null string is correct\r\n// //       orderId: invoiceId,\r\n// //       paid: isFullPayment,  // true if fully paid, false otherwise\r\n// //       billUnitId: \"2\",\r\n// //       billStatus: \"pending\"\r\n// //     };\r\n\r\n// //    const apiResponse = await fetch(apiUrl, {\r\n// //   method: \"PUT\",\r\n// //   headers: {\r\n// //     \"Content-Type\": \"application/json\",\r\n// //     \"Authorization\": `Bearer $hAMID` // ✅ add your token\r\n// //   },\r\n// //   body: JSON.stringify(payload)\r\n// // });\r\n\r\n\r\n// //     if (!apiResponse.ok) {\r\n// //       throw new Error(\"Failed to update order status in API\");\r\n// //     }\r\n\r\n// //     // Callbacks\r\n// //     if (onSubmit) {\r\n// //       onSubmit(paymentData, isFullPayment);\r\n// //     }\r\n\r\n// //     if (onPaymentComplete) {\r\n// //       onPaymentComplete(paymentData, isFullPayment);\r\n// //     }\r\n\r\n// //     // Success message\r\n// //     const message = isFullPayment\r\n// //       ? \"Payment recorded successfully. Invoice is now fully paid.\"\r\n// //       : `Partial payment of ${formatCurrency(paymentAmount)} recorded. Remaining balance: ${formatCurrency(remainingAmount)}`;\r\n\r\n// //     console.log(message);\r\n\r\n// //     onClose();\r\n// //   } catch (error) {\r\n// //     console.error(\"Error recording payment:\", error);\r\n// //     setErrors({ general: \"Failed to record payment. Please try again.\" });\r\n// //   } finally {\r\n// //     setLoading(false);\r\n// //   }\r\n// // };\r\n\r\n// const handleSubmit = async () => {\r\n//   if (isAlreadyPaid) {\r\n//     setErrors({\r\n//       general: 'This invoice has already been fully paid. No further payments allowed.'\r\n//     });\r\n//     return;\r\n//   }\r\n\r\n//   if (!validateForm()) return;\r\n\r\n//   setLoading(true);\r\n\r\n//   try {\r\n//     // Retrieve existing orders from localStorage\r\n//     const existingOrders = JSON.parse(localStorage.getItem('orders') || '[]');\r\n//     const orderIndex = existingOrders.findIndex(order =>\r\n//       order.orderId === invoiceId || order.id === invoiceId\r\n//     );\r\n\r\n//     // Determine current remaining amount\r\n//     const currentRemainingAmount = orderIndex !== -1 \r\n//       ? (existingOrders[orderIndex].remainingAmount || amount)\r\n//       : amount;\r\n\r\n//     const paymentAmount = parseFloat(formData.amount);\r\n//     const remainingAmount = Math.max(0, currentRemainingAmount - paymentAmount);\r\n//     const isFullPayment = remainingAmount <= 0;\r\n//     const paymentStatus = isFullPayment ? 'paid' : 'partial';\r\n\r\n//     // Create payment record\r\n//     const paymentData = {\r\n//       id: `PAY-${Date.now()}`,\r\n//       customerId: customerId || null,\r\n//       orderId: invoiceId,\r\n//       date: formData.date,\r\n//       amount: paymentAmount,\r\n//       paymentMethod: formData.method,\r\n//       accountId: formData.account,\r\n//       accountName: getAccountNameById(formData.account, accounts) || 'Unknown Account',\r\n//       memo: formData.memo,\r\n//       status: paymentStatus,\r\n//       remainingAmount: remainingAmount,\r\n//       createdAt: new Date().toISOString(),\r\n//       createdBy: 'current_user'\r\n//     };\r\n\r\n//     // Save payment to localStorage\r\n//     const existingPayments = JSON.parse(localStorage.getItem('payments') || '[]');\r\n//     const updatedPayments = [...existingPayments, paymentData];\r\n//     localStorage.setItem('payments', JSON.stringify(updatedPayments));\r\n\r\n//     // Update order in localStorage\r\n//     if (orderIndex !== -1) {\r\n//       existingOrders[orderIndex] = {\r\n//         ...existingOrders[orderIndex],\r\n//         paid: isFullPayment,\r\n//         paymentStatus: paymentStatus,\r\n//         lastPaymentDate: formData.date,\r\n//         lastPaymentAmount: paymentAmount,\r\n//         remainingAmount: remainingAmount,\r\n//         paymentHistory: [\r\n//           ...(existingOrders[orderIndex].paymentHistory || []),\r\n//           paymentData.id\r\n//         ]\r\n//       };\r\n//       localStorage.setItem('orders', JSON.stringify(existingOrders));\r\n//     }\r\n\r\n//     // API Call\r\n//     const apiUrl = `https://api-pos.hulmsolutions.com/POS/accounting2/31fc8df0-61db-41e5-bb67-070fde367ea1/orders/Paid/${invoiceId}`;\r\n\r\n//     const payload = {\r\n//       customerId: customerId,\r\n//       orderId: invoiceId,\r\n//       paid: isFullPayment,\r\n//       billUnitId: \"2\",\r\n//       billStatus: \"pending\"\r\n//     };\r\n\r\n//     const apiResponse = await fetch(apiUrl, {\r\n//       method: \"PUT\",\r\n//       headers: {\r\n//         \"Content-Type\": \"application/json\",\r\n//         \"Authorization\": `Bearer $hAMID`\r\n//       },\r\n//       body: JSON.stringify(payload)\r\n//     });\r\n\r\n//     if (!apiResponse.ok) {\r\n//       throw new Error(\"Failed to update order status in API\");\r\n//     }\r\n\r\n//     // Callbacks\r\n//     if (onSubmit) {\r\n//       onSubmit(paymentData, isFullPayment);\r\n//     }\r\n\r\n//     if (onPaymentComplete) {\r\n//       onPaymentComplete(paymentData, isFullPayment);\r\n//     }\r\n\r\n//     // Success message\r\n//     const message = isFullPayment\r\n//       ? \"Payment recorded successfully. Invoice is now fully paid.\"\r\n//       : `Partial payment of ${formatCurrency(paymentAmount)} recorded. Remaining balance: ${formatCurrency(remainingAmount)}`;\r\n\r\n//     console.log(message);\r\n\r\n//     onClose();\r\n//   } catch (error) {\r\n//     console.error(\"Error recording payment:\", error);\r\n//     setErrors({ general: \"Failed to record payment. Please try again.\" });\r\n//   } finally {\r\n//     setLoading(false);\r\n//   }\r\n// };\r\n\r\n//   const getAccountNameById = (accountId, accountList) => {\r\n//     for (const account of accountList) {\r\n//       if (account.id === accountId) {\r\n//         return account.name;\r\n//       }\r\n//       if (account.children && account.children.length > 0) {\r\n//         const foundInChildren = getAccountNameById(accountId, account.children);\r\n//         if (foundInChildren) return foundInChildren;\r\n//       }\r\n//     }\r\n//     return null;\r\n//   };\r\n\r\n//   // Helper function to render account options recursively\r\n//   const renderAccountOptions = (accountList, level = 0) => {\r\n//     return accountList.map(account => (\r\n//       <React.Fragment key={account.id}>\r\n//         <option value={account.id}>\r\n//           {'-'.repeat(level * 2)} {account.code} - {account.name}\r\n//         </option>\r\n//         {account.children && account.children.length > 0 && (\r\n//           renderAccountOptions(account.children, level + 1)\r\n//         )}\r\n//       </React.Fragment>\r\n//     ));\r\n//   };\r\n\r\n//   // const paymentAmount = parseFloat(formData.amount) || 0;\r\n//   // const remainingAmount = amount - paymentAmount;\r\n//   // const isFullPayment = paymentAmount >= amount;\r\n\r\n//   return (\r\n//     <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\r\n//       <div className=\"bg-white rounded-xl shadow-2xl max-w-md w-full\">\r\n//         {/* Header */}\r\n//         <div className=\"px-6 py-4 border-b border-gray-200\">\r\n//           <div className=\"flex items-center justify-between\">\r\n//             <h2 className=\"text-xl font-semibold text-gray-900\">\r\n//               Record a payment for this invoice\r\n//             </h2>\r\n//             <button\r\n//               onClick={onClose}\r\n//               className=\"text-gray-400 hover:text-gray-600 transition-colors\"\r\n//             >\r\n//               <X size={24} />\r\n//             </button>\r\n//           </div>\r\n//         </div>\r\n\r\n//         {/* Form Body */}\r\n//         <div className=\"px-6 py-4 space-y-5\">\r\n//           {errors.general && (\r\n//             <div className=\"p-3 bg-red-50 border border-red-200 rounded-lg flex items-start gap-2\">\r\n//               <AlertCircle size={20} className=\"text-red-600 flex-shrink-0 mt-0.5\" />\r\n//               <span className=\"text-sm text-red-700\">{errors.general}</span>\r\n//             </div>\r\n//           )}\r\n            \r\n//           {/* Date Field */}\r\n//           <div>\r\n//             <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\">\r\n//               <Calendar size={16} />\r\n//               Date\r\n//             </label>\r\n//             <input\r\n//               type=\"date\"\r\n//               value={formData.date}\r\n//               onChange={(e) => handleChange('date', e.target.value)}\r\n//               className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\r\n//                 errors.date ? 'border-red-500' : 'border-gray-300'\r\n//               }`}\r\n//             />\r\n//             {errors.date && <span className=\"text-xs text-red-600 mt-1\">{errors.date}</span>}\r\n//           </div>\r\n\r\n//           {/* Amount Field */}\r\n//           <div>\r\n//             <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\">\r\n//               <DollarSign size={16} />\r\n//               Amount\r\n//             </label>\r\n//             <div className=\"relative\">\r\n//               <span className=\"absolute left-3 top-1/2 -translate-y-1/2 text-gray-500 font-medium\">\r\n//                 Rs\r\n//               </span>\r\n//               <input\r\n//                 type=\"number\"\r\n//                 step=\"0.01\"\r\n//                 value={formData.amount}\r\n//                 onChange={(e) => handleChange('amount', e.target.value)}\r\n//                 className={`w-full pl-10 pr-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\r\n//                   errors.amount ? 'border-red-500' : 'border-gray-300'\r\n//                 }`}\r\n//                 placeholder=\"0.00\"\r\n//               />\r\n//             </div>\r\n//             {errors.amount && <span className=\"text-xs text-red-600 mt-1\">{errors.amount}</span>}\r\n            \r\n//             {paymentAmount > 0 && (\r\n//               <div className=\"mt-2 text-sm\">\r\n//                 {isFullPayment ? (\r\n//                   <span className=\"text-green-600 font-medium\">Invoice will be fully paid</span>\r\n//                 ) : (\r\n//                   <span className=\"text-orange-600\">\r\n//                     Partial payment - Remaining: {formatCurrency(remainingAmount)}\r\n//                   </span>\r\n//                 )}\r\n//               </div>\r\n//             )}\r\n//           </div>\r\n\r\n//           {/* Payment Method */}\r\n//           <div>\r\n//             <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\">\r\n//               <CreditCard size={16} />\r\n//               Method\r\n//             </label>\r\n//             <select\r\n//               value={formData.method}\r\n//               onChange={(e) => handleChange('method', e.target.value)}\r\n//               className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\r\n//                 errors.method ? 'border-red-500' : 'border-gray-300'\r\n//               }`}\r\n//             >\r\n//               <option value=\"\">Select a payment method...</option>\r\n//               <option value=\"cash\">Cash</option>\r\n//               <option value=\"check\">Check</option>\r\n//               <option value=\"bank_transfer\">Bank Transfer</option>\r\n//               <option value=\"credit_card\">Credit Card</option>\r\n//               <option value=\"debit_card\">Debit Card</option>\r\n//               <option value=\"online\">Online Payment</option>\r\n//             </select>\r\n//             {errors.method && <span className=\"text-xs text-red-600 mt-1\">{errors.method}</span>}\r\n//           </div>\r\n\r\n//           {/* Account */}\r\n//           <div>\r\n//             <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\">\r\n//               <FileText size={16} />\r\n//               Account\r\n//             </label>\r\n//             <select\r\n//               value={formData.account}\r\n//               onChange={(e) => handleChange('account', e.target.value)}\r\n//               className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\r\n//                 errors.account ? 'border-red-500' : 'border-gray-300'\r\n//               }`}\r\n//             >\r\n//               <option value=\"\">Select a payment account...</option>\r\n//               {renderAccountOptions(accounts)}\r\n//             </select>\r\n//             {errors.account && <span className=\"text-xs text-red-600 mt-1\">{errors.account}</span>}\r\n//             <p className=\"text-xs text-gray-500 mt-1\">\r\n//               Any account into which you deposit and withdraw funds from.{' '}\r\n//               <a href=\"#\" className=\"text-blue-600 hover:text-blue-700\">Learn more</a>\r\n//             </p>\r\n//           </div>\r\n\r\n//           {/* Memo */}\r\n//           <div>\r\n//             <label className=\"text-sm font-medium text-gray-700 mb-1 block\">\r\n//               Memo / notes\r\n//             </label>\r\n//             <textarea\r\n//               value={formData.memo}\r\n//               onChange={(e) => handleChange('memo', e.target.value)}\r\n//               rows={3}\r\n//               className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\r\n//               placeholder=\"Add any additional notes...\"\r\n//             />\r\n//           </div>\r\n//         </div>\r\n\r\n//         {/* Footer */}\r\n//         <div className=\"px-6 py-4 border-t border-gray-200 flex items-center justify-end gap-3\">\r\n//           <button\r\n//             onClick={onClose}\r\n//             className=\"px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors\"\r\n//           >\r\n//             Cancel\r\n//           </button>\r\n//           <button\r\n//             onClick={handleSubmit}\r\n//             disabled={loading || !formData.amount || parseFloat(formData.amount) <= 0}\r\n//             className={`px-6 py-2 rounded-lg font-medium transition-colors ${\r\n//               loading || !formData.amount || parseFloat(formData.amount) <= 0\r\n//                 ? 'bg-gray-300 text-gray-500 cursor-not-allowed'\r\n//                 : 'bg-blue-600 text-white hover:bg-blue-700'\r\n//             }`}\r\n//           >\r\n//             {loading ? 'Processing...' : 'Submit'}\r\n//           </button>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default RecordPaymentModal;\r\n\r\n\r\n\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { X, Calendar, DollarSign, CreditCard, FileText, AlertCircle } from 'lucide-react';\r\nimport { formatCurrency } from './AccountsReceivableUtils/formatters';\r\n\r\nconst RecordPaymentModal = ({ invoiceId, amount, onClose, onSubmit, onPaymentComplete, customerId }) => {\r\n  const [formData, setFormData] = useState({\r\n    date: new Date().toISOString().split('T')[0],\r\n    amount: '',\r\n    method: '',\r\n    account: '',\r\n    memo: ''\r\n  });\r\n\r\n  const [accounts, setAccounts] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [errors, setErrors] = useState({});\r\n  const [isAlreadyPaid, setIsAlreadyPaid] = useState(false);\r\n  const [currentRemainingAmount, setCurrentRemainingAmount] = useState(amount);\r\n  const [originalTotalAmount, setOriginalTotalAmount] = useState(amount);\r\n\r\n  // Fetch the current remaining amount from localStorage\r\n  useEffect(() => {\r\n    const existingOrders = JSON.parse(localStorage.getItem('orders') || '[]');\r\n    const order = existingOrders.find(o => \r\n      o.orderId === invoiceId || o.id === invoiceId\r\n    );\r\n\r\n    if (order) {\r\n      // If remainingAmount exists, use it; otherwise use the total amount\r\n      const remaining = order.remainingAmount !== undefined ? order.remainingAmount : order.total;\r\n      setCurrentRemainingAmount(remaining);\r\n      setOriginalTotalAmount(order.total);\r\n      \r\n      // Set the form amount to the remaining amount by default\r\n      setFormData(prev => ({ ...prev, amount: remaining.toString() }));\r\n      \r\n      // Check if already paid\r\n      if (order.paid || order.paymentStatus === 'paid' || remaining <= 0) {\r\n        setIsAlreadyPaid(true);\r\n      }\r\n    } else {\r\n      // If no order found, use the amount prop\r\n      setCurrentRemainingAmount(amount);\r\n      setOriginalTotalAmount(amount);\r\n      setFormData(prev => ({ ...prev, amount: amount.toString() }));\r\n    }\r\n  }, [invoiceId, amount]);\r\n\r\n  // Fetch accounts on mount\r\n  useEffect(() => {\r\n    fetchAccounts();\r\n  }, []);\r\n\r\n  const fetchAccounts = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:8080/api/accounts');\r\n      const data = await response.json();\r\n\r\n      const assetAccounts = data.filter(acct => acct.type === 'assets');\r\n      const accountMap = {};\r\n      assetAccounts.forEach(acct => accountMap[acct.id] = { ...acct, children: [] });\r\n\r\n      assetAccounts.forEach(acct => {\r\n        if (acct.parentId && accountMap[acct.parentId]) {\r\n          accountMap[acct.parentId].children.push(accountMap[acct.id]);\r\n        }\r\n      });\r\n\r\n      const tree = assetAccounts.filter(acct => !acct.parentId || !accountMap[acct.parentId]);\r\n      setAccounts(tree);\r\n    } catch (err) {\r\n      console.error('Failed to fetch accounts:', err);\r\n    }\r\n  };\r\n\r\n  const handleChange = (field, value) => {\r\n    setFormData(prev => ({ ...prev, [field]: value }));\r\n    if (errors[field]) {\r\n      setErrors(prev => ({ ...prev, [field]: '' }));\r\n    }\r\n  };\r\n\r\n  const validateForm = () => {\r\n    const newErrors = {};\r\n    \r\n    if (!formData.date) {\r\n      newErrors.date = 'Payment date is required';\r\n    }\r\n    \r\n    const paymentAmount = parseFloat(formData.amount);\r\n    if (!formData.amount || paymentAmount <= 0) {\r\n      newErrors.amount = 'Valid payment amount is required';\r\n    } else if (paymentAmount > currentRemainingAmount) {\r\n      newErrors.amount = `Payment cannot exceed remaining amount of ${formatCurrency(currentRemainingAmount)}`;\r\n    }\r\n    \r\n    if (!formData.method) {\r\n      newErrors.method = 'Payment method is required';\r\n    }\r\n    \r\n    if (!formData.account) {\r\n      newErrors.account = 'Deposit account is required';\r\n    }\r\n\r\n    setErrors(newErrors);\r\n    return Object.keys(newErrors).length === 0;\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    if (isAlreadyPaid) {\r\n      setErrors({\r\n        general: 'This invoice has already been fully paid. No further payments allowed.'\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (!validateForm()) return;\r\n\r\n    setLoading(true);\r\n\r\n    try {\r\n      const paymentAmount = parseFloat(formData.amount);\r\n      const newRemainingAmount = Math.max(0, currentRemainingAmount - paymentAmount);\r\n      const isFullPayment = newRemainingAmount <= 0;\r\n      const paymentStatus = isFullPayment ? 'paid' : 'partial';\r\n\r\n      // Create payment record\r\n      const paymentData = {\r\n        id: `PAY-${Date.now()}`,\r\n        customerId: customerId || null,\r\n        orderId: invoiceId,\r\n        date: formData.date,\r\n        amount: paymentAmount,\r\n        paymentMethod: formData.method,\r\n        accountId: formData.account,\r\n        accountName: getAccountNameById(formData.account, accounts) || 'Unknown Account',\r\n        memo: formData.memo,\r\n        status: paymentStatus,\r\n        remainingAmount: newRemainingAmount,\r\n        createdAt: new Date().toISOString(),\r\n        createdBy: 'current_user'\r\n      };\r\n\r\n      // Save payment to localStorage\r\n      const existingPayments = JSON.parse(localStorage.getItem('payments') || '[]');\r\n      const updatedPayments = [...existingPayments, paymentData];\r\n      localStorage.setItem('payments', JSON.stringify(updatedPayments));\r\n\r\n      // Update order in localStorage\r\n      const existingOrders = JSON.parse(localStorage.getItem('orders') || '[]');\r\n      const orderIndex = existingOrders.findIndex(order =>\r\n        order.orderId === invoiceId || order.id === invoiceId\r\n      );\r\n\r\n      if (orderIndex !== -1) {\r\n        existingOrders[orderIndex] = {\r\n          ...existingOrders[orderIndex],\r\n          paid: isFullPayment,\r\n          paymentStatus: paymentStatus,\r\n          lastPaymentDate: formData.date,\r\n          lastPaymentAmount: paymentAmount,\r\n          remainingAmount: newRemainingAmount,\r\n          paymentHistory: [\r\n            ...(existingOrders[orderIndex].paymentHistory || []),\r\n            paymentData.id\r\n          ]\r\n        };\r\n        localStorage.setItem('orders', JSON.stringify(existingOrders));\r\n      }\r\n\r\n      // API Call\r\n      const apiUrl = `https://api-pos.hulmsolutions.com/POS/accounting2/31fc8df0-61db-41e5-bb67-070fde367ea1/orders/Paid/${invoiceId}`;\r\n      const payload = {\r\n        customerId: customerId,\r\n        orderId: invoiceId,\r\n        paid: isFullPayment,\r\n        billUnitId: \"2\",\r\n        billStatus: \"pending\"\r\n      };\r\n\r\n      const apiResponse = await fetch(apiUrl, {\r\n        method: \"PUT\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          \"Authorization\": `Bearer $hAMID`\r\n        },\r\n        body: JSON.stringify(payload)\r\n      });\r\n\r\n      if (!apiResponse.ok) {\r\n        throw new Error(\"Failed to update order status in API\");\r\n      }\r\n\r\n      // Callbacks\r\n      if (onSubmit) {\r\n        onSubmit(paymentData, isFullPayment);\r\n      }\r\n\r\n      if (onPaymentComplete) {\r\n        onPaymentComplete(paymentData, isFullPayment);\r\n      }\r\n\r\n      const message = isFullPayment\r\n        ? \"Payment recorded successfully. Invoice is now fully paid.\"\r\n        : `Partial payment of ${formatCurrency(paymentAmount)} recorded. Remaining balance: ${formatCurrency(newRemainingAmount)}`;\r\n\r\n      console.log(message);\r\n      onClose();\r\n    } catch (error) {\r\n      console.error(\"Error recording payment:\", error);\r\n      setErrors({ general: \"Failed to record payment. Please try again.\" });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const getAccountNameById = (accountId, accountList) => {\r\n    for (const account of accountList) {\r\n      if (account.id === accountId) {\r\n        return account.name;\r\n      }\r\n      if (account.children && account.children.length > 0) {\r\n        const foundInChildren = getAccountNameById(accountId, account.children);\r\n        if (foundInChildren) return foundInChildren;\r\n      }\r\n    }\r\n    return null;\r\n  };\r\n\r\n  const renderAccountOptions = (accountList, level = 0) => {\r\n    return accountList.map(account => (\r\n      <React.Fragment key={account.id}>\r\n        <option value={account.id}>\r\n          {'-'.repeat(level * 2)} {account.code} - {account.name}\r\n        </option>\r\n        {account.children && account.children.length > 0 && (\r\n          renderAccountOptions(account.children, level + 1)\r\n        )}\r\n      </React.Fragment>\r\n    ));\r\n  };\r\n\r\n  const paymentAmount = parseFloat(formData.amount) || 0;\r\n  const remainingAmount = Math.max(0, currentRemainingAmount - paymentAmount);\r\n  const isFullPayment = remainingAmount <= 0 && paymentAmount > 0;\r\n\r\n  return (\r\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\r\n      <div className=\"bg-white rounded-xl shadow-2xl max-w-md w-full\">\r\n        {/* Header */}\r\n        <div className=\"px-6 py-4 border-b border-gray-200\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <h2 className=\"text-xl font-semibold text-gray-900\">\r\n              Record a payment for this invoice\r\n            </h2>\r\n            <button\r\n              onClick={onClose}\r\n              className=\"text-gray-400 hover:text-gray-600 transition-colors\"\r\n            >\r\n              <X size={24} />\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Form Body */}\r\n        <div className=\"px-6 py-4 space-y-5\">\r\n          {errors.general && (\r\n            <div className=\"p-3 bg-red-50 border border-red-200 rounded-lg flex items-start gap-2\">\r\n              <AlertCircle size={20} className=\"text-red-600 flex-shrink-0 mt-0.5\" />\r\n              <span className=\"text-sm text-red-700\">{errors.general}</span>\r\n            </div>\r\n          )}\r\n\r\n          {/* Show current remaining amount */}\r\n          {currentRemainingAmount > 0 && (\r\n            <div className=\"p-3 bg-blue-50 border border-blue-200 rounded-lg\">\r\n              <p className=\"text-sm text-blue-800\">\r\n                Current remaining balance: <strong>{formatCurrency(currentRemainingAmount)}</strong>\r\n                {originalTotalAmount > currentRemainingAmount && (\r\n                  <span className=\"text-xs ml-2\">\r\n                    (Original total: {formatCurrency(originalTotalAmount)})\r\n                  </span>\r\n                )}\r\n              </p>\r\n            </div>\r\n          )}\r\n            \r\n          {/* Date Field */}\r\n          <div>\r\n            <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\">\r\n              <Calendar size={16} />\r\n              Date\r\n            </label>\r\n            <input\r\n              type=\"date\"\r\n              value={formData.date}\r\n              onChange={(e) => handleChange('date', e.target.value)}\r\n              className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\r\n                errors.date ? 'border-red-500' : 'border-gray-300'\r\n              }`}\r\n            />\r\n            {errors.date && <span className=\"text-xs text-red-600 mt-1\">{errors.date}</span>}\r\n          </div>\r\n\r\n          {/* Amount Field */}\r\n          <div>\r\n            <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\">\r\n              <DollarSign size={16} />\r\n              Amount\r\n            </label>\r\n            <div className=\"relative\">\r\n              <span className=\"absolute left-3 top-1/2 -translate-y-1/2 text-gray-500 font-medium\">\r\n                Rs\r\n              </span>\r\n              <input\r\n                type=\"number\"\r\n                step=\"0.01\"\r\n                value={formData.amount}\r\n                onChange={(e) => handleChange('amount', e.target.value)}\r\n                className={`w-full pl-10 pr-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\r\n                  errors.amount ? 'border-red-500' : 'border-gray-300'\r\n                }`}\r\n                placeholder=\"0.00\"\r\n                max={currentRemainingAmount}\r\n              />\r\n            </div>\r\n            {errors.amount && <span className=\"text-xs text-red-600 mt-1\">{errors.amount}</span>}\r\n            \r\n            {paymentAmount > 0 && (\r\n              <div className=\"mt-2 text-sm\">\r\n                {isFullPayment ? (\r\n                  <span className=\"text-green-600 font-medium\">Invoice will be fully paid</span>\r\n                ) : (\r\n                  <span className=\"text-orange-600\">\r\n                    Partial payment - Remaining: {formatCurrency(remainingAmount)}\r\n                  </span>\r\n                )}\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          {/* Payment Method */}\r\n          <div>\r\n            <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\">\r\n              <CreditCard size={16} />\r\n              Method\r\n            </label>\r\n            <select\r\n              value={formData.method}\r\n              onChange={(e) => handleChange('method', e.target.value)}\r\n              className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\r\n                errors.method ? 'border-red-500' : 'border-gray-300'\r\n              }`}\r\n            >\r\n              <option value=\"\">Select a payment method...</option>\r\n              <option value=\"cash\">Cash</option>\r\n              <option value=\"check\">Check</option>\r\n              <option value=\"bank_transfer\">Bank Transfer</option>\r\n              <option value=\"credit_card\">Credit Card</option>\r\n              <option value=\"debit_card\">Debit Card</option>\r\n              <option value=\"online\">Online Payment</option>\r\n            </select>\r\n            {errors.method && <span className=\"text-xs text-red-600 mt-1\">{errors.method}</span>}\r\n          </div>\r\n\r\n          {/* Account */}\r\n          <div>\r\n            <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\">\r\n              <FileText size={16} />\r\n              Account\r\n            </label>\r\n            <select\r\n              value={formData.account}\r\n              onChange={(e) => handleChange('account', e.target.value)}\r\n              className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\r\n                errors.account ? 'border-red-500' : 'border-gray-300'\r\n              }`}\r\n            >\r\n              <option value=\"\">Select a payment account...</option>\r\n              {renderAccountOptions(accounts)}\r\n            </select>\r\n            {errors.account && <span className=\"text-xs text-red-600 mt-1\">{errors.account}</span>}\r\n            <p className=\"text-xs text-gray-500 mt-1\">\r\n              Any account into which you deposit and withdraw funds from.{' '}\r\n              <a href=\"#\" className=\"text-blue-600 hover:text-blue-700\">Learn more</a>\r\n            </p>\r\n          </div>\r\n\r\n          {/* Memo */}\r\n          <div>\r\n            <label className=\"text-sm font-medium text-gray-700 mb-1 block\">\r\n              Memo / notes\r\n            </label>\r\n            <textarea\r\n              value={formData.memo}\r\n              onChange={(e) => handleChange('memo', e.target.value)}\r\n              rows={3}\r\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\r\n              placeholder=\"Add any additional notes...\"\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        {/* Footer */}\r\n        <div className=\"px-6 py-4 border-t border-gray-200 flex items-center justify-end gap-3\">\r\n          <button\r\n            onClick={onClose}\r\n            className=\"px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors\"\r\n          >\r\n            Cancel\r\n          </button>\r\n          <button\r\n            onClick={handleSubmit}\r\n            disabled={loading || !formData.amount || parseFloat(formData.amount) <= 0 || parseFloat(formData.amount) > currentRemainingAmount}\r\n            className={`px-6 py-2 rounded-lg font-medium transition-colors ${\r\n              loading || !formData.amount || parseFloat(formData.amount) <= 0 || parseFloat(formData.amount) > currentRemainingAmount\r\n                ? 'bg-gray-300 text-gray-500 cursor-not-allowed'\r\n                : 'bg-blue-600 text-white hover:bg-blue-700'\r\n            }`}\r\n          >\r\n            {loading ? 'Processing...' : 'Submit'}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RecordPaymentModal;"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAC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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}