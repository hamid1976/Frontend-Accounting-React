{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Logic-Unit\\\\my-account\\\\src\\\\modals\\\\InvoiceDetailModal.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import { XCircle, CheckCircle, FileText, Download } from 'lucide-react';\n// import { formatCurrency, formatDate } from '../components/AccountsReceivable/AccountsReceivableUtils/formatters';\n// const RecordPaymentModal = React.lazy(() =>\n//   import('../components/AccountsReceivable/RecordPaymentModal')\n// );\n\n// const InvoiceDetailModal = ({ invoice, onClose, getCustomerName }) => {\n//   const [isPaymentModalOpen, setPaymentModalOpen] = useState(false);\n\n//   return (\n//     <>\n//       <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center p-4 z-50\">\n//         <div className=\"bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-y-auto\">\n//           <div className=\"px-6 py-4 border-b border-gray-200\">\n//             <div className=\"flex items-center justify-between\">\n//               <h3 className=\"text-lg font-semibold text-gray-900\">\n//                 Order Details - #{invoice.orderId}\n//               </h3>\n//               <button\n//                 onClick={onClose}\n//                 className=\"text-gray-400 hover:text-gray-600\"\n//               >\n//                 <XCircle size={20} />\n//               </button>\n//             </div>\n//           </div>\n\n//           <div className=\"px-6 py-4\">\n//             {/* Order Info */}\n//             <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-6\">\n//               <div className=\"space-y-4\">\n//                 <div>\n//                   <label className=\"text-sm font-medium text-gray-500\">Order ID</label>\n//                   <p className=\"text-sm text-gray-900\">{invoice.orderId}</p>\n//                 </div>\n//                 <div>\n//                   <label className=\"text-sm font-medium text-gray-500\">Customer</label>\n//                   <p className=\"text-sm text-gray-900\">{getCustomerName(invoice.customerId)}</p>\n//                 </div>\n//                 <div>\n//                   <label className=\"text-sm font-medium text-gray-500\">Created Date</label>\n//                   <p className=\"text-sm text-gray-900\">{formatDate(invoice.createdAt)}</p>\n//                 </div>\n//                 <div>\n//                   <label className=\"text-sm font-medium text-gray-500\">Status</label>\n//                   <p className=\"text-sm text-gray-900\">{invoice.status}</p>\n//                 </div>\n//               </div>\n\n//               <div className=\"space-y-4\">\n//                 <div>\n//                   <label className=\"text-sm font-medium text-gray-500\">Payment Status</label>\n//                   <div>\n//                     <span className={`px-2 py-1 text-xs font-medium rounded-full ${\n//                       invoice.paid ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'\n//                     }`}>\n//                       {invoice.paid ? 'Paid' : 'Unpaid'}\n//                     </span>\n//                   </div>\n//                 </div>\n//                 <div>\n//                   <label className=\"text-sm font-medium text-gray-500\">Fulfillment Status</label>\n//                   <div>\n//                     <span className={`px-2 py-1 text-xs font-medium rounded-full ${\n//                       invoice.fulfilled ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'\n//                     }`}>\n//                       {invoice.fulfilled ? 'Fulfilled' : 'Pending'}\n//                     </span>\n//                   </div>\n//                 </div>\n//                 <div>\n//                   <label className=\"text-sm font-medium text-gray-500\">Total Amount</label>\n//                   <p className=\"text-lg font-bold text-gray-900\">{formatCurrency(invoice.total)}</p>\n//                 </div>\n//                 <div>\n//                   <label className=\"text-sm font-medium text-gray-500\">Payable Amount</label>\n//                   <p className=\"text-sm text-gray-900\">{formatCurrency(invoice.payableAmount)}</p>\n//                 </div>\n//               </div>\n//             </div>\n\n//             {/* Line Items */}\n//             <div className=\"mb-6\">\n//               <h4 className=\"text-md font-semibold text-gray-900 mb-3\">Order Items</h4>\n//               <div className=\"overflow-x-auto\">\n//                 <table className=\"w-full border border-gray-200 rounded\">\n//                   <thead className=\"bg-gray-50\">\n//                     <tr>\n//                       <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500\">Product</th>\n//                       <th className=\"px-4 py-2 text-right text-xs font-medium text-gray-500\">Quantity</th>\n//                       <th className=\"px-4 py-2 text-right text-xs font-medium text-gray-500\">Unit Price</th>\n//                       <th className=\"px-4 py-2 text-right text-xs font-medium text-gray-500\">Total</th>\n//                       <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500\">Status</th>\n//                     </tr>\n//                   </thead>\n//                   <tbody className=\"divide-y divide-gray-200\">\n//                     {invoice.lineItems.map((item, index) => (\n//                       <tr key={index}>\n//                         <td className=\"px-4 py-2 text-sm text-gray-900\">{item.productName}</td>\n//                         <td className=\"px-4 py-2 text-sm text-gray-900 text-right\">{item.quantity}</td>\n//                         <td className=\"px-4 py-2 text-sm text-gray-900 text-right\">{formatCurrency(item.price)}</td>\n//                         <td className=\"px-4 py-2 text-sm font-medium text-gray-900 text-right\">{formatCurrency(item.total)}</td>\n//                         <td className=\"px-4 py-2\">\n//                           <span className={`px-2 py-1 text-xs font-medium rounded-full ${\n//                             item.fulfilled ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'\n//                           }`}>\n//                             {item.status}\n//                           </span>\n//                         </td>\n//                       </tr>\n//                     ))}\n//                   </tbody>\n//                 </table>\n//               </div>\n//             </div>\n\n//             {/* Totals */}\n//             <div className=\"bg-gray-50 p-4 rounded-lg\">\n//               <div className=\"space-y-2\">\n//                 <div className=\"flex justify-between\">\n//                   <span className=\"text-sm text-gray-600\">Subtotal:</span>\n//                   <span className=\"text-sm text-gray-900\">{formatCurrency(invoice.subTotal)}</span>\n//                 </div>\n//                 <div className=\"flex justify-between\">\n//                   <span className=\"text-sm text-gray-600\">Tax ({invoice.taxRate}%):</span>\n//                   <span className=\"text-sm text-gray-900\">{formatCurrency(invoice.taxAmount)}</span>\n//                 </div>\n//                 {invoice.discountAmount > 0 && (\n//                   <div className=\"flex justify-between\">\n//                     <span className=\"text-sm text-gray-600\">Discount:</span>\n//                     <span className=\"text-sm text-red-600\">-{formatCurrency(invoice.discountAmount)}</span>\n//                   </div>\n//                 )}\n//                 <div className=\"flex justify-between font-bold text-lg border-t pt-2\">\n//                   <span>Total:</span>\n//                   <span>{formatCurrency(invoice.total)}</span>\n//                 </div>\n//               </div>\n//             </div>\n\n//             {/* Action Buttons */}\n//             <div className=\"flex space-x-3 mt-6\">\n//               <button\n//                 className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center space-x-2\"\n//                 onClick={() => setPaymentModalOpen(true)}\n//               >\n//                 <CheckCircle size={16} />\n//                 <span>Record Payment</span>\n//               </button>\n\n//               {!invoice.paid && (\n//                 <button className=\"px-4 py-2 bg-emerald-600 text-white rounded-lg hover:bg-emerald-700 flex items-center space-x-2\">\n//                   <CheckCircle size={16} />\n//                   <span>Mark as Paid</span>\n//                 </button>\n//               )}\n//               {!invoice.fulfilled && (\n//                 <button className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center space-x-2\">\n//                   <FileText size={16} />\n//                   <span>Mark as Fulfilled</span>\n//                 </button>\n//               )}\n//               <button className=\"px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 flex items-center space-x-2\">\n//                 <Download size={16} />\n//                 <span>Download Invoice</span>\n//               </button>\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n\n//    {isPaymentModalOpen && (\n//   <React.Suspense fallback={<div>Loading Payment Modal...</div>}>\n//     <RecordPaymentModal\n//       invoiceId={invoice.orderId}\n//       amount={invoice.total}\n//       onClose={() => setPaymentModalOpen(false)}\n//       onSubmit={(date, enteredAmount, method, account, memo, paymentData, isFullPayment) => {\n//         console.log('Payment Submitted:', { \n//           date, \n//           enteredAmount, \n//           method, \n//           account, \n//           memo, \n//           paymentData, \n//           isFullPayment \n//         });\n\n//         if (isFullPayment) {\n//           // Update the local state to reflect the paid status\n//           // This will trigger a re-render with the updated status\n//           invoice.paid = true;\n//           invoice.paymentStatus = 'paid';\n//         }\n\n//         setPaymentModalOpen(false);\n\n//         // You might want to refresh the data or show a success message\n//        // message.success(isFullPayment ? 'Invoice marked as paid!' : 'Partial payment recorded!');\n//       }}\n//     />\n//   </React.Suspense>\n// )}\n\n//     </>\n//   );\n// };\n\n// export default InvoiceDetailModal;\n\n// import React, { useState, useEffect } from 'react';\n// import { XCircle, CheckCircle, FileText, Download, Clock, Calendar, DollarSign } from 'lucide-react';\n// import { formatCurrency, formatDate } from '../components/AccountsReceivable/AccountsReceivableUtils/formatters';\n// import RecordPaymentModal from '../components/AccountsReceivable/RecordPaymentModal';\n\n// const InvoiceDetailModal = ({ invoice, onClose, getCustomerName, onRefresh }) => {\n//   const [isPaymentModalOpen, setPaymentModalOpen] = useState(false);\n//   const [localInvoice, setLocalInvoice] = useState(invoice);\n//   const [paymentHistory, setPaymentHistory] = useState([]);\n\n//   // Load payment history when invoice changes\n//   useEffect(() => {\n//     if (invoice) {\n//       setLocalInvoice(invoice);\n//       loadPaymentHistory();\n//     }\n//   }, [invoice]);\n\n//   const loadPaymentHistory = () => {\n//     const storedPayments = JSON.parse(localStorage.getItem('payments') || '[]');\n//     const invoicePayments = storedPayments.filter(\n//       payment => payment.invoiceId === invoice.orderId || payment.orderId === invoice.orderId\n//     );\n//     setPaymentHistory(invoicePayments);\n//   };\n\n//   const handlePaymentComplete = (paymentData, isFullPayment) => {\n//     // Update local invoice state to reflect the payment\n//     if (isFullPayment) {\n//       setLocalInvoice(prev => ({\n//         ...prev,\n//         paid: true,\n//         paymentStatus: 'paid',\n//         remainingAmount: 0\n//       }));\n//     } else {\n//       setLocalInvoice(prev => ({\n//         ...prev,\n//         paid: false,\n//         paymentStatus: 'partial',\n//         remainingAmount: paymentData.remainingAmount\n//       }));\n//     }\n\n//     // Reload payment history\n//     loadPaymentHistory();\n\n//     // Trigger parent refresh if available\n//     if (onRefresh) {\n//       onRefresh();\n//     }\n\n//     setPaymentModalOpen(false);\n//   };\n\n//   const handleMarkAsPaid = async () => {\n//     try {\n//       // Update order status in localStorage\n//       const existingOrders = JSON.parse(localStorage.getItem('orders') || '[]');\n//       const orderIndex = existingOrders.findIndex(order => \n//         order.orderId === localInvoice.orderId || order.id === localInvoice.orderId\n//       );\n\n//       if (orderIndex !== -1) {\n//         existingOrders[orderIndex] = {\n//           ...existingOrders[orderIndex],\n//           paid: true,\n//           paymentStatus: 'paid',\n//           paymentDate: new Date().toISOString().split('T')[0],\n//           remainingAmount: 0\n//         };\n\n//         localStorage.setItem('orders', JSON.stringify(existingOrders));\n//       }\n\n//       // Update local state\n//       setLocalInvoice(prev => ({\n//         ...prev,\n//         paid: true,\n//         paymentStatus: 'paid'\n//       }));\n\n//       // Trigger refresh\n//       if (onRefresh) {\n//         onRefresh();\n//       }\n//     } catch (error) {\n//       console.error('Error marking as paid:', error);\n//     }\n//   };\n\n//   const handleMarkAsFulfilled = async () => {\n//     try {\n//       // Update order status in localStorage\n//       const existingOrders = JSON.parse(localStorage.getItem('orders') || '[]');\n//       const orderIndex = existingOrders.findIndex(order => \n//         order.orderId === localInvoice.orderId || order.id === localInvoice.orderId\n//       );\n\n//       if (orderIndex !== -1) {\n//         existingOrders[orderIndex] = {\n//           ...existingOrders[orderIndex],\n//           fulfilled: true,\n//           fulfillmentDate: new Date().toISOString()\n//         };\n\n//         localStorage.setItem('orders', JSON.stringify(existingOrders));\n//       }\n\n//       // Update local state\n//       setLocalInvoice(prev => ({\n//         ...prev,\n//         fulfilled: true\n//       }));\n\n//       // Trigger refresh\n//       if (onRefresh) {\n//         onRefresh();\n//       }\n//     } catch (error) {\n//       console.error('Error marking as fulfilled:', error);\n//     }\n//   };\n\n//   const getStatusBadge = (invoice) => {\n//     let statusClass = '';\n//     let statusText = '';\n\n//     if (invoice.paid) {\n//       statusClass = 'bg-green-100 text-green-800';\n//       statusText = 'Paid';\n//     } else if (invoice.paymentStatus === 'partial') {\n//       statusClass = 'bg-orange-100 text-orange-800';\n//       statusText = 'Partial Payment';\n//     } else {\n//       statusClass = 'bg-red-100 text-red-800';\n//       statusText = 'Unpaid';\n//     }\n\n//     return (\n//       <span className={`px-2 py-1 text-xs font-medium rounded-full ${statusClass}`}>\n//         {statusText}\n//       </span>\n//     );\n//   };\n\n//   const getFulfillmentBadge = (invoice) => {\n//     if (invoice.fulfilled) {\n//       return (\n//         <span className=\"px-2 py-1 text-xs font-medium rounded-full bg-blue-100 text-blue-800\">\n//           Fulfilled\n//         </span>\n//       );\n//     } else {\n//       return (\n//         <span className=\"px-2 py-1 text-xs font-medium rounded-full bg-yellow-100 text-yellow-800\">\n//           Pending Fulfillment\n//         </span>\n//       );\n//     }\n//   };\n\n//   return (\n//     <>\n//       <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center p-4 z-50\">\n//         <div className=\"bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-y-auto\">\n//           <div className=\"px-6 py-4 border-b border-gray-200\">\n//             <div className=\"flex items-center justify-between\">\n//               <h3 className=\"text-lg font-semibold text-gray-900\">\n//                 Order Details - #{localInvoice.orderId}\n//               </h3>\n//               <button\n//                 onClick={onClose}\n//                 className=\"text-gray-400 hover:text-gray-600\"\n//               >\n//                 <XCircle size={20} />\n//               </button>\n//             </div>\n//           </div>\n\n//           <div className=\"px-6 py-4\">\n//             {/* Order Info */}\n//             <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-6\">\n//               <div className=\"space-y-4\">\n//                 <div>\n//                   <label className=\"text-sm font-medium text-gray-500\">Order ID</label>\n//                   <p className=\"text-sm text-gray-900\">{localInvoice.orderId}</p>\n//                 </div>\n//                 <div>\n//                   <label className=\"text-sm font-medium text-gray-500\">Customer</label>\n//                   <p className=\"text-sm text-gray-900\">{getCustomerName(localInvoice.customerId)}</p>\n//                 </div>\n//                 <div>\n//                   <label className=\"text-sm font-medium text-gray-500\">Created Date</label>\n//                   <p className=\"text-sm text-gray-900\">{formatDate(localInvoice.createdAt)}</p>\n//                 </div>\n//                 <div>\n//                   <label className=\"text-sm font-medium text-gray-500\">Status</label>\n//                   <p className=\"text-sm text-gray-900\">{localInvoice.status}</p>\n//                 </div>\n//               </div>\n\n//               <div className=\"space-y-4\">\n//                 <div>\n//                   <label className=\"text-sm font-medium text-gray-500\">Payment Status</label>\n//                   <div className=\"flex items-center gap-2 mt-1\">\n//                     {getStatusBadge(localInvoice)}\n//                     {localInvoice.paymentStatus === 'partial' && (\n//                       <span className=\"text-xs text-gray-500\">\n//                         ({formatCurrency(localInvoice.remainingAmount || 0)} remaining)\n//                       </span>\n//                     )}\n//                   </div>\n//                 </div>\n//                 <div>\n//                   <label className=\"text-sm font-medium text-gray-500\">Fulfillment Status</label>\n//                   <div className=\"mt-1\">\n//                     {getFulfillmentBadge(localInvoice)}\n//                   </div>\n//                 </div>\n//                 <div>\n//                   <label className=\"text-sm font-medium text-gray-500\">Total Amount</label>\n//                   <p className=\"text-sm font-medium text-gray-900\">{formatCurrency(localInvoice.total)}</p>\n//                 </div>\n//                 <div>\n//                   <label className=\"text-sm font-medium text-gray-500\">Last Updated</label>\n//                   <p className=\"text-sm text-gray-900\">{formatDate(localInvoice.updatedAt || localInvoice.createdAt)}</p>\n//                 </div>\n//               </div>\n//             </div>\n\n//             {/* Order Items */}\n//             <div className=\"mb-6\">\n//               <h4 className=\"text-md font-medium text-gray-900 mb-3\">Order Items</h4>\n//               <div className=\"border border-gray-200 rounded-lg overflow-hidden\">\n//                 <table className=\"min-w-full divide-y divide-gray-200\">\n//                   <thead className=\"bg-gray-50\">\n//                     <tr>\n//                       <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Item</th>\n//                       <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Quantity</th>\n//                       <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Price</th>\n//                       <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Total</th>\n//                     </tr>\n//                   </thead>\n//                   <tbody className=\"bg-white divide-y divide-gray-200\">\n//                     {localInvoice.items && localInvoice.items.map((item, index) => (\n//                       <tr key={index}>\n//                         <td className=\"px-4 py-3 text-sm text-gray-900\">{item.name}</td>\n//                         <td className=\"px-4 py-3 text-sm text-gray-900\">{item.quantity}</td>\n//                         <td className=\"px-4 py-3 text-sm text-gray-900\">{formatCurrency(item.price)}</td>\n//                         <td className=\"px-4 py-3 text-sm text-gray-900\">{formatCurrency(item.quantity * item.price)}</td>\n//                       </tr>\n//                     ))}\n//                     <tr className=\"bg-gray-50\">\n//                       <td colSpan=\"3\" className=\"px-4 py-3 text-sm font-medium text-gray-900 text-right\">Total</td>\n//                       <td className=\"px-4 py-3 text-sm font-medium text-gray-900\">{formatCurrency(localInvoice.total)}</td>\n//                     </tr>\n//                   </tbody>\n//                 </table>\n//               </div>\n//             </div>\n\n//             {/* Payment History */}\n//             {paymentHistory.length > 0 && (\n//               <div className=\"mb-6\">\n//                 <h4 className=\"text-md font-medium text-gray-900 mb-3\">Payment History</h4>\n//                 <div className=\"border border-gray-200 rounded-lg overflow-hidden\">\n//                   <table className=\"min-w-full divide-y divide-gray-200\">\n//                     <thead className=\"bg-gray-50\">\n//                       <tr>\n//                         <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Date</th>\n//                         <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Amount</th>\n//                         <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Method</th>\n//                         <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Memo</th>\n//                       </tr>\n//                     </thead>\n//                     <tbody className=\"bg-white divide-y divide-gray-200\">\n//                       {paymentHistory.map((payment, index) => (\n//                         <tr key={index}>\n//                           <td className=\"px-4 py-3 text-sm text-gray-900\">{formatDate(payment.date)}</td>\n//                           <td className=\"px-4 py-3 text-sm text-gray-900\">{formatCurrency(payment.amount)}</td>\n//                           <td className=\"px-4 py-3 text-sm text-gray-900\">{payment.paymentMethod}</td>\n//                           <td className=\"px-4 py-3 text-sm text-gray-600\">{payment.memo || '-'}</td>\n//                         </tr>\n//                       ))}\n//                     </tbody>\n//                   </table>\n//                 </div>\n//               </div>\n//             )}\n\n//             {/* Action Buttons */}\n//             <div className=\"flex flex-wrap gap-3 pt-4 border-t border-gray-200\">\n//               {!localInvoice.paid && (\n//                 <button\n//                   onClick={() => setPaymentModalOpen(true)}\n//                   className=\"flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\"\n//                 >\n//                   <DollarSign size={16} />\n//                   Record Payment\n//                 </button>\n//               )}\n\n//               {!localInvoice.paid && (\n//                 <button\n//                   onClick={handleMarkAsPaid}\n//                   className=\"flex items-center gap-2 px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors\"\n//                 >\n//                   <CheckCircle size={16} />\n//                   Mark as Paid\n//                 </button>\n//               )}\n\n//               {!localInvoice.fulfilled && (\n//                 <button\n//                   onClick={handleMarkAsFulfilled}\n//                   className=\"flex items-center gap-2 px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors\"\n//                 >\n//                   <CheckCircle size={16} />\n//                   Mark as Fulfilled\n//                 </button>\n//               )}\n\n//               <button className=\"flex items-center gap-2 px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors\">\n//                 <Download size={16} />\n//                 Download Invoice\n//               </button>\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n\n//       {/* Payment Modal */}\n//       {isPaymentModalOpen && (\n//         <RecordPaymentModal\n//           invoiceId={localInvoice.orderId}\n//           amount={localInvoice.remainingAmount || localInvoice.total}\n//           onClose={() => setPaymentModalOpen(false)}\n//           onPaymentComplete={handlePaymentComplete}\n//         />\n//       )}\n//     </>\n//   );\n// };\n\n// export default InvoiceDetailModal;\n\nimport React, { useState, useEffect } from 'react';\nimport { XCircle, CheckCircle, FileText, Download, DollarSign } from 'lucide-react';\nimport { formatCurrency, formatDate } from '../components/AccountsReceivable/AccountsReceivableUtils/formatters';\nimport RecordPaymentModal from '../components/AccountsReceivable/RecordPaymentModal';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst InvoiceDetailModal = ({\n  invoice,\n  onClose,\n  getCustomerName,\n  onRefresh\n}) => {\n  _s();\n  const [isPaymentModalOpen, setPaymentModalOpen] = useState(false);\n  const [localInvoice, setLocalInvoice] = useState(invoice);\n  const [paymentHistory, setPaymentHistory] = useState([]);\n  useEffect(() => {\n    if (invoice) {\n      setLocalInvoice(invoice);\n      loadPaymentHistory();\n    }\n  }, [invoice]);\n  const loadPaymentHistory = () => {\n    const storedPayments = JSON.parse(localStorage.getItem('payments') || '[]');\n    const invoicePayments = storedPayments.filter(payment => payment.invoiceId === invoice.orderId);\n    setPaymentHistory(invoicePayments);\n  };\n  const handlePaymentComplete = (paymentData, isFullPayment) => {\n    // Update invoice based on payment\n    setLocalInvoice(prev => ({\n      ...prev,\n      paid: isFullPayment,\n      paymentStatus: isFullPayment ? 'paid' : 'partial',\n      remainingAmount: isFullPayment ? 0 : paymentData.remainingAmount\n    }));\n\n    // Update localStorage\n    const existingOrders = JSON.parse(localStorage.getItem('orders') || '[]');\n    const orderIndex = existingOrders.findIndex(o => o.orderId === localInvoice.orderId);\n    if (orderIndex !== -1) {\n      existingOrders[orderIndex] = {\n        ...existingOrders[orderIndex],\n        paid: isFullPayment,\n        paymentStatus: isFullPayment ? 'paid' : 'partial',\n        remainingAmount: isFullPayment ? 0 : paymentData.remainingAmount,\n        paymentDate: isFullPayment ? new Date().toISOString() : existingOrders[orderIndex].paymentDate\n      };\n      localStorage.setItem('orders', JSON.stringify(existingOrders));\n    }\n    loadPaymentHistory();\n    setPaymentModalOpen(false);\n    if (onRefresh) onRefresh();\n  };\n  const handleMarkAsPaid = () => {\n    handlePaymentComplete({\n      remainingAmount: 0\n    }, true);\n  };\n  const handleMarkAsFulfilled = () => {\n    const existingOrders = JSON.parse(localStorage.getItem('orders') || '[]');\n    const orderIndex = existingOrders.findIndex(o => o.orderId === localInvoice.orderId);\n    if (orderIndex !== -1) {\n      existingOrders[orderIndex] = {\n        ...existingOrders[orderIndex],\n        fulfilled: true,\n        fulfillmentDate: new Date().toISOString()\n      };\n      localStorage.setItem('orders', JSON.stringify(existingOrders));\n    }\n    setLocalInvoice(prev => ({\n      ...prev,\n      fulfilled: true\n    }));\n    if (onRefresh) onRefresh();\n  };\n  const getStatusBadge = invoice => {\n    if (invoice.paid) return /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"px-2 py-1 text-xs font-medium rounded-full bg-green-100 text-green-800\",\n      children: \"Paid\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 634,\n      columnNumber: 30\n    }, this);\n    if (invoice.paymentStatus === 'partial') return /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"px-2 py-1 text-xs font-medium rounded-full bg-orange-100 text-orange-800\",\n      children: \"Partial Payment\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 635,\n      columnNumber: 53\n    }, this);\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"px-2 py-1 text-xs font-medium rounded-full bg-red-100 text-red-800\",\n      children: \"Unpaid\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 636,\n      columnNumber: 12\n    }, this);\n  };\n  const getFulfillmentBadge = invoice => {\n    return invoice.fulfilled ? /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"px-2 py-1 text-xs font-medium rounded-full bg-blue-100 text-blue-800\",\n      children: \"Fulfilled\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 641,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"px-2 py-1 text-xs font-medium rounded-full bg-yellow-100 text-yellow-800\",\n      children: \"Pending Fulfillment\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 642,\n      columnNumber: 9\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center p-4 z-50\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-y-auto\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"px-6 py-4 border-b border-gray-200 flex justify-between items-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"text-lg font-semibold text-gray-900\",\n            children: [\"Order Details - #\", localInvoice.orderId]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 650,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: onClose,\n            className: \"text-gray-400 hover:text-gray-600\",\n            children: /*#__PURE__*/_jsxDEV(XCircle, {\n              size: 20\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 652,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 651,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 649,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"px-6 py-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"grid grid-cols-1 md:grid-cols-2 gap-6 mb-6\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"space-y-4\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  className: \"text-sm font-medium text-gray-500\",\n                  children: \"Order ID\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 661,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"text-sm text-gray-900\",\n                  children: localInvoice.orderId\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 662,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 660,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  className: \"text-sm font-medium text-gray-500\",\n                  children: \"Customer\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 665,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"text-sm text-gray-900\",\n                  children: getCustomerName(localInvoice.customerId)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 666,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 664,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  className: \"text-sm font-medium text-gray-500\",\n                  children: \"Created Date\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 669,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"text-sm text-gray-900\",\n                  children: formatDate(localInvoice.createdAt)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 670,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 668,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  className: \"text-sm font-medium text-gray-500\",\n                  children: \"Status\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 673,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"text-sm text-gray-900\",\n                  children: localInvoice.status\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 674,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 672,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 659,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"space-y-4\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  className: \"text-sm font-medium text-gray-500\",\n                  children: \"Payment Status\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 679,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"flex items-center gap-2 mt-1\",\n                  children: [getStatusBadge(localInvoice), localInvoice.paymentStatus === 'partial' && /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"text-xs text-gray-500\",\n                    children: [\"(\", formatCurrency(localInvoice.remainingAmount || 0), \" remaining)\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 683,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 680,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 678,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  className: \"text-sm font-medium text-gray-500\",\n                  children: \"Fulfillment Status\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 690,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"mt-1\",\n                  children: getFulfillmentBadge(localInvoice)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 691,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 689,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  className: \"text-sm font-medium text-gray-500\",\n                  children: \"Total Amount\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 694,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"text-sm font-medium text-gray-900\",\n                  children: formatCurrency(localInvoice.total)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 695,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 693,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  className: \"text-sm font-medium text-gray-500\",\n                  children: \"Last Updated\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 698,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"text-sm text-gray-900\",\n                  children: formatDate(localInvoice.updatedAt || localInvoice.createdAt)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 699,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 697,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 677,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 658,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mb-6\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              className: \"text-md font-medium text-gray-900 mb-3\",\n              children: \"Order Items\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 706,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"border border-gray-200 rounded-lg overflow-hidden\",\n              children: /*#__PURE__*/_jsxDEV(\"table\", {\n                className: \"min-w-full divide-y divide-gray-200\",\n                children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                  className: \"bg-gray-50\",\n                  children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                      className: \"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\",\n                      children: \"Item\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 711,\n                      columnNumber: 23\n                    }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                      className: \"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\",\n                      children: \"Description\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 712,\n                      columnNumber: 23\n                    }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                      className: \"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\",\n                      children: \"Quantity\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 713,\n                      columnNumber: 23\n                    }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                      className: \"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\",\n                      children: \"Unit Price\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 714,\n                      columnNumber: 23\n                    }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                      className: \"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\",\n                      children: \"Total\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 715,\n                      columnNumber: 23\n                    }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                      className: \"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\",\n                      children: \"Status\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 716,\n                      columnNumber: 23\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 710,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 709,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                  className: \"bg-white divide-y divide-gray-200\",\n                  children: localInvoice.items && localInvoice.items.map((item, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                      className: \"px-4 py-3 text-sm text-gray-900\",\n                      children: item.name\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 722,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      className: \"px-4 py-3 text-sm text-gray-900\",\n                      children: item.description || '-'\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 723,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      className: \"px-4 py-3 text-sm text-gray-900\",\n                      children: item.quantity\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 724,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      className: \"px-4 py-3 text-sm text-gray-900\",\n                      children: formatCurrency(item.price)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 725,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      className: \"px-4 py-3 text-sm text-gray-900\",\n                      children: formatCurrency(item.quantity * item.price)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 726,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      className: \"px-4 py-3\",\n                      children: /*#__PURE__*/_jsxDEV(\"span\", {\n                        className: `px-2 py-1 text-xs font-medium rounded-full ${item.fulfilled ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'}`,\n                        children: item.status || (item.fulfilled ? 'Fulfilled' : 'Pending')\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 728,\n                        columnNumber: 27\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 727,\n                      columnNumber: 25\n                    }, this)]\n                  }, index, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 721,\n                    columnNumber: 23\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 719,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 708,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 707,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 705,\n            columnNumber: 13\n          }, this), paymentHistory.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mb-6\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              className: \"text-md font-medium text-gray-900 mb-3\",\n              children: \"Payment History\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 744,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"border border-gray-200 rounded-lg overflow-hidden\",\n              children: /*#__PURE__*/_jsxDEV(\"table\", {\n                className: \"min-w-full divide-y divide-gray-200\",\n                children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                  className: \"bg-gray-50\",\n                  children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                      className: \"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\",\n                      children: \"Date\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 749,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                      className: \"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\",\n                      children: \"Amount\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 750,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                      className: \"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\",\n                      children: \"Method\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 751,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                      className: \"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\",\n                      children: \"Memo\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 752,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 748,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 747,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                  className: \"bg-white divide-y divide-gray-200\",\n                  children: paymentHistory.map((payment, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                      className: \"px-4 py-3 text-sm text-gray-900\",\n                      children: formatDate(payment.date)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 758,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      className: \"px-4 py-3 text-sm text-gray-900\",\n                      children: formatCurrency(payment.amount)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 759,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      className: \"px-4 py-3 text-sm text-gray-900\",\n                      children: payment.paymentMethod\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 760,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      className: \"px-4 py-3 text-sm text-gray-600\",\n                      children: payment.memo || '-'\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 761,\n                      columnNumber: 27\n                    }, this)]\n                  }, index, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 757,\n                    columnNumber: 25\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 755,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 746,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 745,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 743,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex flex-wrap gap-3 pt-4 border-t border-gray-200\",\n            children: [!localInvoice.paid && /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => setPaymentModalOpen(true),\n              className: \"flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\",\n              children: [/*#__PURE__*/_jsxDEV(DollarSign, {\n                size: 16\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 777,\n                columnNumber: 19\n              }, this), \" Record Payment\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 773,\n              columnNumber: 17\n            }, this), !localInvoice.paid && /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: handleMarkAsPaid,\n              className: \"flex items-center gap-2 px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors\",\n              children: [/*#__PURE__*/_jsxDEV(CheckCircle, {\n                size: 16\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 785,\n                columnNumber: 19\n              }, this), \" Mark as Paid\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 781,\n              columnNumber: 17\n            }, this), !localInvoice.fulfilled && /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: handleMarkAsFulfilled,\n              className: \"flex items-center gap-2 px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors\",\n              children: [/*#__PURE__*/_jsxDEV(CheckCircle, {\n                size: 16\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 793,\n                columnNumber: 19\n              }, this), \" Mark as Fulfilled\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 789,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"flex items-center gap-2 px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors\",\n              children: [/*#__PURE__*/_jsxDEV(Download, {\n                size: 16\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 797,\n                columnNumber: 17\n              }, this), \" Download Invoice\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 796,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 771,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 656,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 648,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 647,\n      columnNumber: 7\n    }, this), isPaymentModalOpen && /*#__PURE__*/_jsxDEV(RecordPaymentModal, {\n      invoiceId: localInvoice.orderId,\n      amount: localInvoice.remainingAmount || localInvoice.total,\n      onClose: () => setPaymentModalOpen(false),\n      onPaymentComplete: handlePaymentComplete\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 806,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n_s(InvoiceDetailModal, \"ZXYBPKhxZLfKhCElVNPJVFLzDLA=\");\n_c = InvoiceDetailModal;\nexport default InvoiceDetailModal;\nvar _c;\n$RefreshReg$(_c, \"InvoiceDetailModal\");","map":{"version":3,"names":["React","useState","useEffect","XCircle","CheckCircle","FileText","Download","DollarSign","formatCurrency","formatDate","RecordPaymentModal","jsxDEV","_jsxDEV","Fragment","_Fragment","InvoiceDetailModal","invoice","onClose","getCustomerName","onRefresh","_s","isPaymentModalOpen","setPaymentModalOpen","localInvoice","setLocalInvoice","paymentHistory","setPaymentHistory","loadPaymentHistory","storedPayments","JSON","parse","localStorage","getItem","invoicePayments","filter","payment","invoiceId","orderId","handlePaymentComplete","paymentData","isFullPayment","prev","paid","paymentStatus","remainingAmount","existingOrders","orderIndex","findIndex","o","paymentDate","Date","toISOString","setItem","stringify","handleMarkAsPaid","handleMarkAsFulfilled","fulfilled","fulfillmentDate","getStatusBadge","className","children","fileName","_jsxFileName","lineNumber","columnNumber","getFulfillmentBadge","onClick","size","customerId","createdAt","status","total","updatedAt","items","map","item","index","name","description","quantity","price","length","date","amount","paymentMethod","memo","onPaymentComplete","_c","$RefreshReg$"],"sources":["C:/Users/Logic-Unit/my-account/src/modals/InvoiceDetailModal.jsx"],"sourcesContent":["// import React, { useState } from 'react';\r\n// import { XCircle, CheckCircle, FileText, Download } from 'lucide-react';\r\n// import { formatCurrency, formatDate } from '../components/AccountsReceivable/AccountsReceivableUtils/formatters';\r\n// const RecordPaymentModal = React.lazy(() =>\r\n//   import('../components/AccountsReceivable/RecordPaymentModal')\r\n// );\r\n\r\n// const InvoiceDetailModal = ({ invoice, onClose, getCustomerName }) => {\r\n//   const [isPaymentModalOpen, setPaymentModalOpen] = useState(false);\r\n\r\n//   return (\r\n//     <>\r\n//       <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center p-4 z-50\">\r\n//         <div className=\"bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-y-auto\">\r\n//           <div className=\"px-6 py-4 border-b border-gray-200\">\r\n//             <div className=\"flex items-center justify-between\">\r\n//               <h3 className=\"text-lg font-semibold text-gray-900\">\r\n//                 Order Details - #{invoice.orderId}\r\n//               </h3>\r\n//               <button\r\n//                 onClick={onClose}\r\n//                 className=\"text-gray-400 hover:text-gray-600\"\r\n//               >\r\n//                 <XCircle size={20} />\r\n//               </button>\r\n//             </div>\r\n//           </div>\r\n\r\n//           <div className=\"px-6 py-4\">\r\n//             {/* Order Info */}\r\n//             <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-6\">\r\n//               <div className=\"space-y-4\">\r\n//                 <div>\r\n//                   <label className=\"text-sm font-medium text-gray-500\">Order ID</label>\r\n//                   <p className=\"text-sm text-gray-900\">{invoice.orderId}</p>\r\n//                 </div>\r\n//                 <div>\r\n//                   <label className=\"text-sm font-medium text-gray-500\">Customer</label>\r\n//                   <p className=\"text-sm text-gray-900\">{getCustomerName(invoice.customerId)}</p>\r\n//                 </div>\r\n//                 <div>\r\n//                   <label className=\"text-sm font-medium text-gray-500\">Created Date</label>\r\n//                   <p className=\"text-sm text-gray-900\">{formatDate(invoice.createdAt)}</p>\r\n//                 </div>\r\n//                 <div>\r\n//                   <label className=\"text-sm font-medium text-gray-500\">Status</label>\r\n//                   <p className=\"text-sm text-gray-900\">{invoice.status}</p>\r\n//                 </div>\r\n//               </div>\r\n\r\n//               <div className=\"space-y-4\">\r\n//                 <div>\r\n//                   <label className=\"text-sm font-medium text-gray-500\">Payment Status</label>\r\n//                   <div>\r\n//                     <span className={`px-2 py-1 text-xs font-medium rounded-full ${\r\n//                       invoice.paid ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'\r\n//                     }`}>\r\n//                       {invoice.paid ? 'Paid' : 'Unpaid'}\r\n//                     </span>\r\n//                   </div>\r\n//                 </div>\r\n//                 <div>\r\n//                   <label className=\"text-sm font-medium text-gray-500\">Fulfillment Status</label>\r\n//                   <div>\r\n//                     <span className={`px-2 py-1 text-xs font-medium rounded-full ${\r\n//                       invoice.fulfilled ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'\r\n//                     }`}>\r\n//                       {invoice.fulfilled ? 'Fulfilled' : 'Pending'}\r\n//                     </span>\r\n//                   </div>\r\n//                 </div>\r\n//                 <div>\r\n//                   <label className=\"text-sm font-medium text-gray-500\">Total Amount</label>\r\n//                   <p className=\"text-lg font-bold text-gray-900\">{formatCurrency(invoice.total)}</p>\r\n//                 </div>\r\n//                 <div>\r\n//                   <label className=\"text-sm font-medium text-gray-500\">Payable Amount</label>\r\n//                   <p className=\"text-sm text-gray-900\">{formatCurrency(invoice.payableAmount)}</p>\r\n//                 </div>\r\n//               </div>\r\n//             </div>\r\n\r\n//             {/* Line Items */}\r\n//             <div className=\"mb-6\">\r\n//               <h4 className=\"text-md font-semibold text-gray-900 mb-3\">Order Items</h4>\r\n//               <div className=\"overflow-x-auto\">\r\n//                 <table className=\"w-full border border-gray-200 rounded\">\r\n//                   <thead className=\"bg-gray-50\">\r\n//                     <tr>\r\n//                       <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500\">Product</th>\r\n//                       <th className=\"px-4 py-2 text-right text-xs font-medium text-gray-500\">Quantity</th>\r\n//                       <th className=\"px-4 py-2 text-right text-xs font-medium text-gray-500\">Unit Price</th>\r\n//                       <th className=\"px-4 py-2 text-right text-xs font-medium text-gray-500\">Total</th>\r\n//                       <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500\">Status</th>\r\n//                     </tr>\r\n//                   </thead>\r\n//                   <tbody className=\"divide-y divide-gray-200\">\r\n//                     {invoice.lineItems.map((item, index) => (\r\n//                       <tr key={index}>\r\n//                         <td className=\"px-4 py-2 text-sm text-gray-900\">{item.productName}</td>\r\n//                         <td className=\"px-4 py-2 text-sm text-gray-900 text-right\">{item.quantity}</td>\r\n//                         <td className=\"px-4 py-2 text-sm text-gray-900 text-right\">{formatCurrency(item.price)}</td>\r\n//                         <td className=\"px-4 py-2 text-sm font-medium text-gray-900 text-right\">{formatCurrency(item.total)}</td>\r\n//                         <td className=\"px-4 py-2\">\r\n//                           <span className={`px-2 py-1 text-xs font-medium rounded-full ${\r\n//                             item.fulfilled ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'\r\n//                           }`}>\r\n//                             {item.status}\r\n//                           </span>\r\n//                         </td>\r\n//                       </tr>\r\n//                     ))}\r\n//                   </tbody>\r\n//                 </table>\r\n//               </div>\r\n//             </div>\r\n\r\n//             {/* Totals */}\r\n//             <div className=\"bg-gray-50 p-4 rounded-lg\">\r\n//               <div className=\"space-y-2\">\r\n//                 <div className=\"flex justify-between\">\r\n//                   <span className=\"text-sm text-gray-600\">Subtotal:</span>\r\n//                   <span className=\"text-sm text-gray-900\">{formatCurrency(invoice.subTotal)}</span>\r\n//                 </div>\r\n//                 <div className=\"flex justify-between\">\r\n//                   <span className=\"text-sm text-gray-600\">Tax ({invoice.taxRate}%):</span>\r\n//                   <span className=\"text-sm text-gray-900\">{formatCurrency(invoice.taxAmount)}</span>\r\n//                 </div>\r\n//                 {invoice.discountAmount > 0 && (\r\n//                   <div className=\"flex justify-between\">\r\n//                     <span className=\"text-sm text-gray-600\">Discount:</span>\r\n//                     <span className=\"text-sm text-red-600\">-{formatCurrency(invoice.discountAmount)}</span>\r\n//                   </div>\r\n//                 )}\r\n//                 <div className=\"flex justify-between font-bold text-lg border-t pt-2\">\r\n//                   <span>Total:</span>\r\n//                   <span>{formatCurrency(invoice.total)}</span>\r\n//                 </div>\r\n//               </div>\r\n//             </div>\r\n\r\n//             {/* Action Buttons */}\r\n//             <div className=\"flex space-x-3 mt-6\">\r\n//               <button\r\n//                 className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center space-x-2\"\r\n//                 onClick={() => setPaymentModalOpen(true)}\r\n//               >\r\n//                 <CheckCircle size={16} />\r\n//                 <span>Record Payment</span>\r\n//               </button>\r\n\r\n//               {!invoice.paid && (\r\n//                 <button className=\"px-4 py-2 bg-emerald-600 text-white rounded-lg hover:bg-emerald-700 flex items-center space-x-2\">\r\n//                   <CheckCircle size={16} />\r\n//                   <span>Mark as Paid</span>\r\n//                 </button>\r\n//               )}\r\n//               {!invoice.fulfilled && (\r\n//                 <button className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center space-x-2\">\r\n//                   <FileText size={16} />\r\n//                   <span>Mark as Fulfilled</span>\r\n//                 </button>\r\n//               )}\r\n//               <button className=\"px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 flex items-center space-x-2\">\r\n//                 <Download size={16} />\r\n//                 <span>Download Invoice</span>\r\n//               </button>\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n\r\n//    {isPaymentModalOpen && (\r\n//   <React.Suspense fallback={<div>Loading Payment Modal...</div>}>\r\n//     <RecordPaymentModal\r\n//       invoiceId={invoice.orderId}\r\n//       amount={invoice.total}\r\n//       onClose={() => setPaymentModalOpen(false)}\r\n//       onSubmit={(date, enteredAmount, method, account, memo, paymentData, isFullPayment) => {\r\n//         console.log('Payment Submitted:', { \r\n//           date, \r\n//           enteredAmount, \r\n//           method, \r\n//           account, \r\n//           memo, \r\n//           paymentData, \r\n//           isFullPayment \r\n//         });\r\n        \r\n//         if (isFullPayment) {\r\n//           // Update the local state to reflect the paid status\r\n//           // This will trigger a re-render with the updated status\r\n//           invoice.paid = true;\r\n//           invoice.paymentStatus = 'paid';\r\n//         }\r\n        \r\n//         setPaymentModalOpen(false);\r\n        \r\n//         // You might want to refresh the data or show a success message\r\n//        // message.success(isFullPayment ? 'Invoice marked as paid!' : 'Partial payment recorded!');\r\n//       }}\r\n//     />\r\n//   </React.Suspense>\r\n// )}\r\n\r\n//     </>\r\n//   );\r\n// };\r\n\r\n// export default InvoiceDetailModal;\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import { XCircle, CheckCircle, FileText, Download, Clock, Calendar, DollarSign } from 'lucide-react';\r\n// import { formatCurrency, formatDate } from '../components/AccountsReceivable/AccountsReceivableUtils/formatters';\r\n// import RecordPaymentModal from '../components/AccountsReceivable/RecordPaymentModal';\r\n\r\n// const InvoiceDetailModal = ({ invoice, onClose, getCustomerName, onRefresh }) => {\r\n//   const [isPaymentModalOpen, setPaymentModalOpen] = useState(false);\r\n//   const [localInvoice, setLocalInvoice] = useState(invoice);\r\n//   const [paymentHistory, setPaymentHistory] = useState([]);\r\n\r\n//   // Load payment history when invoice changes\r\n//   useEffect(() => {\r\n//     if (invoice) {\r\n//       setLocalInvoice(invoice);\r\n//       loadPaymentHistory();\r\n//     }\r\n//   }, [invoice]);\r\n\r\n//   const loadPaymentHistory = () => {\r\n//     const storedPayments = JSON.parse(localStorage.getItem('payments') || '[]');\r\n//     const invoicePayments = storedPayments.filter(\r\n//       payment => payment.invoiceId === invoice.orderId || payment.orderId === invoice.orderId\r\n//     );\r\n//     setPaymentHistory(invoicePayments);\r\n//   };\r\n\r\n//   const handlePaymentComplete = (paymentData, isFullPayment) => {\r\n//     // Update local invoice state to reflect the payment\r\n//     if (isFullPayment) {\r\n//       setLocalInvoice(prev => ({\r\n//         ...prev,\r\n//         paid: true,\r\n//         paymentStatus: 'paid',\r\n//         remainingAmount: 0\r\n//       }));\r\n//     } else {\r\n//       setLocalInvoice(prev => ({\r\n//         ...prev,\r\n//         paid: false,\r\n//         paymentStatus: 'partial',\r\n//         remainingAmount: paymentData.remainingAmount\r\n//       }));\r\n//     }\r\n\r\n//     // Reload payment history\r\n//     loadPaymentHistory();\r\n\r\n//     // Trigger parent refresh if available\r\n//     if (onRefresh) {\r\n//       onRefresh();\r\n//     }\r\n\r\n//     setPaymentModalOpen(false);\r\n//   };\r\n\r\n//   const handleMarkAsPaid = async () => {\r\n//     try {\r\n//       // Update order status in localStorage\r\n//       const existingOrders = JSON.parse(localStorage.getItem('orders') || '[]');\r\n//       const orderIndex = existingOrders.findIndex(order => \r\n//         order.orderId === localInvoice.orderId || order.id === localInvoice.orderId\r\n//       );\r\n      \r\n//       if (orderIndex !== -1) {\r\n//         existingOrders[orderIndex] = {\r\n//           ...existingOrders[orderIndex],\r\n//           paid: true,\r\n//           paymentStatus: 'paid',\r\n//           paymentDate: new Date().toISOString().split('T')[0],\r\n//           remainingAmount: 0\r\n//         };\r\n        \r\n//         localStorage.setItem('orders', JSON.stringify(existingOrders));\r\n//       }\r\n\r\n//       // Update local state\r\n//       setLocalInvoice(prev => ({\r\n//         ...prev,\r\n//         paid: true,\r\n//         paymentStatus: 'paid'\r\n//       }));\r\n\r\n//       // Trigger refresh\r\n//       if (onRefresh) {\r\n//         onRefresh();\r\n//       }\r\n//     } catch (error) {\r\n//       console.error('Error marking as paid:', error);\r\n//     }\r\n//   };\r\n\r\n//   const handleMarkAsFulfilled = async () => {\r\n//     try {\r\n//       // Update order status in localStorage\r\n//       const existingOrders = JSON.parse(localStorage.getItem('orders') || '[]');\r\n//       const orderIndex = existingOrders.findIndex(order => \r\n//         order.orderId === localInvoice.orderId || order.id === localInvoice.orderId\r\n//       );\r\n      \r\n//       if (orderIndex !== -1) {\r\n//         existingOrders[orderIndex] = {\r\n//           ...existingOrders[orderIndex],\r\n//           fulfilled: true,\r\n//           fulfillmentDate: new Date().toISOString()\r\n//         };\r\n        \r\n//         localStorage.setItem('orders', JSON.stringify(existingOrders));\r\n//       }\r\n\r\n//       // Update local state\r\n//       setLocalInvoice(prev => ({\r\n//         ...prev,\r\n//         fulfilled: true\r\n//       }));\r\n\r\n//       // Trigger refresh\r\n//       if (onRefresh) {\r\n//         onRefresh();\r\n//       }\r\n//     } catch (error) {\r\n//       console.error('Error marking as fulfilled:', error);\r\n//     }\r\n//   };\r\n\r\n//   const getStatusBadge = (invoice) => {\r\n//     let statusClass = '';\r\n//     let statusText = '';\r\n    \r\n//     if (invoice.paid) {\r\n//       statusClass = 'bg-green-100 text-green-800';\r\n//       statusText = 'Paid';\r\n//     } else if (invoice.paymentStatus === 'partial') {\r\n//       statusClass = 'bg-orange-100 text-orange-800';\r\n//       statusText = 'Partial Payment';\r\n//     } else {\r\n//       statusClass = 'bg-red-100 text-red-800';\r\n//       statusText = 'Unpaid';\r\n//     }\r\n    \r\n//     return (\r\n//       <span className={`px-2 py-1 text-xs font-medium rounded-full ${statusClass}`}>\r\n//         {statusText}\r\n//       </span>\r\n//     );\r\n//   };\r\n\r\n//   const getFulfillmentBadge = (invoice) => {\r\n//     if (invoice.fulfilled) {\r\n//       return (\r\n//         <span className=\"px-2 py-1 text-xs font-medium rounded-full bg-blue-100 text-blue-800\">\r\n//           Fulfilled\r\n//         </span>\r\n//       );\r\n//     } else {\r\n//       return (\r\n//         <span className=\"px-2 py-1 text-xs font-medium rounded-full bg-yellow-100 text-yellow-800\">\r\n//           Pending Fulfillment\r\n//         </span>\r\n//       );\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <>\r\n//       <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center p-4 z-50\">\r\n//         <div className=\"bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-y-auto\">\r\n//           <div className=\"px-6 py-4 border-b border-gray-200\">\r\n//             <div className=\"flex items-center justify-between\">\r\n//               <h3 className=\"text-lg font-semibold text-gray-900\">\r\n//                 Order Details - #{localInvoice.orderId}\r\n//               </h3>\r\n//               <button\r\n//                 onClick={onClose}\r\n//                 className=\"text-gray-400 hover:text-gray-600\"\r\n//               >\r\n//                 <XCircle size={20} />\r\n//               </button>\r\n//             </div>\r\n//           </div>\r\n\r\n//           <div className=\"px-6 py-4\">\r\n//             {/* Order Info */}\r\n//             <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-6\">\r\n//               <div className=\"space-y-4\">\r\n//                 <div>\r\n//                   <label className=\"text-sm font-medium text-gray-500\">Order ID</label>\r\n//                   <p className=\"text-sm text-gray-900\">{localInvoice.orderId}</p>\r\n//                 </div>\r\n//                 <div>\r\n//                   <label className=\"text-sm font-medium text-gray-500\">Customer</label>\r\n//                   <p className=\"text-sm text-gray-900\">{getCustomerName(localInvoice.customerId)}</p>\r\n//                 </div>\r\n//                 <div>\r\n//                   <label className=\"text-sm font-medium text-gray-500\">Created Date</label>\r\n//                   <p className=\"text-sm text-gray-900\">{formatDate(localInvoice.createdAt)}</p>\r\n//                 </div>\r\n//                 <div>\r\n//                   <label className=\"text-sm font-medium text-gray-500\">Status</label>\r\n//                   <p className=\"text-sm text-gray-900\">{localInvoice.status}</p>\r\n//                 </div>\r\n//               </div>\r\n\r\n//               <div className=\"space-y-4\">\r\n//                 <div>\r\n//                   <label className=\"text-sm font-medium text-gray-500\">Payment Status</label>\r\n//                   <div className=\"flex items-center gap-2 mt-1\">\r\n//                     {getStatusBadge(localInvoice)}\r\n//                     {localInvoice.paymentStatus === 'partial' && (\r\n//                       <span className=\"text-xs text-gray-500\">\r\n//                         ({formatCurrency(localInvoice.remainingAmount || 0)} remaining)\r\n//                       </span>\r\n//                     )}\r\n//                   </div>\r\n//                 </div>\r\n//                 <div>\r\n//                   <label className=\"text-sm font-medium text-gray-500\">Fulfillment Status</label>\r\n//                   <div className=\"mt-1\">\r\n//                     {getFulfillmentBadge(localInvoice)}\r\n//                   </div>\r\n//                 </div>\r\n//                 <div>\r\n//                   <label className=\"text-sm font-medium text-gray-500\">Total Amount</label>\r\n//                   <p className=\"text-sm font-medium text-gray-900\">{formatCurrency(localInvoice.total)}</p>\r\n//                 </div>\r\n//                 <div>\r\n//                   <label className=\"text-sm font-medium text-gray-500\">Last Updated</label>\r\n//                   <p className=\"text-sm text-gray-900\">{formatDate(localInvoice.updatedAt || localInvoice.createdAt)}</p>\r\n//                 </div>\r\n//               </div>\r\n//             </div>\r\n\r\n//             {/* Order Items */}\r\n//             <div className=\"mb-6\">\r\n//               <h4 className=\"text-md font-medium text-gray-900 mb-3\">Order Items</h4>\r\n//               <div className=\"border border-gray-200 rounded-lg overflow-hidden\">\r\n//                 <table className=\"min-w-full divide-y divide-gray-200\">\r\n//                   <thead className=\"bg-gray-50\">\r\n//                     <tr>\r\n//                       <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Item</th>\r\n//                       <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Quantity</th>\r\n//                       <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Price</th>\r\n//                       <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Total</th>\r\n//                     </tr>\r\n//                   </thead>\r\n//                   <tbody className=\"bg-white divide-y divide-gray-200\">\r\n//                     {localInvoice.items && localInvoice.items.map((item, index) => (\r\n//                       <tr key={index}>\r\n//                         <td className=\"px-4 py-3 text-sm text-gray-900\">{item.name}</td>\r\n//                         <td className=\"px-4 py-3 text-sm text-gray-900\">{item.quantity}</td>\r\n//                         <td className=\"px-4 py-3 text-sm text-gray-900\">{formatCurrency(item.price)}</td>\r\n//                         <td className=\"px-4 py-3 text-sm text-gray-900\">{formatCurrency(item.quantity * item.price)}</td>\r\n//                       </tr>\r\n//                     ))}\r\n//                     <tr className=\"bg-gray-50\">\r\n//                       <td colSpan=\"3\" className=\"px-4 py-3 text-sm font-medium text-gray-900 text-right\">Total</td>\r\n//                       <td className=\"px-4 py-3 text-sm font-medium text-gray-900\">{formatCurrency(localInvoice.total)}</td>\r\n//                     </tr>\r\n//                   </tbody>\r\n//                 </table>\r\n//               </div>\r\n//             </div>\r\n\r\n//             {/* Payment History */}\r\n//             {paymentHistory.length > 0 && (\r\n//               <div className=\"mb-6\">\r\n//                 <h4 className=\"text-md font-medium text-gray-900 mb-3\">Payment History</h4>\r\n//                 <div className=\"border border-gray-200 rounded-lg overflow-hidden\">\r\n//                   <table className=\"min-w-full divide-y divide-gray-200\">\r\n//                     <thead className=\"bg-gray-50\">\r\n//                       <tr>\r\n//                         <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Date</th>\r\n//                         <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Amount</th>\r\n//                         <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Method</th>\r\n//                         <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Memo</th>\r\n//                       </tr>\r\n//                     </thead>\r\n//                     <tbody className=\"bg-white divide-y divide-gray-200\">\r\n//                       {paymentHistory.map((payment, index) => (\r\n//                         <tr key={index}>\r\n//                           <td className=\"px-4 py-3 text-sm text-gray-900\">{formatDate(payment.date)}</td>\r\n//                           <td className=\"px-4 py-3 text-sm text-gray-900\">{formatCurrency(payment.amount)}</td>\r\n//                           <td className=\"px-4 py-3 text-sm text-gray-900\">{payment.paymentMethod}</td>\r\n//                           <td className=\"px-4 py-3 text-sm text-gray-600\">{payment.memo || '-'}</td>\r\n//                         </tr>\r\n//                       ))}\r\n//                     </tbody>\r\n//                   </table>\r\n//                 </div>\r\n//               </div>\r\n//             )}\r\n\r\n//             {/* Action Buttons */}\r\n//             <div className=\"flex flex-wrap gap-3 pt-4 border-t border-gray-200\">\r\n//               {!localInvoice.paid && (\r\n//                 <button\r\n//                   onClick={() => setPaymentModalOpen(true)}\r\n//                   className=\"flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\"\r\n//                 >\r\n//                   <DollarSign size={16} />\r\n//                   Record Payment\r\n//                 </button>\r\n//               )}\r\n              \r\n//               {!localInvoice.paid && (\r\n//                 <button\r\n//                   onClick={handleMarkAsPaid}\r\n//                   className=\"flex items-center gap-2 px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors\"\r\n//                 >\r\n//                   <CheckCircle size={16} />\r\n//                   Mark as Paid\r\n//                 </button>\r\n//               )}\r\n              \r\n//               {!localInvoice.fulfilled && (\r\n//                 <button\r\n//                   onClick={handleMarkAsFulfilled}\r\n//                   className=\"flex items-center gap-2 px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors\"\r\n//                 >\r\n//                   <CheckCircle size={16} />\r\n//                   Mark as Fulfilled\r\n//                 </button>\r\n//               )}\r\n              \r\n//               <button className=\"flex items-center gap-2 px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors\">\r\n//                 <Download size={16} />\r\n//                 Download Invoice\r\n//               </button>\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n\r\n//       {/* Payment Modal */}\r\n//       {isPaymentModalOpen && (\r\n//         <RecordPaymentModal\r\n//           invoiceId={localInvoice.orderId}\r\n//           amount={localInvoice.remainingAmount || localInvoice.total}\r\n//           onClose={() => setPaymentModalOpen(false)}\r\n//           onPaymentComplete={handlePaymentComplete}\r\n//         />\r\n//       )}\r\n//     </>\r\n//   );\r\n// };\r\n\r\n// export default InvoiceDetailModal;\r\n\r\n\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { XCircle, CheckCircle, FileText, Download, DollarSign } from 'lucide-react';\r\nimport { formatCurrency, formatDate } from '../components/AccountsReceivable/AccountsReceivableUtils/formatters';\r\nimport RecordPaymentModal from '../components/AccountsReceivable/RecordPaymentModal';\r\n\r\nconst InvoiceDetailModal = ({ invoice, onClose, getCustomerName, onRefresh }) => {\r\n  const [isPaymentModalOpen, setPaymentModalOpen] = useState(false);\r\n  const [localInvoice, setLocalInvoice] = useState(invoice);\r\n  const [paymentHistory, setPaymentHistory] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (invoice) {\r\n      setLocalInvoice(invoice);\r\n      loadPaymentHistory();\r\n    }\r\n  }, [invoice]);\r\n\r\n  const loadPaymentHistory = () => {\r\n    const storedPayments = JSON.parse(localStorage.getItem('payments') || '[]');\r\n    const invoicePayments = storedPayments.filter(\r\n      payment => payment.invoiceId === invoice.orderId\r\n    );\r\n    setPaymentHistory(invoicePayments);\r\n  };\r\n\r\n  const handlePaymentComplete = (paymentData, isFullPayment) => {\r\n    // Update invoice based on payment\r\n    setLocalInvoice(prev => ({\r\n      ...prev,\r\n      paid: isFullPayment,\r\n      paymentStatus: isFullPayment ? 'paid' : 'partial',\r\n      remainingAmount: isFullPayment ? 0 : paymentData.remainingAmount\r\n    }));\r\n\r\n    // Update localStorage\r\n    const existingOrders = JSON.parse(localStorage.getItem('orders') || '[]');\r\n    const orderIndex = existingOrders.findIndex(o => o.orderId === localInvoice.orderId);\r\n    if (orderIndex !== -1) {\r\n      existingOrders[orderIndex] = {\r\n        ...existingOrders[orderIndex],\r\n        paid: isFullPayment,\r\n        paymentStatus: isFullPayment ? 'paid' : 'partial',\r\n        remainingAmount: isFullPayment ? 0 : paymentData.remainingAmount,\r\n        paymentDate: isFullPayment ? new Date().toISOString() : existingOrders[orderIndex].paymentDate\r\n      };\r\n      localStorage.setItem('orders', JSON.stringify(existingOrders));\r\n    }\r\n\r\n    loadPaymentHistory();\r\n    setPaymentModalOpen(false);\r\n    if (onRefresh) onRefresh();\r\n  };\r\n\r\n  const handleMarkAsPaid = () => {\r\n    handlePaymentComplete({ remainingAmount: 0 }, true);\r\n  };\r\n\r\n  const handleMarkAsFulfilled = () => {\r\n    const existingOrders = JSON.parse(localStorage.getItem('orders') || '[]');\r\n    const orderIndex = existingOrders.findIndex(o => o.orderId === localInvoice.orderId);\r\n    if (orderIndex !== -1) {\r\n      existingOrders[orderIndex] = {\r\n        ...existingOrders[orderIndex],\r\n        fulfilled: true,\r\n        fulfillmentDate: new Date().toISOString()\r\n      };\r\n      localStorage.setItem('orders', JSON.stringify(existingOrders));\r\n    }\r\n    setLocalInvoice(prev => ({ ...prev, fulfilled: true }));\r\n    if (onRefresh) onRefresh();\r\n  };\r\n\r\n  const getStatusBadge = (invoice) => {\r\n    if (invoice.paid) return <span className=\"px-2 py-1 text-xs font-medium rounded-full bg-green-100 text-green-800\">Paid</span>;\r\n    if (invoice.paymentStatus === 'partial') return <span className=\"px-2 py-1 text-xs font-medium rounded-full bg-orange-100 text-orange-800\">Partial Payment</span>;\r\n    return <span className=\"px-2 py-1 text-xs font-medium rounded-full bg-red-100 text-red-800\">Unpaid</span>;\r\n  };\r\n\r\n  const getFulfillmentBadge = (invoice) => {\r\n    return invoice.fulfilled\r\n      ? <span className=\"px-2 py-1 text-xs font-medium rounded-full bg-blue-100 text-blue-800\">Fulfilled</span>\r\n      : <span className=\"px-2 py-1 text-xs font-medium rounded-full bg-yellow-100 text-yellow-800\">Pending Fulfillment</span>;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center p-4 z-50\">\r\n        <div className=\"bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-y-auto\">\r\n          <div className=\"px-6 py-4 border-b border-gray-200 flex justify-between items-center\">\r\n            <h3 className=\"text-lg font-semibold text-gray-900\">Order Details - #{localInvoice.orderId}</h3>\r\n            <button onClick={onClose} className=\"text-gray-400 hover:text-gray-600\">\r\n              <XCircle size={20} />\r\n            </button>\r\n          </div>\r\n\r\n          <div className=\"px-6 py-4\">\r\n            {/* Order Info */}\r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-6\">\r\n              <div className=\"space-y-4\">\r\n                <div>\r\n                  <label className=\"text-sm font-medium text-gray-500\">Order ID</label>\r\n                  <p className=\"text-sm text-gray-900\">{localInvoice.orderId}</p>\r\n                </div>\r\n                <div>\r\n                  <label className=\"text-sm font-medium text-gray-500\">Customer</label>\r\n                  <p className=\"text-sm text-gray-900\">{getCustomerName(localInvoice.customerId)}</p>\r\n                </div>\r\n                <div>\r\n                  <label className=\"text-sm font-medium text-gray-500\">Created Date</label>\r\n                  <p className=\"text-sm text-gray-900\">{formatDate(localInvoice.createdAt)}</p>\r\n                </div>\r\n                <div>\r\n                  <label className=\"text-sm font-medium text-gray-500\">Status</label>\r\n                  <p className=\"text-sm text-gray-900\">{localInvoice.status}</p>\r\n                </div>\r\n              </div>\r\n              <div className=\"space-y-4\">\r\n                <div>\r\n                  <label className=\"text-sm font-medium text-gray-500\">Payment Status</label>\r\n                  <div className=\"flex items-center gap-2 mt-1\">\r\n                    {getStatusBadge(localInvoice)}\r\n                    {localInvoice.paymentStatus === 'partial' && (\r\n                      <span className=\"text-xs text-gray-500\">\r\n                        ({formatCurrency(localInvoice.remainingAmount || 0)} remaining)\r\n                      </span>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n                <div>\r\n                  <label className=\"text-sm font-medium text-gray-500\">Fulfillment Status</label>\r\n                  <div className=\"mt-1\">{getFulfillmentBadge(localInvoice)}</div>\r\n                </div>\r\n                <div>\r\n                  <label className=\"text-sm font-medium text-gray-500\">Total Amount</label>\r\n                  <p className=\"text-sm font-medium text-gray-900\">{formatCurrency(localInvoice.total)}</p>\r\n                </div>\r\n                <div>\r\n                  <label className=\"text-sm font-medium text-gray-500\">Last Updated</label>\r\n                  <p className=\"text-sm text-gray-900\">{formatDate(localInvoice.updatedAt || localInvoice.createdAt)}</p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Order Items with Description */}\r\n            <div className=\"mb-6\">\r\n              <h4 className=\"text-md font-medium text-gray-900 mb-3\">Order Items</h4>\r\n              <div className=\"border border-gray-200 rounded-lg overflow-hidden\">\r\n                <table className=\"min-w-full divide-y divide-gray-200\">\r\n                  <thead className=\"bg-gray-50\">\r\n                    <tr>\r\n                      <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Item</th>\r\n                      <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Description</th>\r\n                      <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Quantity</th>\r\n                      <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Unit Price</th>\r\n                      <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Total</th>\r\n                      <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Status</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody className=\"bg-white divide-y divide-gray-200\">\r\n                    {localInvoice.items && localInvoice.items.map((item, index) => (\r\n                      <tr key={index}>\r\n                        <td className=\"px-4 py-3 text-sm text-gray-900\">{item.name}</td>\r\n                        <td className=\"px-4 py-3 text-sm text-gray-900\">{item.description || '-'}</td>\r\n                        <td className=\"px-4 py-3 text-sm text-gray-900\">{item.quantity}</td>\r\n                        <td className=\"px-4 py-3 text-sm text-gray-900\">{formatCurrency(item.price)}</td>\r\n                        <td className=\"px-4 py-3 text-sm text-gray-900\">{formatCurrency(item.quantity * item.price)}</td>\r\n                        <td className=\"px-4 py-3\">\r\n                          <span className={`px-2 py-1 text-xs font-medium rounded-full ${\r\n                            item.fulfilled ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'\r\n                          }`}>\r\n                            {item.status || (item.fulfilled ? 'Fulfilled' : 'Pending')}\r\n                          </span>\r\n                        </td>\r\n                      </tr>\r\n                    ))}\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Payment History */}\r\n            {paymentHistory.length > 0 && (\r\n              <div className=\"mb-6\">\r\n                <h4 className=\"text-md font-medium text-gray-900 mb-3\">Payment History</h4>\r\n                <div className=\"border border-gray-200 rounded-lg overflow-hidden\">\r\n                  <table className=\"min-w-full divide-y divide-gray-200\">\r\n                    <thead className=\"bg-gray-50\">\r\n                      <tr>\r\n                        <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Date</th>\r\n                        <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Amount</th>\r\n                        <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Method</th>\r\n                        <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Memo</th>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody className=\"bg-white divide-y divide-gray-200\">\r\n                      {paymentHistory.map((payment, index) => (\r\n                        <tr key={index}>\r\n                          <td className=\"px-4 py-3 text-sm text-gray-900\">{formatDate(payment.date)}</td>\r\n                          <td className=\"px-4 py-3 text-sm text-gray-900\">{formatCurrency(payment.amount)}</td>\r\n                          <td className=\"px-4 py-3 text-sm text-gray-900\">{payment.paymentMethod}</td>\r\n                          <td className=\"px-4 py-3 text-sm text-gray-600\">{payment.memo || '-'}</td>\r\n                        </tr>\r\n                      ))}\r\n                    </tbody>\r\n                  </table>\r\n                </div>\r\n              </div>\r\n            )}\r\n\r\n            {/* Action Buttons */}\r\n            <div className=\"flex flex-wrap gap-3 pt-4 border-t border-gray-200\">\r\n              {!localInvoice.paid && (\r\n                <button\r\n                  onClick={() => setPaymentModalOpen(true)}\r\n                  className=\"flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\"\r\n                >\r\n                  <DollarSign size={16} /> Record Payment\r\n                </button>\r\n              )}\r\n              {!localInvoice.paid && (\r\n                <button\r\n                  onClick={handleMarkAsPaid}\r\n                  className=\"flex items-center gap-2 px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors\"\r\n                >\r\n                  <CheckCircle size={16} /> Mark as Paid\r\n                </button>\r\n              )}\r\n              {!localInvoice.fulfilled && (\r\n                <button\r\n                  onClick={handleMarkAsFulfilled}\r\n                  className=\"flex items-center gap-2 px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors\"\r\n                >\r\n                  <CheckCircle size={16} /> Mark as Fulfilled\r\n                </button>\r\n              )}\r\n              <button className=\"flex items-center gap-2 px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors\">\r\n                <Download size={16} /> Download Invoice\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Payment Modal */}\r\n      {isPaymentModalOpen && (\r\n        <RecordPaymentModal\r\n          invoiceId={localInvoice.orderId}\r\n          amount={localInvoice.remainingAmount || localInvoice.total}\r\n          onClose={() => setPaymentModalOpen(false)}\r\n          onPaymentComplete={handlePaymentComplete}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default InvoiceDetailModal;\r\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}