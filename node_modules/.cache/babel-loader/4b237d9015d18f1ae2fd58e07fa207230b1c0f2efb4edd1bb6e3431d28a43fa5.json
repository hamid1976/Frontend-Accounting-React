{"ast":null,"code":"// // src/services/apApiService.js\n\n// // API Configuration for Accounts Payable\n// const API_PURCHASE_ORDERS = 'https://api-pos.hulmsolutions.com/POS/accounting2/31fc8df0-61db-41e5-bb67-070fde367ea1/PurchaseOrderManagement/purchaseOrdersWithoutDetails';\n// const API_VENDORS = 'https://api-pos.hulmsolutions.com/POS/accounting2/31fc8df0-61db-41e5-bb67-070fde367ea1/VendorManagement/vendors';\n// const API_PRODUCTS = 'https://api-pos.hulmsolutions.com/POS/accounting2/31fc8df0-61db-41e5-bb67-070fde367ea1/products?status=All&start=0&size=200';\n\n// // Replace with your actual Bearer token\n// const BEARER_TOKEN = 'your-bearer-token-here';\n\n// const apiHeaders = {\n//   'Authorization': `Bearer ${BEARER_TOKEN}`,\n//   'Content-Type': 'application/json',\n// };\n\n// export const apApiService = {\n//   async fetchProducts() {\n//     const response = await fetch(API_PRODUCTS, {\n//       method: 'GET',\n//       headers: apiHeaders,\n//     });\n\n//     if (!response.ok) {\n//       throw new Error(`HTTP error! status: ${response.status}`);\n//     }\n\n//     return await response.json();\n//   },\n\n//   async fetchPurchaseOrders() {\n//     const response = await fetch(API_PURCHASE_ORDERS, {\n//       method: 'GET',\n//       headers: apiHeaders,\n//     });\n\n//     if (!response.ok) {\n//       throw new Error(`HTTP error! status: ${response.status}`);\n//     }\n\n//     return await response.json();\n//   },\n\n//   async fetchVendors() {\n//     const response = await fetch(API_VENDORS, {\n//       method: 'GET',\n//       headers: apiHeaders,\n//     });\n\n//     if (!response.ok) {\n//       throw new Error(`HTTP error! status: ${response.status}`);\n//     }\n\n//     return await response.json();\n//   },\n\n//   getSampleProducts() {\n//     return [\n//       {\n//         id: \"1\",\n//         name: \"IPHONE 15 PRO MAX\",\n//         description: \"6.1 INCH\",\n//         costPrice: 180000,\n//         price: 210000,\n//         quantity: 49,\n//         status: \"Active\"\n//       },\n//       {\n//         id: \"2\",\n//         name: \"LAPTOP\",\n//         description: \"14 INCH\",\n//         costPrice: 45000,\n//         price: 50000,\n//         quantity: 55,\n//         status: \"Active\"\n//       },\n//       {\n//         id: \"3\",\n//         name: \"AIR PODS\",\n//         description: \"BOOSTER\",\n//         costPrice: 5000,\n//         price: 8000,\n//         quantity: 14,\n//         status: \"Active\"\n//       },\n//       {\n//         id: \"4\",\n//         name: \"LED\",\n//         description: \"40 INCH\",\n//         costPrice: 75000,\n//         price: 90000,\n//         quantity: 37,\n//         status: \"Active\"\n//       }\n//     ];\n//   },\n\n//   transformVendors(apiVendors, allPOData) {\n//     return apiVendors.map(vendor => {\n//       // Extract vendor details from complex API structure\n//       const vendorDetails = vendor.individuals && vendor.individuals.length > 0 \n//         ? vendor.individuals[0] \n//         : vendor.organizations && vendor.organizations.length > 0 \n//           ? vendor.organizations[0] \n//           : null;\n\n//       const contactInfo = vendorDetails?.contactMediums?.[0]?.mediumCharacteristics?.[0] || {};\n\n//       // Get ALL purchase orders for this vendor\n//       const vendorPOs = allPOData.filter(po => \n//         po.vendor_Id === vendor.id || \n//         po.Vendor_Id === vendor.id\n//       );\n\n//       // Calculate total payable from PENDING/PARTIAL purchase orders only (exclude fully applied)\n//       const totalPayable = vendorPOs\n//         .filter(po => {\n//           // Check if all items in PO are applied\n//           const allItemsApplied = po.purchaseOrderItems.every(item => \n//             item.status === 'applied'\n//           );\n//           return !allItemsApplied; // Include if not all items are applied\n//         })\n//         .reduce((sum, po) => {\n//           const poTotal = po.purchaseOrderItems.reduce((itemSum, item) => \n//             itemSum + (item.totalPrice || 0), 0);\n//           return sum + poTotal;\n//         }, 0);\n\n//       // Overdue amount = total payable from pending/partial orders\n//       const overdueAmount = totalPayable;\n\n//       // Total number of purchase orders for this vendor\n//       const billCount = vendorPOs.length;\n\n//       // Determine vendor type based on spending pattern\n//       let vendorType = 'supplies';\n//       const totalSpentFromPOs = vendorPOs.reduce((sum, po) => {\n//         const poTotal = po.purchaseOrderItems.reduce((itemSum, item) => \n//           itemSum + (item.totalPrice || 0), 0);\n//         return sum + poTotal;\n//       }, 0);\n\n//       if (totalSpentFromPOs > 5000000) {\n//         vendorType = 'equipment';\n//       } else if (totalSpentFromPOs > 1000000) {\n//         vendorType = 'supplies';\n//       } else {\n//         vendorType = 'office';\n//       }\n\n//       // Set credit limit based on vendor type\n//       let creditLimit = 500000; // Default\n//       if (vendorType === 'equipment') {\n//         creditLimit = 2000000;\n//       } else if (vendorType === 'supplies') {\n//         creditLimit = 1000000;\n//       }\n\n//       // Determine credit status based on payable amount\n//       let creditStatus = 'good';\n//       if (totalPayable === 0) {\n//         creditStatus = 'excellent';\n//       } else if (totalPayable > creditLimit * 0.9) {\n//         creditStatus = 'hold';\n//       } else if (totalPayable > creditLimit * 0.7) {\n//         creditStatus = 'watch';\n//       }\n\n//       return {\n//         id: vendor.id,\n//         name: vendorDetails?.fullName || vendorDetails?.name || `Vendor ${vendor.id}`,\n//         email: contactInfo.emailAddress || 'No email provided',\n//         phone: contactInfo.number || 'No phone provided',\n//         address: `${contactInfo.street1 || ''} ${contactInfo.city || ''} ${contactInfo.country || ''}`.trim() || 'No address provided',\n//         vendorType: vendorType,\n//         creditLimit: creditLimit,\n//         paymentTerms: vendorType === 'equipment' ? 45 : (vendorType === 'supplies' ? 30 : 15),\n//         totalPayable: totalPayable,\n//         overdueAmount: overdueAmount,\n//         lastPayment: 'No payments',\n//         creditStatus: creditStatus,\n//         accountBalance: totalPayable,\n//         billCount: billCount,\n//         avgPaymentDays: 30,\n//         status: vendor.status || 'active',\n//         type: vendor.type || 'Individual'\n//       };\n//     });\n//   }\n// };\n\n// // src/services/apApiService.js\n\n// // API Configuration for Accounts Payable\n// const API_PURCHASE_ORDERS = 'https://api-pos.hulmsolutions.com/POS/accounting2/31fc8df0-61db-41e5-bb67-070fde367ea1/PurchaseOrderManagement/purchaseOrdersWithoutDetails';\n// const API_VENDORS = 'https://api-pos.hulmsolutions.com/POS/accounting2/31fc8df0-61db-41e5-bb67-070fde367ea1/VendorManagement/vendors';\n// const API_PRODUCTS = 'https://api-pos.hulmsolutions.com/POS/accounting2/31fc8df0-61db-41e5-bb67-070fde367ea1/products?status=All&start=0&size=200';\n\n// // Replace with your actual Bearer token\n// const BEARER_TOKEN = 'your-bearer-token-here';\n\n// const apiHeaders = {\n//   'Authorization': `Bearer ${BEARER_TOKEN}`,\n//   'Content-Type': 'application/json',\n// };\n\n// export const apApiService = {\n//   async fetchProducts() {\n//     const response = await fetch(API_PRODUCTS, {\n//       method: 'GET',\n//       headers: apiHeaders,\n//     });\n\n//     if (!response.ok) {\n//       throw new Error(`HTTP error! status: ${response.status}`);\n//     }\n\n//     return await response.json();\n//   },\n\n//   async fetchPurchaseOrders() {\n//     const response = await fetch(API_PURCHASE_ORDERS, {\n//       method: 'GET',\n//       headers: apiHeaders,\n//     });\n\n//     if (!response.ok) {\n//       throw new Error(`HTTP error! status: ${response.status}`);\n//     }\n\n//     return await response.json();\n//   },\n\n//   async fetchVendors() {\n//     const response = await fetch(API_VENDORS, {\n//       method: 'GET',\n//       headers: apiHeaders,\n//     });\n\n//     if (!response.ok) {\n//       throw new Error(`HTTP error! status: ${response.status}`);\n//     }\n\n//     return await response.json();\n//   },\n\n//   getSampleProducts() {\n//     return [\n//       {\n//         id: \"1\",\n//         name: \"IPHONE 15 PRO MAX\",\n//         description: \"6.1 INCH\",\n//         costPrice: 180000,\n//         price: 210000,\n//         quantity: 49,\n//         status: \"Active\"\n//       },\n//       {\n//         id: \"2\",\n//         name: \"LAPTOP\",\n//         description: \"14 INCH\",\n//         costPrice: 45000,\n//         price: 50000,\n//         quantity: 55,\n//         status: \"Active\"\n//       },\n//       {\n//         id: \"3\",\n//         name: \"AIR PODS\",\n//         description: \"BOOSTER\",\n//         costPrice: 5000,\n//         price: 8000,\n//         quantity: 14,\n//         status: \"Active\"\n//       },\n//       {\n//         id: \"4\",\n//         name: \"LED\",\n//         description: \"40 INCH\",\n//         costPrice: 75000,\n//         price: 90000,\n//         quantity: 37,\n//         status: \"Active\"\n//       }\n//     ];\n//   },\n\n//   transformVendors(apiVendors, allPOData) {\n//     return apiVendors.map(vendor => {\n//       // Extract vendor details from complex API structure\n//       const vendorDetails = vendor.individuals && vendor.individuals.length > 0 \n//         ? vendor.individuals[0] \n//         : vendor.organizations && vendor.organizations.length > 0 \n//           ? vendor.organizations[0] \n//           : null;\n\n//       const contactInfo = vendorDetails?.contactMediums?.[0]?.mediumCharacteristics?.[0] || {};\n\n//       // Get ALL purchase orders for this vendor\n//       const vendorPOs = allPOData.filter(po => \n//         po.vendor_Id === vendor.id || \n//         po.Vendor_Id === vendor.id\n//       );\n\n//       // Calculate total payable from PENDING/PARTIAL purchase orders only (exclude fully applied)\n//       const totalPayable = vendorPOs\n//         .filter(po => {\n//           // Check if all items in PO are applied\n//           const allItemsApplied = po.purchaseOrderItems.every(item => \n//             item.status === 'applied'\n//           );\n//           return !allItemsApplied; // Include if not all items are applied\n//         })\n//         .reduce((sum, po) => {\n//           const poTotal = po.purchaseOrderItems.reduce((itemSum, item) => \n//             itemSum + (item.totalPrice || 0), 0);\n//           return sum + poTotal;\n//         }, 0);\n\n//       // Overdue amount = total payable from pending/partial orders\n//       const overdueAmount = totalPayable;\n\n//       // Total number of purchase orders for this vendor\n//       const billCount = vendorPOs.length;\n\n//       return {\n//         id: vendor.id,\n//         name: vendorDetails?.fullName || vendorDetails?.tradingName || `Vendor ${vendor.id}`,\n//         email: contactInfo.emailAddress || 'No email provided',\n//         phone: contactInfo.number || 'No phone provided',\n//         address: `${contactInfo.street1 || ''} ${contactInfo.city || ''} ${contactInfo.country || ''}`.trim() || 'No address provided',\n//         vendorType: vendorType.individuals||vendorType.organizations, // Remove the business category logic - use API type directly\n\n//         paymentTerms: vendorType === 'Organization' ? 45 : 30,\n//         totalPayable: totalPayable,\n//         overdueAmount: overdueAmount,\n//         lastPayment: 'No payments',\n\n//         accountBalance: totalPayable,\n//         billCount: billCount,\n//         avgPaymentDays: 30,\n//         status: vendor.status || 'active',\n//         type: vendorType  // Use the correctly determined type\n//       };\n//     });\n//   }\n// };\n\n// src/services/apApiService.js\n\n// API Configuration for Accounts Payable\nconst API_PURCHASE_ORDERS = 'https://api-pos.hulmsolutions.com/POS/accounting2/31fc8df0-61db-41e5-bb67-070fde367ea1/PurchaseOrderManagement/purchaseOrdersWithoutDetails';\nconst API_VENDORS = 'https://api-pos.hulmsolutions.com/POS/accounting2/31fc8df0-61db-41e5-bb67-070fde367ea1/VendorManagement/vendors';\nconst API_PRODUCTS = 'https://api-pos.hulmsolutions.com/POS/accounting2/31fc8df0-61db-41e5-bb67-070fde367ea1/products?status=All&start=0&size=200';\n\n// Replace with your actual Bearer token\nconst BEARER_TOKEN = 'your-bearer-token-here';\nconst apiHeaders = {\n  'Authorization': `Bearer ${BEARER_TOKEN}`,\n  'Content-Type': 'application/json'\n};\nexport const apApiService = {\n  async fetchProducts() {\n    const response = await fetch(API_PRODUCTS, {\n      method: 'GET',\n      headers: apiHeaders\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  },\n  async fetchPurchaseOrders() {\n    const response = await fetch(API_PURCHASE_ORDERS, {\n      method: 'GET',\n      headers: apiHeaders\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  },\n  async fetchVendors() {\n    const response = await fetch(API_VENDORS, {\n      method: 'GET',\n      headers: apiHeaders\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  },\n  transformVendors(apiVendors, allPOData) {\n    return apiVendors.map(vendor => {\n      // Pick correct details block depending on type\n      let vendorDetails = null;\n      if (vendor.type === 'Individual') {\n        vendorDetails = vendor.individuals && vendor.individuals.length > 0 ? vendor.individuals[0] : null;\n      } else if (vendor.type === 'Organization') {\n        vendorDetails = vendor.organizations && vendor.organizations.length > 0 ? vendor.organizations[0] : null;\n      }\n      if (!vendorDetails) {\n        console.warn(`No details found for vendor ${vendor.id}`);\n        return null;\n      }\n\n      // Contact info (first available)\n      const contactInfo = vendorDetails.contactMediums && vendorDetails.contactMediums.length > 0 ? vendorDetails.contactMediums[0].mediumCharacteristics[0] : {};\n\n      // All purchase orders for this vendor\n      const vendorPOs = allPOData.filter(po => po.vendor_Id === vendor.id || po.Vendor_Id === vendor.id);\n\n      // Calculate payable only for non-fully-applied POs\n      const totalPayable = vendorPOs.filter(po => !po.purchaseOrderItems.every(item => item.status === 'applied')).reduce((sum, po) => {\n        const poTotal = po.purchaseOrderItems.reduce((itemSum, item) => itemSum + (item.totalPrice || 0), 0);\n        return sum + poTotal;\n      }, 0);\n      const overdueAmount = totalPayable;\n      const billCount = vendorPOs.length;\n\n      // 🔑 Correct naming logic\n      let vendorName = `Vendor ${vendor.id}`;\n      if (vendor.type === 'Individual') {\n        vendorName = vendorDetails.fullName || vendorName;\n      } else if (vendor.type === 'Organization') {\n        vendorName = vendorDetails.tradingName || vendorDetails.legalName || vendorName;\n      }\n      return {\n        id: vendor.id,\n        name: vendorName,\n        email: contactInfo.emailAddress || 'No email provided',\n        phone: contactInfo.number || 'No phone provided',\n        address: `${contactInfo.street1 || ''} ${contactInfo.city || ''} ${contactInfo.country || ''}`.trim() || 'No address provided',\n        vendorType: vendor.type,\n        paymentTerms: vendor.type === 'Organization' ? 45 : 30,\n        totalPayable,\n        overdueAmount,\n        lastPayment: 'No payments',\n        accountBalance: totalPayable,\n        billCount,\n        avgPaymentDays: 30,\n        status: vendor.status || 'active',\n        type: vendor.type\n      };\n    }).filter(v => v !== null); // skip bad vendors\n  }\n};","map":{"version":3,"names":["API_PURCHASE_ORDERS","API_VENDORS","API_PRODUCTS","BEARER_TOKEN","apiHeaders","apApiService","fetchProducts","response","fetch","method","headers","ok","Error","status","json","fetchPurchaseOrders","fetchVendors","transformVendors","apiVendors","allPOData","map","vendor","vendorDetails","type","individuals","length","organizations","console","warn","id","contactInfo","contactMediums","mediumCharacteristics","vendorPOs","filter","po","vendor_Id","Vendor_Id","totalPayable","purchaseOrderItems","every","item","reduce","sum","poTotal","itemSum","totalPrice","overdueAmount","billCount","vendorName","fullName","tradingName","legalName","name","email","emailAddress","phone","number","address","street1","city","country","trim","vendorType","paymentTerms","lastPayment","accountBalance","avgPaymentDays","v"],"sources":["C:/Users/Logic-Unit/my-account/src/services/apApiService.jsx"],"sourcesContent":["// // src/services/apApiService.js\r\n\r\n// // API Configuration for Accounts Payable\r\n// const API_PURCHASE_ORDERS = 'https://api-pos.hulmsolutions.com/POS/accounting2/31fc8df0-61db-41e5-bb67-070fde367ea1/PurchaseOrderManagement/purchaseOrdersWithoutDetails';\r\n// const API_VENDORS = 'https://api-pos.hulmsolutions.com/POS/accounting2/31fc8df0-61db-41e5-bb67-070fde367ea1/VendorManagement/vendors';\r\n// const API_PRODUCTS = 'https://api-pos.hulmsolutions.com/POS/accounting2/31fc8df0-61db-41e5-bb67-070fde367ea1/products?status=All&start=0&size=200';\r\n\r\n// // Replace with your actual Bearer token\r\n// const BEARER_TOKEN = 'your-bearer-token-here';\r\n\r\n// const apiHeaders = {\r\n//   'Authorization': `Bearer ${BEARER_TOKEN}`,\r\n//   'Content-Type': 'application/json',\r\n// };\r\n\r\n// export const apApiService = {\r\n//   async fetchProducts() {\r\n//     const response = await fetch(API_PRODUCTS, {\r\n//       method: 'GET',\r\n//       headers: apiHeaders,\r\n//     });\r\n    \r\n//     if (!response.ok) {\r\n//       throw new Error(`HTTP error! status: ${response.status}`);\r\n//     }\r\n    \r\n//     return await response.json();\r\n//   },\r\n\r\n//   async fetchPurchaseOrders() {\r\n//     const response = await fetch(API_PURCHASE_ORDERS, {\r\n//       method: 'GET',\r\n//       headers: apiHeaders,\r\n//     });\r\n    \r\n//     if (!response.ok) {\r\n//       throw new Error(`HTTP error! status: ${response.status}`);\r\n//     }\r\n    \r\n//     return await response.json();\r\n//   },\r\n\r\n//   async fetchVendors() {\r\n//     const response = await fetch(API_VENDORS, {\r\n//       method: 'GET',\r\n//       headers: apiHeaders,\r\n//     });\r\n    \r\n//     if (!response.ok) {\r\n//       throw new Error(`HTTP error! status: ${response.status}`);\r\n//     }\r\n    \r\n//     return await response.json();\r\n//   },\r\n\r\n//   getSampleProducts() {\r\n//     return [\r\n//       {\r\n//         id: \"1\",\r\n//         name: \"IPHONE 15 PRO MAX\",\r\n//         description: \"6.1 INCH\",\r\n//         costPrice: 180000,\r\n//         price: 210000,\r\n//         quantity: 49,\r\n//         status: \"Active\"\r\n//       },\r\n//       {\r\n//         id: \"2\",\r\n//         name: \"LAPTOP\",\r\n//         description: \"14 INCH\",\r\n//         costPrice: 45000,\r\n//         price: 50000,\r\n//         quantity: 55,\r\n//         status: \"Active\"\r\n//       },\r\n//       {\r\n//         id: \"3\",\r\n//         name: \"AIR PODS\",\r\n//         description: \"BOOSTER\",\r\n//         costPrice: 5000,\r\n//         price: 8000,\r\n//         quantity: 14,\r\n//         status: \"Active\"\r\n//       },\r\n//       {\r\n//         id: \"4\",\r\n//         name: \"LED\",\r\n//         description: \"40 INCH\",\r\n//         costPrice: 75000,\r\n//         price: 90000,\r\n//         quantity: 37,\r\n//         status: \"Active\"\r\n//       }\r\n//     ];\r\n//   },\r\n\r\n//   transformVendors(apiVendors, allPOData) {\r\n//     return apiVendors.map(vendor => {\r\n//       // Extract vendor details from complex API structure\r\n//       const vendorDetails = vendor.individuals && vendor.individuals.length > 0 \r\n//         ? vendor.individuals[0] \r\n//         : vendor.organizations && vendor.organizations.length > 0 \r\n//           ? vendor.organizations[0] \r\n//           : null;\r\n      \r\n//       const contactInfo = vendorDetails?.contactMediums?.[0]?.mediumCharacteristics?.[0] || {};\r\n      \r\n//       // Get ALL purchase orders for this vendor\r\n//       const vendorPOs = allPOData.filter(po => \r\n//         po.vendor_Id === vendor.id || \r\n//         po.Vendor_Id === vendor.id\r\n//       );\r\n      \r\n//       // Calculate total payable from PENDING/PARTIAL purchase orders only (exclude fully applied)\r\n//       const totalPayable = vendorPOs\r\n//         .filter(po => {\r\n//           // Check if all items in PO are applied\r\n//           const allItemsApplied = po.purchaseOrderItems.every(item => \r\n//             item.status === 'applied'\r\n//           );\r\n//           return !allItemsApplied; // Include if not all items are applied\r\n//         })\r\n//         .reduce((sum, po) => {\r\n//           const poTotal = po.purchaseOrderItems.reduce((itemSum, item) => \r\n//             itemSum + (item.totalPrice || 0), 0);\r\n//           return sum + poTotal;\r\n//         }, 0);\r\n      \r\n//       // Overdue amount = total payable from pending/partial orders\r\n//       const overdueAmount = totalPayable;\r\n      \r\n//       // Total number of purchase orders for this vendor\r\n//       const billCount = vendorPOs.length;\r\n      \r\n//       // Determine vendor type based on spending pattern\r\n//       let vendorType = 'supplies';\r\n//       const totalSpentFromPOs = vendorPOs.reduce((sum, po) => {\r\n//         const poTotal = po.purchaseOrderItems.reduce((itemSum, item) => \r\n//           itemSum + (item.totalPrice || 0), 0);\r\n//         return sum + poTotal;\r\n//       }, 0);\r\n      \r\n//       if (totalSpentFromPOs > 5000000) {\r\n//         vendorType = 'equipment';\r\n//       } else if (totalSpentFromPOs > 1000000) {\r\n//         vendorType = 'supplies';\r\n//       } else {\r\n//         vendorType = 'office';\r\n//       }\r\n      \r\n//       // Set credit limit based on vendor type\r\n//       let creditLimit = 500000; // Default\r\n//       if (vendorType === 'equipment') {\r\n//         creditLimit = 2000000;\r\n//       } else if (vendorType === 'supplies') {\r\n//         creditLimit = 1000000;\r\n//       }\r\n      \r\n//       // Determine credit status based on payable amount\r\n//       let creditStatus = 'good';\r\n//       if (totalPayable === 0) {\r\n//         creditStatus = 'excellent';\r\n//       } else if (totalPayable > creditLimit * 0.9) {\r\n//         creditStatus = 'hold';\r\n//       } else if (totalPayable > creditLimit * 0.7) {\r\n//         creditStatus = 'watch';\r\n//       }\r\n\r\n//       return {\r\n//         id: vendor.id,\r\n//         name: vendorDetails?.fullName || vendorDetails?.name || `Vendor ${vendor.id}`,\r\n//         email: contactInfo.emailAddress || 'No email provided',\r\n//         phone: contactInfo.number || 'No phone provided',\r\n//         address: `${contactInfo.street1 || ''} ${contactInfo.city || ''} ${contactInfo.country || ''}`.trim() || 'No address provided',\r\n//         vendorType: vendorType,\r\n//         creditLimit: creditLimit,\r\n//         paymentTerms: vendorType === 'equipment' ? 45 : (vendorType === 'supplies' ? 30 : 15),\r\n//         totalPayable: totalPayable,\r\n//         overdueAmount: overdueAmount,\r\n//         lastPayment: 'No payments',\r\n//         creditStatus: creditStatus,\r\n//         accountBalance: totalPayable,\r\n//         billCount: billCount,\r\n//         avgPaymentDays: 30,\r\n//         status: vendor.status || 'active',\r\n//         type: vendor.type || 'Individual'\r\n//       };\r\n//     });\r\n//   }\r\n// };\r\n\r\n// // src/services/apApiService.js\r\n\r\n// // API Configuration for Accounts Payable\r\n// const API_PURCHASE_ORDERS = 'https://api-pos.hulmsolutions.com/POS/accounting2/31fc8df0-61db-41e5-bb67-070fde367ea1/PurchaseOrderManagement/purchaseOrdersWithoutDetails';\r\n// const API_VENDORS = 'https://api-pos.hulmsolutions.com/POS/accounting2/31fc8df0-61db-41e5-bb67-070fde367ea1/VendorManagement/vendors';\r\n// const API_PRODUCTS = 'https://api-pos.hulmsolutions.com/POS/accounting2/31fc8df0-61db-41e5-bb67-070fde367ea1/products?status=All&start=0&size=200';\r\n\r\n// // Replace with your actual Bearer token\r\n// const BEARER_TOKEN = 'your-bearer-token-here';\r\n\r\n// const apiHeaders = {\r\n//   'Authorization': `Bearer ${BEARER_TOKEN}`,\r\n//   'Content-Type': 'application/json',\r\n// };\r\n\r\n// export const apApiService = {\r\n//   async fetchProducts() {\r\n//     const response = await fetch(API_PRODUCTS, {\r\n//       method: 'GET',\r\n//       headers: apiHeaders,\r\n//     });\r\n    \r\n//     if (!response.ok) {\r\n//       throw new Error(`HTTP error! status: ${response.status}`);\r\n//     }\r\n    \r\n//     return await response.json();\r\n//   },\r\n\r\n//   async fetchPurchaseOrders() {\r\n//     const response = await fetch(API_PURCHASE_ORDERS, {\r\n//       method: 'GET',\r\n//       headers: apiHeaders,\r\n//     });\r\n    \r\n//     if (!response.ok) {\r\n//       throw new Error(`HTTP error! status: ${response.status}`);\r\n//     }\r\n    \r\n//     return await response.json();\r\n//   },\r\n\r\n//   async fetchVendors() {\r\n//     const response = await fetch(API_VENDORS, {\r\n//       method: 'GET',\r\n//       headers: apiHeaders,\r\n//     });\r\n    \r\n//     if (!response.ok) {\r\n//       throw new Error(`HTTP error! status: ${response.status}`);\r\n//     }\r\n    \r\n//     return await response.json();\r\n//   },\r\n\r\n//   getSampleProducts() {\r\n//     return [\r\n//       {\r\n//         id: \"1\",\r\n//         name: \"IPHONE 15 PRO MAX\",\r\n//         description: \"6.1 INCH\",\r\n//         costPrice: 180000,\r\n//         price: 210000,\r\n//         quantity: 49,\r\n//         status: \"Active\"\r\n//       },\r\n//       {\r\n//         id: \"2\",\r\n//         name: \"LAPTOP\",\r\n//         description: \"14 INCH\",\r\n//         costPrice: 45000,\r\n//         price: 50000,\r\n//         quantity: 55,\r\n//         status: \"Active\"\r\n//       },\r\n//       {\r\n//         id: \"3\",\r\n//         name: \"AIR PODS\",\r\n//         description: \"BOOSTER\",\r\n//         costPrice: 5000,\r\n//         price: 8000,\r\n//         quantity: 14,\r\n//         status: \"Active\"\r\n//       },\r\n//       {\r\n//         id: \"4\",\r\n//         name: \"LED\",\r\n//         description: \"40 INCH\",\r\n//         costPrice: 75000,\r\n//         price: 90000,\r\n//         quantity: 37,\r\n//         status: \"Active\"\r\n//       }\r\n//     ];\r\n//   },\r\n\r\n//   transformVendors(apiVendors, allPOData) {\r\n//     return apiVendors.map(vendor => {\r\n//       // Extract vendor details from complex API structure\r\n//       const vendorDetails = vendor.individuals && vendor.individuals.length > 0 \r\n//         ? vendor.individuals[0] \r\n//         : vendor.organizations && vendor.organizations.length > 0 \r\n//           ? vendor.organizations[0] \r\n//           : null;\r\n      \r\n//       const contactInfo = vendorDetails?.contactMediums?.[0]?.mediumCharacteristics?.[0] || {};\r\n      \r\n//       // Get ALL purchase orders for this vendor\r\n//       const vendorPOs = allPOData.filter(po => \r\n//         po.vendor_Id === vendor.id || \r\n//         po.Vendor_Id === vendor.id\r\n//       );\r\n      \r\n//       // Calculate total payable from PENDING/PARTIAL purchase orders only (exclude fully applied)\r\n//       const totalPayable = vendorPOs\r\n//         .filter(po => {\r\n//           // Check if all items in PO are applied\r\n//           const allItemsApplied = po.purchaseOrderItems.every(item => \r\n//             item.status === 'applied'\r\n//           );\r\n//           return !allItemsApplied; // Include if not all items are applied\r\n//         })\r\n//         .reduce((sum, po) => {\r\n//           const poTotal = po.purchaseOrderItems.reduce((itemSum, item) => \r\n//             itemSum + (item.totalPrice || 0), 0);\r\n//           return sum + poTotal;\r\n//         }, 0);\r\n      \r\n//       // Overdue amount = total payable from pending/partial orders\r\n//       const overdueAmount = totalPayable;\r\n      \r\n//       // Total number of purchase orders for this vendor\r\n//       const billCount = vendorPOs.length;\r\n      \r\n//       return {\r\n//         id: vendor.id,\r\n//         name: vendorDetails?.fullName || vendorDetails?.tradingName || `Vendor ${vendor.id}`,\r\n//         email: contactInfo.emailAddress || 'No email provided',\r\n//         phone: contactInfo.number || 'No phone provided',\r\n//         address: `${contactInfo.street1 || ''} ${contactInfo.city || ''} ${contactInfo.country || ''}`.trim() || 'No address provided',\r\n//         vendorType: vendorType.individuals||vendorType.organizations, // Remove the business category logic - use API type directly\r\n       \r\n//         paymentTerms: vendorType === 'Organization' ? 45 : 30,\r\n//         totalPayable: totalPayable,\r\n//         overdueAmount: overdueAmount,\r\n//         lastPayment: 'No payments',\r\n    \r\n//         accountBalance: totalPayable,\r\n//         billCount: billCount,\r\n//         avgPaymentDays: 30,\r\n//         status: vendor.status || 'active',\r\n//         type: vendorType  // Use the correctly determined type\r\n//       };\r\n//     });\r\n//   }\r\n// };\r\n\r\n// src/services/apApiService.js\r\n\r\n// API Configuration for Accounts Payable\r\nconst API_PURCHASE_ORDERS = 'https://api-pos.hulmsolutions.com/POS/accounting2/31fc8df0-61db-41e5-bb67-070fde367ea1/PurchaseOrderManagement/purchaseOrdersWithoutDetails';\r\nconst API_VENDORS = 'https://api-pos.hulmsolutions.com/POS/accounting2/31fc8df0-61db-41e5-bb67-070fde367ea1/VendorManagement/vendors';\r\nconst API_PRODUCTS = 'https://api-pos.hulmsolutions.com/POS/accounting2/31fc8df0-61db-41e5-bb67-070fde367ea1/products?status=All&start=0&size=200';\r\n\r\n// Replace with your actual Bearer token\r\nconst BEARER_TOKEN = 'your-bearer-token-here';\r\n\r\nconst apiHeaders = {\r\n  'Authorization': `Bearer ${BEARER_TOKEN}`,\r\n  'Content-Type': 'application/json',\r\n};\r\n\r\nexport const apApiService = {\r\n  async fetchProducts() {\r\n    const response = await fetch(API_PRODUCTS, {\r\n      method: 'GET',\r\n      headers: apiHeaders,\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n    \r\n    return await response.json();\r\n  },\r\n\r\n  async fetchPurchaseOrders() {\r\n    const response = await fetch(API_PURCHASE_ORDERS, {\r\n      method: 'GET',\r\n      headers: apiHeaders,\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n    \r\n    return await response.json();\r\n  },\r\n\r\n  async fetchVendors() {\r\n    const response = await fetch(API_VENDORS, {\r\n      method: 'GET',\r\n      headers: apiHeaders,\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n    \r\n    return await response.json();\r\n  },\r\n\r\n transformVendors(apiVendors, allPOData) {\r\n  return apiVendors\r\n    .map(vendor => {\r\n      // Pick correct details block depending on type\r\n      let vendorDetails = null;\r\n      if (vendor.type === 'Individual') {\r\n        vendorDetails = vendor.individuals && vendor.individuals.length > 0 ? vendor.individuals[0] : null;\r\n      } else if (vendor.type === 'Organization') {\r\n        vendorDetails = vendor.organizations && vendor.organizations.length > 0 ? vendor.organizations[0] : null;\r\n      }\r\n\r\n      if (!vendorDetails) {\r\n        console.warn(`No details found for vendor ${vendor.id}`);\r\n        return null;\r\n      }\r\n\r\n      // Contact info (first available)\r\n      const contactInfo = vendorDetails.contactMediums && vendorDetails.contactMediums.length > 0\r\n        ? vendorDetails.contactMediums[0].mediumCharacteristics[0]\r\n        : {};\r\n\r\n      // All purchase orders for this vendor\r\n      const vendorPOs = allPOData.filter(po => \r\n        po.vendor_Id === vendor.id || \r\n        po.Vendor_Id === vendor.id\r\n      );\r\n\r\n      // Calculate payable only for non-fully-applied POs\r\n      const totalPayable = vendorPOs\r\n        .filter(po => !po.purchaseOrderItems.every(item => item.status === 'applied'))\r\n        .reduce((sum, po) => {\r\n          const poTotal = po.purchaseOrderItems.reduce((itemSum, item) => \r\n            itemSum + (item.totalPrice || 0), 0);\r\n          return sum + poTotal;\r\n        }, 0);\r\n\r\n      const overdueAmount = totalPayable;\r\n      const billCount = vendorPOs.length;\r\n\r\n      // 🔑 Correct naming logic\r\n      let vendorName = `Vendor ${vendor.id}`;\r\n      if (vendor.type === 'Individual') {\r\n        vendorName = vendorDetails.fullName || vendorName;\r\n      } else if (vendor.type === 'Organization') {\r\n        vendorName = vendorDetails.tradingName || vendorDetails.legalName || vendorName;\r\n      }\r\n\r\n      return {\r\n        id: vendor.id,\r\n        name: vendorName,\r\n        email: contactInfo.emailAddress || 'No email provided',\r\n        phone: contactInfo.number || 'No phone provided',\r\n        address: `${contactInfo.street1 || ''} ${contactInfo.city || ''} ${contactInfo.country || ''}`.trim() || 'No address provided',\r\n        vendorType: vendor.type,\r\n        paymentTerms: vendor.type === 'Organization' ? 45 : 30,\r\n        totalPayable,\r\n        overdueAmount,\r\n        lastPayment: 'No payments',\r\n        accountBalance: totalPayable,\r\n        billCount,\r\n        avgPaymentDays: 30,\r\n        status: vendor.status || 'active',\r\n        type: vendor.type\r\n      };\r\n    })\r\n    .filter(v => v !== null); // skip bad vendors\r\n}\r\n\r\n\r\n};"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}