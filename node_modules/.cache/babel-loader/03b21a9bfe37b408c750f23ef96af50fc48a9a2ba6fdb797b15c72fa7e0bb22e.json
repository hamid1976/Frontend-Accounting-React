{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Logic-Unit\\\\my-account\\\\src\\\\components\\\\AccountsReceivable\\\\APPaymentsTab.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import { formatCurrency, formatDate } from './AccountsReceivableUtils/formatters';\n\n// const APPaymentsTab = ({ allSalesData, getCustomerName }) => {\n//   const [payments, setPayments] = useState([]);\n\n//   useEffect(() => {\n//     // Load payments from localStorage\n//     const storedPayments = JSON.parse(localStorage.getItem('payments') || '[]');\n//     setPayments(storedPayments);\n//   }, []);\n\n//   // Get paid orders from both API and localStorage\n//   const paidOrders = allSalesData?.filter(order => order.paid && order.fulfilled) || [];\n\n//   // Combine API orders with localStorage payments\n//   const allPayments = [...paidOrders, ...payments];\n\n//   return (\n//     <div>\n//       <div className=\"bg-white border border-gray-200 rounded-lg overflow-hidden\">\n//         <div className=\"px-6 py-4 border-b border-gray-200\">\n//           <h3 className=\"text-lg font-semibold text-gray-900\">Payment History</h3>\n//         </div>\n//         <div className=\"overflow-x-auto\">\n//           <table className=\"w-full\">\n//             <thead className=\"bg-gray-50\">\n//               <tr>\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                   Invoice ID\n//                 </th>\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                   Customer\n//                 </th>\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                   Date\n//                 </th>\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                   Amount\n//                 </th>\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                   Payment Method\n//                 </th>\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                   Status\n//                 </th>\n//               </tr>\n//             </thead>\n//             <tbody className=\"bg-white divide-y divide-gray-200\">\n//               {allPayments.map((payment, index) => (\n//                 <tr key={payment.id || index} className=\"hover:bg-gray-50\">\n//                   <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\n//                     #{payment.invoiceId || payment.orderId}\n//                   </td>\n//                   <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n//                     {payment.customerId ? getCustomerName(payment.customerId) || 'Unknown / Guest' : 'N/A'}\n//                   </td>\n//                   <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n//                     {formatDate(payment.date || payment.createdAt)}\n//                   </td>\n//                   <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n//                     {formatCurrency(payment.amount || payment.total)}\n//                   </td>\n//                   <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n//                     {payment.paymentMethod || 'N/A'}\n//                   </td>\n//                   <td className=\"px-6 py-4 whitespace-nowrap\">\n//                     <span className=\"px-2 py-1 text-xs font-medium rounded-full bg-green-100 text-green-800\">\n//                       {payment.status || 'Paid'}\n//                     </span>\n//                   </td>\n//                 </tr>\n//               ))}\n\n//               {allPayments.length === 0 && (\n//                 <tr>\n//                   <td colSpan={6} className=\"px-6 py-4 text-center text-gray-500\">\n//                     No payments found.\n//                   </td>\n//                 </tr>\n//               )}\n//             </tbody>\n//           </table>\n//         </div>\n\n//         {allPayments.length === 0 && (\n//           <div className=\"text-center py-12\">\n//             <div className=\"text-gray-500 text-lg\">No payments found</div>\n//             <p className=\"text-gray-400 mt-2\">All orders are currently unpaid</p>\n//           </div>\n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default APPaymentsTab;\n\n// import React, { useState, useEffect } from 'react';\n// import { formatCurrency, formatDate } from './AccountsReceivableUtils/formatters';\n// import { RefreshCw, CheckCircle, Clock, XCircle } from 'lucide-react';\n\n// const APPaymentsTab = ({ allSalesData, getCustomerName }) => {\n//   const [payments, setPayments] = useState([]);\n//   const [refreshing, setRefreshing] = useState(false);\n\n//   const loadPayments = () => {\n//     // Load payments from localStorage\n//     const storedPayments = JSON.parse(localStorage.getItem('payments') || '[]');\n\n//     // Sort payments by date (newest first)\n//     const sortedPayments = storedPayments.sort((a, b) => \n//       new Date(b.date || b.createdAt) - new Date(a.date || a.createdAt)\n//     );\n\n//     setPayments(sortedPayments);\n//   };\n\n//   useEffect(() => {\n//     loadPayments();\n\n//     // Set up a listener for storage changes to sync across tabs\n//     const handleStorageChange = (e) => {\n//       if (e.key === 'payments') {\n//         loadPayments();\n//       }\n//     };\n\n//     window.addEventListener('storage', handleStorageChange);\n//     return () => window.removeEventListener('storage', handleStorageChange);\n//   }, []);\n\n//   const refreshData = () => {\n//     setRefreshing(true);\n//     loadPayments();\n//     setTimeout(() => setRefreshing(false), 500);\n//   };\n\n//   // Get paid orders from API data\n//   const paidOrders = allSalesData?.filter(order => order.paid && order.fulfilled) || [];\n//   console.log('paidOrders',paidOrders)\n//   // Combine with manual payment records\n//   const combinedPayments = [...payments];\n\n//   // Add API orders that don't have manual payment records\n//   paidOrders.forEach(order => {\n//     const hasPaymentRecord = payments.some(p => p.invoiceId === order.orderId);\n//     if (!hasPaymentRecord) {\n//       combinedPayments.push({\n//         id: `API-${order.orderId}`,\n//         invoiceId: order.orderId,\n//         customerId: order.customerId,\n//         date: order.paymentDate || order.createdAt,\n//         amount: order.total,\n//         paymentMethod: order.paymentMethod || 'Not specified',\n//         status: 'paid',\n//         source: 'api'\n//       });\n//     }\n//   });\n\n//   const getStatusIcon = (status) => {\n//     switch (status) {\n//       case 'paid':\n//       case 'completed':\n//         return <CheckCircle size={16} className=\"text-green-600\" />;\n//       case 'partial':\n//         return <Clock size={16} className=\"text-orange-600\" />;\n//       case 'failed':\n//         return <XCircle size={16} className=\"text-red-600\" />;\n//       default:\n//         return null;\n//     }\n//   };\n\n//   const getStatusBadge = (payment) => {\n//     const status = payment.status || 'paid';\n//     const statusStyles = {\n//       paid: 'bg-green-100 text-green-800',\n//       completed: 'bg-green-100 text-green-800',\n//       partial: 'bg-orange-100 text-orange-800',\n//       pending: 'bg-yellow-100 text-yellow-800',\n//       failed: 'bg-red-100 text-red-800'\n//     };\n\n//     return (\n//       <span className={`inline-flex items-center gap-1 px-2 py-1 text-xs font-medium rounded-full ${statusStyles[status] || 'bg-gray-100 text-gray-800'}`}>\n//         {getStatusIcon(status)}\n//         {status.charAt(0).toUpperCase() + status.slice(1)}\n//         {payment.remainingAmount > 0 && (\n//           <span className=\"ml-1 text-xs\">\n//             ({formatCurrency(payment.remainingAmount)} remaining)\n//           </span>\n//         )}\n//       </span>\n//     );\n//   };\n\n//   const getPaymentMethodLabel = (method) => {\n//     const methodLabels = {\n//       cash: 'Cash',\n//       check: 'Check',\n//       bank_transfer: 'Bank Transfer',\n//       credit_card: 'Credit Card',\n//       debit_card: 'Debit Card',\n//       online: 'Online Payment',\n//       eft: 'Electronic Funds Transfer'\n//     };\n//     return methodLabels[method] || method || 'Not specified';\n//   };\n\n//   return (\n//     <div>\n//       <div className=\"bg-white border border-gray-200 rounded-lg overflow-hidden\">\n//         <div className=\"px-6 py-4 border-b border-gray-200\">\n//           <div className=\"flex items-center justify-between\">\n//             <h3 className=\"text-lg font-semibold text-gray-900\">Payment History</h3>\n//             <button\n//               onClick={refreshData}\n//               className=\"flex items-center gap-2 px-3 py-1 text-sm text-gray-600 hover:text-gray-900 hover:bg-gray-100 rounded transition-colors\"\n//             >\n//               <RefreshCw size={16} className={refreshing ? 'animate-spin' : ''} />\n//               Refresh\n//             </button>\n//           </div>\n//         </div>\n\n//         <div className=\"overflow-x-auto\">\n//           <table className=\"w-full\">\n//             <thead className=\"bg-gray-50\">\n//               <tr>\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                   Invoice ID\n//                 </th>\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                   Customer\n//                 </th>\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                   Payment Date\n//                 </th>\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                   Amount\n//                 </th>\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                   Payment Method\n//                 </th>\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                   Status\n//                 </th>\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                   Memo\n//                 </th>\n//               </tr>\n//             </thead>\n//             <tbody className=\"bg-white divide-y divide-gray-200\">\n//               {combinedPayments.map((payment) => (\n//                 <tr key={payment.id} className=\"hover:bg-gray-50\">\n//                   <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\n//                     {payment.invoiceId || payment.orderId}\n//                   </td>\n//                   <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n//                     {payment.customerId \n//                       ? getCustomerName(payment.customerId) || 'Unknown Customer'\n//                       : 'Walk-in Customer'}\n//                   </td>\n//                   <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n//                     {formatDate(payment.date || payment.createdAt)}\n//                   </td>\n//                   <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n//                     <span className=\"font-medium\">{formatCurrency(payment.amount || payment.total)}</span>\n//                   </td>\n//                   <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n//                     {getPaymentMethodLabel(payment.paymentMethod)}\n//                   </td>\n//                   <td className=\"px-6 py-4 whitespace-nowrap\">\n//                     {getStatusBadge(payment)}\n//                   </td>\n//                   <td className=\"px-6 py-4 text-sm text-gray-600\">\n//                     <div className=\"max-w-xs truncate\">\n//                       {payment.memo || '-'}\n//                     </div>\n//                   </td>\n//                 </tr>\n//               ))}\n\n//               {combinedPayments.length === 0 && (\n//                 <tr>\n//                   <td colSpan={7} className=\"px-6 py-12 text-center\">\n//                     <div className=\"flex flex-col items-center justify-center text-gray-500\">\n//                       <XCircle size={48} className=\"mb-3 text-gray-300\" />\n//                       <p className=\"text-lg font-medium\">No payments recorded</p>\n//                       <p className=\"text-sm mt-1\">Payment records will appear here once processed</p>\n//                     </div>\n//                   </td>\n//                 </tr>\n//               )}\n//             </tbody>\n//           </table>\n//         </div>\n\n//         {/* Summary Footer */}\n//         {combinedPayments.length > 0 && (\n//           <div className=\"px-6 py-4 bg-gray-50 border-t border-gray-200\">\n//             <div className=\"flex items-center justify-between text-sm\">\n//               <div className=\"text-gray-600\">\n//                 Showing {combinedPayments.length} payment{combinedPayments.length !== 1 ? 's' : ''}\n//               </div>\n//               <div className=\"font-medium text-gray-900\">\n//                 Total: {formatCurrency(\n//                   combinedPayments.reduce((sum, p) => sum + (p.amount || p.total || 0), 0)\n//                 )}\n//               </div>\n//             </div>\n//           </div>\n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default APPaymentsTab;\n\nimport React, { useState, useEffect } from 'react';\nimport { formatCurrency, formatDate } from './AccountsReceivableUtils/formatters';\nimport { RefreshCw, CheckCircle, XCircle } from 'lucide-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst APPaymentsTab = ({\n  allSalesData,\n  getCustomerName\n}) => {\n  _s();\n  const [payments, setPayments] = useState([]);\n  const [refreshing, setRefreshing] = useState(false);\n  const loadPayments = () => {\n    // Load payments from localStorage\n    const storedPayments = JSON.parse(localStorage.getItem('payments') || '[]');\n\n    // Sort payments by date (newest first)\n    const sortedPayments = storedPayments.sort((a, b) => new Date(b.date || b.createdAt) - new Date(a.date || a.createdAt));\n    setPayments(sortedPayments);\n  };\n  useEffect(() => {\n    loadPayments();\n\n    // Listen for storage changes across tabs\n    const handleStorageChange = e => {\n      if (e.key === 'payments') {\n        loadPayments();\n      }\n    };\n    window.addEventListener('storage', handleStorageChange);\n    return () => window.removeEventListener('storage', handleStorageChange);\n  }, []);\n  const refreshData = () => {\n    setRefreshing(true);\n    loadPayments();\n    setTimeout(() => setRefreshing(false), 500);\n  };\n\n  // ✅ Get paid orders from API\n  const paidOrders = (allSalesData === null || allSalesData === void 0 ? void 0 : allSalesData.filter(order => order.paid && order.fulfilled)) || [];\n\n  // ✅ Combine with manual/localStorage payments\n  const combinedPayments = [...payments];\n  paidOrders.forEach(order => {\n    const hasPaymentRecord = payments.some(p => p.invoiceId === order.orderId);\n    if (!hasPaymentRecord) {\n      combinedPayments.push({\n        id: `API-${order.orderId}`,\n        invoiceId: order.orderId,\n        customerId: order.customerId || null,\n        // ✅ ensure customerId always included\n        date: order.paymentDate || order.createdAt,\n        amount: order.total,\n        paymentMethod: order.paymentMethod || 'Not specified',\n        status: 'paid',\n        // ✅ only \"paid\" for API-synced orders\n        source: 'api'\n      });\n    }\n  });\n  const getStatusBadge = payment => {\n    const status = payment.status === 'unpaid' ? 'unpaid' : 'paid'; // ✅ normalize status\n    const statusStyles = {\n      paid: 'bg-green-100 text-green-800',\n      unpaid: 'bg-red-100 text-red-800'\n    };\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      className: `inline-flex items-center gap-1 px-2 py-1 text-xs font-medium rounded-full ${statusStyles[status] || 'bg-gray-100 text-gray-800'}`,\n      children: [status === 'paid' ? /*#__PURE__*/_jsxDEV(CheckCircle, {\n        size: 16,\n        className: \"text-green-600\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 403,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(XCircle, {\n        size: 16,\n        className: \"text-red-600\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 405,\n        columnNumber: 11\n      }, this), status.charAt(0).toUpperCase() + status.slice(1)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 397,\n      columnNumber: 7\n    }, this);\n  };\n  const getPaymentMethodLabel = method => {\n    const methodLabels = {\n      cash: 'Cash',\n      check: 'Check',\n      bank_transfer: 'Bank Transfer',\n      credit_card: 'Credit Card',\n      debit_card: 'Debit Card',\n      online: 'Online Payment',\n      eft: 'Electronic Funds Transfer'\n    };\n    return methodLabels[method] || method || 'Not specified';\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-white border border-gray-200 rounded-lg overflow-hidden\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"px-6 py-4 border-b border-gray-200\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center justify-between\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"text-lg font-semibold text-gray-900\",\n            children: \"Payment History\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 430,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: refreshData,\n            className: \"flex items-center gap-2 px-3 py-1 text-sm text-gray-600 hover:text-gray-900 hover:bg-gray-100 rounded transition-colors\",\n            children: [/*#__PURE__*/_jsxDEV(RefreshCw, {\n              size: 16,\n              className: refreshing ? 'animate-spin' : ''\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 435,\n              columnNumber: 15\n            }, this), \"Refresh\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 431,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 429,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 428,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"overflow-x-auto\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"w-full\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            className: \"bg-gray-50\",\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\",\n                children: \"Invoice ID\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 445,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\",\n                children: \"Customer\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 448,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\",\n                children: \"Payment Date\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 451,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\",\n                children: \"Amount\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 454,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\",\n                children: \"Payment Method\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 457,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\",\n                children: \"Status\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 460,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\",\n                children: \"Memo\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 463,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 444,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 443,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            className: \"bg-white divide-y divide-gray-200\",\n            children: [combinedPayments.map(payment => /*#__PURE__*/_jsxDEV(\"tr\", {\n              className: \"hover:bg-gray-50\",\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\",\n                children: payment.invoiceId || payment.orderId\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 471,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"px-6 py-4 whitespace-nowrap text-sm text-gray-900\",\n                children: payment.customerId ? getCustomerName(payment.customerId) || 'Unknown Customer' : 'Walk-in Customer'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 474,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"px-6 py-4 whitespace-nowrap text-sm text-gray-900\",\n                children: formatDate(payment.date || payment.createdAt)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 479,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"px-6 py-4 whitespace-nowrap text-sm text-gray-900\",\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"font-medium\",\n                  children: formatCurrency(payment.amount || payment.total)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 483,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 482,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"px-6 py-4 whitespace-nowrap text-sm text-gray-900\",\n                children: getPaymentMethodLabel(payment.paymentMethod)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 485,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"px-6 py-4 whitespace-nowrap\",\n                children: getStatusBadge(payment)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 488,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"px-6 py-4 text-sm text-gray-600\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"max-w-xs truncate\",\n                  children: payment.memo || '-'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 490,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 489,\n                columnNumber: 19\n              }, this)]\n            }, payment.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 470,\n              columnNumber: 17\n            }, this)), combinedPayments.length === 0 && /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: /*#__PURE__*/_jsxDEV(\"td\", {\n                colSpan: 7,\n                className: \"px-6 py-12 text-center\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"flex flex-col items-center justify-center text-gray-500\",\n                  children: [/*#__PURE__*/_jsxDEV(XCircle, {\n                    size: 48,\n                    className: \"mb-3 text-gray-300\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 499,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    className: \"text-lg font-medium\",\n                    children: \"No payments recorded\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 500,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    className: \"text-sm mt-1\",\n                    children: \"Payment records will appear here once processed\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 501,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 498,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 497,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 496,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 468,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 442,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 441,\n        columnNumber: 9\n      }, this), combinedPayments.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"px-6 py-4 bg-gray-50 border-t border-gray-200\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center justify-between text-sm\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-gray-600\",\n            children: [\"Showing \", combinedPayments.length, \" payment\", combinedPayments.length !== 1 ? 's' : '']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 516,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"font-medium text-gray-900\",\n            children: [\"Total:\", ' ', formatCurrency(combinedPayments.reduce((sum, p) => sum + (p.amount || p.total || 0), 0))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 520,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 515,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 514,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 427,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 426,\n    columnNumber: 5\n  }, this);\n};\n_s(APPaymentsTab, \"9wWoZIXiLssGYSPLvvyXNUvSE5M=\");\n_c = APPaymentsTab;\nexport default APPaymentsTab;\nvar _c;\n$RefreshReg$(_c, \"APPaymentsTab\");","map":{"version":3,"names":["React","useState","useEffect","formatCurrency","formatDate","RefreshCw","CheckCircle","XCircle","jsxDEV","_jsxDEV","APPaymentsTab","allSalesData","getCustomerName","_s","payments","setPayments","refreshing","setRefreshing","loadPayments","storedPayments","JSON","parse","localStorage","getItem","sortedPayments","sort","a","b","Date","date","createdAt","handleStorageChange","e","key","window","addEventListener","removeEventListener","refreshData","setTimeout","paidOrders","filter","order","paid","fulfilled","combinedPayments","forEach","hasPaymentRecord","some","p","invoiceId","orderId","push","id","customerId","paymentDate","amount","total","paymentMethod","status","source","getStatusBadge","payment","statusStyles","unpaid","className","children","size","fileName","_jsxFileName","lineNumber","columnNumber","charAt","toUpperCase","slice","getPaymentMethodLabel","method","methodLabels","cash","check","bank_transfer","credit_card","debit_card","online","eft","onClick","map","memo","length","colSpan","reduce","sum","_c","$RefreshReg$"],"sources":["C:/Users/Logic-Unit/my-account/src/components/AccountsReceivable/APPaymentsTab.jsx"],"sourcesContent":["\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import { formatCurrency, formatDate } from './AccountsReceivableUtils/formatters';\r\n\r\n// const APPaymentsTab = ({ allSalesData, getCustomerName }) => {\r\n//   const [payments, setPayments] = useState([]);\r\n\r\n//   useEffect(() => {\r\n//     // Load payments from localStorage\r\n//     const storedPayments = JSON.parse(localStorage.getItem('payments') || '[]');\r\n//     setPayments(storedPayments);\r\n//   }, []);\r\n\r\n//   // Get paid orders from both API and localStorage\r\n//   const paidOrders = allSalesData?.filter(order => order.paid && order.fulfilled) || [];\r\n  \r\n//   // Combine API orders with localStorage payments\r\n//   const allPayments = [...paidOrders, ...payments];\r\n\r\n//   return (\r\n//     <div>\r\n//       <div className=\"bg-white border border-gray-200 rounded-lg overflow-hidden\">\r\n//         <div className=\"px-6 py-4 border-b border-gray-200\">\r\n//           <h3 className=\"text-lg font-semibold text-gray-900\">Payment History</h3>\r\n//         </div>\r\n//         <div className=\"overflow-x-auto\">\r\n//           <table className=\"w-full\">\r\n//             <thead className=\"bg-gray-50\">\r\n//               <tr>\r\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                   Invoice ID\r\n//                 </th>\r\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                   Customer\r\n//                 </th>\r\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                   Date\r\n//                 </th>\r\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                   Amount\r\n//                 </th>\r\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                   Payment Method\r\n//                 </th>\r\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                   Status\r\n//                 </th>\r\n//               </tr>\r\n//             </thead>\r\n//             <tbody className=\"bg-white divide-y divide-gray-200\">\r\n//               {allPayments.map((payment, index) => (\r\n//                 <tr key={payment.id || index} className=\"hover:bg-gray-50\">\r\n//                   <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\r\n//                     #{payment.invoiceId || payment.orderId}\r\n//                   </td>\r\n//                   <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\r\n//                     {payment.customerId ? getCustomerName(payment.customerId) || 'Unknown / Guest' : 'N/A'}\r\n//                   </td>\r\n//                   <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\r\n//                     {formatDate(payment.date || payment.createdAt)}\r\n//                   </td>\r\n//                   <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\r\n//                     {formatCurrency(payment.amount || payment.total)}\r\n//                   </td>\r\n//                   <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\r\n//                     {payment.paymentMethod || 'N/A'}\r\n//                   </td>\r\n//                   <td className=\"px-6 py-4 whitespace-nowrap\">\r\n//                     <span className=\"px-2 py-1 text-xs font-medium rounded-full bg-green-100 text-green-800\">\r\n//                       {payment.status || 'Paid'}\r\n//                     </span>\r\n//                   </td>\r\n//                 </tr>\r\n//               ))}\r\n\r\n//               {allPayments.length === 0 && (\r\n//                 <tr>\r\n//                   <td colSpan={6} className=\"px-6 py-4 text-center text-gray-500\">\r\n//                     No payments found.\r\n//                   </td>\r\n//                 </tr>\r\n//               )}\r\n//             </tbody>\r\n//           </table>\r\n//         </div>\r\n        \r\n//         {allPayments.length === 0 && (\r\n//           <div className=\"text-center py-12\">\r\n//             <div className=\"text-gray-500 text-lg\">No payments found</div>\r\n//             <p className=\"text-gray-400 mt-2\">All orders are currently unpaid</p>\r\n//           </div>\r\n//         )}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default APPaymentsTab;\r\n\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import { formatCurrency, formatDate } from './AccountsReceivableUtils/formatters';\r\n// import { RefreshCw, CheckCircle, Clock, XCircle } from 'lucide-react';\r\n\r\n// const APPaymentsTab = ({ allSalesData, getCustomerName }) => {\r\n//   const [payments, setPayments] = useState([]);\r\n//   const [refreshing, setRefreshing] = useState(false);\r\n\r\n//   const loadPayments = () => {\r\n//     // Load payments from localStorage\r\n//     const storedPayments = JSON.parse(localStorage.getItem('payments') || '[]');\r\n    \r\n//     // Sort payments by date (newest first)\r\n//     const sortedPayments = storedPayments.sort((a, b) => \r\n//       new Date(b.date || b.createdAt) - new Date(a.date || a.createdAt)\r\n//     );\r\n    \r\n//     setPayments(sortedPayments);\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     loadPayments();\r\n    \r\n//     // Set up a listener for storage changes to sync across tabs\r\n//     const handleStorageChange = (e) => {\r\n//       if (e.key === 'payments') {\r\n//         loadPayments();\r\n//       }\r\n//     };\r\n    \r\n//     window.addEventListener('storage', handleStorageChange);\r\n//     return () => window.removeEventListener('storage', handleStorageChange);\r\n//   }, []);\r\n\r\n//   const refreshData = () => {\r\n//     setRefreshing(true);\r\n//     loadPayments();\r\n//     setTimeout(() => setRefreshing(false), 500);\r\n//   };\r\n\r\n//   // Get paid orders from API data\r\n//   const paidOrders = allSalesData?.filter(order => order.paid && order.fulfilled) || [];\r\n//   console.log('paidOrders',paidOrders)\r\n//   // Combine with manual payment records\r\n//   const combinedPayments = [...payments];\r\n  \r\n//   // Add API orders that don't have manual payment records\r\n//   paidOrders.forEach(order => {\r\n//     const hasPaymentRecord = payments.some(p => p.invoiceId === order.orderId);\r\n//     if (!hasPaymentRecord) {\r\n//       combinedPayments.push({\r\n//         id: `API-${order.orderId}`,\r\n//         invoiceId: order.orderId,\r\n//         customerId: order.customerId,\r\n//         date: order.paymentDate || order.createdAt,\r\n//         amount: order.total,\r\n//         paymentMethod: order.paymentMethod || 'Not specified',\r\n//         status: 'paid',\r\n//         source: 'api'\r\n//       });\r\n//     }\r\n//   });\r\n\r\n//   const getStatusIcon = (status) => {\r\n//     switch (status) {\r\n//       case 'paid':\r\n//       case 'completed':\r\n//         return <CheckCircle size={16} className=\"text-green-600\" />;\r\n//       case 'partial':\r\n//         return <Clock size={16} className=\"text-orange-600\" />;\r\n//       case 'failed':\r\n//         return <XCircle size={16} className=\"text-red-600\" />;\r\n//       default:\r\n//         return null;\r\n//     }\r\n//   };\r\n\r\n//   const getStatusBadge = (payment) => {\r\n//     const status = payment.status || 'paid';\r\n//     const statusStyles = {\r\n//       paid: 'bg-green-100 text-green-800',\r\n//       completed: 'bg-green-100 text-green-800',\r\n//       partial: 'bg-orange-100 text-orange-800',\r\n//       pending: 'bg-yellow-100 text-yellow-800',\r\n//       failed: 'bg-red-100 text-red-800'\r\n//     };\r\n\r\n//     return (\r\n//       <span className={`inline-flex items-center gap-1 px-2 py-1 text-xs font-medium rounded-full ${statusStyles[status] || 'bg-gray-100 text-gray-800'}`}>\r\n//         {getStatusIcon(status)}\r\n//         {status.charAt(0).toUpperCase() + status.slice(1)}\r\n//         {payment.remainingAmount > 0 && (\r\n//           <span className=\"ml-1 text-xs\">\r\n//             ({formatCurrency(payment.remainingAmount)} remaining)\r\n//           </span>\r\n//         )}\r\n//       </span>\r\n//     );\r\n//   };\r\n\r\n//   const getPaymentMethodLabel = (method) => {\r\n//     const methodLabels = {\r\n//       cash: 'Cash',\r\n//       check: 'Check',\r\n//       bank_transfer: 'Bank Transfer',\r\n//       credit_card: 'Credit Card',\r\n//       debit_card: 'Debit Card',\r\n//       online: 'Online Payment',\r\n//       eft: 'Electronic Funds Transfer'\r\n//     };\r\n//     return methodLabels[method] || method || 'Not specified';\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <div className=\"bg-white border border-gray-200 rounded-lg overflow-hidden\">\r\n//         <div className=\"px-6 py-4 border-b border-gray-200\">\r\n//           <div className=\"flex items-center justify-between\">\r\n//             <h3 className=\"text-lg font-semibold text-gray-900\">Payment History</h3>\r\n//             <button\r\n//               onClick={refreshData}\r\n//               className=\"flex items-center gap-2 px-3 py-1 text-sm text-gray-600 hover:text-gray-900 hover:bg-gray-100 rounded transition-colors\"\r\n//             >\r\n//               <RefreshCw size={16} className={refreshing ? 'animate-spin' : ''} />\r\n//               Refresh\r\n//             </button>\r\n//           </div>\r\n//         </div>\r\n        \r\n//         <div className=\"overflow-x-auto\">\r\n//           <table className=\"w-full\">\r\n//             <thead className=\"bg-gray-50\">\r\n//               <tr>\r\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                   Invoice ID\r\n//                 </th>\r\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                   Customer\r\n//                 </th>\r\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                   Payment Date\r\n//                 </th>\r\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                   Amount\r\n//                 </th>\r\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                   Payment Method\r\n//                 </th>\r\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                   Status\r\n//                 </th>\r\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                   Memo\r\n//                 </th>\r\n//               </tr>\r\n//             </thead>\r\n//             <tbody className=\"bg-white divide-y divide-gray-200\">\r\n//               {combinedPayments.map((payment) => (\r\n//                 <tr key={payment.id} className=\"hover:bg-gray-50\">\r\n//                   <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\r\n//                     {payment.invoiceId || payment.orderId}\r\n//                   </td>\r\n//                   <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\r\n//                     {payment.customerId \r\n//                       ? getCustomerName(payment.customerId) || 'Unknown Customer'\r\n//                       : 'Walk-in Customer'}\r\n//                   </td>\r\n//                   <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\r\n//                     {formatDate(payment.date || payment.createdAt)}\r\n//                   </td>\r\n//                   <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\r\n//                     <span className=\"font-medium\">{formatCurrency(payment.amount || payment.total)}</span>\r\n//                   </td>\r\n//                   <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\r\n//                     {getPaymentMethodLabel(payment.paymentMethod)}\r\n//                   </td>\r\n//                   <td className=\"px-6 py-4 whitespace-nowrap\">\r\n//                     {getStatusBadge(payment)}\r\n//                   </td>\r\n//                   <td className=\"px-6 py-4 text-sm text-gray-600\">\r\n//                     <div className=\"max-w-xs truncate\">\r\n//                       {payment.memo || '-'}\r\n//                     </div>\r\n//                   </td>\r\n//                 </tr>\r\n//               ))}\r\n\r\n//               {combinedPayments.length === 0 && (\r\n//                 <tr>\r\n//                   <td colSpan={7} className=\"px-6 py-12 text-center\">\r\n//                     <div className=\"flex flex-col items-center justify-center text-gray-500\">\r\n//                       <XCircle size={48} className=\"mb-3 text-gray-300\" />\r\n//                       <p className=\"text-lg font-medium\">No payments recorded</p>\r\n//                       <p className=\"text-sm mt-1\">Payment records will appear here once processed</p>\r\n//                     </div>\r\n//                   </td>\r\n//                 </tr>\r\n//               )}\r\n//             </tbody>\r\n//           </table>\r\n//         </div>\r\n\r\n//         {/* Summary Footer */}\r\n//         {combinedPayments.length > 0 && (\r\n//           <div className=\"px-6 py-4 bg-gray-50 border-t border-gray-200\">\r\n//             <div className=\"flex items-center justify-between text-sm\">\r\n//               <div className=\"text-gray-600\">\r\n//                 Showing {combinedPayments.length} payment{combinedPayments.length !== 1 ? 's' : ''}\r\n//               </div>\r\n//               <div className=\"font-medium text-gray-900\">\r\n//                 Total: {formatCurrency(\r\n//                   combinedPayments.reduce((sum, p) => sum + (p.amount || p.total || 0), 0)\r\n//                 )}\r\n//               </div>\r\n//             </div>\r\n//           </div>\r\n//         )}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default APPaymentsTab;\r\n\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { formatCurrency, formatDate } from './AccountsReceivableUtils/formatters';\r\nimport { RefreshCw, CheckCircle, XCircle } from 'lucide-react';\r\n\r\nconst APPaymentsTab = ({ allSalesData, getCustomerName }) => {\r\n  const [payments, setPayments] = useState([]);\r\n  const [refreshing, setRefreshing] = useState(false);\r\n\r\n  const loadPayments = () => {\r\n    // Load payments from localStorage\r\n    const storedPayments = JSON.parse(localStorage.getItem('payments') || '[]');\r\n\r\n    // Sort payments by date (newest first)\r\n    const sortedPayments = storedPayments.sort(\r\n      (a, b) => new Date(b.date || b.createdAt) - new Date(a.date || a.createdAt)\r\n    );\r\n\r\n    setPayments(sortedPayments);\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadPayments();\r\n\r\n    // Listen for storage changes across tabs\r\n    const handleStorageChange = (e) => {\r\n      if (e.key === 'payments') {\r\n        loadPayments();\r\n      }\r\n    };\r\n\r\n    window.addEventListener('storage', handleStorageChange);\r\n    return () => window.removeEventListener('storage', handleStorageChange);\r\n  }, []);\r\n\r\n  const refreshData = () => {\r\n    setRefreshing(true);\r\n    loadPayments();\r\n    setTimeout(() => setRefreshing(false), 500);\r\n  };\r\n\r\n  // ✅ Get paid orders from API\r\n  const paidOrders = allSalesData?.filter((order) => order.paid && order.fulfilled) || [];\r\n\r\n  // ✅ Combine with manual/localStorage payments\r\n  const combinedPayments = [...payments];\r\n\r\n  paidOrders.forEach((order) => {\r\n    const hasPaymentRecord = payments.some((p) => p.invoiceId === order.orderId);\r\n    if (!hasPaymentRecord) {\r\n      combinedPayments.push({\r\n        id: `API-${order.orderId}`,\r\n        invoiceId: order.orderId,\r\n        customerId: order.customerId || null, // ✅ ensure customerId always included\r\n        date: order.paymentDate || order.createdAt,\r\n        amount: order.total,\r\n        paymentMethod: order.paymentMethod || 'Not specified',\r\n        status: 'paid', // ✅ only \"paid\" for API-synced orders\r\n        source: 'api',\r\n      });\r\n    }\r\n  });\r\n\r\n  const getStatusBadge = (payment) => {\r\n    const status = payment.status === 'unpaid' ? 'unpaid' : 'paid'; // ✅ normalize status\r\n    const statusStyles = {\r\n      paid: 'bg-green-100 text-green-800',\r\n      unpaid: 'bg-red-100 text-red-800',\r\n    };\r\n\r\n    return (\r\n      <span\r\n        className={`inline-flex items-center gap-1 px-2 py-1 text-xs font-medium rounded-full ${\r\n          statusStyles[status] || 'bg-gray-100 text-gray-800'\r\n        }`}\r\n      >\r\n        {status === 'paid' ? (\r\n          <CheckCircle size={16} className=\"text-green-600\" />\r\n        ) : (\r\n          <XCircle size={16} className=\"text-red-600\" />\r\n        )}\r\n        {status.charAt(0).toUpperCase() + status.slice(1)}\r\n      </span>\r\n    );\r\n  };\r\n\r\n  const getPaymentMethodLabel = (method) => {\r\n    const methodLabels = {\r\n      cash: 'Cash',\r\n      check: 'Check',\r\n      bank_transfer: 'Bank Transfer',\r\n      credit_card: 'Credit Card',\r\n      debit_card: 'Debit Card',\r\n      online: 'Online Payment',\r\n      eft: 'Electronic Funds Transfer',\r\n    };\r\n    return methodLabels[method] || method || 'Not specified';\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"bg-white border border-gray-200 rounded-lg overflow-hidden\">\r\n        <div className=\"px-6 py-4 border-b border-gray-200\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <h3 className=\"text-lg font-semibold text-gray-900\">Payment History</h3>\r\n            <button\r\n              onClick={refreshData}\r\n              className=\"flex items-center gap-2 px-3 py-1 text-sm text-gray-600 hover:text-gray-900 hover:bg-gray-100 rounded transition-colors\"\r\n            >\r\n              <RefreshCw size={16} className={refreshing ? 'animate-spin' : ''} />\r\n              Refresh\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"overflow-x-auto\">\r\n          <table className=\"w-full\">\r\n            <thead className=\"bg-gray-50\">\r\n              <tr>\r\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                  Invoice ID\r\n                </th>\r\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                  Customer\r\n                </th>\r\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                  Payment Date\r\n                </th>\r\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                  Amount\r\n                </th>\r\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                  Payment Method\r\n                </th>\r\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                  Status\r\n                </th>\r\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                  Memo\r\n                </th>\r\n              </tr>\r\n            </thead>\r\n            <tbody className=\"bg-white divide-y divide-gray-200\">\r\n              {combinedPayments.map((payment) => (\r\n                <tr key={payment.id} className=\"hover:bg-gray-50\">\r\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\r\n                    {payment.invoiceId || payment.orderId}\r\n                  </td>\r\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\r\n                    {payment.customerId\r\n                      ? getCustomerName(payment.customerId) || 'Unknown Customer'\r\n                      : 'Walk-in Customer'}\r\n                  </td>\r\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\r\n                    {formatDate(payment.date || payment.createdAt)}\r\n                  </td>\r\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\r\n                    <span className=\"font-medium\">{formatCurrency(payment.amount || payment.total)}</span>\r\n                  </td>\r\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\r\n                    {getPaymentMethodLabel(payment.paymentMethod)}\r\n                  </td>\r\n                  <td className=\"px-6 py-4 whitespace-nowrap\">{getStatusBadge(payment)}</td>\r\n                  <td className=\"px-6 py-4 text-sm text-gray-600\">\r\n                    <div className=\"max-w-xs truncate\">{payment.memo || '-'}</div>\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n\r\n              {combinedPayments.length === 0 && (\r\n                <tr>\r\n                  <td colSpan={7} className=\"px-6 py-12 text-center\">\r\n                    <div className=\"flex flex-col items-center justify-center text-gray-500\">\r\n                      <XCircle size={48} className=\"mb-3 text-gray-300\" />\r\n                      <p className=\"text-lg font-medium\">No payments recorded</p>\r\n                      <p className=\"text-sm mt-1\">\r\n                        Payment records will appear here once processed\r\n                      </p>\r\n                    </div>\r\n                  </td>\r\n                </tr>\r\n              )}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n\r\n        {/* Summary Footer */}\r\n        {combinedPayments.length > 0 && (\r\n          <div className=\"px-6 py-4 bg-gray-50 border-t border-gray-200\">\r\n            <div className=\"flex items-center justify-between text-sm\">\r\n              <div className=\"text-gray-600\">\r\n                Showing {combinedPayments.length} payment\r\n                {combinedPayments.length !== 1 ? 's' : ''}\r\n              </div>\r\n              <div className=\"font-medium text-gray-900\">\r\n                Total:{' '}\r\n                {formatCurrency(\r\n                  combinedPayments.reduce((sum, p) => sum + (p.amount || p.total || 0), 0)\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default APPaymentsTab;\r\n"],"mappings":";;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,cAAc,EAAEC,UAAU,QAAQ,sCAAsC;AACjF,SAASC,SAAS,EAAEC,WAAW,EAAEC,OAAO,QAAQ,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/D,MAAMC,aAAa,GAAGA,CAAC;EAAEC,YAAY;EAAEC;AAAgB,CAAC,KAAK;EAAAC,EAAA;EAC3D,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACe,UAAU,EAAEC,aAAa,CAAC,GAAGhB,QAAQ,CAAC,KAAK,CAAC;EAEnD,MAAMiB,YAAY,GAAGA,CAAA,KAAM;IACzB;IACA,MAAMC,cAAc,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,IAAI,IAAI,CAAC;;IAE3E;IACA,MAAMC,cAAc,GAAGL,cAAc,CAACM,IAAI,CACxC,CAACC,CAAC,EAAEC,CAAC,KAAK,IAAIC,IAAI,CAACD,CAAC,CAACE,IAAI,IAAIF,CAAC,CAACG,SAAS,CAAC,GAAG,IAAIF,IAAI,CAACF,CAAC,CAACG,IAAI,IAAIH,CAAC,CAACI,SAAS,CAC5E,CAAC;IAEDf,WAAW,CAACS,cAAc,CAAC;EAC7B,CAAC;EAEDtB,SAAS,CAAC,MAAM;IACdgB,YAAY,CAAC,CAAC;;IAEd;IACA,MAAMa,mBAAmB,GAAIC,CAAC,IAAK;MACjC,IAAIA,CAAC,CAACC,GAAG,KAAK,UAAU,EAAE;QACxBf,YAAY,CAAC,CAAC;MAChB;IACF,CAAC;IAEDgB,MAAM,CAACC,gBAAgB,CAAC,SAAS,EAAEJ,mBAAmB,CAAC;IACvD,OAAO,MAAMG,MAAM,CAACE,mBAAmB,CAAC,SAAS,EAAEL,mBAAmB,CAAC;EACzE,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMM,WAAW,GAAGA,CAAA,KAAM;IACxBpB,aAAa,CAAC,IAAI,CAAC;IACnBC,YAAY,CAAC,CAAC;IACdoB,UAAU,CAAC,MAAMrB,aAAa,CAAC,KAAK,CAAC,EAAE,GAAG,CAAC;EAC7C,CAAC;;EAED;EACA,MAAMsB,UAAU,GAAG,CAAA5B,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAE6B,MAAM,CAAEC,KAAK,IAAKA,KAAK,CAACC,IAAI,IAAID,KAAK,CAACE,SAAS,CAAC,KAAI,EAAE;;EAEvF;EACA,MAAMC,gBAAgB,GAAG,CAAC,GAAG9B,QAAQ,CAAC;EAEtCyB,UAAU,CAACM,OAAO,CAAEJ,KAAK,IAAK;IAC5B,MAAMK,gBAAgB,GAAGhC,QAAQ,CAACiC,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACC,SAAS,KAAKR,KAAK,CAACS,OAAO,CAAC;IAC5E,IAAI,CAACJ,gBAAgB,EAAE;MACrBF,gBAAgB,CAACO,IAAI,CAAC;QACpBC,EAAE,EAAE,OAAOX,KAAK,CAACS,OAAO,EAAE;QAC1BD,SAAS,EAAER,KAAK,CAACS,OAAO;QACxBG,UAAU,EAAEZ,KAAK,CAACY,UAAU,IAAI,IAAI;QAAE;QACtCxB,IAAI,EAAEY,KAAK,CAACa,WAAW,IAAIb,KAAK,CAACX,SAAS;QAC1CyB,MAAM,EAAEd,KAAK,CAACe,KAAK;QACnBC,aAAa,EAAEhB,KAAK,CAACgB,aAAa,IAAI,eAAe;QACrDC,MAAM,EAAE,MAAM;QAAE;QAChBC,MAAM,EAAE;MACV,CAAC,CAAC;IACJ;EACF,CAAC,CAAC;EAEF,MAAMC,cAAc,GAAIC,OAAO,IAAK;IAClC,MAAMH,MAAM,GAAGG,OAAO,CAACH,MAAM,KAAK,QAAQ,GAAG,QAAQ,GAAG,MAAM,CAAC,CAAC;IAChE,MAAMI,YAAY,GAAG;MACnBpB,IAAI,EAAE,6BAA6B;MACnCqB,MAAM,EAAE;IACV,CAAC;IAED,oBACEtD,OAAA;MACEuD,SAAS,EAAE,6EACTF,YAAY,CAACJ,MAAM,CAAC,IAAI,2BAA2B,EAClD;MAAAO,QAAA,GAEFP,MAAM,KAAK,MAAM,gBAChBjD,OAAA,CAACH,WAAW;QAAC4D,IAAI,EAAE,EAAG;QAACF,SAAS,EAAC;MAAgB;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,gBAEpD7D,OAAA,CAACF,OAAO;QAAC2D,IAAI,EAAE,EAAG;QAACF,SAAS,EAAC;MAAc;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAC9C,EACAZ,MAAM,CAACa,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,GAAGd,MAAM,CAACe,KAAK,CAAC,CAAC,CAAC;IAAA;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7C,CAAC;EAEX,CAAC;EAED,MAAMI,qBAAqB,GAAIC,MAAM,IAAK;IACxC,MAAMC,YAAY,GAAG;MACnBC,IAAI,EAAE,MAAM;MACZC,KAAK,EAAE,OAAO;MACdC,aAAa,EAAE,eAAe;MAC9BC,WAAW,EAAE,aAAa;MAC1BC,UAAU,EAAE,YAAY;MACxBC,MAAM,EAAE,gBAAgB;MACxBC,GAAG,EAAE;IACP,CAAC;IACD,OAAOP,YAAY,CAACD,MAAM,CAAC,IAAIA,MAAM,IAAI,eAAe;EAC1D,CAAC;EAED,oBACElE,OAAA;IAAAwD,QAAA,eACExD,OAAA;MAAKuD,SAAS,EAAC,4DAA4D;MAAAC,QAAA,gBACzExD,OAAA;QAAKuD,SAAS,EAAC,oCAAoC;QAAAC,QAAA,eACjDxD,OAAA;UAAKuD,SAAS,EAAC,mCAAmC;UAAAC,QAAA,gBAChDxD,OAAA;YAAIuD,SAAS,EAAC,qCAAqC;YAAAC,QAAA,EAAC;UAAe;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACxE7D,OAAA;YACE2E,OAAO,EAAE/C,WAAY;YACrB2B,SAAS,EAAC,yHAAyH;YAAAC,QAAA,gBAEnIxD,OAAA,CAACJ,SAAS;cAAC6D,IAAI,EAAE,EAAG;cAACF,SAAS,EAAEhD,UAAU,GAAG,cAAc,GAAG;YAAG;cAAAmD,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,WAEtE;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,eAEN7D,OAAA;QAAKuD,SAAS,EAAC,iBAAiB;QAAAC,QAAA,eAC9BxD,OAAA;UAAOuD,SAAS,EAAC,QAAQ;UAAAC,QAAA,gBACvBxD,OAAA;YAAOuD,SAAS,EAAC,YAAY;YAAAC,QAAA,eAC3BxD,OAAA;cAAAwD,QAAA,gBACExD,OAAA;gBAAIuD,SAAS,EAAC,gFAAgF;gBAAAC,QAAA,EAAC;cAE/F;gBAAAE,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eACL7D,OAAA;gBAAIuD,SAAS,EAAC,gFAAgF;gBAAAC,QAAA,EAAC;cAE/F;gBAAAE,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eACL7D,OAAA;gBAAIuD,SAAS,EAAC,gFAAgF;gBAAAC,QAAA,EAAC;cAE/F;gBAAAE,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eACL7D,OAAA;gBAAIuD,SAAS,EAAC,gFAAgF;gBAAAC,QAAA,EAAC;cAE/F;gBAAAE,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eACL7D,OAAA;gBAAIuD,SAAS,EAAC,gFAAgF;gBAAAC,QAAA,EAAC;cAE/F;gBAAAE,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eACL7D,OAAA;gBAAIuD,SAAS,EAAC,gFAAgF;gBAAAC,QAAA,EAAC;cAE/F;gBAAAE,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eACL7D,OAAA;gBAAIuD,SAAS,EAAC,gFAAgF;gBAAAC,QAAA,EAAC;cAE/F;gBAAAE,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACH;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACA,CAAC,eACR7D,OAAA;YAAOuD,SAAS,EAAC,mCAAmC;YAAAC,QAAA,GACjDrB,gBAAgB,CAACyC,GAAG,CAAExB,OAAO,iBAC5BpD,OAAA;cAAqBuD,SAAS,EAAC,kBAAkB;cAAAC,QAAA,gBAC/CxD,OAAA;gBAAIuD,SAAS,EAAC,+DAA+D;gBAAAC,QAAA,EAC1EJ,OAAO,CAACZ,SAAS,IAAIY,OAAO,CAACX;cAAO;gBAAAiB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACnC,CAAC,eACL7D,OAAA;gBAAIuD,SAAS,EAAC,mDAAmD;gBAAAC,QAAA,EAC9DJ,OAAO,CAACR,UAAU,GACfzC,eAAe,CAACiD,OAAO,CAACR,UAAU,CAAC,IAAI,kBAAkB,GACzD;cAAkB;gBAAAc,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACpB,CAAC,eACL7D,OAAA;gBAAIuD,SAAS,EAAC,mDAAmD;gBAAAC,QAAA,EAC9D7D,UAAU,CAACyD,OAAO,CAAChC,IAAI,IAAIgC,OAAO,CAAC/B,SAAS;cAAC;gBAAAqC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAC5C,CAAC,eACL7D,OAAA;gBAAIuD,SAAS,EAAC,mDAAmD;gBAAAC,QAAA,eAC/DxD,OAAA;kBAAMuD,SAAS,EAAC,aAAa;kBAAAC,QAAA,EAAE9D,cAAc,CAAC0D,OAAO,CAACN,MAAM,IAAIM,OAAO,CAACL,KAAK;gBAAC;kBAAAW,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAO;cAAC;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACpF,CAAC,eACL7D,OAAA;gBAAIuD,SAAS,EAAC,mDAAmD;gBAAAC,QAAA,EAC9DS,qBAAqB,CAACb,OAAO,CAACJ,aAAa;cAAC;gBAAAU,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAC3C,CAAC,eACL7D,OAAA;gBAAIuD,SAAS,EAAC,6BAA6B;gBAAAC,QAAA,EAAEL,cAAc,CAACC,OAAO;cAAC;gBAAAM,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eAC1E7D,OAAA;gBAAIuD,SAAS,EAAC,iCAAiC;gBAAAC,QAAA,eAC7CxD,OAAA;kBAAKuD,SAAS,EAAC,mBAAmB;kBAAAC,QAAA,EAAEJ,OAAO,CAACyB,IAAI,IAAI;gBAAG;kBAAAnB,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAM;cAAC;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAC5D,CAAC;YAAA,GArBET,OAAO,CAACT,EAAE;cAAAe,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAsBf,CACL,CAAC,EAED1B,gBAAgB,CAAC2C,MAAM,KAAK,CAAC,iBAC5B9E,OAAA;cAAAwD,QAAA,eACExD,OAAA;gBAAI+E,OAAO,EAAE,CAAE;gBAACxB,SAAS,EAAC,wBAAwB;gBAAAC,QAAA,eAChDxD,OAAA;kBAAKuD,SAAS,EAAC,yDAAyD;kBAAAC,QAAA,gBACtExD,OAAA,CAACF,OAAO;oBAAC2D,IAAI,EAAE,EAAG;oBAACF,SAAS,EAAC;kBAAoB;oBAAAG,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAE,CAAC,eACpD7D,OAAA;oBAAGuD,SAAS,EAAC,qBAAqB;oBAAAC,QAAA,EAAC;kBAAoB;oBAAAE,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAG,CAAC,eAC3D7D,OAAA;oBAAGuD,SAAS,EAAC,cAAc;oBAAAC,QAAA,EAAC;kBAE5B;oBAAAE,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAG,CAAC;gBAAA;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACD;cAAC;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACJ;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACH,CACL;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACI,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC,EAGL1B,gBAAgB,CAAC2C,MAAM,GAAG,CAAC,iBAC1B9E,OAAA;QAAKuD,SAAS,EAAC,+CAA+C;QAAAC,QAAA,eAC5DxD,OAAA;UAAKuD,SAAS,EAAC,2CAA2C;UAAAC,QAAA,gBACxDxD,OAAA;YAAKuD,SAAS,EAAC,eAAe;YAAAC,QAAA,GAAC,UACrB,EAACrB,gBAAgB,CAAC2C,MAAM,EAAC,UACjC,EAAC3C,gBAAgB,CAAC2C,MAAM,KAAK,CAAC,GAAG,GAAG,GAAG,EAAE;UAAA;YAAApB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACtC,CAAC,eACN7D,OAAA;YAAKuD,SAAS,EAAC,2BAA2B;YAAAC,QAAA,GAAC,QACnC,EAAC,GAAG,EACT9D,cAAc,CACbyC,gBAAgB,CAAC6C,MAAM,CAAC,CAACC,GAAG,EAAE1C,CAAC,KAAK0C,GAAG,IAAI1C,CAAC,CAACO,MAAM,IAAIP,CAAC,CAACQ,KAAK,IAAI,CAAC,CAAC,EAAE,CAAC,CACzE,CAAC;UAAA;YAAAW,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACE,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CACN;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACzD,EAAA,CAzMIH,aAAa;AAAAiF,EAAA,GAAbjF,aAAa;AA2MnB,eAAeA,aAAa;AAAC,IAAAiF,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}