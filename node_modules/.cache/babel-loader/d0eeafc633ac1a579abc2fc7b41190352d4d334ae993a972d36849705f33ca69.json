{"ast":null,"code":"// Calculate AR summary\n// export const calculateARSummary = (customers, allSalesData) => {\n//   const totalAR = customers.reduce((sum, customer) => sum + customer.totalOwed, 0);\n//   const totalOverdue = customers.reduce((sum, customer) => sum + customer.overdueAmount, 0);\n//   const customersWithBalance = customers.filter(customer => customer.totalOwed > 0).length;\n\n//   // Calculate real average days outstanding from actual order data\n//   let totalDaysOutstanding = 0;\n//   let orderCount = 0;\n\n//   if (allSalesData) {\n//     allSalesData.forEach(order => {\n//       // Convert order creation date from \"2025.08.18.10.08.54.569\" to proper date\n//       const orderDateStr = order.createdAt.split('.').slice(0, 3).join('-'); // \"2025-08-18\"\n//       const orderDate = new Date(orderDateStr);\n//       const today = new Date();\n\n//       // Calculate days between order creation and today\n//       const timeDiff = today.getTime() - orderDate.getTime();\n//       const daysDiff = Math.floor(timeDiff / (1000 * 3600 * 24));\n\n//       totalDaysOutstanding += daysDiff;\n//       orderCount++;\n//     });\n//   }\n\n//   const avgDaysOutstanding = orderCount > 0 ? Math.round(totalDaysOutstanding / orderCount) : 0;\n\n//   return {\n//     totalAR,\n//     totalOverdue,\n//     customersWithBalance,\n//     avgDaysOutstanding\n//   };\n// };\n\n// Calculate AR summary\n// Calculate AR summary\nexport const calculateARSummary = (customers, allSalesData) => {\n  let totalAR = 0;\n  let totalOverdue = 0;\n  let totalDaysOutstanding = 0;\n  let orderCount = 0;\n\n  // Count each unpaid order as a separate \"customer with balance\" if it has a customerId or is a guest\n  let customersWithBalance = 0;\n  if (allSalesData && Array.isArray(allSalesData)) {\n    allSalesData.forEach(order => {\n      if (!order.paid) {\n        const orderTotal = order.total || 0;\n        totalAR += orderTotal;\n        if (order.overdueAmount > 0) {\n          totalOverdue += order.overdueAmount;\n        }\n\n        // Treat every unpaid order as a separate \"customer with balance\"\n        customersWithBalance++;\n\n        // Calculate days outstanding\n        const orderDateStr = order.createdAt.split('.').slice(0, 3).join('-'); // \"YYYY-MM-DD\"\n        const orderDate = new Date(orderDateStr);\n        const today = new Date();\n        const daysDiff = Math.floor((today.getTime() - orderDate.getTime()) / (1000 * 3600 * 24));\n        totalDaysOutstanding += daysDiff;\n        orderCount++;\n      }\n    });\n  }\n  const avgDaysOutstanding = orderCount > 0 ? Math.round(totalDaysOutstanding / orderCount) : 0;\n  return {\n    totalAR,\n    totalOverdue,\n    customersWithBalance,\n    avgDaysOutstanding\n  };\n};\n\n// Get aging data\nexport const getAgingData = salesData => {\n  const aging = {\n    current: 0,\n    days30: 0,\n    days60: 0,\n    days90: 0,\n    over90: 0\n  };\n  salesData.forEach(order => {\n    if (order.paid) return;\n    const daysPastDue = order.daysOverdue || 0;\n    if (daysPastDue <= 0) {\n      aging.current += order.total;\n    } else if (daysPastDue <= 30) {\n      aging.days30 += order.total;\n    } else if (daysPastDue <= 60) {\n      aging.days60 += order.total;\n    } else if (daysPastDue <= 90) {\n      aging.days90 += order.total;\n    } else {\n      aging.over90 += order.total;\n    }\n  });\n  return aging;\n};\n\n// Filter customers\nexport const getFilteredCustomers = (customers, filters) => {\n  // First check if we have valid data\n  if (!customers || !Array.isArray(customers)) {\n    return [];\n  }\n\n  // Start by filtering ONLY customers WITH names\n  let filtered = customers.filter(customer => customer && customer.name && typeof customer.name === 'string' && customer.name.trim() !== '');\n\n  // Now apply the rest of the filters to our name-filtered list\n  if (filters && filters.customerType && filters.customerType !== 'all') {\n    filtered = filtered.filter(customer => customer.customerType === filters.customerType);\n  }\n  if (filters && filters.status && filters.status !== 'all') {\n    filtered = filtered.filter(customer => {\n      if (filters.status === 'overdue') return customer.overdueAmount > 0;\n      if (filters.status === 'current') return customer.totalOwed > 0 && customer.overdueAmount === 0;\n      if (filters.status === 'paid_up') return customer.totalOwed === 0;\n      return true;\n    });\n  }\n  if (filters && filters.searchTerm) {\n    const term = filters.searchTerm.toLowerCase();\n    filtered = filtered.filter(customer => customer.name.toLowerCase().includes(term) || customer.email && customer.email.toLowerCase().includes(term) || customer.id && customer.id.toLowerCase().includes(term));\n  }\n  console.log(`Filtered to ${filtered.length} customers with valid names`);\n  return filtered;\n};","map":{"version":3,"names":["calculateARSummary","customers","allSalesData","totalAR","totalOverdue","totalDaysOutstanding","orderCount","customersWithBalance","Array","isArray","forEach","order","paid","orderTotal","total","overdueAmount","orderDateStr","createdAt","split","slice","join","orderDate","Date","today","daysDiff","Math","floor","getTime","avgDaysOutstanding","round","getAgingData","salesData","aging","current","days30","days60","days90","over90","daysPastDue","daysOverdue","getFilteredCustomers","filters","filtered","filter","customer","name","trim","customerType","status","totalOwed","searchTerm","term","toLowerCase","includes","email","id","console","log","length"],"sources":["C:/Users/Logic-Unit/my-account/src/Utility/apCalculations.js"],"sourcesContent":["// Calculate AR summary\r\n// export const calculateARSummary = (customers, allSalesData) => {\r\n//   const totalAR = customers.reduce((sum, customer) => sum + customer.totalOwed, 0);\r\n//   const totalOverdue = customers.reduce((sum, customer) => sum + customer.overdueAmount, 0);\r\n//   const customersWithBalance = customers.filter(customer => customer.totalOwed > 0).length;\r\n\r\n  \r\n//   // Calculate real average days outstanding from actual order data\r\n//   let totalDaysOutstanding = 0;\r\n//   let orderCount = 0;\r\n  \r\n//   if (allSalesData) {\r\n//     allSalesData.forEach(order => {\r\n//       // Convert order creation date from \"2025.08.18.10.08.54.569\" to proper date\r\n//       const orderDateStr = order.createdAt.split('.').slice(0, 3).join('-'); // \"2025-08-18\"\r\n//       const orderDate = new Date(orderDateStr);\r\n//       const today = new Date();\r\n      \r\n//       // Calculate days between order creation and today\r\n//       const timeDiff = today.getTime() - orderDate.getTime();\r\n//       const daysDiff = Math.floor(timeDiff / (1000 * 3600 * 24));\r\n      \r\n//       totalDaysOutstanding += daysDiff;\r\n//       orderCount++;\r\n//     });\r\n//   }\r\n  \r\n//   const avgDaysOutstanding = orderCount > 0 ? Math.round(totalDaysOutstanding / orderCount) : 0;\r\n\r\n//   return {\r\n//     totalAR,\r\n//     totalOverdue,\r\n//     customersWithBalance,\r\n//     avgDaysOutstanding\r\n//   };\r\n// };\r\n\r\n// Calculate AR summary\r\n// Calculate AR summary\r\nexport const calculateARSummary = (customers, allSalesData) => {\r\n  let totalAR = 0;\r\n  let totalOverdue = 0;\r\n  let totalDaysOutstanding = 0;\r\n  let orderCount = 0;\r\n\r\n  // Count each unpaid order as a separate \"customer with balance\" if it has a customerId or is a guest\r\n  let customersWithBalance = 0;\r\n\r\n  if (allSalesData && Array.isArray(allSalesData)) {\r\n    allSalesData.forEach(order => {\r\n      if (!order.paid) {\r\n        const orderTotal = order.total || 0;\r\n        totalAR += orderTotal;\r\n\r\n        if (order.overdueAmount > 0) {\r\n          totalOverdue += order.overdueAmount;\r\n        }\r\n\r\n        // Treat every unpaid order as a separate \"customer with balance\"\r\n        customersWithBalance++;\r\n\r\n        // Calculate days outstanding\r\n        const orderDateStr = order.createdAt.split('.').slice(0, 3).join('-'); // \"YYYY-MM-DD\"\r\n        const orderDate = new Date(orderDateStr);\r\n        const today = new Date();\r\n        const daysDiff = Math.floor((today.getTime() - orderDate.getTime()) / (1000 * 3600 * 24));\r\n        totalDaysOutstanding += daysDiff;\r\n        orderCount++;\r\n      }\r\n    });\r\n  }\r\n\r\n  const avgDaysOutstanding = orderCount > 0 ? Math.round(totalDaysOutstanding / orderCount) : 0;\r\n\r\n  return {\r\n    totalAR,\r\n    totalOverdue,\r\n    customersWithBalance,\r\n    avgDaysOutstanding\r\n  };\r\n};\r\n\r\n\r\n// Get aging data\r\nexport const getAgingData = (salesData) => {\r\n  const aging = {\r\n    current: 0,\r\n    days30: 0,\r\n    days60: 0,\r\n    days90: 0,\r\n    over90: 0\r\n  };\r\n\r\n  salesData.forEach(order => {\r\n    if (order.paid) return;\r\n    \r\n    const daysPastDue = order.daysOverdue || 0;\r\n    \r\n    if (daysPastDue <= 0) {\r\n      aging.current += order.total;\r\n    } else if (daysPastDue <= 30) {\r\n      aging.days30 += order.total;\r\n    } else if (daysPastDue <= 60) {\r\n      aging.days60 += order.total;\r\n    } else if (daysPastDue <= 90) {\r\n      aging.days90 += order.total;\r\n    } else {\r\n      aging.over90 += order.total;\r\n    }\r\n  });\r\n\r\n  return aging;\r\n};\r\n\r\n// Filter customers\r\nexport const getFilteredCustomers = (customers, filters) => {\r\n  // First check if we have valid data\r\n  if (!customers || !Array.isArray(customers)) {\r\n    return [];\r\n  }\r\n  \r\n  // Start by filtering ONLY customers WITH names\r\n  let filtered = customers.filter(customer => \r\n    customer && \r\n    customer.name && \r\n    typeof customer.name === 'string' && \r\n    customer.name.trim() !== ''\r\n  );\r\n\r\n  // Now apply the rest of the filters to our name-filtered list\r\n  if (filters && filters.customerType && filters.customerType !== 'all') {\r\n    filtered = filtered.filter(customer => customer.customerType === filters.customerType);\r\n  }\r\n\r\n  if (filters && filters.status && filters.status !== 'all') {\r\n    filtered = filtered.filter(customer => {\r\n      if (filters.status === 'overdue') return customer.overdueAmount > 0;\r\n      if (filters.status === 'current') return customer.totalOwed > 0 && customer.overdueAmount === 0;\r\n      if (filters.status === 'paid_up') return customer.totalOwed === 0;\r\n      return true;\r\n    });\r\n  }\r\n\r\n  if (filters && filters.searchTerm) {\r\n    const term = filters.searchTerm.toLowerCase();\r\n    filtered = filtered.filter(customer =>\r\n      customer.name.toLowerCase().includes(term) ||\r\n      (customer.email && customer.email.toLowerCase().includes(term)) ||\r\n      (customer.id && customer.id.toLowerCase().includes(term))\r\n    );\r\n  }\r\n\r\n  console.log(`Filtered to ${filtered.length} customers with valid names`);\r\n  return filtered;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}