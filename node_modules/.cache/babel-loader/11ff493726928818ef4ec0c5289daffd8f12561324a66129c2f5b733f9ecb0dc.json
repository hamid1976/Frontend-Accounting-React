{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Logic-Unit\\\\my-account\\\\src\\\\pages\\\\AccountsPayable.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import { \n//   Users, \n//   DollarSign, \n//   CreditCard, \n//   AlertTriangle, \n//   Clock, \n//   Plus, \n//   Search, \n//   Filter, \n//   Eye, \n//   Edit, \n//   Download,\n//   CheckCircle,\n//   XCircle,\n//   Calendar,\n//   FileText,\n//   TrendingDown,\n//   Mail,\n//   Phone,\n//   Loader,\n//   RefreshCw,\n//   Package\n// } from 'lucide-react';\n\n// // API Configuration for Accounts Payable\n// const API_PURCHASE_ORDERS = 'https://api-pos.hulmsolutions.com/POS/accounting2/31fc8df0-61db-41e5-bb67-070fde367ea1/PurchaseOrderManagement/purchaseOrdersWithoutDetails';\n// const API_VENDORS = 'https://api-pos.hulmsolutions.com/POS/accounting2/31fc8df0-61db-41e5-bb67-070fde367ea1/VendorManagement/vendors';\n// const API_PRODUCTS = 'https://api-pos.hulmsolutions.com/POS/accounting2/31fc8df0-61db-41e5-bb67-070fde367ea1/products?status=All&start=0&size=200';\n\n// // Replace with your actual Bearer token\n// const BEARER_TOKEN = 'your-bearer-token-here';\n\n// const AccountsPayable = () => {\n//   // State management\n//   const [purchaseOrders, setPurchaseOrders] = useState({ loading: false, data: [], error: null });\n//   const [vendors, setVendors] = useState({ loading: false, data: [], error: null });\n//   const [products, setProducts] = useState({ loading: false, data: [], error: null });\n//   const [activeTab, setActiveTab] = useState('overview');\n//   const [selectedVendor, setSelectedVendor] = useState(null);\n//   const [selectedPO, setSelectedPO] = useState(null);\n//   const [viewBill, setViewBill] = useState(null);\n//   const [filters, setFilters] = useState({\n//     vendorType: 'all',\n//     status: 'all',\n\n//     searchTerm: ''\n//   });\n\n// const createVendorPOMapping = (purchaseOrders, vendors) => {\n//   console.log('Starting createVendorPOMapping function');\n//   console.log('Input vendors:', vendors);\n//   console.log('Input purchaseOrders:', purchaseOrders);\n\n//   const vendorPOMap = new Map();\n\n//   // Only initialize vendors with valid names\n//   if (vendors && vendors.data && Array.isArray(vendors.data)) {\n//     console.log(`Processing ${vendors.data.length} vendors`);\n\n//     let validVendorCount = 0;\n//     let invalidVendorCount = 0;\n\n//     vendors.data.forEach(vendor => {\n//       // Check if vendor has a valid name (not null, undefined, or empty)\n//       if (vendor.name && vendor.name.trim() !== '') {\n//         vendorPOMap.set(vendor.id, {\n//           vendor,\n//           purchaseOrders: []\n//         });\n//         validVendorCount++;\n//         console.log(`Added vendor: ID=${vendor.id}, Name=${vendor.name}`);\n//       } else {\n//         invalidVendorCount++;\n//         console.log(`Skipped vendor with invalid name: ID=${vendor.id}, Name=${vendor.name}`);\n//       }\n//     });\n\n//     console.log(`Valid vendors added: ${validVendorCount}`);\n//     console.log(`Invalid vendors skipped: ${invalidVendorCount}`);\n//   } else {\n//     console.warn('No valid vendors data found');\n//   }\n\n//   // Process purchase orders and assign them to vendors with valid names\n//   if (purchaseOrders && purchaseOrders.data && Array.isArray(purchaseOrders.data)) {\n//     console.log(`Processing ${purchaseOrders.data.length} purchase orders`);\n\n//     let assignedPOCount = 0;\n//     let skippedPOCount = 0;\n\n//     purchaseOrders.data.forEach(po => {\n//       // Only process POs with a valid vendor_Id that maps to a vendor with a name\n//       if (po.vendor_Id && vendorPOMap.has(po.vendor_Id)) {\n//         vendorPOMap.get(po.vendor_Id).purchaseOrders.push(po);\n//         assignedPOCount++;\n//         console.log(`Assigned PO ${po.id || po.POID} to vendor ${po.vendor_Id}`);\n//       } else {\n//         skippedPOCount++;\n//         console.log(`Skipped PO ${po.id || po.POID}, vendor_Id=${po.vendor_Id} (not found in valid vendors)`);\n//       }\n//     });\n\n//     console.log(`POs assigned to vendors: ${assignedPOCount}`);\n//     console.log(`POs skipped: ${skippedPOCount}`);\n//   } else {\n//     console.warn('No valid purchase orders data found');\n//   }\n\n//   // Log vendor stats after assignment\n//   console.log('\\nVendor statistics after PO assignment:');\n//   let vendorsWithPOs = 0;\n//   let vendorsWithoutPOs = 0;\n//   let totalPOsAssigned = 0;\n\n//   for (const [key, value] of vendorPOMap.entries()) {\n//     const poCount = value.purchaseOrders.length;\n//     totalPOsAssigned += poCount;\n\n//     if (poCount > 0) {\n//       vendorsWithPOs++;\n//       console.log(`Vendor ${key} (${value.vendor.name}) has ${poCount} purchase orders`);\n//     } else {\n//       vendorsWithoutPOs++;\n//     }\n//   }\n\n//   console.log(`Vendors with POs: ${vendorsWithPOs}`);\n//   console.log(`Vendors without POs: ${vendorsWithoutPOs}`);\n//   console.log(`Total POs assigned: ${totalPOsAssigned}`);\n\n//   // Convert the map to an array of vendor-PO pairs\n//   const result = Array.from(vendorPOMap.values());\n//   console.log(`\\nFinal result: ${result.length} vendor entries with their purchase orders`);\n\n//   return result;\n// };\n\n//   // API Functions\n//   const fetchProducts = async () => {\n//     setProducts(prev => ({ ...prev, loading: true, error: null }));\n//     try {\n//       const response = await fetch(API_PRODUCTS, {\n//         method: 'GET',\n//         headers: {\n//           'Authorization': `Bearer ${BEARER_TOKEN}`,\n//           'Content-Type': 'application/json',\n//         },\n//       });\n\n//       if (!response.ok) {\n//         throw new Error(`HTTP error! status: ${response.status}`);\n//       }\n\n//       const data = await response.json();\n\n//       // Store products data for reference\n//       window.productsData = data;\n\n//       setProducts({ loading: false, data: data, error: null });\n//     } catch (error) {\n//       console.error('Error fetching products:', error);\n//       // Use sample product data if API fails\n//       const sampleProducts = [\n//         {\n//           id: \"1\",\n//           name: \"IPHONE 15 PRO MAX\",\n//           description: \"6.1 INCH\",\n//           costPrice: 180000,\n//           price: 210000,\n//           quantity: 49,\n//           status: \"Active\"\n//         },\n//         {\n//           id: \"2\",\n//           name: \"LAPTOP\",\n//           description: \"14 INCH\",\n//           costPrice: 45000,\n//           price: 50000,\n//           quantity: 55,\n//           status: \"Active\"\n//         },\n//         {\n//           id: \"3\",\n//           name: \"AIR PODS\",\n//           description: \"BOOSTER\",\n//           costPrice: 5000,\n//           price: 8000,\n//           quantity: 14,\n//           status: \"Active\"\n//         },\n//         {\n//           id: \"4\",\n//           name: \"LED\",\n//           description: \"40 INCH\",\n//           costPrice: 75000,\n//           price: 90000,\n//           quantity: 37,\n//           status: \"Active\"\n//         }\n//       ];\n//       window.productsData = sampleProducts;\n//       setProducts({ loading: false, data: sampleProducts, error: null });\n//     }\n//   };\n\n//   const fetchPurchaseOrders = async () => {\n//     setPurchaseOrders(prev => ({ ...prev, loading: true, error: null }));\n//     try {\n//       const response = await fetch(API_PURCHASE_ORDERS, {\n//         method: 'GET',\n//         headers: {\n//           'Authorization': `Bearer ${BEARER_TOKEN}`,\n//           'Content-Type': 'application/json',\n//         },\n//       });\n\n//       if (!response.ok) {\n//         throw new Error(`HTTP error! status: ${response.status}`);\n//       }\n\n//       const allData = await response.json();\n\n//       // Store all data for vendor calculations\n//       window.allPurchaseOrdersData = allData;\n\n//       // Show only records that have pending status\n//       const filteredPOs = allData.filter(po => \n//         po.status === 'pending'\n//       );\n\n//       setPurchaseOrders({ loading: false, data: filteredPOs, error: null });\n//     } catch (error) {\n//       console.error('Error fetching purchase orders:', error);\n//       setPurchaseOrders({ loading: false, data: [], error: error.message });\n//     }\n//   };\n\n//   const fetchVendors = async () => {\n//     setVendors(prev => ({ ...prev, loading: true, error: null }));\n//     try {\n//       const response = await fetch(API_VENDORS, {\n//         method: 'GET',\n//         headers: {\n//           'Authorization': `Bearer ${BEARER_TOKEN}`,\n//           'Content-Type': 'application/json',\n//         },\n//       });\n\n//       if (!response.ok) {\n//         throw new Error(`HTTP error! status: ${response.status}`);\n//       }\n\n//       const data = await response.json();\n\n//       // Use all purchase orders data for vendor calculations\n//       const allPOData = window.allPurchaseOrdersData || [];\n\n//       // Transform API vendors to match our structure with real calculated data\n//       const transformedVendors = data.map(vendor => {\n//         // Extract vendor details from complex API structure\n//         const vendorDetails = vendor.individuals && vendor.individuals.length > 0 \n//           ? vendor.individuals[0] \n//           : vendor.organizations && vendor.organizations.length > 0 \n//             ? vendor.organizations[0] \n//             : null;\n\n//         const contactInfo = vendorDetails?.contactMediums?.[0]?.mediumCharacteristics?.[0] || {};\n\n//         // Get ALL purchase orders for this vendor\n//         const vendorPOs = allPOData.filter(po => \n//           po.vendor_Id === vendor.id || \n//           po.Vendor_Id === vendor.id\n//         );\n\n//         // Calculate total payable from ALL pending purchase orders\n//         const totalPayable = vendorPOs\n//           .filter(po => po.status === 'pending')\n//           .reduce((sum, po) => {\n//             const poTotal = po.purchaseOrderItems.reduce((itemSum, item) => \n//               itemSum + (item.totalPrice || 0), 0);\n//             return sum + poTotal;\n//           }, 0);\n\n//         // Overdue amount = total payable (since all pending POs need attention)\n//         const overdueAmount = totalPayable;\n\n//         // Total number of purchase orders for this vendor\n//         const billCount = vendorPOs.length;\n\n//         // Determine vendor type based on spending pattern\n//         let vendorType = 'supplies';\n//         const totalSpentFromPOs = vendorPOs.reduce((sum, po) => {\n//           const poTotal = po.purchaseOrderItems.reduce((itemSum, item) => \n//             itemSum + (item.totalPrice || 0), 0);\n//           return sum + poTotal;\n//         }, 0);\n\n//         if (totalSpentFromPOs > 5000000) {\n//           vendorType = 'equipment';\n//         } else if (totalSpentFromPOs > 1000000) {\n//           vendorType = 'supplies';\n//         } else {\n//           vendorType = 'office';\n//         }\n\n//         // Set credit limit based on vendor type\n//         let creditLimit = 500000; // Default\n//         if (vendorType === 'equipment') {\n//           creditLimit = 2000000;\n//         } else if (vendorType === 'supplies') {\n//           creditLimit = 1000000;\n//         }\n\n//         // Determine credit status based on payable amount\n//         let creditStatus = 'good';\n//         if (totalPayable === 0) {\n//           creditStatus = 'excellent';\n//         } else if (totalPayable > creditLimit * 0.9) {\n//           creditStatus = 'hold';\n//         } else if (totalPayable > creditLimit * 0.7) {\n//           creditStatus = 'watch';\n//         }\n\n//         return {\n//           id: vendor.id,\n//           name: vendorDetails?.fullName || vendorDetails?.name || `Vendor ${vendor.id}`,\n//           email: contactInfo.emailAddress || 'No email provided',\n//           phone: contactInfo.number || 'No phone provided',\n//           address: `${contactInfo.street1 || ''} ${contactInfo.city || ''} ${contactInfo.country || ''}`.trim() || 'No address provided',\n//           vendorType: vendorType,\n//           creditLimit: creditLimit,\n//           paymentTerms: vendorType === 'equipment' ? 45 : (vendorType === 'supplies' ? 30 : 15),\n//           totalPayable: totalPayable,\n//           overdueAmount: overdueAmount,\n//           lastPayment: 'No payments',\n//           creditStatus: creditStatus,\n//           accountBalance: totalPayable,\n//           billCount: billCount,\n//           avgPaymentDays: 30,\n//           status: vendor.status || 'active',\n//           type: vendor.type || 'Individual'\n//         };\n//       });\n\n//       // Also add vendors with null vendor_Id as separate entries\n//       const nullVendorPOs = allPOData.filter(po => \n//         !po.vendor_Id || po.vendor_Id === 'null' || \n//         !po.Vendor_Id || po.Vendor_Id === 'null'\n//       );\n\n//       nullVendorPOs.forEach((po, index) => {\n//         const vendorNumber = index + 1;\n//         const poTotal = po.purchaseOrderItems.reduce((sum, item) => \n//           sum + (item.totalPrice || 0), 0);\n//         const vendorTotalPayable = po.status === 'pending' ? poTotal : 0;\n\n//       });\n\n//       setVendors({ loading: false, data: transformedVendors, error: null });\n//     } catch (error) {\n//       console.error('Error fetching vendors:', error);\n//       setVendors({ loading: false, data: [], error: error.message });\n//     }\n//   };\n\n//   // Helper function to get product details by ID\n//   const getProductDetails = (productId) => {\n//     if (!productId) return { name: 'Unknown Product', description: '', price: 0 };\n\n//     const product = (window.productsData || products.data || []).find(p => \n//       p.id === productId || p.id === String(productId)\n//     );\n\n//     if (product) {\n//       return {\n//         name: product.name || 'Unknown Product',\n//         description: product.description || '',\n//         price: product.price || 0,\n//         costPrice: product.costPrice || 0,\n//         quantity: product.quantity || 0\n//       };\n//     }\n\n//     return { name: `Product #${productId}`, description: '', price: 0 };\n//   };\n\n//   // Refresh data function\n//   const refreshAllData = async () => {\n//     await fetchProducts();\n//     await fetchPurchaseOrders();\n//     setTimeout(() => fetchVendors(), 500);\n//   };\n\n//   // Load data on component mount\n//   useEffect(() => {\n//     const loadData = async () => {\n//       await fetchProducts();\n//       await fetchPurchaseOrders();\n//       setTimeout(() => fetchVendors(), 500);\n//     };\n//     loadData();\n//   }, []);\n\n//   // Helper function to get vendor name by ID\n//   const getVendorName = (vendorId) => {\n//     if (!vendorId || vendorId === 'null') return 'Unknown Vendor';\n//     const vendor = vendors.data.find(v => v.id === vendorId);\n//     return vendor ? vendor.name : 'Unknown Vendor';\n//   };\n\n// function combineVendorsWithPurchaseOrders(vendors, purchaseOrders) {\n//   console.log(\"Starting combineVendorsWithPurchaseOrders function...\");\n\n//   // Create a map for quick vendor lookup\n//   const vendorMap = new Map();\n\n//   // First, add all vendors with valid names to the map\n//   if (vendors && vendors.data && Array.isArray(vendors.data)) {\n//     vendors.data.forEach(vendor => {\n//       // Only include vendors with valid names (not null, undefined, empty, or \"null\")\n//       if (vendor.name && vendor.name.trim() !== '' && vendor.name !== 'null') {\n//         vendorMap.set(vendor.id, {\n//           ...vendor,\n//           purchaseOrders: []\n//         });\n//       }\n//     });\n//   }\n\n//   // Process all valid purchase orders\n//   if (purchaseOrders && Array.isArray(purchaseOrders)) {\n//     purchaseOrders.forEach(po => {\n//       // Handle both string \"null\" and actual null values\n//       const vendorId = po.Vendor_Id || po.vendor_Id;\n\n//       // Only process POs with valid vendor_Id (not null, undefined, empty, or \"null\")\n//       if (vendorId && vendorId !== 'null') {\n//         if (vendorMap.has(vendorId)) {\n//           // Add PO to existing vendor\n//           vendorMap.get(vendorId).purchaseOrders.push(po);\n//         } else {\n//           // If vendor with valid name doesn't exist, create a placeholder\n//           const uniqueKey = `${vendorId}_${po.POID || po.id}`;\n\n//           vendorMap.set(uniqueKey, {\n//             id: vendorId,\n//             name: `Vendor ${vendorId}`,\n//             email: 'unknown@vendor.system',\n//             phone: '+000-000-0000',\n//             address: 'Unknown Address',\n//             vendorType: 'unknown',\n//             creditLimit: 0,\n//             paymentTerms: 0,\n//             lastPayment: 'No payments',\n//             creditStatus: 'unknown',\n//             billCount: 1,\n//             avgPaymentDays: 0,\n//             status: 'pending',\n//             type: 'Unknown',\n//             poId: po.id,\n//             purchaseOrders: [po]\n//           });\n//         }\n//       }\n//     });\n//   }\n\n//   // Convert the map back to an array and filter to only include vendors with names\n//   const allVendors = Array.from(vendorMap.values());\n//   const vendorsWithNames = allVendors.filter(vendor => \n//     vendor.name && vendor.name.trim() !== '' && vendor.name !== 'null'\n//   );\n\n//   return vendorsWithNames;\n// }\n\n// // Example usage with console logging:\n// console.log(\"Calling combineVendorsWithPurchaseOrders function...\");\n\n// // Example usage:\n// const vendorsWithPOs = combineVendorsWithPurchaseOrders(vendors, purchaseOrders.data);\n\n// const calculateAPSummary = () => {\n//   console.log(\"Starting AP Summary calculation...\");\n\n//   // Get all vendors with their purchase orders\n//   const allVendorsWithPOs = combineVendorsWithPurchaseOrders(vendors, purchaseOrders.data);\n//   console.log(`Total vendors: ${allVendorsWithPOs.length}`);\n\n//   // Calculate total amounts from purchase orders\n//   console.log(\"Calculating total AP from purchase orders...\");\n//   let totalAP = 0;\n//   let totalOverdue = 0;\n//   let vendorsWithBalance = 0;\n\n//   allVendorsWithPOs.forEach(vendor => {\n//     console.log(`Processing vendor: ${vendor.name || 'Unknown Vendor'}`);\n\n//     // Calculate vendor's total from purchase orders\n//     const vendorTotal = vendor.purchaseOrders.reduce((sum, po) => {\n//       const poTotal = po.purchaseOrderItems.reduce((poSum, item) => \n//         poSum + (item.totalPrice || 0), 0);\n//       console.log(`PO ${po.POID || po.id} total: ${poTotal}`);\n//       return sum + poTotal;\n//     }, 0);\n\n//     console.log(`Vendor ${vendor.name} total: ${vendorTotal}`);\n\n//     totalAP += vendorTotal;\n\n//     // For overdue calculation, we'll use a simple logic\n//     // You can modify this based on your actual overdue calculation\n//     const overdueAmount = vendorTotal * 0.1; // Example: 10% of total is overdue\n//     totalOverdue += overdueAmount;\n\n//     if (vendorTotal > 0) {\n//       vendorsWithBalance++;\n//     }\n//   });\n\n//   console.log(`Total AP: ${totalAP}`);\n//   console.log(`Total overdue: ${totalOverdue}`);\n//   console.log(`Vendors with balance: ${vendorsWithBalance}`);\n\n//   // Calculate average days outstanding from purchase orders\n//   console.log(\"Calculating average days outstanding...\");\n//   let totalDaysOutstanding = 0;\n//   let poCount = 0;\n\n//   allVendorsWithPOs.forEach(vendor => {\n//     vendor.purchaseOrders.forEach(po => {\n//       console.log(`Processing PO: ${po.POID || po.id}`);\n//       console.log(`status: ${po.status}`)\n//       // Calculate days based on status\n//       let days = 0;\n//       switch(po.status) {\n//         case 'pending':\n//           days = 5;\n//           break;\n//         case 'Processing':\n//           days = 10;\n//           break;\n//         case 'Shipped':\n//           days = 20;\n//           break;\n//         case 'Delivered':\n//           days = 30;\n//           break;\n//         default:\n//           days = 15;\n//       }\n\n//       console.log(`Adding ${days} days for PO ${po.POID || po.id} with status ${po.status}`);\n//       totalDaysOutstanding += days;\n//       poCount++;\n//     });\n//   });\n\n//   const avgDaysOutstanding = poCount > 0 ? Math.round(totalDaysOutstanding / poCount) : 0;\n//   console.log(`Average days outstanding: ${avgDaysOutstanding}`);\n\n//   console.log(\"AP Summary calculation completed\");\n\n//   return {\n//     totalAP,\n//     totalOverdue,\n//     vendorsWithBalance,\n//     avgDaysOutstanding\n//   };\n// };\n//   const getFilteredVendors = () => {\n//     let filtered = [...vendors.data];\n\n//     if (filters.vendorType !== 'all') {\n//       filtered = filtered.filter(vendor => vendor.vendorType === filters.vendorType);\n//     }\n\n//     if (filters.status !== 'all') {\n//       filtered = filtered.filter(vendor => {\n//         if (filters.status === 'overdue') return vendor.overdueAmount > 0;\n//         if (filters.status === 'current') return vendor.totalPayable > 0 && vendor.overdueAmount === 0;\n//         if (filters.status === 'paid_up') return vendor.totalPayable === 0;\n//         return true;\n//       });\n//     }\n\n//     if (filters.searchTerm) {\n//       const term = filters.searchTerm.toLowerCase();\n//       filtered = filtered.filter(vendor =>\n//         vendor.name.toLowerCase().includes(term) ||\n//         vendor.email.toLowerCase().includes(term) ||\n//         vendor.id.toLowerCase().includes(term)\n//       );\n//     }\n\n//     return filtered;\n//   };\n\n//   const getCreditStatusColor = (status) => {\n//     switch (status) {\n//       case 'excellent': return 'bg-green-100 text-green-800';\n//       case 'good': return 'bg-blue-100 text-blue-800';\n//       case 'watch': return 'bg-yellow-100 text-yellow-800';\n//       case 'hold': return 'bg-red-100 text-red-800';\n//       case 'unknown': return 'bg-gray-100 text-gray-800';\n//       default: return 'bg-gray-100 text-gray-800';\n//     }\n//   };\n\n//   const getPOStatusColor = (status) => {\n//     switch (status) {\n//       case 'applied': return 'bg-green-100 text-green-800';\n//       case 'pending': return 'bg-yellow-100 text-yellow-800';\n//       case 'cancelled': return 'bg-red-100 text-red-800';\n//       default: return 'bg-gray-100 text-gray-800';\n//     }\n//   };\n\n//   const formatCurrency = (amount) => {\n//     return new Intl.NumberFormat('en-PK', {\n//       style: 'currency',\n//       currency: 'PKR',\n//       minimumFractionDigits: 0,\n//       maximumFractionDigits: 0\n//     }).format(amount);\n//   };\n\n//   const summary = calculateAPSummary();\n//   const filteredVendors = getFilteredVendors();\n\n//   // Loading state\n//   if (purchaseOrders.loading || vendors.loading || products.loading) {\n//     return (\n//       <div className=\"flex items-center justify-center min-h-screen\">\n//         <div className=\"flex items-center space-x-3\">\n//           <Loader className=\"animate-spin text-rose-600\" size={24} />\n//           <span className=\"text-gray-600\">Loading data from API...</span>\n//         </div>\n//       </div>\n//     );\n//   }\n\n//   // Error state\n//   if (purchaseOrders.error || vendors.error) {\n//     return (\n//       <div className=\"max-w-7xl mx-auto p-6\">\n//         <div className=\"bg-red-50 border border-red-200 rounded-lg p-6\">\n//           <div className=\"flex items-center mb-4\">\n//             <AlertTriangle className=\"text-red-600 mr-2\" size={20} />\n//             <h3 className=\"font-medium text-red-800\">API Connection Error</h3>\n//           </div>\n//           <div className=\"text-red-700 mb-4\">\n//             {purchaseOrders.error && <div>Purchase Orders API Error: {purchaseOrders.error}</div>}\n//             {vendors.error && <div>Vendors API Error: {vendors.error}</div>}\n//             {products.error && <div>Products API Error: {products.error}</div>}\n//           </div>\n//           <button\n//             onClick={refreshAllData}\n//             className=\"px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 flex items-center space-x-2\"\n//           >\n//             <RefreshCw size={16} />\n//             <span>Retry Connection</span>\n//           </button>\n//         </div>\n//       </div>\n//     );\n//   }\n\n// // Usage in component\n// const vendorPOData = createVendorPOMapping(purchaseOrders, vendors);\n// // Extract all purchase orders from valid vendors into a flat array\n// const validPurchaseOrders = [];\n// vendorPOData.forEach(({ vendor, purchaseOrders }) => {\n//   // Only include purchase orders from this vendor if the vendor has a valid name\n//   if (vendor && vendor.name && vendor.name.trim() !== '') {\n//     purchaseOrders.forEach(po => {\n//       // Add vendor name to each purchase order for easy access\n//       validPurchaseOrders.push({\n//         ...po,\n//         vendorName: vendor.name // Add the vendor name directly to the PO object\n//       });\n//     });\n//   }\n// });\n\n//   return (\n//     <div className=\"max-w-7xl mx-auto p-6 bg-white\">\n//       {/* Header */}\n//       <div className=\"mb-8\">\n//         <h1 className=\"text-3xl font-bold text-gray-900 mb-2 flex items-center\">\n//           <CreditCard className=\"mr-3 text-rose-600\" />\n//           Accounts Payable\n//         </h1>\n//         <p className=\"text-gray-600\">Manage vendor purchase orders, bills, and payments</p>\n//       </div>\n\n//       {/* Summary Cards */}\n//       <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n//         <div className=\"bg-blue-50 p-6 rounded-lg border border-blue-200\">\n//           <div className=\"flex items-center justify-between\">\n//             <div>\n//               <p className=\"text-blue-600 text-sm font-medium\">Total A/P</p>\n//               <p className=\"text-2xl font-bold text-blue-900\">{formatCurrency(summary.totalAP)}</p>\n//             </div>\n//             <DollarSign className=\"text-blue-600\" size={24} />\n//           </div>\n//           <p className=\"text-sm text-blue-700 mt-2\">{summary.vendorsWithBalance} vendors with pending orders</p>\n//         </div>\n\n//         <div className=\"bg-red-50 p-6 rounded-lg border border-red-200\">\n//           <div className=\"flex items-center justify-between\">\n//             <div>\n//               <p className=\"text-red-600 text-sm font-medium\">Pending Amount</p>\n//               <p className=\"text-2xl font-bold text-red-900\">{formatCurrency(summary.totalOverdue)}</p>\n//             </div>\n//             <AlertTriangle className=\"text-red-600\" size={24} />\n//           </div>\n//           <p className=\"text-sm text-red-700 mt-2\">\n//             {summary.totalAP > 0 ? ((summary.totalOverdue / summary.totalAP) * 100).toFixed(1) : 0}% of total A/P\n//           </p>\n//         </div>\n\n//         <div className=\"bg-yellow-50 p-6 rounded-lg border border-yellow-200\">\n//           <div className=\"flex items-center justify-between\">\n//             <div>\n//               <p className=\"text-yellow-600 text-sm font-medium\">Avg. Days Outstanding</p>\n//               <p className=\"text-2xl font-bold text-yellow-900\">{summary.avgDaysOutstanding}</p>\n//             </div>\n//             <Clock className=\"text-yellow-600\" size={24} />\n//           </div>\n//           <p className=\"text-sm text-yellow-700 mt-2\">Payment performance</p>\n//         </div>\n\n//         <div className=\"bg-purple-50 p-6 rounded-lg border border-purple-200\">\n//           <div className=\"flex items-center justify-between\">\n//             <div>\n//               <p className=\"text-purple-600 text-sm font-medium\">Active Vendors</p>\n\n//               <p className=\"text-2xl font-bold text-purple-900\">{vendorsWithPOs.length}</p>\n//             </div>\n//             <Users className=\"text-purple-600\" size={24} />\n//           </div>\n//           <p className=\"text-sm text-purple-700 mt-2\">Total vendor accounts</p>\n//         </div>\n//       </div>\n\n//       {/* Tabs */}\n//       <div className=\"mb-6\">\n//         <div className=\"border-b border-gray-200\">\n//           <nav className=\"-mb-px flex space-x-8\">\n//             {[\n//               { id: 'overview', name: 'Vendor Overview', icon: Users },\n//               { id: 'purchase-orders', name: 'Purchase Orders', icon: FileText },\n//               { id: 'payments', name: 'Payment History', icon: CheckCircle },\n//               { id: 'products', name: 'Product Catalog', icon: Package }\n//             ].map((tab) => (\n//               <button\n//                 key={tab.id}\n//                 onClick={() => setActiveTab(tab.id)}\n//                 className={`flex items-center py-2 px-1 border-b-2 font-medium text-sm ${\n//                   activeTab === tab.id\n//                     ? 'border-rose-500 text-rose-600'\n//                     : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n//                 }`}\n//               >\n//                 <tab.icon className=\"mr-2\" size={16} />\n//                 {tab.name}\n//               </button>\n//             ))}\n//           </nav>\n//         </div>\n//       </div>\n\n//       {/* Tab Content */}\n//       {activeTab === 'overview' && (\n//         <div>\n//           {/* Filters */}\n//           <div className=\"flex flex-wrap items-center gap-4 mb-6\">\n//             <div className=\"relative\">\n//               <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" size={16} />\n//               <input\n//                 type=\"text\"\n//                 placeholder=\"Search vendors...\"\n//                 value={filters.searchTerm}\n//                 onChange={(e) => setFilters({ ...filters, searchTerm: e.target.value })}\n//                 className=\"pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-rose-500 focus:border-transparent\"\n//               />\n//             </div>\n\n//             <select\n//               value={filters.vendorType}\n//               onChange={(e) => setFilters({ ...filters, vendorType: e.target.value })}\n//               className=\"px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-rose-500 focus:border-transparent\"\n//             >\n//               <option value=\"all\">All Vendor Types</option>\n//               <option value=\"equipment\">Equipment</option>\n//               <option value=\"supplies\">Supplies</option>\n//               <option value=\"office\">Office</option>\n//               <option value=\"unknown\">Unknown</option>\n//             </select>\n\n//             <select\n//               value={filters.status}\n//               onChange={(e) => setFilters({ ...filters, status: e.target.value })}\n//               className=\"px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-rose-500 focus:border-transparent\"\n//             >\n//               <option value=\"all\">All Statuses</option>\n//               <option value=\"current\">Current</option>\n//               <option value=\"overdue\">Pending</option>\n//               <option value=\"paid_up\">Completed</option>\n//             </select>\n\n//             <button\n//               onClick={refreshAllData}\n//               className=\"px-4 py-2 bg-rose-600 text-white rounded-lg hover:bg-rose-700 flex items-center space-x-2\"\n//             >\n//               <RefreshCw size={16} />\n//               <span>Refresh Data</span>\n//             </button>\n//           </div>\n\n//           {/* Vendor List */}\n//           <div className=\"bg-white border border-gray-200 rounded-lg overflow-hidden\">\n//             <div className=\"overflow-x-auto\">\n//               <table className=\"w-full\">\n//                 <thead className=\"bg-gray-50\">\n//                   <tr>\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                       Vendor\n//                     </th>\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                       Products\n//                     </th>\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                       Total Amount\n//                     </th>\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                       Status\n//                     </th>\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                       Remarks\n//                     </th>\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                       Actions\n//                     </th>\n//                   </tr>\n//                 </thead>\n//                   <tbody className=\"bg-white divide-y divide-gray-200\">\n//   {vendorsWithPOs.map((vendor) => {\n//     const hasPos = vendor.purchaseOrders && vendor.purchaseOrders.length > 0;\n//     const vendorTotal = hasPos \n//       ? vendor.purchaseOrders.reduce((sum, po) => {\n//           const poTotal = po.purchaseOrderItems \n//             ? po.purchaseOrderItems.reduce((itemSum, item) => itemSum + (item.totalPrice || 0), 0)\n//             : 0;\n//           return sum + poTotal;\n//         }, 0)\n//       : 0;\n\n//     // Collect all products from all POs for this vendor\n//     const allProducts = [];\n//     if (hasPos) {\n//       vendor.purchaseOrders.forEach(po => {\n//         if (po.purchaseOrderItems) {\n//           po.purchaseOrderItems.forEach(item => {\n//             const product = getProductDetails(item.product_Id);\n//             allProducts.push({\n//               poId: po.POID,\n//               name: product?.name || \"Unknown Product\",\n//               quantity: item.quantity,\n//               description: product?.description\n//             });\n//           });\n//         }\n//       });\n//     }\n\n//     // Get all statuses from vendor's POs - FIXED LOGIC\n//     const statuses = hasPos \n//       ? vendor.purchaseOrders.map(po => ({\n//           poId: po.POID,\n//           status: po.status,\n//           statusColor: getPOStatusColor(po.status)\n//         }))\n//       : [];\n\n//     // Count statuses for better display\n//     const statusCounts = {};\n//     if (hasPos) {\n//       vendor.purchaseOrders.forEach(po => {\n//         if (po.status) {\n//           statusCounts[po.status] = (statusCounts[po.status] || 0) + 1;\n//         }\n//       });\n//     }\n\n//     return (\n//       <tr key={vendor.id} className=\"hover:bg-gray-50\">\n//         {/* Vendor */}\n//         <td className=\"px-6 py-4 whitespace-nowrap\">\n//           <div className=\"text-sm font-medium text-gray-900\">\n//             {vendor.name || \"Unknown Vendor\"}\n//           </div>\n//           <div className=\"text-xs text-gray-500\">\n//             {hasPos ? vendor.purchaseOrders.map(po => `PO-${po.POID}`).join(', ') : \"No POs\"}\n//           </div>\n//         </td>\n\n//         {/* Products - All in one cell */}\n//         <td className=\"px-6 py-4\">\n//           {hasPos ? (\n//             <div className=\"text-sm text-gray-900\">\n//               {allProducts.map((product, index) => (\n//                 <div key={index} className=\"mb-1\">\n//                   <span className=\"font-medium\">{product.name}</span>\n//                   <span className=\"text-gray-500 ml-2\">x{product.quantity}</span>\n//                   {product.description && (\n//                     <span className=\"text-xs text-gray-400 ml-2\">\n//                       ({product.description})\n//                     </span>\n//                   )}\n//                   <span className=\"text-xs text-gray-500 ml-2\">\n//                     [PO-{product.poId}]\n//                   </span>\n//                 </div>\n//               ))}\n//             </div>\n//           ) : (\n//             <div className=\"text-sm text-gray-500\">No purchase orders</div>\n//           )}\n//         </td>\n\n//         {/* Total Amount */}\n//         <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\n//           {formatCurrency(vendorTotal)}\n//         </td>\n\n//         {/* Status - Show all statuses - FIXED LOGIC */}\n//         <td className=\"px-6 py-4 whitespace-nowrap\">\n//           {!hasPos ? (\n//             <span className=\"px-2 py-1 text-xs font-medium rounded-full bg-gray-100 text-gray-800\">\n//               No Orders\n//             </span>\n//           ) : (\n//             <div className=\"flex flex-wrap gap-1\">\n//               {/* Display unique statuses with counts */}\n//               {Object.entries(statusCounts).map(([status, count], index) => (\n//                 <span \n//                   key={index} \n//                   className={`px-2 py-1 text-xs font-medium rounded-full ${getPOStatusColor(status)}`}\n//                 >\n//                   {status} {count > 1 ? `(${count})` : ''}\n//                 </span>\n//               ))}\n//             </div>\n//           )}\n//         </td>\n\n//         {/* Remarks - Combined */}\n//         <td className=\"px-6 py-4 text-sm text-gray-900\">\n//           {hasPos ? (\n//             <div>\n//               {vendor.purchaseOrders.map((po, index) => (\n//                 <div key={index} className=\"mb-1\">\n//                   {po.remarks ? (\n//                     <span>PO-{po.POID}: {po.remarks}</span>\n//                   ) : (\n//                     <span className=\"text-gray-500\">PO-{po.POID}: No remarks</span>\n//                   )}\n//                 </div>\n//               ))}\n//             </div>\n//           ) : (\n//             <span className=\"text-gray-500\">-</span>\n//           )}\n//         </td>\n\n//         {/* Actions */}\n//         <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">\n//           {!hasPos ? (\n//             <button\n//               className=\"text-gray-400 cursor-not-allowed\"\n//               title=\"No actions available\"\n//               disabled\n//             >\n//               <Eye size={16} />\n//             </button>\n//           ) : (\n//             <div className=\"flex flex-wrap gap-2\">\n//               {vendor.purchaseOrders.map((po, index) => (\n//                 <div key={index} className=\"flex items-center\">\n//                   <span className=\"text-xs text-gray-500 mr-1\">PO-{po.POID}:</span>\n//                   <button\n//                     onClick={() => {\n//                       setSelectedPO(po);\n//                     }}\n//                     className=\"text-rose-600 hover:text-rose-900 mr-1\"\n//                     title={`View PO-${po.POID} Details`}\n//                   >\n//                     <Eye size={16} />\n//                   </button>\n//                 </div>\n//               ))}\n//             </div>\n//           )}\n//         </td>\n//       </tr>\n//     );\n//   })}\n// </tbody>\n\n//               </table>\n//             </div>\n\n//             {purchaseOrders.data.length === 0 && (\n//               <div className=\"text-center py-12\">\n//                 <div className=\"text-gray-500 text-lg\">No pending purchase orders found</div>\n//                 <p className=\"text-gray-400 mt-2\">All purchase orders are either applied or cancelled</p>\n//               </div>\n//             )}\n//           </div>\n//         </div>\n//       )}\n\n//       {activeTab === 'payments' && (\n//         <div>\n//           <div className=\"bg-white border border-gray-200 rounded-lg overflow-hidden\">\n//             <div className=\"px-6 py-4 border-b border-gray-200\">\n//               <h3 className=\"text-lg font-semibold text-gray-900\">Payment History</h3>\n//             </div>\n//             <div className=\"overflow-x-auto\">\n//               <table className=\"w-full\">\n//                 <thead className=\"bg-gray-50\">\n//                   <tr>\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                       PO ID\n//                     </th>\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                       Vendor\n//                     </th>\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                       Products\n//                     </th>\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                       Amount\n//                     </th>\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                       Status\n//                     </th>\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                       Payment Status\n//                     </th>\n//                   </tr>\n//                 </thead>\n//                 <tbody className=\"bg-white divide-y divide-gray-200\">\n//                   {(window.allPurchaseOrdersData || []).filter(po => po.status === 'applied').map((po) => {\n//                     const poTotal = po.purchaseOrderItems.reduce((sum, item) => sum + (item.totalPrice || 0), 0);\n//                     return (\n//                       <tr key={po.id} className=\"hover:bg-gray-50\">\n//                         <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\n//                           #{po.id}\n//                         </td>\n//                         <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n//                           {getVendorName(po.vendor_Id || po.Vendor_Id)}\n//                         </td>\n//                         <td className=\"px-6 py-4 text-sm text-gray-900\">\n//                           {po.purchaseOrderItems.map((item, index) => {\n//                             const product = getProductDetails(item.product_Id);\n//                             return (\n//                               <span key={index} className=\"block\">\n//                                 {product.name} x{item.quantity}\n//                               </span>\n//                             );\n//                           })}\n//                         </td>\n//                         <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n//                           {formatCurrency(poTotal)}\n//                         </td>\n//                         <td className=\"px-6 py-4 whitespace-nowrap\">\n//                           <span className=\"px-2 py-1 text-xs font-medium rounded-full bg-green-100 text-green-800\">\n//                             Applied\n//                           </span>\n//                         </td>\n//                         <td className=\"px-6 py-4 whitespace-nowrap\">\n//                           <span className=\"px-2 py-1 text-xs font-medium rounded-full bg-blue-100 text-blue-800\">\n//                             Processed\n//                           </span>\n//                         </td>\n//                       </tr>\n//                     );\n//                   })}\n//                 </tbody>\n//               </table>\n//             </div>\n\n//             {(!window.allPurchaseOrdersData?.filter(po => po.status === 'applied').length || window.allPurchaseOrdersData?.filter(po => po.status === 'applied').length === 0) && (\n//               <div className=\"text-center py-12\">\n//                 <div className=\"text-gray-500 text-lg\">No payment history found</div>\n//                 <p className=\"text-gray-400 mt-2\">No purchase orders have been processed yet</p>\n//               </div>\n//             )}\n//           </div>\n//         </div>\n//       )}\n\n//       {activeTab === 'products' && (\n//         <div>\n//           <div className=\"bg-white border border-gray-200 rounded-lg overflow-hidden\">\n//             <div className=\"px-6 py-4 border-b border-gray-200\">\n//               <h3 className=\"text-lg font-semibold text-gray-900\">Product Catalog ({products.data.length})</h3>\n//             </div>\n//             <div className=\"overflow-x-auto\">\n//               <table className=\"w-full\">\n//                 <thead className=\"bg-gray-50\">\n//                   <tr>\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                       Product ID\n//                     </th>\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                       Name\n//                     </th>\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                       Description\n//                     </th>\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                       Cost Price\n//                     </th>\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                       Selling Price\n//                     </th>\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                       Stock\n//                     </th>\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                       Status\n//                     </th>\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                       Margin\n//                     </th>\n//                   </tr>\n//                 </thead>\n//                 <tbody className=\"bg-white divide-y divide-gray-200\">\n//                   {products.data.map((product) => {\n//                     const margin = product.price && product.costPrice \n//                       ? ((product.price - product.costPrice) / product.costPrice * 100).toFixed(1)\n//                       : 0;\n\n//                     return (\n//                       <tr key={product.id} className=\"hover:bg-gray-50\">\n//                         <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\n//                           #{product.id}\n//                         </td>\n//                         <td className=\"px-6 py-4\">\n//                           <div className=\"text-sm font-medium text-gray-900\">{product.name}</div>\n//                           {product.POID && (\n//                             <div className=\"text-xs text-gray-500\">POID: {product.POID}</div>\n//                           )}\n//                         </td>\n//                         <td className=\"px-6 py-4 text-sm text-gray-900\">\n//                           {product.description?.replace(/<[^>]*>/g, '') || 'No description'}\n//                         </td>\n//                         <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n//                           {formatCurrency(product.costPrice || 0)}\n//                         </td>\n//                         <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\n//                           {formatCurrency(product.price || 0)}\n//                         </td>\n//                         <td className=\"px-6 py-4 whitespace-nowrap\">\n//                           <span className={`px-2 py-1 text-xs font-medium rounded-full ${\n//                             product.quantity > 20 \n//                               ? 'bg-green-100 text-green-800' \n//                               : product.quantity > 10 \n//                                 ? 'bg-yellow-100 text-yellow-800' \n//                                 : 'bg-red-100 text-red-800'\n//                           }`}>\n//                             {product.quantity || 0} units\n//                           </span>\n//                         </td>\n//                         <td className=\"px-6 py-4 whitespace-nowrap\">\n//                           <span className={`px-2 py-1 text-xs font-medium rounded-full ${\n//                             product.status === 'Active' \n//                               ? 'bg-green-100 text-green-800' \n//                               : 'bg-gray-100 text-gray-800'\n//                           }`}>\n//                             {product.status}\n//                           </span>\n//                         </td>\n//                         <td className=\"px-6 py-4 whitespace-nowrap\">\n//                           <span className={`font-medium ${\n//                             margin > 30 ? 'text-green-600' : margin > 15 ? 'text-yellow-600' : 'text-red-600'\n//                           }`}>\n//                             {margin}%\n//                           </span>\n//                         </td>\n//                       </tr>\n//                     );\n//                   })}\n//                 </tbody>\n//               </table>\n//             </div>\n\n//             {products.data.length === 0 && (\n//               <div className=\"text-center py-12\">\n//                 <div className=\"text-gray-500 text-lg\">No products found</div>\n//                 <p className=\"text-gray-400 mt-2\">Product catalog is empty</p>\n//               </div>\n//             )}\n//           </div>\n//         </div>\n//       )}\n\n//       {/* Vendor Detail Modal */}\n//       {selectedVendor && (\n//         <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center p-4 z-50\">\n//           <div className=\"bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-y-auto\">\n//             <div className=\"px-6 py-4 border-b border-gray-200\">\n//               <div className=\"flex items-center justify-between\">\n//                 <h3 className=\"text-lg font-semibold text-gray-900\">\n//                   Vendor Details - {selectedVendor.name}\n//                 </h3>\n//                 <button\n//                   onClick={() => setSelectedVendor(null)}\n//                   className=\"text-gray-400 hover:text-gray-600\"\n//                 >\n//                   <XCircle size={20} />\n//                 </button>\n//               </div>\n//             </div>\n\n//             <div className=\"px-6 py-4\">\n//               {/* Vendor Info Grid */}\n//               <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-6\">\n//                 <div className=\"space-y-4\">\n//                   <div>\n//                     <label className=\"text-sm font-medium text-gray-500\">Vendor ID</label>\n//                     <p className=\"text-sm text-gray-900\">{selectedVendor.id}</p>\n//                   </div>\n//                   <div>\n//                     <label className=\"text-sm font-medium text-gray-500\">Email</label>\n//                     <p className=\"text-sm text-gray-900\">{selectedVendor.email}</p>\n//                   </div>\n//                   <div>\n//                     <label className=\"text-sm font-medium text-gray-500\">Phone</label>\n//                     <p className=\"text-sm text-gray-900\">{selectedVendor.phone}</p>\n//                   </div>\n//                   <div>\n//                     <label className=\"text-sm font-medium text-gray-500\">Address</label>\n//                     <p className=\"text-sm text-gray-900\">{selectedVendor.address}</p>\n//                   </div>\n//                 </div>\n\n//                 <div className=\"space-y-4\">\n//                   <div>\n//                     <label className=\"text-sm font-medium text-gray-500\">Vendor Type</label>\n//                     <p className=\"text-sm text-gray-900\">{selectedVendor.vendorType.replace('_', ' ')}</p>\n//                   </div>\n//                   <div>\n//                     <label className=\"text-sm font-medium text-gray-500\">Credit Limit</label>\n//                     <p className=\"text-sm text-gray-900\">{formatCurrency(selectedVendor.creditLimit)}</p>\n//                   </div>\n//                   <div>\n//                     <label className=\"text-sm font-medium text-gray-500\">Payment Terms</label>\n//                     <p className=\"text-sm text-gray-900\">{selectedVendor.paymentTerms} days</p>\n//                   </div>\n//                   <div>\n//                     <label className=\"text-sm font-medium text-gray-500\">Credit Status</label>\n//                     <span className={`px-2 py-1 text-xs font-medium rounded-full ${getCreditStatusColor(selectedVendor.creditStatus)}`}>\n//                       {selectedVendor.creditStatus.replace('_', ' ')}\n//                     </span>\n//                   </div>\n//                 </div>\n//               </div>\n\n//               {/* Financial Summary */}\n//               <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n//                 <div className=\"bg-blue-50 p-4 rounded-lg\">\n//                   <div className=\"text-sm font-medium text-blue-600\">Pending Amount</div>\n//                   <div className=\"text-xl font-bold text-blue-900\">\n//                     {formatCurrency(selectedVendor.totalPayable)}\n//                   </div>\n//                 </div>\n//                 <div className=\"bg-red-50 p-4 rounded-lg\">\n//                   <div className=\"text-sm font-medium text-red-600\">Overdue Amount</div>\n//                   <div className=\"text-xl font-bold text-red-900\">\n//                     {formatCurrency(selectedVendor.overdueAmount)}\n//                   </div>\n//                 </div>\n//                 <div className=\"bg-green-50 p-4 rounded-lg\">\n//                   <div className=\"text-sm font-medium text-green-600\">Credit Available</div>\n//                   <div className=\"text-xl font-bold text-green-900\">\n//                     {formatCurrency(selectedVendor.creditLimit - selectedVendor.totalPayable)}\n//                   </div>\n//                 </div>\n//                 <div className=\"bg-purple-50 p-4 rounded-lg\">\n//                   <div className=\"text-sm font-medium text-purple-600\">Avg Payment Days</div>\n//                   <div className=\"text-xl font-bold text-purple-900\">\n//                     {selectedVendor.avgPaymentDays}\n//                   </div>\n//                 </div>\n//               </div>\n\n//               {/* Vendor Purchase Orders */}\n//               <div className=\"mb-6\">\n//                 <h4 className=\"text-md font-semibold text-gray-900 mb-3\">Vendor Purchase Orders</h4>\n//                 <div className=\"overflow-x-auto\">\n//                   <table className=\"w-full border border-gray-200 rounded\">\n//                     <thead className=\"bg-gray-50\">\n//                       <tr>\n//                         <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500\">PO</th>\n//                         <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500\">Products</th>\n//                         <th className=\"px-4 py-2 text-right text-xs font-medium text-gray-500\">Amount</th>\n//                         <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500\">Status</th>\n//                         <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500\">Remarks</th>\n//                       </tr>\n//                     </thead>\n//                     <tbody className=\"divide-y divide-gray-200\">\n//                       {(window.allPurchaseOrdersData || [])\n//                         .filter(po => {\n//                           if (selectedVendor.id.startsWith('unknown-vendor-')) {\n//                             return po.id === selectedVendor.poId;\n//                           }\n//                           return (po.vendor_Id === selectedVendor.id || po.Vendor_Id === selectedVendor.id);\n//                         })\n//                         .map((po) => {\n//                           const poTotal = po.purchaseOrderItems.reduce((sum, item) => sum + (item.totalPrice || 0), 0);\n//                           return (\n//                             <tr key={po.id}>\n//                               <td className=\"px-4 py-2 text-sm text-gray-900\">#{po.id}</td>\n//                               <td className=\"px-4 py-2 text-sm text-gray-900\">\n//                                 {po.purchaseOrderItems.map((item, index) => {\n//                                   const product = getProductDetails(item.product_Id);\n//                                   return (\n//                                     <span key={index} className=\"block\">\n//                                       {product.name} x{item.quantity}\n//                                     </span>\n//                                   );\n//                                 })}\n//                               </td>\n//                               <td className=\"px-4 py-2 text-sm text-gray-900 text-right\">{formatCurrency(poTotal)}</td>\n//                               <td className=\"px-4 py-2\">\n//                                 <span className={`px-2 py-1 text-xs font-medium rounded-full ${getPOStatusColor(po.status)}`}>\n//                                   {po.status}\n//                                 </span>\n//                               </td>\n//                               <td className=\"px-4 py-2 text-sm text-gray-900\">{po.remarks || 'No remarks'}</td>\n//                             </tr>\n//                           );\n//                         })}\n//                     </tbody>\n//                   </table>\n//                 </div>\n\n//                 {(window.allPurchaseOrdersData || [])\n//                   .filter(po => {\n//                     if (selectedVendor.id.startsWith('unknown-vendor-')) {\n//                       return po.id === selectedVendor.poId;\n//                     }\n//                     return (po.vendor_Id === selectedVendor.id || po.Vendor_Id === selectedVendor.id);\n//                   }).length === 0 && (\n//                     <div className=\"text-center py-4 text-gray-500\">\n//                       No purchase orders found for this vendor\n//                     </div>\n//                   )}\n//               </div>\n\n//               {/* Action Buttons */}\n//               <div className=\"flex space-x-3\">\n//                 <button className=\"px-4 py-2 bg-rose-600 text-white rounded-lg hover:bg-rose-700 flex items-center space-x-2\">\n//                   <Plus size={16} />\n//                   <span>New Purchase Order</span>\n//                 </button>\n//                 <button className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center space-x-2\">\n//                   <CheckCircle size={16} />\n//                   <span>Record Payment</span>\n//                 </button>\n//                 <button className=\"px-4 py-2 bg-yellow-600 text-white rounded-lg hover:bg-yellow-700 flex items-center space-x-2\">\n//                   <Mail size={16} />\n//                   <span>Send Statement</span>\n//                 </button>\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n//       )}\n\n//       {/* Purchase Order Detail Modal */}\n// {selectedPO && (\n//   <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center p-4 z-50\">\n//     <div className=\"bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-y-auto\">\n\n//       {/* Header */}\n//       <div className=\"px-6 py-4 border-b border-gray-200\">\n//         <div className=\"flex items-center justify-between\">\n//           <h3 className=\"text-lg font-semibold text-gray-900\">\n//             Purchase Order Details - #{selectedPO.id}\n//           </h3>\n//           <button\n//             onClick={() => setSelectedPO(null)}\n//             className=\"text-gray-400 hover:text-gray-600\"\n//           >\n//             <XCircle size={20} />\n//           </button>\n//         </div>\n//       </div>\n\n//       {/* Body */}\n//       <div className=\"px-6 py-4\">\n\n//         {/* PO Info */}\n//         <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-6\">\n//           <div className=\"space-y-4\">\n//             <div>\n//               <label className=\"text-sm font-medium text-gray-500\">Purchase Order ID</label>\n//               <p className=\"text-sm text-gray-900\">{selectedPO.id}</p>\n//             </div>\n//             <div>\n//               <label className=\"text-sm font-medium text-gray-500\">PO ID</label>\n//               <p className=\"text-sm text-gray-900\">PO-{selectedPO.POID}</p>\n//             </div>\n//             <div>\n//               <label className=\"text-sm font-medium text-gray-500\">Vendor</label>\n//               <p className=\"text-sm text-gray-900\">\n//                 {getVendorName(selectedPO.vendor_Id || selectedPO.Vendor_Id)}\n//               </p>\n//             </div>\n//            <div className=\"mt-1\">\n//                   {selectedPO.purchaseOrderItems && selectedPO.purchaseOrderItems.map((item, index) => (\n\n//                   <span \n//                   key={index} \n//                   className={`px-2 py-1 text-xs font-medium rounded-full ${getPOStatusColor( selectedPO.status)}`}\n//                 >\n//           {selectedPO.status}\n//         </span>\n//       ))}\n//     </div>\n//           </div>\n\n//           <div className=\"space-y-4\">\n//             <div>\n//               <label className=\"text-sm font-medium text-gray-500\">Type</label>\n//               <p className=\"text-sm text-gray-900\">{selectedPO.type || 'Standard PO'}</p>\n//             </div>\n//             <div>\n//               <label className=\"text-sm font-medium text-gray-500\">Total Amount</label>\n//               <p className=\"text-lg font-bold text-gray-900\">\n//                 {formatCurrency(\n//                   selectedPO.purchaseOrderItems.reduce(\n//                     (sum, item) => sum + (item.totalPrice || 0), \n//                     0\n//                   )\n//                 )}\n//               </p>\n//             </div>\n//             <div>\n//               <label className=\"text-sm font-medium text-gray-500\">Remarks</label>\n//               <p className=\"text-sm text-gray-900\">{selectedPO.remarks || 'No remarks'}</p>\n//             </div>\n//           </div>\n//         </div>\n\n//         {/* Purchase Order Items */}\n//         <div className=\"mb-6\">\n//           <h4 className=\"text-md font-semibold text-gray-900 mb-3\">Purchase Order Items</h4>\n//           <div className=\"overflow-x-auto\">\n//             <table className=\"w-full border border-gray-200 rounded\">\n//               <thead className=\"bg-gray-50\">\n//                 <tr>\n//                   <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500\">Product</th>\n//                   <th className=\"px-4 py-2 text-right text-xs font-medium text-gray-500\">Quantity</th>\n//                   <th className=\"px-4 py-2 text-right text-xs font-medium text-gray-500\">Unit Price</th>\n//                   <th className=\"px-4 py-2 text-right text-xs font-medium text-gray-500\">Total Price</th>\n//                   <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500\">Status</th>\n//                   <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500\">Remarks</th>\n//                 </tr>\n//               </thead>\n//               <tbody className=\"divide-y divide-gray-200\">\n//                 {selectedPO.purchaseOrderItems.map((item, index) => {\n//                   const product = getProductDetails(item.product_Id);\n//                   return (\n//                     <tr key={index}>\n//                       <td className=\"px-4 py-2 text-sm text-gray-900\">\n//                         <div>\n//                           <div className=\"font-medium\">{product.name}</div>\n//                           {product.description && (\n//                             <div className=\"text-xs text-gray-500\">{product.description}</div>\n//                           )}\n//                         </div>\n//                       </td>\n//                       <td className=\"px-4 py-2 text-sm text-gray-900 text-right\">{item.quantity}</td>\n//                       <td className=\"px-4 py-2 text-sm text-gray-900 text-right\">{formatCurrency(item.pricePerUnit)}</td>\n//                       <td className=\"px-4 py-2 text-sm font-medium text-gray-900 text-right\">{formatCurrency(item.totalPrice)}</td>\n//                       <td className=\"px-4 py-2\">\n//                         <span className={`px-2 py-1 text-xs font-medium rounded-full ${getPOStatusColor(item.status)}`}>\n//                           {item.status}\n//                         </span>\n//                       </td>\n//                       <td className=\"px-4 py-2 text-sm text-gray-900\">{item.remarks || 'No remarks'}</td>\n//                     </tr>\n//                   );\n//                 })}\n//               </tbody>\n//             </table>\n//           </div>\n//         </div>\n\n//       </div>\n//     </div>\n//   </div>\n// )}\n\n//     {activeTab === 'purchase-orders' && (\n//         <div>\n//           <div className=\"bg-white border border-gray-200 rounded-lg overflow-hidden\">\n//             <div className=\"px-6 py-4 border-b border-gray-200\">\n//               <h3 className=\"text-lg font-semibold text-gray-900\">Pending Purchase Orders ({purchaseOrders.data.length})</h3>\n//             </div>\n//             <div className=\"overflow-x-auto\">\n//               <table className=\"w-full\">\n//                 <thead className=\"bg-gray-50\">\n//                   <tr>\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                       PO #\n//                     </th>\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                       Vendor\n//                     </th>\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                       Products\n//                     </th>\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                       Total Amount\n//                     </th>\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                       Status\n//                     </th>\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                       Remarks\n//                     </th>\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                       Actions\n//                     </th>\n//                   </tr>\n//                 </thead>\n//                <tbody className=\"bg-white divide-y divide-gray-200\">\n//     {validPurchaseOrders.map((po) => {\n//       const poTotal = po.purchaseOrderItems?.reduce(\n//         (sum, item) => sum + (item.totalPrice || 0), \n//         0\n//       ) || 0;\n\n//       return (\n//         <tr key={po.id} className=\"hover:bg-gray-50\">\n//           <td className=\"px-6 py-4 whitespace-nowrap\">\n//             <div className=\"text-sm font-medium text-gray-900\">#{po.id}</div>\n//             <div className=\"text-xs text-gray-500\">PO-{po.POID}</div>\n//           </td>\n//           <td className=\"px-6 py-4\">\n//             <div className=\"text-sm font-medium text-gray-900\">\n//               {po.vendorName} {/* Use the vendor name we attached to the PO */}\n//             </div>\n//           </td>\n//           <td className=\"px-6 py-4\">\n//             <div className=\"text-sm text-gray-900\">\n//               {po.purchaseOrderItems?.map((item, index) => {\n//                 const product = getProductDetails(item.product_Id);\n//                 return (\n//                   <div key={index} className=\"mb-1\">\n//                     <span className=\"font-medium\">{product.name}</span>\n//                     <span className=\"text-gray-500 ml-2\">x{item.quantity}</span>\n//                     {product.description && (\n//                       <span className=\"text-xs text-gray-400 ml-2\">\n//                         ({product.description})\n//                       </span>\n//                     )}\n//                   </div>\n//                 );\n//               })}\n//             </div>\n//           </td>\n//           <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\n//             {formatCurrency(poTotal)}\n//           </td>\n//           <td className=\"px-6 py-4 whitespace-nowrap\">\n//             <span className={`px-2 py-1 text-xs font-medium rounded-full ${getPOStatusColor(po.status)}`}>\n//               {po.status}\n//             </span>\n//           </td>\n//           <td className=\"px-6 py-4 text-sm text-gray-900\">\n//             {po.remarks || 'No remarks'}\n//           </td>\n//           <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">\n//             <button\n//               onClick={() => setSelectedPO(po)}\n//               className=\"text-rose-600 hover:text-rose-900 mr-3\"\n//               title=\"View Details\"\n//             >\n//               <Eye size={16} />\n//             </button>\n//             {/* <button \n//               className=\"text-blue-600 hover:text-blue-900\"\n//               title=\"Edit PO\"\n//             >\n//               <Edit size={16} />\n//             </button> */}\n//           </td>\n//         </tr>\n//       );\n//     })}\n\n//     {validPurchaseOrders.length === 0 && (\n//       <tr>\n//         <td colSpan=\"7\" className=\"px-6 py-4 text-center text-gray-500\">\n//           No purchase orders found with valid vendors.\n//         </td>\n//       </tr>\n//     )}\n//   </tbody>\n\n//               </table>\n//             </div>\n\n//             {purchaseOrders.data.length === 0 && (\n//               <div className=\"text-center py-12\">\n//                 <div className=\"text-gray-500 text-lg\">No pending purchase orders found</div>\n//                 <p className=\"text-gray-400 mt-2\">All purchase orders are either applied or cancelled</p>\n//               </div>\n//             )}\n//           </div>\n//         </div>\n//       )}\n\n//       {/* Complete the PO Detail Modal - closing the table body and completing the modal */}\n//       {selectedPO && (\n//         <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center p-4 z-50\">\n//           <div className=\"bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-y-auto\">\n//             <div className=\"px-6 py-4 border-b border-gray-200\">\n//               <div className=\"flex items-center justify-between\">\n//                 <h3 className=\"text-lg font-semibold text-gray-900\">\n//                   Purchase Order Details - #{selectedPO.id}\n//                 </h3>\n//                 <button\n//                   onClick={() => setSelectedPO(null)}\n//                   className=\"text-gray-400 hover:text-gray-600\"\n//                 >\n//                   <XCircle size={20} />\n//                 </button>\n//               </div>\n//             </div>\n\n//             <div className=\"px-6 py-4\">\n//               {/* PO Info */}\n//               <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-6\">\n//                 <div className=\"space-y-4\">\n//                   <div>\n//                     <label className=\"text-sm font-medium text-gray-500\">Purchase Order ID</label>\n//                     <p className=\"text-sm text-gray-900\">{selectedPO.id}</p>\n//                   </div>\n//                   <div>\n//                     <label className=\"text-sm font-medium text-gray-500\">PO ID</label>\n//                     <p className=\"text-sm text-gray-900\">PO-{selectedPO.POID}</p>\n//                   </div>\n//                   <div>\n//                     <label className=\"text-sm font-medium text-gray-500\">Vendor</label>\n//                     <p className=\"text-sm text-gray-900\">{getVendorName(selectedPO.vendor_Id || selectedPO.Vendor_Id)}</p>\n//                   </div>\n//                   <div>\n//                     <label className=\"text-sm font-medium text-gray-500\">Status</label>\n//                     <span className={`px-2 py-1 text-xs font-medium rounded-full ${getPOStatusColor(selectedPO.status)}`}>\n//                       {selectedPO.status}\n//                     </span>\n//                   </div>\n//                 </div>\n\n//                 <div className=\"space-y-4\">\n//                   <div>\n//                     <label className=\"text-sm font-medium text-gray-500\">Type</label>\n//                     <p className=\"text-sm text-gray-900\">{selectedPO.type || 'Standard PO'}</p>\n//                   </div>\n//                   <div>\n//                     <label className=\"text-sm font-medium text-gray-500\">Total Amount</label>\n//                     <p className=\"text-lg font-bold text-gray-900\">\n//                       {formatCurrency(selectedPO.purchaseOrderItems.reduce((sum, item) => sum + (item.totalPrice || 0), 0))}\n//                     </p>\n//                   </div>\n//                   <div>\n//                     <label className=\"text-sm font-medium text-gray-500\">Remarks</label>\n//                     <p className=\"text-sm text-gray-900\">{selectedPO.remarks || 'No remarks'}</p>\n//                   </div>\n//                 </div>\n//               </div>\n\n//               {/* Purchase Order Items */}\n//               <div className=\"mb-6\">\n//                 <h4 className=\"text-md font-semibold text-gray-900 mb-3\">Purchase Order Items</h4>\n//                 <div className=\"overflow-x-auto\">\n//                   <table className=\"w-full border border-gray-200 rounded\">\n//                     <thead className=\"bg-gray-50\">\n//                       <tr>\n//                         <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500\">Product</th>\n//                         <th className=\"px-4 py-2 text-right text-xs font-medium text-gray-500\">Quantity</th>\n//                         <th className=\"px-4 py-2 text-right text-xs font-medium text-gray-500\">Unit Price</th>\n//                         <th className=\"px-4 py-2 text-right text-xs font-medium text-gray-500\">Total Price</th>\n//                         <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500\">Status</th>\n//                         <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500\">Remarks</th>\n//                       </tr>\n//                     </thead>\n//                     <tbody className=\"divide-y divide-gray-200\">\n//                       {selectedPO.purchaseOrderItems.map((item, index) => {\n//                         const product = getProductDetails(item.product_Id);\n//                         return (\n//                           <tr key={index}>\n//                             <td className=\"px-4 py-2 text-sm text-gray-900\">\n//                               <div>\n//                                 <div className=\"font-medium\">{product.name}</div>\n//                                 {product.description && (\n//                                   <div className=\"text-xs text-gray-500\">{product.description}</div>\n//                                 )}\n//                               </div>\n//                             </td>\n//                             <td className=\"px-4 py-2 text-sm text-gray-900 text-right\">{item.quantity}</td>\n//                             <td className=\"px-4 py-2 text-sm text-gray-900 text-right\">{formatCurrency(item.pricePerUnit)}</td>\n//                             <td className=\"px-4 py-2 text-sm font-medium text-gray-900 text-right\">{formatCurrency(item.totalPrice)}</td>\n//                             <td className=\"px-4 py-2\">\n//                               <span className={`px-2 py-1 text-xs font-medium rounded-full ${getPOStatusColor(item.status)}`}>\n//                                 {item.status}\n//                               </span>\n//                             </td>\n//                             <td className=\"px-4 py-2 text-sm text-gray-900\">{item.remarks || 'No remarks'}</td>\n//                           </tr>\n//                         );\n//                       })}\n//                     </tbody>\n//                     <tfoot className=\"bg-gray-50\">\n//                       <tr>\n//                         <td colSpan=\"3\" className=\"px-4 py-2 text-sm font-medium text-gray-900 text-right\">\n//                           Total:\n//                         </td>\n//                         <td className=\"px-4 py-2 text-sm font-bold text-gray-900 text-right\">\n//                           {formatCurrency(selectedPO.purchaseOrderItems.reduce((sum, item) => sum + (item.totalPrice || 0), 0))}\n//                         </td>\n//                         <td colSpan=\"2\"></td>\n//                       </tr>\n//                     </tfoot>\n//                   </table>\n//                 </div>\n//               </div>\n\n//               {/* Action Buttons */}\n//               <div className=\"flex space-x-3\">\n//                 <button className=\"px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 flex items-center space-x-2\">\n//                   <CheckCircle size={16} />\n//                   <span>Process Payment</span>\n//                 </button>\n//                 <button className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center space-x-2\">\n//                   <Edit size={16} />\n//                   <span>Edit PO</span>\n//                 </button>\n//                 <button className=\"px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 flex items-center space-x-2\">\n//                   <Download size={16} />\n//                   <span>Export PDF</span>\n//                 </button>\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default AccountsPayable;\n\n// src/pages/AccountsPayable.jsx\nimport React, { useState, useEffect } from 'react';\nimport { CreditCard, Loader, AlertTriangle, RefreshCw } from 'lucide-react';\nimport APHeader from '../components/AccountsPayable/APHeader';\nimport APSummaryCards from '../components/AccountsPayable/APSummaryCards';\nimport APTabs from '../components/AccountsPayable/APTabs';\nimport APOverviewTab from '../components/AccountsPayable/APOverviewTab';\nimport APPurchaseOrdersTab from '../components/AccountsPayable/APPurchaseOrdersTab';\nimport APPaymentsTab from '../components/AccountsPayable/APPaymentsTab';\nimport APProductsTab from '../components/AccountsPayable/APProductsTab';\nimport VendorDetailModal from '../components/AccountsPayable/VendorDetailModal';\nimport PurchaseOrderModal from '../components/AccountsPayable/PurchaseOrderModal';\nimport { useAPData } from '../hooks/useAPData';\nimport { useAPFilters } from '../hooks/useAPFilters';\nimport { calculateAPSummary } from '../utils/apCalculations';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AccountsPayable = () => {\n  _s();\n  // State management\n  const [activeTab, setActiveTab] = useState('overview');\n  const [selectedVendor, setSelectedVendor] = useState(null);\n  const [selectedPO, setSelectedPO] = useState(null);\n\n  // Custom hooks for data management\n  const {\n    purchaseOrders,\n    vendors,\n    products,\n    loading,\n    error,\n    refreshAllData\n  } = useAPData();\n  const {\n    filters,\n    setFilters,\n    getFilteredVendors\n  } = useAPFilters(vendors.data);\n\n  // Calculations\n  const summary = calculateAPSummary(vendors, purchaseOrders);\n  const filteredVendors = getFilteredVendors();\n\n  // Loading state\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex items-center justify-center min-h-screen\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center space-x-3\",\n        children: [/*#__PURE__*/_jsxDEV(Loader, {\n          className: \"animate-spin text-rose-600\",\n          size: 24\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1827,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-gray-600\",\n          children: \"Loading data from API...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1828,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1826,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1825,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Error state\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"max-w-7xl mx-auto p-6\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-red-50 border border-red-200 rounded-lg p-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center mb-4\",\n          children: [/*#__PURE__*/_jsxDEV(AlertTriangle, {\n            className: \"text-red-600 mr-2\",\n            size: 20\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1840,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"font-medium text-red-800\",\n            children: \"API Connection Error\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1841,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1839,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-red-700 mb-4\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1843,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: refreshAllData,\n          className: \"px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 flex items-center space-x-2\",\n          children: [/*#__PURE__*/_jsxDEV(RefreshCw, {\n            size: 16\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1850,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Retry Connection\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1851,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1846,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1838,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1837,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"max-w-7xl mx-auto p-6 bg-white\",\n    children: [/*#__PURE__*/_jsxDEV(APHeader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1860,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(APSummaryCards, {\n      summary: summary\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1862,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(APTabs, {\n      activeTab: activeTab,\n      setActiveTab: setActiveTab\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1864,\n      columnNumber: 7\n    }, this), activeTab === 'overview' && /*#__PURE__*/_jsxDEV(APOverviewTab, {\n      filters: filters,\n      setFilters: setFilters,\n      filteredVendors: filteredVendors,\n      purchaseOrders: purchaseOrders,\n      onVendorSelect: setSelectedVendor,\n      onPOSelect: setSelectedPO,\n      onRefresh: refreshAllData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1868,\n      columnNumber: 9\n    }, this), activeTab === 'purchase-orders' && /*#__PURE__*/_jsxDEV(APPurchaseOrdersTab, {\n      purchaseOrders: purchaseOrders,\n      vendors: vendors,\n      products: products,\n      onPOSelect: setSelectedPO\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1880,\n      columnNumber: 9\n    }, this), activeTab === 'payments' && /*#__PURE__*/_jsxDEV(APPaymentsTab, {\n      purchaseOrders: purchaseOrders,\n      vendors: vendors,\n      products: products\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1889,\n      columnNumber: 9\n    }, this), activeTab === 'products' && /*#__PURE__*/_jsxDEV(APProductsTab, {\n      products: products\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1897,\n      columnNumber: 9\n    }, this), selectedVendor && /*#__PURE__*/_jsxDEV(VendorDetailModal, {\n      vendor: selectedVendor,\n      onClose: () => setSelectedVendor(null),\n      purchaseOrders: purchaseOrders,\n      products: products\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1904,\n      columnNumber: 9\n    }, this), selectedPO && /*#__PURE__*/_jsxDEV(PurchaseOrderModal, {\n      purchaseOrder: selectedPO,\n      onClose: () => setSelectedPO(null),\n      vendors: vendors,\n      products: products\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1913,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1859,\n    columnNumber: 5\n  }, this);\n};\n_s(AccountsPayable, \"Ng2OHbQpIJSZeLgN0yJnaqd3Y9Y=\", false, function () {\n  return [useAPData, useAPFilters];\n});\n_c = AccountsPayable;\nexport default AccountsPayable;\nvar _c;\n$RefreshReg$(_c, \"AccountsPayable\");","map":{"version":3,"names":["React","useState","useEffect","CreditCard","Loader","AlertTriangle","RefreshCw","APHeader","APSummaryCards","APTabs","APOverviewTab","APPurchaseOrdersTab","APPaymentsTab","APProductsTab","VendorDetailModal","PurchaseOrderModal","useAPData","useAPFilters","calculateAPSummary","jsxDEV","_jsxDEV","AccountsPayable","_s","activeTab","setActiveTab","selectedVendor","setSelectedVendor","selectedPO","setSelectedPO","purchaseOrders","vendors","products","loading","error","refreshAllData","filters","setFilters","getFilteredVendors","data","summary","filteredVendors","className","children","size","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onVendorSelect","onPOSelect","onRefresh","vendor","onClose","purchaseOrder","_c","$RefreshReg$"],"sources":["C:/Users/Logic-Unit/my-account/src/pages/AccountsPayable.jsx"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import { \r\n//   Users, \r\n//   DollarSign, \r\n//   CreditCard, \r\n//   AlertTriangle, \r\n//   Clock, \r\n//   Plus, \r\n//   Search, \r\n//   Filter, \r\n//   Eye, \r\n//   Edit, \r\n//   Download,\r\n//   CheckCircle,\r\n//   XCircle,\r\n//   Calendar,\r\n//   FileText,\r\n//   TrendingDown,\r\n//   Mail,\r\n//   Phone,\r\n//   Loader,\r\n//   RefreshCw,\r\n//   Package\r\n// } from 'lucide-react';\r\n\r\n// // API Configuration for Accounts Payable\r\n// const API_PURCHASE_ORDERS = 'https://api-pos.hulmsolutions.com/POS/accounting2/31fc8df0-61db-41e5-bb67-070fde367ea1/PurchaseOrderManagement/purchaseOrdersWithoutDetails';\r\n// const API_VENDORS = 'https://api-pos.hulmsolutions.com/POS/accounting2/31fc8df0-61db-41e5-bb67-070fde367ea1/VendorManagement/vendors';\r\n// const API_PRODUCTS = 'https://api-pos.hulmsolutions.com/POS/accounting2/31fc8df0-61db-41e5-bb67-070fde367ea1/products?status=All&start=0&size=200';\r\n\r\n// // Replace with your actual Bearer token\r\n// const BEARER_TOKEN = 'your-bearer-token-here';\r\n\r\n// const AccountsPayable = () => {\r\n//   // State management\r\n//   const [purchaseOrders, setPurchaseOrders] = useState({ loading: false, data: [], error: null });\r\n//   const [vendors, setVendors] = useState({ loading: false, data: [], error: null });\r\n//   const [products, setProducts] = useState({ loading: false, data: [], error: null });\r\n//   const [activeTab, setActiveTab] = useState('overview');\r\n//   const [selectedVendor, setSelectedVendor] = useState(null);\r\n//   const [selectedPO, setSelectedPO] = useState(null);\r\n//   const [viewBill, setViewBill] = useState(null);\r\n//   const [filters, setFilters] = useState({\r\n//     vendorType: 'all',\r\n//     status: 'all',\r\n    \r\n//     searchTerm: ''\r\n//   });\r\n\r\n// const createVendorPOMapping = (purchaseOrders, vendors) => {\r\n//   console.log('Starting createVendorPOMapping function');\r\n//   console.log('Input vendors:', vendors);\r\n//   console.log('Input purchaseOrders:', purchaseOrders);\r\n  \r\n//   const vendorPOMap = new Map();\r\n  \r\n//   // Only initialize vendors with valid names\r\n//   if (vendors && vendors.data && Array.isArray(vendors.data)) {\r\n//     console.log(`Processing ${vendors.data.length} vendors`);\r\n    \r\n//     let validVendorCount = 0;\r\n//     let invalidVendorCount = 0;\r\n    \r\n//     vendors.data.forEach(vendor => {\r\n//       // Check if vendor has a valid name (not null, undefined, or empty)\r\n//       if (vendor.name && vendor.name.trim() !== '') {\r\n//         vendorPOMap.set(vendor.id, {\r\n//           vendor,\r\n//           purchaseOrders: []\r\n//         });\r\n//         validVendorCount++;\r\n//         console.log(`Added vendor: ID=${vendor.id}, Name=${vendor.name}`);\r\n//       } else {\r\n//         invalidVendorCount++;\r\n//         console.log(`Skipped vendor with invalid name: ID=${vendor.id}, Name=${vendor.name}`);\r\n//       }\r\n//     });\r\n    \r\n//     console.log(`Valid vendors added: ${validVendorCount}`);\r\n//     console.log(`Invalid vendors skipped: ${invalidVendorCount}`);\r\n//   } else {\r\n//     console.warn('No valid vendors data found');\r\n//   }\r\n  \r\n//   // Process purchase orders and assign them to vendors with valid names\r\n//   if (purchaseOrders && purchaseOrders.data && Array.isArray(purchaseOrders.data)) {\r\n//     console.log(`Processing ${purchaseOrders.data.length} purchase orders`);\r\n    \r\n//     let assignedPOCount = 0;\r\n//     let skippedPOCount = 0;\r\n    \r\n//     purchaseOrders.data.forEach(po => {\r\n//       // Only process POs with a valid vendor_Id that maps to a vendor with a name\r\n//       if (po.vendor_Id && vendorPOMap.has(po.vendor_Id)) {\r\n//         vendorPOMap.get(po.vendor_Id).purchaseOrders.push(po);\r\n//         assignedPOCount++;\r\n//         console.log(`Assigned PO ${po.id || po.POID} to vendor ${po.vendor_Id}`);\r\n//       } else {\r\n//         skippedPOCount++;\r\n//         console.log(`Skipped PO ${po.id || po.POID}, vendor_Id=${po.vendor_Id} (not found in valid vendors)`);\r\n//       }\r\n//     });\r\n    \r\n//     console.log(`POs assigned to vendors: ${assignedPOCount}`);\r\n//     console.log(`POs skipped: ${skippedPOCount}`);\r\n//   } else {\r\n//     console.warn('No valid purchase orders data found');\r\n//   }\r\n  \r\n//   // Log vendor stats after assignment\r\n//   console.log('\\nVendor statistics after PO assignment:');\r\n//   let vendorsWithPOs = 0;\r\n//   let vendorsWithoutPOs = 0;\r\n//   let totalPOsAssigned = 0;\r\n  \r\n//   for (const [key, value] of vendorPOMap.entries()) {\r\n//     const poCount = value.purchaseOrders.length;\r\n//     totalPOsAssigned += poCount;\r\n    \r\n//     if (poCount > 0) {\r\n//       vendorsWithPOs++;\r\n//       console.log(`Vendor ${key} (${value.vendor.name}) has ${poCount} purchase orders`);\r\n//     } else {\r\n//       vendorsWithoutPOs++;\r\n//     }\r\n//   }\r\n  \r\n//   console.log(`Vendors with POs: ${vendorsWithPOs}`);\r\n//   console.log(`Vendors without POs: ${vendorsWithoutPOs}`);\r\n//   console.log(`Total POs assigned: ${totalPOsAssigned}`);\r\n  \r\n//   // Convert the map to an array of vendor-PO pairs\r\n//   const result = Array.from(vendorPOMap.values());\r\n//   console.log(`\\nFinal result: ${result.length} vendor entries with their purchase orders`);\r\n  \r\n//   return result;\r\n// };\r\n\r\n//   // API Functions\r\n//   const fetchProducts = async () => {\r\n//     setProducts(prev => ({ ...prev, loading: true, error: null }));\r\n//     try {\r\n//       const response = await fetch(API_PRODUCTS, {\r\n//         method: 'GET',\r\n//         headers: {\r\n//           'Authorization': `Bearer ${BEARER_TOKEN}`,\r\n//           'Content-Type': 'application/json',\r\n//         },\r\n//       });\r\n      \r\n//       if (!response.ok) {\r\n//         throw new Error(`HTTP error! status: ${response.status}`);\r\n//       }\r\n      \r\n//       const data = await response.json();\r\n      \r\n//       // Store products data for reference\r\n//       window.productsData = data;\r\n      \r\n//       setProducts({ loading: false, data: data, error: null });\r\n//     } catch (error) {\r\n//       console.error('Error fetching products:', error);\r\n//       // Use sample product data if API fails\r\n//       const sampleProducts = [\r\n//         {\r\n//           id: \"1\",\r\n//           name: \"IPHONE 15 PRO MAX\",\r\n//           description: \"6.1 INCH\",\r\n//           costPrice: 180000,\r\n//           price: 210000,\r\n//           quantity: 49,\r\n//           status: \"Active\"\r\n//         },\r\n//         {\r\n//           id: \"2\",\r\n//           name: \"LAPTOP\",\r\n//           description: \"14 INCH\",\r\n//           costPrice: 45000,\r\n//           price: 50000,\r\n//           quantity: 55,\r\n//           status: \"Active\"\r\n//         },\r\n//         {\r\n//           id: \"3\",\r\n//           name: \"AIR PODS\",\r\n//           description: \"BOOSTER\",\r\n//           costPrice: 5000,\r\n//           price: 8000,\r\n//           quantity: 14,\r\n//           status: \"Active\"\r\n//         },\r\n//         {\r\n//           id: \"4\",\r\n//           name: \"LED\",\r\n//           description: \"40 INCH\",\r\n//           costPrice: 75000,\r\n//           price: 90000,\r\n//           quantity: 37,\r\n//           status: \"Active\"\r\n//         }\r\n//       ];\r\n//       window.productsData = sampleProducts;\r\n//       setProducts({ loading: false, data: sampleProducts, error: null });\r\n//     }\r\n//   };\r\n\r\n//   const fetchPurchaseOrders = async () => {\r\n//     setPurchaseOrders(prev => ({ ...prev, loading: true, error: null }));\r\n//     try {\r\n//       const response = await fetch(API_PURCHASE_ORDERS, {\r\n//         method: 'GET',\r\n//         headers: {\r\n//           'Authorization': `Bearer ${BEARER_TOKEN}`,\r\n//           'Content-Type': 'application/json',\r\n//         },\r\n//       });\r\n      \r\n//       if (!response.ok) {\r\n//         throw new Error(`HTTP error! status: ${response.status}`);\r\n//       }\r\n      \r\n//       const allData = await response.json();\r\n      \r\n//       // Store all data for vendor calculations\r\n//       window.allPurchaseOrdersData = allData;\r\n      \r\n//       // Show only records that have pending status\r\n//       const filteredPOs = allData.filter(po => \r\n//         po.status === 'pending'\r\n//       );\r\n      \r\n//       setPurchaseOrders({ loading: false, data: filteredPOs, error: null });\r\n//     } catch (error) {\r\n//       console.error('Error fetching purchase orders:', error);\r\n//       setPurchaseOrders({ loading: false, data: [], error: error.message });\r\n//     }\r\n//   };\r\n\r\n//   const fetchVendors = async () => {\r\n//     setVendors(prev => ({ ...prev, loading: true, error: null }));\r\n//     try {\r\n//       const response = await fetch(API_VENDORS, {\r\n//         method: 'GET',\r\n//         headers: {\r\n//           'Authorization': `Bearer ${BEARER_TOKEN}`,\r\n//           'Content-Type': 'application/json',\r\n//         },\r\n//       });\r\n      \r\n//       if (!response.ok) {\r\n//         throw new Error(`HTTP error! status: ${response.status}`);\r\n//       }\r\n      \r\n//       const data = await response.json();\r\n      \r\n//       // Use all purchase orders data for vendor calculations\r\n//       const allPOData = window.allPurchaseOrdersData || [];\r\n      \r\n//       // Transform API vendors to match our structure with real calculated data\r\n//       const transformedVendors = data.map(vendor => {\r\n//         // Extract vendor details from complex API structure\r\n//         const vendorDetails = vendor.individuals && vendor.individuals.length > 0 \r\n//           ? vendor.individuals[0] \r\n//           : vendor.organizations && vendor.organizations.length > 0 \r\n//             ? vendor.organizations[0] \r\n//             : null;\r\n        \r\n//         const contactInfo = vendorDetails?.contactMediums?.[0]?.mediumCharacteristics?.[0] || {};\r\n        \r\n//         // Get ALL purchase orders for this vendor\r\n//         const vendorPOs = allPOData.filter(po => \r\n//           po.vendor_Id === vendor.id || \r\n//           po.Vendor_Id === vendor.id\r\n//         );\r\n        \r\n//         // Calculate total payable from ALL pending purchase orders\r\n//         const totalPayable = vendorPOs\r\n//           .filter(po => po.status === 'pending')\r\n//           .reduce((sum, po) => {\r\n//             const poTotal = po.purchaseOrderItems.reduce((itemSum, item) => \r\n//               itemSum + (item.totalPrice || 0), 0);\r\n//             return sum + poTotal;\r\n//           }, 0);\r\n        \r\n//         // Overdue amount = total payable (since all pending POs need attention)\r\n//         const overdueAmount = totalPayable;\r\n        \r\n//         // Total number of purchase orders for this vendor\r\n//         const billCount = vendorPOs.length;\r\n        \r\n//         // Determine vendor type based on spending pattern\r\n//         let vendorType = 'supplies';\r\n//         const totalSpentFromPOs = vendorPOs.reduce((sum, po) => {\r\n//           const poTotal = po.purchaseOrderItems.reduce((itemSum, item) => \r\n//             itemSum + (item.totalPrice || 0), 0);\r\n//           return sum + poTotal;\r\n//         }, 0);\r\n        \r\n//         if (totalSpentFromPOs > 5000000) {\r\n//           vendorType = 'equipment';\r\n//         } else if (totalSpentFromPOs > 1000000) {\r\n//           vendorType = 'supplies';\r\n//         } else {\r\n//           vendorType = 'office';\r\n//         }\r\n        \r\n//         // Set credit limit based on vendor type\r\n//         let creditLimit = 500000; // Default\r\n//         if (vendorType === 'equipment') {\r\n//           creditLimit = 2000000;\r\n//         } else if (vendorType === 'supplies') {\r\n//           creditLimit = 1000000;\r\n//         }\r\n        \r\n//         // Determine credit status based on payable amount\r\n//         let creditStatus = 'good';\r\n//         if (totalPayable === 0) {\r\n//           creditStatus = 'excellent';\r\n//         } else if (totalPayable > creditLimit * 0.9) {\r\n//           creditStatus = 'hold';\r\n//         } else if (totalPayable > creditLimit * 0.7) {\r\n//           creditStatus = 'watch';\r\n//         }\r\n\r\n//         return {\r\n//           id: vendor.id,\r\n//           name: vendorDetails?.fullName || vendorDetails?.name || `Vendor ${vendor.id}`,\r\n//           email: contactInfo.emailAddress || 'No email provided',\r\n//           phone: contactInfo.number || 'No phone provided',\r\n//           address: `${contactInfo.street1 || ''} ${contactInfo.city || ''} ${contactInfo.country || ''}`.trim() || 'No address provided',\r\n//           vendorType: vendorType,\r\n//           creditLimit: creditLimit,\r\n//           paymentTerms: vendorType === 'equipment' ? 45 : (vendorType === 'supplies' ? 30 : 15),\r\n//           totalPayable: totalPayable,\r\n//           overdueAmount: overdueAmount,\r\n//           lastPayment: 'No payments',\r\n//           creditStatus: creditStatus,\r\n//           accountBalance: totalPayable,\r\n//           billCount: billCount,\r\n//           avgPaymentDays: 30,\r\n//           status: vendor.status || 'active',\r\n//           type: vendor.type || 'Individual'\r\n//         };\r\n//       });\r\n      \r\n//       // Also add vendors with null vendor_Id as separate entries\r\n//       const nullVendorPOs = allPOData.filter(po => \r\n//         !po.vendor_Id || po.vendor_Id === 'null' || \r\n//         !po.Vendor_Id || po.Vendor_Id === 'null'\r\n//       );\r\n      \r\n//       nullVendorPOs.forEach((po, index) => {\r\n//         const vendorNumber = index + 1;\r\n//         const poTotal = po.purchaseOrderItems.reduce((sum, item) => \r\n//           sum + (item.totalPrice || 0), 0);\r\n//         const vendorTotalPayable = po.status === 'pending' ? poTotal : 0;\r\n   \r\n//       });\r\n      \r\n//       setVendors({ loading: false, data: transformedVendors, error: null });\r\n//     } catch (error) {\r\n//       console.error('Error fetching vendors:', error);\r\n//       setVendors({ loading: false, data: [], error: error.message });\r\n//     }\r\n//   };\r\n\r\n//   // Helper function to get product details by ID\r\n//   const getProductDetails = (productId) => {\r\n//     if (!productId) return { name: 'Unknown Product', description: '', price: 0 };\r\n    \r\n//     const product = (window.productsData || products.data || []).find(p => \r\n//       p.id === productId || p.id === String(productId)\r\n//     );\r\n    \r\n//     if (product) {\r\n//       return {\r\n//         name: product.name || 'Unknown Product',\r\n//         description: product.description || '',\r\n//         price: product.price || 0,\r\n//         costPrice: product.costPrice || 0,\r\n//         quantity: product.quantity || 0\r\n//       };\r\n//     }\r\n    \r\n//     return { name: `Product #${productId}`, description: '', price: 0 };\r\n//   };\r\n\r\n//   // Refresh data function\r\n//   const refreshAllData = async () => {\r\n//     await fetchProducts();\r\n//     await fetchPurchaseOrders();\r\n//     setTimeout(() => fetchVendors(), 500);\r\n//   };\r\n\r\n//   // Load data on component mount\r\n//   useEffect(() => {\r\n//     const loadData = async () => {\r\n//       await fetchProducts();\r\n//       await fetchPurchaseOrders();\r\n//       setTimeout(() => fetchVendors(), 500);\r\n//     };\r\n//     loadData();\r\n//   }, []);\r\n\r\n//   // Helper function to get vendor name by ID\r\n//   const getVendorName = (vendorId) => {\r\n//     if (!vendorId || vendorId === 'null') return 'Unknown Vendor';\r\n//     const vendor = vendors.data.find(v => v.id === vendorId);\r\n//     return vendor ? vendor.name : 'Unknown Vendor';\r\n//   };\r\n\r\n// function combineVendorsWithPurchaseOrders(vendors, purchaseOrders) {\r\n//   console.log(\"Starting combineVendorsWithPurchaseOrders function...\");\r\n  \r\n//   // Create a map for quick vendor lookup\r\n//   const vendorMap = new Map();\r\n  \r\n//   // First, add all vendors with valid names to the map\r\n//   if (vendors && vendors.data && Array.isArray(vendors.data)) {\r\n//     vendors.data.forEach(vendor => {\r\n//       // Only include vendors with valid names (not null, undefined, empty, or \"null\")\r\n//       if (vendor.name && vendor.name.trim() !== '' && vendor.name !== 'null') {\r\n//         vendorMap.set(vendor.id, {\r\n//           ...vendor,\r\n//           purchaseOrders: []\r\n//         });\r\n//       }\r\n//     });\r\n//   }\r\n  \r\n//   // Process all valid purchase orders\r\n//   if (purchaseOrders && Array.isArray(purchaseOrders)) {\r\n//     purchaseOrders.forEach(po => {\r\n//       // Handle both string \"null\" and actual null values\r\n//       const vendorId = po.Vendor_Id || po.vendor_Id;\r\n      \r\n//       // Only process POs with valid vendor_Id (not null, undefined, empty, or \"null\")\r\n//       if (vendorId && vendorId !== 'null') {\r\n//         if (vendorMap.has(vendorId)) {\r\n//           // Add PO to existing vendor\r\n//           vendorMap.get(vendorId).purchaseOrders.push(po);\r\n//         } else {\r\n//           // If vendor with valid name doesn't exist, create a placeholder\r\n//           const uniqueKey = `${vendorId}_${po.POID || po.id}`;\r\n          \r\n//           vendorMap.set(uniqueKey, {\r\n//             id: vendorId,\r\n//             name: `Vendor ${vendorId}`,\r\n//             email: 'unknown@vendor.system',\r\n//             phone: '+000-000-0000',\r\n//             address: 'Unknown Address',\r\n//             vendorType: 'unknown',\r\n//             creditLimit: 0,\r\n//             paymentTerms: 0,\r\n//             lastPayment: 'No payments',\r\n//             creditStatus: 'unknown',\r\n//             billCount: 1,\r\n//             avgPaymentDays: 0,\r\n//             status: 'pending',\r\n//             type: 'Unknown',\r\n//             poId: po.id,\r\n//             purchaseOrders: [po]\r\n//           });\r\n//         }\r\n//       }\r\n//     });\r\n//   }\r\n  \r\n//   // Convert the map back to an array and filter to only include vendors with names\r\n//   const allVendors = Array.from(vendorMap.values());\r\n//   const vendorsWithNames = allVendors.filter(vendor => \r\n//     vendor.name && vendor.name.trim() !== '' && vendor.name !== 'null'\r\n//   );\r\n  \r\n//   return vendorsWithNames;\r\n// }\r\n\r\n// // Example usage with console logging:\r\n// console.log(\"Calling combineVendorsWithPurchaseOrders function...\");\r\n\r\n// // Example usage:\r\n// const vendorsWithPOs = combineVendorsWithPurchaseOrders(vendors, purchaseOrders.data);\r\n\r\n// const calculateAPSummary = () => {\r\n//   console.log(\"Starting AP Summary calculation...\");\r\n  \r\n//   // Get all vendors with their purchase orders\r\n//   const allVendorsWithPOs = combineVendorsWithPurchaseOrders(vendors, purchaseOrders.data);\r\n//   console.log(`Total vendors: ${allVendorsWithPOs.length}`);\r\n  \r\n//   // Calculate total amounts from purchase orders\r\n//   console.log(\"Calculating total AP from purchase orders...\");\r\n//   let totalAP = 0;\r\n//   let totalOverdue = 0;\r\n//   let vendorsWithBalance = 0;\r\n  \r\n//   allVendorsWithPOs.forEach(vendor => {\r\n//     console.log(`Processing vendor: ${vendor.name || 'Unknown Vendor'}`);\r\n    \r\n//     // Calculate vendor's total from purchase orders\r\n//     const vendorTotal = vendor.purchaseOrders.reduce((sum, po) => {\r\n//       const poTotal = po.purchaseOrderItems.reduce((poSum, item) => \r\n//         poSum + (item.totalPrice || 0), 0);\r\n//       console.log(`PO ${po.POID || po.id} total: ${poTotal}`);\r\n//       return sum + poTotal;\r\n//     }, 0);\r\n    \r\n//     console.log(`Vendor ${vendor.name} total: ${vendorTotal}`);\r\n    \r\n//     totalAP += vendorTotal;\r\n    \r\n//     // For overdue calculation, we'll use a simple logic\r\n//     // You can modify this based on your actual overdue calculation\r\n//     const overdueAmount = vendorTotal * 0.1; // Example: 10% of total is overdue\r\n//     totalOverdue += overdueAmount;\r\n    \r\n//     if (vendorTotal > 0) {\r\n//       vendorsWithBalance++;\r\n//     }\r\n//   });\r\n  \r\n//   console.log(`Total AP: ${totalAP}`);\r\n//   console.log(`Total overdue: ${totalOverdue}`);\r\n//   console.log(`Vendors with balance: ${vendorsWithBalance}`);\r\n\r\n//   // Calculate average days outstanding from purchase orders\r\n//   console.log(\"Calculating average days outstanding...\");\r\n//   let totalDaysOutstanding = 0;\r\n//   let poCount = 0;\r\n  \r\n//   allVendorsWithPOs.forEach(vendor => {\r\n//     vendor.purchaseOrders.forEach(po => {\r\n//       console.log(`Processing PO: ${po.POID || po.id}`);\r\n//       console.log(`status: ${po.status}`)\r\n//       // Calculate days based on status\r\n//       let days = 0;\r\n//       switch(po.status) {\r\n//         case 'pending':\r\n//           days = 5;\r\n//           break;\r\n//         case 'Processing':\r\n//           days = 10;\r\n//           break;\r\n//         case 'Shipped':\r\n//           days = 20;\r\n//           break;\r\n//         case 'Delivered':\r\n//           days = 30;\r\n//           break;\r\n//         default:\r\n//           days = 15;\r\n//       }\r\n      \r\n//       console.log(`Adding ${days} days for PO ${po.POID || po.id} with status ${po.status}`);\r\n//       totalDaysOutstanding += days;\r\n//       poCount++;\r\n//     });\r\n//   });\r\n  \r\n//   const avgDaysOutstanding = poCount > 0 ? Math.round(totalDaysOutstanding / poCount) : 0;\r\n//   console.log(`Average days outstanding: ${avgDaysOutstanding}`);\r\n\r\n//   console.log(\"AP Summary calculation completed\");\r\n  \r\n//   return {\r\n//     totalAP,\r\n//     totalOverdue,\r\n//     vendorsWithBalance,\r\n//     avgDaysOutstanding\r\n//   };\r\n// };\r\n//   const getFilteredVendors = () => {\r\n//     let filtered = [...vendors.data];\r\n\r\n//     if (filters.vendorType !== 'all') {\r\n//       filtered = filtered.filter(vendor => vendor.vendorType === filters.vendorType);\r\n//     }\r\n\r\n//     if (filters.status !== 'all') {\r\n//       filtered = filtered.filter(vendor => {\r\n//         if (filters.status === 'overdue') return vendor.overdueAmount > 0;\r\n//         if (filters.status === 'current') return vendor.totalPayable > 0 && vendor.overdueAmount === 0;\r\n//         if (filters.status === 'paid_up') return vendor.totalPayable === 0;\r\n//         return true;\r\n//       });\r\n//     }\r\n\r\n//     if (filters.searchTerm) {\r\n//       const term = filters.searchTerm.toLowerCase();\r\n//       filtered = filtered.filter(vendor =>\r\n//         vendor.name.toLowerCase().includes(term) ||\r\n//         vendor.email.toLowerCase().includes(term) ||\r\n//         vendor.id.toLowerCase().includes(term)\r\n//       );\r\n//     }\r\n\r\n//     return filtered;\r\n//   };\r\n\r\n//   const getCreditStatusColor = (status) => {\r\n//     switch (status) {\r\n//       case 'excellent': return 'bg-green-100 text-green-800';\r\n//       case 'good': return 'bg-blue-100 text-blue-800';\r\n//       case 'watch': return 'bg-yellow-100 text-yellow-800';\r\n//       case 'hold': return 'bg-red-100 text-red-800';\r\n//       case 'unknown': return 'bg-gray-100 text-gray-800';\r\n//       default: return 'bg-gray-100 text-gray-800';\r\n//     }\r\n//   };\r\n\r\n//   const getPOStatusColor = (status) => {\r\n//     switch (status) {\r\n//       case 'applied': return 'bg-green-100 text-green-800';\r\n//       case 'pending': return 'bg-yellow-100 text-yellow-800';\r\n//       case 'cancelled': return 'bg-red-100 text-red-800';\r\n//       default: return 'bg-gray-100 text-gray-800';\r\n//     }\r\n//   };\r\n\r\n//   const formatCurrency = (amount) => {\r\n//     return new Intl.NumberFormat('en-PK', {\r\n//       style: 'currency',\r\n//       currency: 'PKR',\r\n//       minimumFractionDigits: 0,\r\n//       maximumFractionDigits: 0\r\n//     }).format(amount);\r\n//   };\r\n\r\n//   const summary = calculateAPSummary();\r\n//   const filteredVendors = getFilteredVendors();\r\n\r\n//   // Loading state\r\n//   if (purchaseOrders.loading || vendors.loading || products.loading) {\r\n//     return (\r\n//       <div className=\"flex items-center justify-center min-h-screen\">\r\n//         <div className=\"flex items-center space-x-3\">\r\n//           <Loader className=\"animate-spin text-rose-600\" size={24} />\r\n//           <span className=\"text-gray-600\">Loading data from API...</span>\r\n//         </div>\r\n//       </div>\r\n//     );\r\n//   }\r\n\r\n//   // Error state\r\n//   if (purchaseOrders.error || vendors.error) {\r\n//     return (\r\n//       <div className=\"max-w-7xl mx-auto p-6\">\r\n//         <div className=\"bg-red-50 border border-red-200 rounded-lg p-6\">\r\n//           <div className=\"flex items-center mb-4\">\r\n//             <AlertTriangle className=\"text-red-600 mr-2\" size={20} />\r\n//             <h3 className=\"font-medium text-red-800\">API Connection Error</h3>\r\n//           </div>\r\n//           <div className=\"text-red-700 mb-4\">\r\n//             {purchaseOrders.error && <div>Purchase Orders API Error: {purchaseOrders.error}</div>}\r\n//             {vendors.error && <div>Vendors API Error: {vendors.error}</div>}\r\n//             {products.error && <div>Products API Error: {products.error}</div>}\r\n//           </div>\r\n//           <button\r\n//             onClick={refreshAllData}\r\n//             className=\"px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 flex items-center space-x-2\"\r\n//           >\r\n//             <RefreshCw size={16} />\r\n//             <span>Retry Connection</span>\r\n//           </button>\r\n//         </div>\r\n//       </div>\r\n//     );\r\n//   }\r\n\r\n// // Usage in component\r\n// const vendorPOData = createVendorPOMapping(purchaseOrders, vendors);\r\n// // Extract all purchase orders from valid vendors into a flat array\r\n// const validPurchaseOrders = [];\r\n// vendorPOData.forEach(({ vendor, purchaseOrders }) => {\r\n//   // Only include purchase orders from this vendor if the vendor has a valid name\r\n//   if (vendor && vendor.name && vendor.name.trim() !== '') {\r\n//     purchaseOrders.forEach(po => {\r\n//       // Add vendor name to each purchase order for easy access\r\n//       validPurchaseOrders.push({\r\n//         ...po,\r\n//         vendorName: vendor.name // Add the vendor name directly to the PO object\r\n//       });\r\n//     });\r\n//   }\r\n// });\r\n\r\n//   return (\r\n//     <div className=\"max-w-7xl mx-auto p-6 bg-white\">\r\n//       {/* Header */}\r\n//       <div className=\"mb-8\">\r\n//         <h1 className=\"text-3xl font-bold text-gray-900 mb-2 flex items-center\">\r\n//           <CreditCard className=\"mr-3 text-rose-600\" />\r\n//           Accounts Payable\r\n//         </h1>\r\n//         <p className=\"text-gray-600\">Manage vendor purchase orders, bills, and payments</p>\r\n//       </div>\r\n\r\n//       {/* Summary Cards */}\r\n//       <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\r\n//         <div className=\"bg-blue-50 p-6 rounded-lg border border-blue-200\">\r\n//           <div className=\"flex items-center justify-between\">\r\n//             <div>\r\n//               <p className=\"text-blue-600 text-sm font-medium\">Total A/P</p>\r\n//               <p className=\"text-2xl font-bold text-blue-900\">{formatCurrency(summary.totalAP)}</p>\r\n//             </div>\r\n//             <DollarSign className=\"text-blue-600\" size={24} />\r\n//           </div>\r\n//           <p className=\"text-sm text-blue-700 mt-2\">{summary.vendorsWithBalance} vendors with pending orders</p>\r\n//         </div>\r\n\r\n//         <div className=\"bg-red-50 p-6 rounded-lg border border-red-200\">\r\n//           <div className=\"flex items-center justify-between\">\r\n//             <div>\r\n//               <p className=\"text-red-600 text-sm font-medium\">Pending Amount</p>\r\n//               <p className=\"text-2xl font-bold text-red-900\">{formatCurrency(summary.totalOverdue)}</p>\r\n//             </div>\r\n//             <AlertTriangle className=\"text-red-600\" size={24} />\r\n//           </div>\r\n//           <p className=\"text-sm text-red-700 mt-2\">\r\n//             {summary.totalAP > 0 ? ((summary.totalOverdue / summary.totalAP) * 100).toFixed(1) : 0}% of total A/P\r\n//           </p>\r\n//         </div>\r\n\r\n//         <div className=\"bg-yellow-50 p-6 rounded-lg border border-yellow-200\">\r\n//           <div className=\"flex items-center justify-between\">\r\n//             <div>\r\n//               <p className=\"text-yellow-600 text-sm font-medium\">Avg. Days Outstanding</p>\r\n//               <p className=\"text-2xl font-bold text-yellow-900\">{summary.avgDaysOutstanding}</p>\r\n//             </div>\r\n//             <Clock className=\"text-yellow-600\" size={24} />\r\n//           </div>\r\n//           <p className=\"text-sm text-yellow-700 mt-2\">Payment performance</p>\r\n//         </div>\r\n\r\n//         <div className=\"bg-purple-50 p-6 rounded-lg border border-purple-200\">\r\n//           <div className=\"flex items-center justify-between\">\r\n//             <div>\r\n//               <p className=\"text-purple-600 text-sm font-medium\">Active Vendors</p>\r\n              \r\n//               <p className=\"text-2xl font-bold text-purple-900\">{vendorsWithPOs.length}</p>\r\n//             </div>\r\n//             <Users className=\"text-purple-600\" size={24} />\r\n//           </div>\r\n//           <p className=\"text-sm text-purple-700 mt-2\">Total vendor accounts</p>\r\n//         </div>\r\n//       </div>\r\n\r\n//       {/* Tabs */}\r\n//       <div className=\"mb-6\">\r\n//         <div className=\"border-b border-gray-200\">\r\n//           <nav className=\"-mb-px flex space-x-8\">\r\n//             {[\r\n//               { id: 'overview', name: 'Vendor Overview', icon: Users },\r\n//               { id: 'purchase-orders', name: 'Purchase Orders', icon: FileText },\r\n//               { id: 'payments', name: 'Payment History', icon: CheckCircle },\r\n//               { id: 'products', name: 'Product Catalog', icon: Package }\r\n//             ].map((tab) => (\r\n//               <button\r\n//                 key={tab.id}\r\n//                 onClick={() => setActiveTab(tab.id)}\r\n//                 className={`flex items-center py-2 px-1 border-b-2 font-medium text-sm ${\r\n//                   activeTab === tab.id\r\n//                     ? 'border-rose-500 text-rose-600'\r\n//                     : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\r\n//                 }`}\r\n//               >\r\n//                 <tab.icon className=\"mr-2\" size={16} />\r\n//                 {tab.name}\r\n//               </button>\r\n//             ))}\r\n//           </nav>\r\n//         </div>\r\n//       </div>\r\n\r\n//       {/* Tab Content */}\r\n//       {activeTab === 'overview' && (\r\n//         <div>\r\n//           {/* Filters */}\r\n//           <div className=\"flex flex-wrap items-center gap-4 mb-6\">\r\n//             <div className=\"relative\">\r\n//               <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" size={16} />\r\n//               <input\r\n//                 type=\"text\"\r\n//                 placeholder=\"Search vendors...\"\r\n//                 value={filters.searchTerm}\r\n//                 onChange={(e) => setFilters({ ...filters, searchTerm: e.target.value })}\r\n//                 className=\"pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-rose-500 focus:border-transparent\"\r\n//               />\r\n//             </div>\r\n\r\n//             <select\r\n//               value={filters.vendorType}\r\n//               onChange={(e) => setFilters({ ...filters, vendorType: e.target.value })}\r\n//               className=\"px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-rose-500 focus:border-transparent\"\r\n//             >\r\n//               <option value=\"all\">All Vendor Types</option>\r\n//               <option value=\"equipment\">Equipment</option>\r\n//               <option value=\"supplies\">Supplies</option>\r\n//               <option value=\"office\">Office</option>\r\n//               <option value=\"unknown\">Unknown</option>\r\n//             </select>\r\n\r\n//             <select\r\n//               value={filters.status}\r\n//               onChange={(e) => setFilters({ ...filters, status: e.target.value })}\r\n//               className=\"px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-rose-500 focus:border-transparent\"\r\n//             >\r\n//               <option value=\"all\">All Statuses</option>\r\n//               <option value=\"current\">Current</option>\r\n//               <option value=\"overdue\">Pending</option>\r\n//               <option value=\"paid_up\">Completed</option>\r\n//             </select>\r\n\r\n//             <button\r\n//               onClick={refreshAllData}\r\n//               className=\"px-4 py-2 bg-rose-600 text-white rounded-lg hover:bg-rose-700 flex items-center space-x-2\"\r\n//             >\r\n//               <RefreshCw size={16} />\r\n//               <span>Refresh Data</span>\r\n//             </button>\r\n//           </div>\r\n\r\n//           {/* Vendor List */}\r\n//           <div className=\"bg-white border border-gray-200 rounded-lg overflow-hidden\">\r\n//             <div className=\"overflow-x-auto\">\r\n//               <table className=\"w-full\">\r\n//                 <thead className=\"bg-gray-50\">\r\n//                   <tr>\r\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                       Vendor\r\n//                     </th>\r\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                       Products\r\n//                     </th>\r\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                       Total Amount\r\n//                     </th>\r\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                       Status\r\n//                     </th>\r\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                       Remarks\r\n//                     </th>\r\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                       Actions\r\n//                     </th>\r\n//                   </tr>\r\n//                 </thead>\r\n//                   <tbody className=\"bg-white divide-y divide-gray-200\">\r\n//   {vendorsWithPOs.map((vendor) => {\r\n//     const hasPos = vendor.purchaseOrders && vendor.purchaseOrders.length > 0;\r\n//     const vendorTotal = hasPos \r\n//       ? vendor.purchaseOrders.reduce((sum, po) => {\r\n//           const poTotal = po.purchaseOrderItems \r\n//             ? po.purchaseOrderItems.reduce((itemSum, item) => itemSum + (item.totalPrice || 0), 0)\r\n//             : 0;\r\n//           return sum + poTotal;\r\n//         }, 0)\r\n//       : 0;\r\n    \r\n//     // Collect all products from all POs for this vendor\r\n//     const allProducts = [];\r\n//     if (hasPos) {\r\n//       vendor.purchaseOrders.forEach(po => {\r\n//         if (po.purchaseOrderItems) {\r\n//           po.purchaseOrderItems.forEach(item => {\r\n//             const product = getProductDetails(item.product_Id);\r\n//             allProducts.push({\r\n//               poId: po.POID,\r\n//               name: product?.name || \"Unknown Product\",\r\n//               quantity: item.quantity,\r\n//               description: product?.description\r\n//             });\r\n//           });\r\n//         }\r\n//       });\r\n//     }\r\n    \r\n//     // Get all statuses from vendor's POs - FIXED LOGIC\r\n//     const statuses = hasPos \r\n//       ? vendor.purchaseOrders.map(po => ({\r\n//           poId: po.POID,\r\n//           status: po.status,\r\n//           statusColor: getPOStatusColor(po.status)\r\n//         }))\r\n//       : [];\r\n    \r\n//     // Count statuses for better display\r\n//     const statusCounts = {};\r\n//     if (hasPos) {\r\n//       vendor.purchaseOrders.forEach(po => {\r\n//         if (po.status) {\r\n//           statusCounts[po.status] = (statusCounts[po.status] || 0) + 1;\r\n//         }\r\n//       });\r\n//     }\r\n    \r\n//     return (\r\n//       <tr key={vendor.id} className=\"hover:bg-gray-50\">\r\n//         {/* Vendor */}\r\n//         <td className=\"px-6 py-4 whitespace-nowrap\">\r\n//           <div className=\"text-sm font-medium text-gray-900\">\r\n//             {vendor.name || \"Unknown Vendor\"}\r\n//           </div>\r\n//           <div className=\"text-xs text-gray-500\">\r\n//             {hasPos ? vendor.purchaseOrders.map(po => `PO-${po.POID}`).join(', ') : \"No POs\"}\r\n//           </div>\r\n//         </td>\r\n        \r\n//         {/* Products - All in one cell */}\r\n//         <td className=\"px-6 py-4\">\r\n//           {hasPos ? (\r\n//             <div className=\"text-sm text-gray-900\">\r\n//               {allProducts.map((product, index) => (\r\n//                 <div key={index} className=\"mb-1\">\r\n//                   <span className=\"font-medium\">{product.name}</span>\r\n//                   <span className=\"text-gray-500 ml-2\">x{product.quantity}</span>\r\n//                   {product.description && (\r\n//                     <span className=\"text-xs text-gray-400 ml-2\">\r\n//                       ({product.description})\r\n//                     </span>\r\n//                   )}\r\n//                   <span className=\"text-xs text-gray-500 ml-2\">\r\n//                     [PO-{product.poId}]\r\n//                   </span>\r\n//                 </div>\r\n//               ))}\r\n//             </div>\r\n//           ) : (\r\n//             <div className=\"text-sm text-gray-500\">No purchase orders</div>\r\n//           )}\r\n//         </td>\r\n        \r\n//         {/* Total Amount */}\r\n//         <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\r\n//           {formatCurrency(vendorTotal)}\r\n//         </td>\r\n        \r\n//         {/* Status - Show all statuses - FIXED LOGIC */}\r\n//         <td className=\"px-6 py-4 whitespace-nowrap\">\r\n//           {!hasPos ? (\r\n//             <span className=\"px-2 py-1 text-xs font-medium rounded-full bg-gray-100 text-gray-800\">\r\n//               No Orders\r\n//             </span>\r\n//           ) : (\r\n//             <div className=\"flex flex-wrap gap-1\">\r\n//               {/* Display unique statuses with counts */}\r\n//               {Object.entries(statusCounts).map(([status, count], index) => (\r\n//                 <span \r\n//                   key={index} \r\n//                   className={`px-2 py-1 text-xs font-medium rounded-full ${getPOStatusColor(status)}`}\r\n//                 >\r\n//                   {status} {count > 1 ? `(${count})` : ''}\r\n//                 </span>\r\n//               ))}\r\n//             </div>\r\n//           )}\r\n//         </td>\r\n        \r\n//         {/* Remarks - Combined */}\r\n//         <td className=\"px-6 py-4 text-sm text-gray-900\">\r\n//           {hasPos ? (\r\n//             <div>\r\n//               {vendor.purchaseOrders.map((po, index) => (\r\n//                 <div key={index} className=\"mb-1\">\r\n//                   {po.remarks ? (\r\n//                     <span>PO-{po.POID}: {po.remarks}</span>\r\n//                   ) : (\r\n//                     <span className=\"text-gray-500\">PO-{po.POID}: No remarks</span>\r\n//                   )}\r\n//                 </div>\r\n//               ))}\r\n//             </div>\r\n//           ) : (\r\n//             <span className=\"text-gray-500\">-</span>\r\n//           )}\r\n//         </td>\r\n        \r\n//         {/* Actions */}\r\n//         <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">\r\n//           {!hasPos ? (\r\n//             <button\r\n//               className=\"text-gray-400 cursor-not-allowed\"\r\n//               title=\"No actions available\"\r\n//               disabled\r\n//             >\r\n//               <Eye size={16} />\r\n//             </button>\r\n//           ) : (\r\n//             <div className=\"flex flex-wrap gap-2\">\r\n//               {vendor.purchaseOrders.map((po, index) => (\r\n//                 <div key={index} className=\"flex items-center\">\r\n//                   <span className=\"text-xs text-gray-500 mr-1\">PO-{po.POID}:</span>\r\n//                   <button\r\n//                     onClick={() => {\r\n//                       setSelectedPO(po);\r\n//                     }}\r\n//                     className=\"text-rose-600 hover:text-rose-900 mr-1\"\r\n//                     title={`View PO-${po.POID} Details`}\r\n//                   >\r\n//                     <Eye size={16} />\r\n//                   </button>\r\n//                 </div>\r\n//               ))}\r\n//             </div>\r\n//           )}\r\n//         </td>\r\n//       </tr>\r\n//     );\r\n//   })}\r\n// </tbody>\r\n\r\n//               </table>\r\n//             </div>\r\n\r\n//             {purchaseOrders.data.length === 0 && (\r\n//               <div className=\"text-center py-12\">\r\n//                 <div className=\"text-gray-500 text-lg\">No pending purchase orders found</div>\r\n//                 <p className=\"text-gray-400 mt-2\">All purchase orders are either applied or cancelled</p>\r\n//               </div>\r\n//             )}\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n\r\n//       {activeTab === 'payments' && (\r\n//         <div>\r\n//           <div className=\"bg-white border border-gray-200 rounded-lg overflow-hidden\">\r\n//             <div className=\"px-6 py-4 border-b border-gray-200\">\r\n//               <h3 className=\"text-lg font-semibold text-gray-900\">Payment History</h3>\r\n//             </div>\r\n//             <div className=\"overflow-x-auto\">\r\n//               <table className=\"w-full\">\r\n//                 <thead className=\"bg-gray-50\">\r\n//                   <tr>\r\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                       PO ID\r\n//                     </th>\r\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                       Vendor\r\n//                     </th>\r\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                       Products\r\n//                     </th>\r\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                       Amount\r\n//                     </th>\r\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                       Status\r\n//                     </th>\r\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                       Payment Status\r\n//                     </th>\r\n//                   </tr>\r\n//                 </thead>\r\n//                 <tbody className=\"bg-white divide-y divide-gray-200\">\r\n//                   {(window.allPurchaseOrdersData || []).filter(po => po.status === 'applied').map((po) => {\r\n//                     const poTotal = po.purchaseOrderItems.reduce((sum, item) => sum + (item.totalPrice || 0), 0);\r\n//                     return (\r\n//                       <tr key={po.id} className=\"hover:bg-gray-50\">\r\n//                         <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\r\n//                           #{po.id}\r\n//                         </td>\r\n//                         <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\r\n//                           {getVendorName(po.vendor_Id || po.Vendor_Id)}\r\n//                         </td>\r\n//                         <td className=\"px-6 py-4 text-sm text-gray-900\">\r\n//                           {po.purchaseOrderItems.map((item, index) => {\r\n//                             const product = getProductDetails(item.product_Id);\r\n//                             return (\r\n//                               <span key={index} className=\"block\">\r\n//                                 {product.name} x{item.quantity}\r\n//                               </span>\r\n//                             );\r\n//                           })}\r\n//                         </td>\r\n//                         <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\r\n//                           {formatCurrency(poTotal)}\r\n//                         </td>\r\n//                         <td className=\"px-6 py-4 whitespace-nowrap\">\r\n//                           <span className=\"px-2 py-1 text-xs font-medium rounded-full bg-green-100 text-green-800\">\r\n//                             Applied\r\n//                           </span>\r\n//                         </td>\r\n//                         <td className=\"px-6 py-4 whitespace-nowrap\">\r\n//                           <span className=\"px-2 py-1 text-xs font-medium rounded-full bg-blue-100 text-blue-800\">\r\n//                             Processed\r\n//                           </span>\r\n//                         </td>\r\n//                       </tr>\r\n//                     );\r\n//                   })}\r\n//                 </tbody>\r\n//               </table>\r\n//             </div>\r\n            \r\n//             {(!window.allPurchaseOrdersData?.filter(po => po.status === 'applied').length || window.allPurchaseOrdersData?.filter(po => po.status === 'applied').length === 0) && (\r\n//               <div className=\"text-center py-12\">\r\n//                 <div className=\"text-gray-500 text-lg\">No payment history found</div>\r\n//                 <p className=\"text-gray-400 mt-2\">No purchase orders have been processed yet</p>\r\n//               </div>\r\n//             )}\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n\r\n//       {activeTab === 'products' && (\r\n//         <div>\r\n//           <div className=\"bg-white border border-gray-200 rounded-lg overflow-hidden\">\r\n//             <div className=\"px-6 py-4 border-b border-gray-200\">\r\n//               <h3 className=\"text-lg font-semibold text-gray-900\">Product Catalog ({products.data.length})</h3>\r\n//             </div>\r\n//             <div className=\"overflow-x-auto\">\r\n//               <table className=\"w-full\">\r\n//                 <thead className=\"bg-gray-50\">\r\n//                   <tr>\r\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                       Product ID\r\n//                     </th>\r\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                       Name\r\n//                     </th>\r\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                       Description\r\n//                     </th>\r\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                       Cost Price\r\n//                     </th>\r\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                       Selling Price\r\n//                     </th>\r\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                       Stock\r\n//                     </th>\r\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                       Status\r\n//                     </th>\r\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                       Margin\r\n//                     </th>\r\n//                   </tr>\r\n//                 </thead>\r\n//                 <tbody className=\"bg-white divide-y divide-gray-200\">\r\n//                   {products.data.map((product) => {\r\n//                     const margin = product.price && product.costPrice \r\n//                       ? ((product.price - product.costPrice) / product.costPrice * 100).toFixed(1)\r\n//                       : 0;\r\n                    \r\n//                     return (\r\n//                       <tr key={product.id} className=\"hover:bg-gray-50\">\r\n//                         <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\r\n//                           #{product.id}\r\n//                         </td>\r\n//                         <td className=\"px-6 py-4\">\r\n//                           <div className=\"text-sm font-medium text-gray-900\">{product.name}</div>\r\n//                           {product.POID && (\r\n//                             <div className=\"text-xs text-gray-500\">POID: {product.POID}</div>\r\n//                           )}\r\n//                         </td>\r\n//                         <td className=\"px-6 py-4 text-sm text-gray-900\">\r\n//                           {product.description?.replace(/<[^>]*>/g, '') || 'No description'}\r\n//                         </td>\r\n//                         <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\r\n//                           {formatCurrency(product.costPrice || 0)}\r\n//                         </td>\r\n//                         <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\r\n//                           {formatCurrency(product.price || 0)}\r\n//                         </td>\r\n//                         <td className=\"px-6 py-4 whitespace-nowrap\">\r\n//                           <span className={`px-2 py-1 text-xs font-medium rounded-full ${\r\n//                             product.quantity > 20 \r\n//                               ? 'bg-green-100 text-green-800' \r\n//                               : product.quantity > 10 \r\n//                                 ? 'bg-yellow-100 text-yellow-800' \r\n//                                 : 'bg-red-100 text-red-800'\r\n//                           }`}>\r\n//                             {product.quantity || 0} units\r\n//                           </span>\r\n//                         </td>\r\n//                         <td className=\"px-6 py-4 whitespace-nowrap\">\r\n//                           <span className={`px-2 py-1 text-xs font-medium rounded-full ${\r\n//                             product.status === 'Active' \r\n//                               ? 'bg-green-100 text-green-800' \r\n//                               : 'bg-gray-100 text-gray-800'\r\n//                           }`}>\r\n//                             {product.status}\r\n//                           </span>\r\n//                         </td>\r\n//                         <td className=\"px-6 py-4 whitespace-nowrap\">\r\n//                           <span className={`font-medium ${\r\n//                             margin > 30 ? 'text-green-600' : margin > 15 ? 'text-yellow-600' : 'text-red-600'\r\n//                           }`}>\r\n//                             {margin}%\r\n//                           </span>\r\n//                         </td>\r\n//                       </tr>\r\n//                     );\r\n//                   })}\r\n//                 </tbody>\r\n//               </table>\r\n//             </div>\r\n\r\n//             {products.data.length === 0 && (\r\n//               <div className=\"text-center py-12\">\r\n//                 <div className=\"text-gray-500 text-lg\">No products found</div>\r\n//                 <p className=\"text-gray-400 mt-2\">Product catalog is empty</p>\r\n//               </div>\r\n//             )}\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n\r\n//       {/* Vendor Detail Modal */}\r\n//       {selectedVendor && (\r\n//         <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center p-4 z-50\">\r\n//           <div className=\"bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-y-auto\">\r\n//             <div className=\"px-6 py-4 border-b border-gray-200\">\r\n//               <div className=\"flex items-center justify-between\">\r\n//                 <h3 className=\"text-lg font-semibold text-gray-900\">\r\n//                   Vendor Details - {selectedVendor.name}\r\n//                 </h3>\r\n//                 <button\r\n//                   onClick={() => setSelectedVendor(null)}\r\n//                   className=\"text-gray-400 hover:text-gray-600\"\r\n//                 >\r\n//                   <XCircle size={20} />\r\n//                 </button>\r\n//               </div>\r\n//             </div>\r\n            \r\n//             <div className=\"px-6 py-4\">\r\n//               {/* Vendor Info Grid */}\r\n//               <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-6\">\r\n//                 <div className=\"space-y-4\">\r\n//                   <div>\r\n//                     <label className=\"text-sm font-medium text-gray-500\">Vendor ID</label>\r\n//                     <p className=\"text-sm text-gray-900\">{selectedVendor.id}</p>\r\n//                   </div>\r\n//                   <div>\r\n//                     <label className=\"text-sm font-medium text-gray-500\">Email</label>\r\n//                     <p className=\"text-sm text-gray-900\">{selectedVendor.email}</p>\r\n//                   </div>\r\n//                   <div>\r\n//                     <label className=\"text-sm font-medium text-gray-500\">Phone</label>\r\n//                     <p className=\"text-sm text-gray-900\">{selectedVendor.phone}</p>\r\n//                   </div>\r\n//                   <div>\r\n//                     <label className=\"text-sm font-medium text-gray-500\">Address</label>\r\n//                     <p className=\"text-sm text-gray-900\">{selectedVendor.address}</p>\r\n//                   </div>\r\n//                 </div>\r\n                \r\n//                 <div className=\"space-y-4\">\r\n//                   <div>\r\n//                     <label className=\"text-sm font-medium text-gray-500\">Vendor Type</label>\r\n//                     <p className=\"text-sm text-gray-900\">{selectedVendor.vendorType.replace('_', ' ')}</p>\r\n//                   </div>\r\n//                   <div>\r\n//                     <label className=\"text-sm font-medium text-gray-500\">Credit Limit</label>\r\n//                     <p className=\"text-sm text-gray-900\">{formatCurrency(selectedVendor.creditLimit)}</p>\r\n//                   </div>\r\n//                   <div>\r\n//                     <label className=\"text-sm font-medium text-gray-500\">Payment Terms</label>\r\n//                     <p className=\"text-sm text-gray-900\">{selectedVendor.paymentTerms} days</p>\r\n//                   </div>\r\n//                   <div>\r\n//                     <label className=\"text-sm font-medium text-gray-500\">Credit Status</label>\r\n//                     <span className={`px-2 py-1 text-xs font-medium rounded-full ${getCreditStatusColor(selectedVendor.creditStatus)}`}>\r\n//                       {selectedVendor.creditStatus.replace('_', ' ')}\r\n//                     </span>\r\n//                   </div>\r\n//                 </div>\r\n//               </div>\r\n\r\n//               {/* Financial Summary */}\r\n//               <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\r\n//                 <div className=\"bg-blue-50 p-4 rounded-lg\">\r\n//                   <div className=\"text-sm font-medium text-blue-600\">Pending Amount</div>\r\n//                   <div className=\"text-xl font-bold text-blue-900\">\r\n//                     {formatCurrency(selectedVendor.totalPayable)}\r\n//                   </div>\r\n//                 </div>\r\n//                 <div className=\"bg-red-50 p-4 rounded-lg\">\r\n//                   <div className=\"text-sm font-medium text-red-600\">Overdue Amount</div>\r\n//                   <div className=\"text-xl font-bold text-red-900\">\r\n//                     {formatCurrency(selectedVendor.overdueAmount)}\r\n//                   </div>\r\n//                 </div>\r\n//                 <div className=\"bg-green-50 p-4 rounded-lg\">\r\n//                   <div className=\"text-sm font-medium text-green-600\">Credit Available</div>\r\n//                   <div className=\"text-xl font-bold text-green-900\">\r\n//                     {formatCurrency(selectedVendor.creditLimit - selectedVendor.totalPayable)}\r\n//                   </div>\r\n//                 </div>\r\n//                 <div className=\"bg-purple-50 p-4 rounded-lg\">\r\n//                   <div className=\"text-sm font-medium text-purple-600\">Avg Payment Days</div>\r\n//                   <div className=\"text-xl font-bold text-purple-900\">\r\n//                     {selectedVendor.avgPaymentDays}\r\n//                   </div>\r\n//                 </div>\r\n//               </div>\r\n\r\n//               {/* Vendor Purchase Orders */}\r\n//               <div className=\"mb-6\">\r\n//                 <h4 className=\"text-md font-semibold text-gray-900 mb-3\">Vendor Purchase Orders</h4>\r\n//                 <div className=\"overflow-x-auto\">\r\n//                   <table className=\"w-full border border-gray-200 rounded\">\r\n//                     <thead className=\"bg-gray-50\">\r\n//                       <tr>\r\n//                         <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500\">PO</th>\r\n//                         <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500\">Products</th>\r\n//                         <th className=\"px-4 py-2 text-right text-xs font-medium text-gray-500\">Amount</th>\r\n//                         <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500\">Status</th>\r\n//                         <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500\">Remarks</th>\r\n//                       </tr>\r\n//                     </thead>\r\n//                     <tbody className=\"divide-y divide-gray-200\">\r\n//                       {(window.allPurchaseOrdersData || [])\r\n//                         .filter(po => {\r\n//                           if (selectedVendor.id.startsWith('unknown-vendor-')) {\r\n//                             return po.id === selectedVendor.poId;\r\n//                           }\r\n//                           return (po.vendor_Id === selectedVendor.id || po.Vendor_Id === selectedVendor.id);\r\n//                         })\r\n//                         .map((po) => {\r\n//                           const poTotal = po.purchaseOrderItems.reduce((sum, item) => sum + (item.totalPrice || 0), 0);\r\n//                           return (\r\n//                             <tr key={po.id}>\r\n//                               <td className=\"px-4 py-2 text-sm text-gray-900\">#{po.id}</td>\r\n//                               <td className=\"px-4 py-2 text-sm text-gray-900\">\r\n//                                 {po.purchaseOrderItems.map((item, index) => {\r\n//                                   const product = getProductDetails(item.product_Id);\r\n//                                   return (\r\n//                                     <span key={index} className=\"block\">\r\n//                                       {product.name} x{item.quantity}\r\n//                                     </span>\r\n//                                   );\r\n//                                 })}\r\n//                               </td>\r\n//                               <td className=\"px-4 py-2 text-sm text-gray-900 text-right\">{formatCurrency(poTotal)}</td>\r\n//                               <td className=\"px-4 py-2\">\r\n//                                 <span className={`px-2 py-1 text-xs font-medium rounded-full ${getPOStatusColor(po.status)}`}>\r\n//                                   {po.status}\r\n//                                 </span>\r\n//                               </td>\r\n//                               <td className=\"px-4 py-2 text-sm text-gray-900\">{po.remarks || 'No remarks'}</td>\r\n//                             </tr>\r\n//                           );\r\n//                         })}\r\n//                     </tbody>\r\n//                   </table>\r\n//                 </div>\r\n                \r\n//                 {(window.allPurchaseOrdersData || [])\r\n//                   .filter(po => {\r\n//                     if (selectedVendor.id.startsWith('unknown-vendor-')) {\r\n//                       return po.id === selectedVendor.poId;\r\n//                     }\r\n//                     return (po.vendor_Id === selectedVendor.id || po.Vendor_Id === selectedVendor.id);\r\n//                   }).length === 0 && (\r\n//                     <div className=\"text-center py-4 text-gray-500\">\r\n//                       No purchase orders found for this vendor\r\n//                     </div>\r\n//                   )}\r\n//               </div>\r\n\r\n//               {/* Action Buttons */}\r\n//               <div className=\"flex space-x-3\">\r\n//                 <button className=\"px-4 py-2 bg-rose-600 text-white rounded-lg hover:bg-rose-700 flex items-center space-x-2\">\r\n//                   <Plus size={16} />\r\n//                   <span>New Purchase Order</span>\r\n//                 </button>\r\n//                 <button className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center space-x-2\">\r\n//                   <CheckCircle size={16} />\r\n//                   <span>Record Payment</span>\r\n//                 </button>\r\n//                 <button className=\"px-4 py-2 bg-yellow-600 text-white rounded-lg hover:bg-yellow-700 flex items-center space-x-2\">\r\n//                   <Mail size={16} />\r\n//                   <span>Send Statement</span>\r\n//                 </button>\r\n//               </div>\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n\r\n//       {/* Purchase Order Detail Modal */}\r\n// {selectedPO && (\r\n//   <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center p-4 z-50\">\r\n//     <div className=\"bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-y-auto\">\r\n      \r\n//       {/* Header */}\r\n//       <div className=\"px-6 py-4 border-b border-gray-200\">\r\n//         <div className=\"flex items-center justify-between\">\r\n//           <h3 className=\"text-lg font-semibold text-gray-900\">\r\n//             Purchase Order Details - #{selectedPO.id}\r\n//           </h3>\r\n//           <button\r\n//             onClick={() => setSelectedPO(null)}\r\n//             className=\"text-gray-400 hover:text-gray-600\"\r\n//           >\r\n//             <XCircle size={20} />\r\n//           </button>\r\n//         </div>\r\n//       </div>\r\n      \r\n//       {/* Body */}\r\n//       <div className=\"px-6 py-4\">\r\n        \r\n//         {/* PO Info */}\r\n//         <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-6\">\r\n//           <div className=\"space-y-4\">\r\n//             <div>\r\n//               <label className=\"text-sm font-medium text-gray-500\">Purchase Order ID</label>\r\n//               <p className=\"text-sm text-gray-900\">{selectedPO.id}</p>\r\n//             </div>\r\n//             <div>\r\n//               <label className=\"text-sm font-medium text-gray-500\">PO ID</label>\r\n//               <p className=\"text-sm text-gray-900\">PO-{selectedPO.POID}</p>\r\n//             </div>\r\n//             <div>\r\n//               <label className=\"text-sm font-medium text-gray-500\">Vendor</label>\r\n//               <p className=\"text-sm text-gray-900\">\r\n//                 {getVendorName(selectedPO.vendor_Id || selectedPO.Vendor_Id)}\r\n//               </p>\r\n//             </div>\r\n//            <div className=\"mt-1\">\r\n//                   {selectedPO.purchaseOrderItems && selectedPO.purchaseOrderItems.map((item, index) => (\r\n                    \r\n//                   <span \r\n//                   key={index} \r\n//                   className={`px-2 py-1 text-xs font-medium rounded-full ${getPOStatusColor( selectedPO.status)}`}\r\n//                 >\r\n//           {selectedPO.status}\r\n//         </span>\r\n//       ))}\r\n//     </div>\r\n//           </div>\r\n          \r\n//           <div className=\"space-y-4\">\r\n//             <div>\r\n//               <label className=\"text-sm font-medium text-gray-500\">Type</label>\r\n//               <p className=\"text-sm text-gray-900\">{selectedPO.type || 'Standard PO'}</p>\r\n//             </div>\r\n//             <div>\r\n//               <label className=\"text-sm font-medium text-gray-500\">Total Amount</label>\r\n//               <p className=\"text-lg font-bold text-gray-900\">\r\n//                 {formatCurrency(\r\n//                   selectedPO.purchaseOrderItems.reduce(\r\n//                     (sum, item) => sum + (item.totalPrice || 0), \r\n//                     0\r\n//                   )\r\n//                 )}\r\n//               </p>\r\n//             </div>\r\n//             <div>\r\n//               <label className=\"text-sm font-medium text-gray-500\">Remarks</label>\r\n//               <p className=\"text-sm text-gray-900\">{selectedPO.remarks || 'No remarks'}</p>\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n\r\n//         {/* Purchase Order Items */}\r\n//         <div className=\"mb-6\">\r\n//           <h4 className=\"text-md font-semibold text-gray-900 mb-3\">Purchase Order Items</h4>\r\n//           <div className=\"overflow-x-auto\">\r\n//             <table className=\"w-full border border-gray-200 rounded\">\r\n//               <thead className=\"bg-gray-50\">\r\n//                 <tr>\r\n//                   <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500\">Product</th>\r\n//                   <th className=\"px-4 py-2 text-right text-xs font-medium text-gray-500\">Quantity</th>\r\n//                   <th className=\"px-4 py-2 text-right text-xs font-medium text-gray-500\">Unit Price</th>\r\n//                   <th className=\"px-4 py-2 text-right text-xs font-medium text-gray-500\">Total Price</th>\r\n//                   <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500\">Status</th>\r\n//                   <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500\">Remarks</th>\r\n//                 </tr>\r\n//               </thead>\r\n//               <tbody className=\"divide-y divide-gray-200\">\r\n//                 {selectedPO.purchaseOrderItems.map((item, index) => {\r\n//                   const product = getProductDetails(item.product_Id);\r\n//                   return (\r\n//                     <tr key={index}>\r\n//                       <td className=\"px-4 py-2 text-sm text-gray-900\">\r\n//                         <div>\r\n//                           <div className=\"font-medium\">{product.name}</div>\r\n//                           {product.description && (\r\n//                             <div className=\"text-xs text-gray-500\">{product.description}</div>\r\n//                           )}\r\n//                         </div>\r\n//                       </td>\r\n//                       <td className=\"px-4 py-2 text-sm text-gray-900 text-right\">{item.quantity}</td>\r\n//                       <td className=\"px-4 py-2 text-sm text-gray-900 text-right\">{formatCurrency(item.pricePerUnit)}</td>\r\n//                       <td className=\"px-4 py-2 text-sm font-medium text-gray-900 text-right\">{formatCurrency(item.totalPrice)}</td>\r\n//                       <td className=\"px-4 py-2\">\r\n//                         <span className={`px-2 py-1 text-xs font-medium rounded-full ${getPOStatusColor(item.status)}`}>\r\n//                           {item.status}\r\n//                         </span>\r\n//                       </td>\r\n//                       <td className=\"px-4 py-2 text-sm text-gray-900\">{item.remarks || 'No remarks'}</td>\r\n//                     </tr>\r\n//                   );\r\n//                 })}\r\n//               </tbody>\r\n//             </table>\r\n//           </div>\r\n//         </div>\r\n\r\n//       </div>\r\n//     </div>\r\n//   </div>\r\n// )}\r\n\r\n\r\n//     {activeTab === 'purchase-orders' && (\r\n//         <div>\r\n//           <div className=\"bg-white border border-gray-200 rounded-lg overflow-hidden\">\r\n//             <div className=\"px-6 py-4 border-b border-gray-200\">\r\n//               <h3 className=\"text-lg font-semibold text-gray-900\">Pending Purchase Orders ({purchaseOrders.data.length})</h3>\r\n//             </div>\r\n//             <div className=\"overflow-x-auto\">\r\n//               <table className=\"w-full\">\r\n//                 <thead className=\"bg-gray-50\">\r\n//                   <tr>\r\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                       PO #\r\n//                     </th>\r\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                       Vendor\r\n//                     </th>\r\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                       Products\r\n//                     </th>\r\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                       Total Amount\r\n//                     </th>\r\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                       Status\r\n//                     </th>\r\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                       Remarks\r\n//                     </th>\r\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                       Actions\r\n//                     </th>\r\n//                   </tr>\r\n//                 </thead>\r\n//                <tbody className=\"bg-white divide-y divide-gray-200\">\r\n//     {validPurchaseOrders.map((po) => {\r\n//       const poTotal = po.purchaseOrderItems?.reduce(\r\n//         (sum, item) => sum + (item.totalPrice || 0), \r\n//         0\r\n//       ) || 0;\r\n      \r\n//       return (\r\n//         <tr key={po.id} className=\"hover:bg-gray-50\">\r\n//           <td className=\"px-6 py-4 whitespace-nowrap\">\r\n//             <div className=\"text-sm font-medium text-gray-900\">#{po.id}</div>\r\n//             <div className=\"text-xs text-gray-500\">PO-{po.POID}</div>\r\n//           </td>\r\n//           <td className=\"px-6 py-4\">\r\n//             <div className=\"text-sm font-medium text-gray-900\">\r\n//               {po.vendorName} {/* Use the vendor name we attached to the PO */}\r\n//             </div>\r\n//           </td>\r\n//           <td className=\"px-6 py-4\">\r\n//             <div className=\"text-sm text-gray-900\">\r\n//               {po.purchaseOrderItems?.map((item, index) => {\r\n//                 const product = getProductDetails(item.product_Id);\r\n//                 return (\r\n//                   <div key={index} className=\"mb-1\">\r\n//                     <span className=\"font-medium\">{product.name}</span>\r\n//                     <span className=\"text-gray-500 ml-2\">x{item.quantity}</span>\r\n//                     {product.description && (\r\n//                       <span className=\"text-xs text-gray-400 ml-2\">\r\n//                         ({product.description})\r\n//                       </span>\r\n//                     )}\r\n//                   </div>\r\n//                 );\r\n//               })}\r\n//             </div>\r\n//           </td>\r\n//           <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\r\n//             {formatCurrency(poTotal)}\r\n//           </td>\r\n//           <td className=\"px-6 py-4 whitespace-nowrap\">\r\n//             <span className={`px-2 py-1 text-xs font-medium rounded-full ${getPOStatusColor(po.status)}`}>\r\n//               {po.status}\r\n//             </span>\r\n//           </td>\r\n//           <td className=\"px-6 py-4 text-sm text-gray-900\">\r\n//             {po.remarks || 'No remarks'}\r\n//           </td>\r\n//           <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">\r\n//             <button\r\n//               onClick={() => setSelectedPO(po)}\r\n//               className=\"text-rose-600 hover:text-rose-900 mr-3\"\r\n//               title=\"View Details\"\r\n//             >\r\n//               <Eye size={16} />\r\n//             </button>\r\n//             {/* <button \r\n//               className=\"text-blue-600 hover:text-blue-900\"\r\n//               title=\"Edit PO\"\r\n//             >\r\n//               <Edit size={16} />\r\n//             </button> */}\r\n//           </td>\r\n//         </tr>\r\n//       );\r\n//     })}\r\n    \r\n//     {validPurchaseOrders.length === 0 && (\r\n//       <tr>\r\n//         <td colSpan=\"7\" className=\"px-6 py-4 text-center text-gray-500\">\r\n//           No purchase orders found with valid vendors.\r\n//         </td>\r\n//       </tr>\r\n//     )}\r\n//   </tbody>\r\n\r\n//               </table>\r\n//             </div>\r\n\r\n//             {purchaseOrders.data.length === 0 && (\r\n//               <div className=\"text-center py-12\">\r\n//                 <div className=\"text-gray-500 text-lg\">No pending purchase orders found</div>\r\n//                 <p className=\"text-gray-400 mt-2\">All purchase orders are either applied or cancelled</p>\r\n//               </div>\r\n//             )}\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n\r\n//       {/* Complete the PO Detail Modal - closing the table body and completing the modal */}\r\n//       {selectedPO && (\r\n//         <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center p-4 z-50\">\r\n//           <div className=\"bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-y-auto\">\r\n//             <div className=\"px-6 py-4 border-b border-gray-200\">\r\n//               <div className=\"flex items-center justify-between\">\r\n//                 <h3 className=\"text-lg font-semibold text-gray-900\">\r\n//                   Purchase Order Details - #{selectedPO.id}\r\n//                 </h3>\r\n//                 <button\r\n//                   onClick={() => setSelectedPO(null)}\r\n//                   className=\"text-gray-400 hover:text-gray-600\"\r\n//                 >\r\n//                   <XCircle size={20} />\r\n//                 </button>\r\n//               </div>\r\n//             </div>\r\n            \r\n//             <div className=\"px-6 py-4\">\r\n//               {/* PO Info */}\r\n//               <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-6\">\r\n//                 <div className=\"space-y-4\">\r\n//                   <div>\r\n//                     <label className=\"text-sm font-medium text-gray-500\">Purchase Order ID</label>\r\n//                     <p className=\"text-sm text-gray-900\">{selectedPO.id}</p>\r\n//                   </div>\r\n//                   <div>\r\n//                     <label className=\"text-sm font-medium text-gray-500\">PO ID</label>\r\n//                     <p className=\"text-sm text-gray-900\">PO-{selectedPO.POID}</p>\r\n//                   </div>\r\n//                   <div>\r\n//                     <label className=\"text-sm font-medium text-gray-500\">Vendor</label>\r\n//                     <p className=\"text-sm text-gray-900\">{getVendorName(selectedPO.vendor_Id || selectedPO.Vendor_Id)}</p>\r\n//                   </div>\r\n//                   <div>\r\n//                     <label className=\"text-sm font-medium text-gray-500\">Status</label>\r\n//                     <span className={`px-2 py-1 text-xs font-medium rounded-full ${getPOStatusColor(selectedPO.status)}`}>\r\n//                       {selectedPO.status}\r\n//                     </span>\r\n//                   </div>\r\n//                 </div>\r\n                \r\n//                 <div className=\"space-y-4\">\r\n//                   <div>\r\n//                     <label className=\"text-sm font-medium text-gray-500\">Type</label>\r\n//                     <p className=\"text-sm text-gray-900\">{selectedPO.type || 'Standard PO'}</p>\r\n//                   </div>\r\n//                   <div>\r\n//                     <label className=\"text-sm font-medium text-gray-500\">Total Amount</label>\r\n//                     <p className=\"text-lg font-bold text-gray-900\">\r\n//                       {formatCurrency(selectedPO.purchaseOrderItems.reduce((sum, item) => sum + (item.totalPrice || 0), 0))}\r\n//                     </p>\r\n//                   </div>\r\n//                   <div>\r\n//                     <label className=\"text-sm font-medium text-gray-500\">Remarks</label>\r\n//                     <p className=\"text-sm text-gray-900\">{selectedPO.remarks || 'No remarks'}</p>\r\n//                   </div>\r\n//                 </div>\r\n//               </div>\r\n\r\n//               {/* Purchase Order Items */}\r\n//               <div className=\"mb-6\">\r\n//                 <h4 className=\"text-md font-semibold text-gray-900 mb-3\">Purchase Order Items</h4>\r\n//                 <div className=\"overflow-x-auto\">\r\n//                   <table className=\"w-full border border-gray-200 rounded\">\r\n//                     <thead className=\"bg-gray-50\">\r\n//                       <tr>\r\n//                         <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500\">Product</th>\r\n//                         <th className=\"px-4 py-2 text-right text-xs font-medium text-gray-500\">Quantity</th>\r\n//                         <th className=\"px-4 py-2 text-right text-xs font-medium text-gray-500\">Unit Price</th>\r\n//                         <th className=\"px-4 py-2 text-right text-xs font-medium text-gray-500\">Total Price</th>\r\n//                         <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500\">Status</th>\r\n//                         <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500\">Remarks</th>\r\n//                       </tr>\r\n//                     </thead>\r\n//                     <tbody className=\"divide-y divide-gray-200\">\r\n//                       {selectedPO.purchaseOrderItems.map((item, index) => {\r\n//                         const product = getProductDetails(item.product_Id);\r\n//                         return (\r\n//                           <tr key={index}>\r\n//                             <td className=\"px-4 py-2 text-sm text-gray-900\">\r\n//                               <div>\r\n//                                 <div className=\"font-medium\">{product.name}</div>\r\n//                                 {product.description && (\r\n//                                   <div className=\"text-xs text-gray-500\">{product.description}</div>\r\n//                                 )}\r\n//                               </div>\r\n//                             </td>\r\n//                             <td className=\"px-4 py-2 text-sm text-gray-900 text-right\">{item.quantity}</td>\r\n//                             <td className=\"px-4 py-2 text-sm text-gray-900 text-right\">{formatCurrency(item.pricePerUnit)}</td>\r\n//                             <td className=\"px-4 py-2 text-sm font-medium text-gray-900 text-right\">{formatCurrency(item.totalPrice)}</td>\r\n//                             <td className=\"px-4 py-2\">\r\n//                               <span className={`px-2 py-1 text-xs font-medium rounded-full ${getPOStatusColor(item.status)}`}>\r\n//                                 {item.status}\r\n//                               </span>\r\n//                             </td>\r\n//                             <td className=\"px-4 py-2 text-sm text-gray-900\">{item.remarks || 'No remarks'}</td>\r\n//                           </tr>\r\n//                         );\r\n//                       })}\r\n//                     </tbody>\r\n//                     <tfoot className=\"bg-gray-50\">\r\n//                       <tr>\r\n//                         <td colSpan=\"3\" className=\"px-4 py-2 text-sm font-medium text-gray-900 text-right\">\r\n//                           Total:\r\n//                         </td>\r\n//                         <td className=\"px-4 py-2 text-sm font-bold text-gray-900 text-right\">\r\n//                           {formatCurrency(selectedPO.purchaseOrderItems.reduce((sum, item) => sum + (item.totalPrice || 0), 0))}\r\n//                         </td>\r\n//                         <td colSpan=\"2\"></td>\r\n//                       </tr>\r\n//                     </tfoot>\r\n//                   </table>\r\n//                 </div>\r\n//               </div>\r\n\r\n//               {/* Action Buttons */}\r\n//               <div className=\"flex space-x-3\">\r\n//                 <button className=\"px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 flex items-center space-x-2\">\r\n//                   <CheckCircle size={16} />\r\n//                   <span>Process Payment</span>\r\n//                 </button>\r\n//                 <button className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center space-x-2\">\r\n//                   <Edit size={16} />\r\n//                   <span>Edit PO</span>\r\n//                 </button>\r\n//                 <button className=\"px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 flex items-center space-x-2\">\r\n//                   <Download size={16} />\r\n//                   <span>Export PDF</span>\r\n//                 </button>\r\n//               </div>\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default AccountsPayable;\r\n\r\n\r\n\r\n\r\n\r\n// src/pages/AccountsPayable.jsx\r\nimport React, { useState, useEffect } from 'react';\r\nimport { CreditCard, Loader, AlertTriangle, RefreshCw } from 'lucide-react';\r\nimport APHeader from '../components/AccountsPayable/APHeader';\r\nimport APSummaryCards from '../components/AccountsPayable/APSummaryCards';\r\nimport APTabs from '../components/AccountsPayable/APTabs';\r\nimport APOverviewTab from '../components/AccountsPayable/APOverviewTab';\r\nimport APPurchaseOrdersTab from '../components/AccountsPayable/APPurchaseOrdersTab';\r\nimport APPaymentsTab from '../components/AccountsPayable/APPaymentsTab';\r\nimport APProductsTab from '../components/AccountsPayable/APProductsTab';\r\nimport VendorDetailModal from '../components/AccountsPayable/VendorDetailModal';\r\nimport PurchaseOrderModal from '../components/AccountsPayable/PurchaseOrderModal';\r\nimport { useAPData } from '../hooks/useAPData';\r\nimport { useAPFilters } from '../hooks/useAPFilters';\r\nimport { calculateAPSummary } from '../utils/apCalculations';\r\n\r\nconst AccountsPayable = () => {\r\n  // State management\r\n  const [activeTab, setActiveTab] = useState('overview');\r\n  const [selectedVendor, setSelectedVendor] = useState(null);\r\n  const [selectedPO, setSelectedPO] = useState(null);\r\n\r\n  // Custom hooks for data management\r\n  const {\r\n    purchaseOrders,\r\n    vendors,\r\n    products,\r\n    loading,\r\n    error,\r\n    refreshAllData\r\n  } = useAPData();\r\n\r\n  const {\r\n    filters,\r\n    setFilters,\r\n    getFilteredVendors\r\n  } = useAPFilters(vendors.data);\r\n\r\n  // Calculations\r\n  const summary = calculateAPSummary(vendors, purchaseOrders);\r\n  const filteredVendors = getFilteredVendors();\r\n\r\n  // Loading state\r\n  if (loading) {\r\n    return (\r\n      <div className=\"flex items-center justify-center min-h-screen\">\r\n        <div className=\"flex items-center space-x-3\">\r\n          <Loader className=\"animate-spin text-rose-600\" size={24} />\r\n          <span className=\"text-gray-600\">Loading data from API...</span>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Error state\r\n  if (error) {\r\n    return (\r\n      <div className=\"max-w-7xl mx-auto p-6\">\r\n        <div className=\"bg-red-50 border border-red-200 rounded-lg p-6\">\r\n          <div className=\"flex items-center mb-4\">\r\n            <AlertTriangle className=\"text-red-600 mr-2\" size={20} />\r\n            <h3 className=\"font-medium text-red-800\">API Connection Error</h3>\r\n          </div>\r\n          <div className=\"text-red-700 mb-4\">\r\n            {error}\r\n          </div>\r\n          <button\r\n            onClick={refreshAllData}\r\n            className=\"px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 flex items-center space-x-2\"\r\n          >\r\n            <RefreshCw size={16} />\r\n            <span>Retry Connection</span>\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"max-w-7xl mx-auto p-6 bg-white\">\r\n      <APHeader />\r\n      \r\n      <APSummaryCards summary={summary} />\r\n      \r\n      <APTabs activeTab={activeTab} setActiveTab={setActiveTab} />\r\n\r\n      {/* Tab Content */}\r\n      {activeTab === 'overview' && (\r\n        <APOverviewTab\r\n          filters={filters}\r\n          setFilters={setFilters}\r\n          filteredVendors={filteredVendors}\r\n          purchaseOrders={purchaseOrders}\r\n          onVendorSelect={setSelectedVendor}\r\n          onPOSelect={setSelectedPO}\r\n          onRefresh={refreshAllData}\r\n        />\r\n      )}\r\n\r\n      {activeTab === 'purchase-orders' && (\r\n        <APPurchaseOrdersTab\r\n          purchaseOrders={purchaseOrders}\r\n          vendors={vendors}\r\n          products={products}\r\n          onPOSelect={setSelectedPO}\r\n        />\r\n      )}\r\n\r\n      {activeTab === 'payments' && (\r\n        <APPaymentsTab\r\n          purchaseOrders={purchaseOrders}\r\n          vendors={vendors}\r\n          products={products}\r\n        />\r\n      )}\r\n\r\n      {activeTab === 'products' && (\r\n        <APProductsTab\r\n          products={products}\r\n        />\r\n      )}\r\n\r\n      {/* Modals */}\r\n      {selectedVendor && (\r\n        <VendorDetailModal\r\n          vendor={selectedVendor}\r\n          onClose={() => setSelectedVendor(null)}\r\n          purchaseOrders={purchaseOrders}\r\n          products={products}\r\n        />\r\n      )}\r\n\r\n      {selectedPO && (\r\n        <PurchaseOrderModal\r\n          purchaseOrder={selectedPO}\r\n          onClose={() => setSelectedPO(null)}\r\n          vendors={vendors}\r\n          products={products}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AccountsPayable;"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAMA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,UAAU,EAAEC,MAAM,EAAEC,aAAa,EAAEC,SAAS,QAAQ,cAAc;AAC3E,OAAOC,QAAQ,MAAM,wCAAwC;AAC7D,OAAOC,cAAc,MAAM,8CAA8C;AACzE,OAAOC,MAAM,MAAM,sCAAsC;AACzD,OAAOC,aAAa,MAAM,6CAA6C;AACvE,OAAOC,mBAAmB,MAAM,mDAAmD;AACnF,OAAOC,aAAa,MAAM,6CAA6C;AACvE,OAAOC,aAAa,MAAM,6CAA6C;AACvE,OAAOC,iBAAiB,MAAM,iDAAiD;AAC/E,OAAOC,kBAAkB,MAAM,kDAAkD;AACjF,SAASC,SAAS,QAAQ,oBAAoB;AAC9C,SAASC,YAAY,QAAQ,uBAAuB;AACpD,SAASC,kBAAkB,QAAQ,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7D,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B;EACA,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGvB,QAAQ,CAAC,UAAU,CAAC;EACtD,MAAM,CAACwB,cAAc,EAAEC,iBAAiB,CAAC,GAAGzB,QAAQ,CAAC,IAAI,CAAC;EAC1D,MAAM,CAAC0B,UAAU,EAAEC,aAAa,CAAC,GAAG3B,QAAQ,CAAC,IAAI,CAAC;;EAElD;EACA,MAAM;IACJ4B,cAAc;IACdC,OAAO;IACPC,QAAQ;IACRC,OAAO;IACPC,KAAK;IACLC;EACF,CAAC,GAAGlB,SAAS,CAAC,CAAC;EAEf,MAAM;IACJmB,OAAO;IACPC,UAAU;IACVC;EACF,CAAC,GAAGpB,YAAY,CAACa,OAAO,CAACQ,IAAI,CAAC;;EAE9B;EACA,MAAMC,OAAO,GAAGrB,kBAAkB,CAACY,OAAO,EAAED,cAAc,CAAC;EAC3D,MAAMW,eAAe,GAAGH,kBAAkB,CAAC,CAAC;;EAE5C;EACA,IAAIL,OAAO,EAAE;IACX,oBACEZ,OAAA;MAAKqB,SAAS,EAAC,+CAA+C;MAAAC,QAAA,eAC5DtB,OAAA;QAAKqB,SAAS,EAAC,6BAA6B;QAAAC,QAAA,gBAC1CtB,OAAA,CAAChB,MAAM;UAACqC,SAAS,EAAC,4BAA4B;UAACE,IAAI,EAAE;QAAG;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eAC3D3B,OAAA;UAAMqB,SAAS,EAAC,eAAe;UAAAC,QAAA,EAAC;QAAwB;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC5D;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAEV;;EAEA;EACA,IAAId,KAAK,EAAE;IACT,oBACEb,OAAA;MAAKqB,SAAS,EAAC,uBAAuB;MAAAC,QAAA,eACpCtB,OAAA;QAAKqB,SAAS,EAAC,gDAAgD;QAAAC,QAAA,gBAC7DtB,OAAA;UAAKqB,SAAS,EAAC,wBAAwB;UAAAC,QAAA,gBACrCtB,OAAA,CAACf,aAAa;YAACoC,SAAS,EAAC,mBAAmB;YAACE,IAAI,EAAE;UAAG;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eACzD3B,OAAA;YAAIqB,SAAS,EAAC,0BAA0B;YAAAC,QAAA,EAAC;UAAoB;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC/D,CAAC,eACN3B,OAAA;UAAKqB,SAAS,EAAC,mBAAmB;UAAAC,QAAA,EAC/BT;QAAK;UAAAW,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC,eACN3B,OAAA;UACE4B,OAAO,EAAEd,cAAe;UACxBO,SAAS,EAAC,yFAAyF;UAAAC,QAAA,gBAEnGtB,OAAA,CAACd,SAAS;YAACqC,IAAI,EAAE;UAAG;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eACvB3B,OAAA;YAAAsB,QAAA,EAAM;UAAgB;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACvB,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAEV;EAEA,oBACE3B,OAAA;IAAKqB,SAAS,EAAC,gCAAgC;IAAAC,QAAA,gBAC7CtB,OAAA,CAACb,QAAQ;MAAAqC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAEZ3B,OAAA,CAACZ,cAAc;MAAC+B,OAAO,EAAEA;IAAQ;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAEpC3B,OAAA,CAACX,MAAM;MAACc,SAAS,EAAEA,SAAU;MAACC,YAAY,EAAEA;IAAa;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAG3DxB,SAAS,KAAK,UAAU,iBACvBH,OAAA,CAACV,aAAa;MACZyB,OAAO,EAAEA,OAAQ;MACjBC,UAAU,EAAEA,UAAW;MACvBI,eAAe,EAAEA,eAAgB;MACjCX,cAAc,EAAEA,cAAe;MAC/BoB,cAAc,EAAEvB,iBAAkB;MAClCwB,UAAU,EAAEtB,aAAc;MAC1BuB,SAAS,EAAEjB;IAAe;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3B,CACF,EAEAxB,SAAS,KAAK,iBAAiB,iBAC9BH,OAAA,CAACT,mBAAmB;MAClBkB,cAAc,EAAEA,cAAe;MAC/BC,OAAO,EAAEA,OAAQ;MACjBC,QAAQ,EAAEA,QAAS;MACnBmB,UAAU,EAAEtB;IAAc;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3B,CACF,EAEAxB,SAAS,KAAK,UAAU,iBACvBH,OAAA,CAACR,aAAa;MACZiB,cAAc,EAAEA,cAAe;MAC/BC,OAAO,EAAEA,OAAQ;MACjBC,QAAQ,EAAEA;IAAS;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpB,CACF,EAEAxB,SAAS,KAAK,UAAU,iBACvBH,OAAA,CAACP,aAAa;MACZkB,QAAQ,EAAEA;IAAS;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpB,CACF,EAGAtB,cAAc,iBACbL,OAAA,CAACN,iBAAiB;MAChBsC,MAAM,EAAE3B,cAAe;MACvB4B,OAAO,EAAEA,CAAA,KAAM3B,iBAAiB,CAAC,IAAI,CAAE;MACvCG,cAAc,EAAEA,cAAe;MAC/BE,QAAQ,EAAEA;IAAS;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpB,CACF,EAEApB,UAAU,iBACTP,OAAA,CAACL,kBAAkB;MACjBuC,aAAa,EAAE3B,UAAW;MAC1B0B,OAAO,EAAEA,CAAA,KAAMzB,aAAa,CAAC,IAAI,CAAE;MACnCE,OAAO,EAAEA,OAAQ;MACjBC,QAAQ,EAAEA;IAAS;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpB,CACF;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACzB,EAAA,CA9HID,eAAe;EAAA,QAcfL,SAAS,EAMTC,YAAY;AAAA;AAAAsC,EAAA,GApBZlC,eAAe;AAgIrB,eAAeA,eAAe;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}