{"ast":null,"code":"var _s = $RefreshSig$();\n// import { useState, useEffect } from 'react';\n// import { arService } from '../services/arService';\n\n// export const useARData = () => {\n//   const [customers, setCustomers] = useState([]);\n//   const [invoices, setInvoices] = useState([]);\n//   const [payments, setPayments] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     loadData();\n//   }, []);\n\n//   const loadData = async () => {\n//     try {\n//       setLoading(true);\n//       const [customersData, invoicesData, paymentsData] = await Promise.all([\n//         arService.getCustomers(),\n//         arService.getInvoices(),\n//         arService.getPayments()\n//       ]);\n\n//       setCustomers(customersData);\n//       setInvoices(invoicesData);\n//       setPayments(paymentsData);\n//     } catch (err) {\n//       setError(err.message);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const calculateARSummary = () => {\n//     const totalAR = customers.reduce((sum, customer) => sum + customer.totalOwed, 0);\n//     const totalOverdue = customers.reduce((sum, customer) => sum + customer.overdueAmount, 0);\n//     const customersWithBalance = customers.filter(customer => customer.totalOwed > 0).length;\n//     const avgDaysOutstanding = customers.reduce((sum, customer) => sum + customer.avgPaymentDays, 0) / customers.length;\n\n//     return {\n//       totalAR,\n//       totalOverdue,\n//       customersWithBalance,\n//       avgDaysOutstanding: Math.round(avgDaysOutstanding)\n//     };\n//   };\n\n//   const getAgingData = () => {\n//     const aging = {\n//       current: 0,\n//       days30: 0,\n//       days60: 0,\n//       days90: 0,\n//       over90: 0\n//     };\n\n//     invoices.forEach(invoice => {\n//       if (invoice.status === 'paid') return;\n\n//       const daysPastDue = invoice.daysOverdue || 0;\n\n//       if (daysPastDue <= 0) {\n//         aging.current += invoice.balance;\n//       } else if (daysPastDue <= 30) {\n//         aging.days30 += invoice.balance;\n//       } else if (daysPastDue <= 60) {\n//         aging.days60 += invoice.balance;\n//       } else if (daysPastDue <= 90) {\n//         aging.days90 += invoice.balance;\n//       } else {\n//         aging.over90 += invoice.balance;\n//       }\n//     });\n\n//     return aging;\n//   };\n\n//   return {\n//     customers,\n//     invoices,\n//     payments,\n//     loading,\n//     error,\n//     calculateARSummary,\n//     getAgingData,\n//     refreshData: loadData\n//   };\n// };\n\n// src/hooks/useARData.js\nimport { useState, useEffect } from 'react';\nimport { arService } from '../services/arService';\nexport const useARData = () => {\n  _s();\n  const [customers, setCustomers] = useState([]);\n  const [invoices, setInvoices] = useState([]);\n  const [payments, setPayments] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    loadData();\n  }, []);\n  const loadData = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Load all AR data\n      const [customersResponse, invoicesResponse, paymentsResponse] = await Promise.all([arService.getCustomers(), arService.getInvoices(), arService.getPayments()]);\n\n      // Extract data from response objects\n      setCustomers(customersResponse.data || []);\n      setInvoices(invoicesResponse.data || []);\n      setPayments(paymentsResponse.data || []);\n    } catch (err) {\n      console.error('Error loading AR data:', err);\n      setError(err.message || 'Failed to load data');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const calculateARSummary = () => {\n    if (customers.length === 0) {\n      return {\n        totalAR: 0,\n        totalOverdue: 0,\n        customersWithBalance: 0,\n        avgDaysOutstanding: 0\n      };\n    }\n    const totalAR = customers.reduce((sum, customer) => sum + (customer.totalOwed || 0), 0);\n    const totalOverdue = customers.reduce((sum, customer) => sum + (customer.overdueAmount || 0), 0);\n    const customersWithBalance = customers.filter(customer => (customer.totalOwed || 0) > 0).length;\n    const totalDays = customers.reduce((sum, customer) => sum + (customer.avgPaymentDays || 0), 0);\n    const avgDaysOutstanding = customers.length > 0 ? totalDays / customers.length : 0;\n    return {\n      totalAR,\n      totalOverdue,\n      customersWithBalance,\n      avgDaysOutstanding: Math.round(avgDaysOutstanding)\n    };\n  };\n  const getAgingData = () => {\n    const aging = {\n      current: 0,\n      days30: 0,\n      days60: 0,\n      days90: 0,\n      over90: 0\n    };\n    invoices.forEach(invoice => {\n      if (invoice.status === 'paid') return;\n      const daysPastDue = invoice.daysOverdue || 0;\n      const balance = invoice.balance || 0;\n      if (daysPastDue <= 0) {\n        aging.current += balance;\n      } else if (daysPastDue <= 30) {\n        aging.days30 += balance;\n      } else if (daysPastDue <= 60) {\n        aging.days60 += balance;\n      } else if (daysPastDue <= 90) {\n        aging.days90 += balance;\n      } else {\n        aging.over90 += balance;\n      }\n    });\n    return aging;\n  };\n\n  // Create new customer\n  const createCustomer = async customerData => {\n    try {\n      setLoading(true);\n      const response = await arService.createCustomer(customerData);\n      if (response.success) {\n        // Add to local state\n        setCustomers(prev => [response.data, ...prev]);\n        return response.data;\n      }\n      throw new Error(response.message || 'Failed to create customer');\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Create new invoice\n  const createInvoice = async invoiceData => {\n    try {\n      setLoading(true);\n      const response = await arService.createInvoice(invoiceData);\n      if (response.success) {\n        // Update local state\n        setInvoices(prev => [response.data, ...prev]);\n\n        // Update customer totals\n        setCustomers(prev => prev.map(customer => customer.id === invoiceData.customerId ? {\n          ...customer,\n          totalOwed: customer.totalOwed + invoiceData.amount,\n          invoiceCount: customer.invoiceCount + 1\n        } : customer));\n        return response.data;\n      }\n      throw new Error(response.message || 'Failed to create invoice');\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Record new payment\n  const createPayment = async paymentData => {\n    try {\n      setLoading(true);\n      const response = await arService.createPayment(paymentData);\n      if (response.success) {\n        // Update local state\n        setPayments(prev => [response.data, ...prev]);\n\n        // Update invoice balance\n        setInvoices(prev => prev.map(invoice => invoice.id === paymentData.invoiceId ? {\n          ...invoice,\n          paid: invoice.paid + paymentData.amount,\n          balance: Math.max(0, invoice.amount - (invoice.paid + paymentData.amount)),\n          status: invoice.amount - (invoice.paid + paymentData.amount) === 0 ? 'paid' : 'partial',\n          updatedAt: new Date().toISOString()\n        } : invoice));\n\n        // Update customer balance\n        setCustomers(prev => prev.map(customer => customer.id === paymentData.customerId ? {\n          ...customer,\n          totalOwed: Math.max(0, customer.totalOwed - paymentData.amount),\n          lastPayment: paymentData.date\n        } : customer));\n        return response.data;\n      }\n      throw new Error(response.message || 'Failed to record payment');\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Filter functions\n  const getFilteredCustomers = (filters = {}) => {\n    let filtered = [...customers];\n    if (filters.customerType && filters.customerType !== 'all') {\n      filtered = filtered.filter(customer => customer.customerType === filters.customerType);\n    }\n    if (filters.status && filters.status !== 'all') {\n      filtered = filtered.filter(customer => {\n        if (filters.status === 'overdue') return (customer.overdueAmount || 0) > 0;\n        if (filters.status === 'current') return (customer.totalOwed || 0) > 0 && (customer.overdueAmount || 0) === 0;\n        if (filters.status === 'paid_up') return (customer.totalOwed || 0) === 0;\n        return true;\n      });\n    }\n    if (filters.searchTerm) {\n      const term = filters.searchTerm.toLowerCase();\n      filtered = filtered.filter(customer => {\n        var _customer$name, _customer$email, _customer$id;\n        return ((_customer$name = customer.name) === null || _customer$name === void 0 ? void 0 : _customer$name.toLowerCase().includes(term)) || ((_customer$email = customer.email) === null || _customer$email === void 0 ? void 0 : _customer$email.toLowerCase().includes(term)) || ((_customer$id = customer.id) === null || _customer$id === void 0 ? void 0 : _customer$id.toLowerCase().includes(term));\n      });\n    }\n    return filtered;\n  };\n  const getFilteredInvoices = (filters = {}) => {\n    let filtered = [...invoices];\n    if (filters.status && filters.status !== 'all') {\n      filtered = filtered.filter(invoice => invoice.status === filters.status);\n    }\n    if (filters.customerId) {\n      filtered = filtered.filter(invoice => invoice.customerId === filters.customerId);\n    }\n    if (filters.dateFrom) {\n      filtered = filtered.filter(invoice => invoice.date >= filters.dateFrom);\n    }\n    if (filters.dateTo) {\n      filtered = filtered.filter(invoice => invoice.date <= filters.dateTo);\n    }\n    if (filters.searchTerm) {\n      const term = filters.searchTerm.toLowerCase();\n      filtered = filtered.filter(invoice => {\n        var _invoice$id, _invoice$customerName, _invoice$reference;\n        return ((_invoice$id = invoice.id) === null || _invoice$id === void 0 ? void 0 : _invoice$id.toLowerCase().includes(term)) || ((_invoice$customerName = invoice.customerName) === null || _invoice$customerName === void 0 ? void 0 : _invoice$customerName.toLowerCase().includes(term)) || ((_invoice$reference = invoice.reference) === null || _invoice$reference === void 0 ? void 0 : _invoice$reference.toLowerCase().includes(term));\n      });\n    }\n    return filtered;\n  };\n  const getFilteredPayments = (filters = {}) => {\n    let filtered = [...payments];\n    if (filters.status && filters.status !== 'all') {\n      filtered = filtered.filter(payment => payment.status === filters.status);\n    }\n    if (filters.method && filters.method !== 'all') {\n      filtered = filtered.filter(payment => payment.method === filters.method);\n    }\n    if (filters.customerId) {\n      filtered = filtered.filter(payment => payment.customerId === filters.customerId);\n    }\n    if (filters.dateFrom) {\n      filtered = filtered.filter(payment => payment.date >= filters.dateFrom);\n    }\n    if (filters.dateTo) {\n      filtered = filtered.filter(payment => payment.date <= filters.dateTo);\n    }\n    if (filters.searchTerm) {\n      const term = filters.searchTerm.toLowerCase();\n      filtered = filtered.filter(payment => {\n        var _payment$id, _payment$customerName, _payment$invoiceId, _payment$reference;\n        return ((_payment$id = payment.id) === null || _payment$id === void 0 ? void 0 : _payment$id.toLowerCase().includes(term)) || ((_payment$customerName = payment.customerName) === null || _payment$customerName === void 0 ? void 0 : _payment$customerName.toLowerCase().includes(term)) || ((_payment$invoiceId = payment.invoiceId) === null || _payment$invoiceId === void 0 ? void 0 : _payment$invoiceId.toLowerCase().includes(term)) || ((_payment$reference = payment.reference) === null || _payment$reference === void 0 ? void 0 : _payment$reference.toLowerCase().includes(term));\n      });\n    }\n    return filtered;\n  };\n\n  // Get customer by ID\n  const getCustomerById = customerId => {\n    return customers.find(customer => customer.id === customerId);\n  };\n\n  // Get invoice by ID\n  const getInvoiceById = invoiceId => {\n    return invoices.find(invoice => invoice.id === invoiceId);\n  };\n\n  // Get customer invoices\n  const getCustomerInvoices = customerId => {\n    return invoices.filter(invoice => invoice.customerId === customerId);\n  };\n\n  // Get customer payments\n  const getCustomerPayments = customerId => {\n    return payments.filter(payment => payment.customerId === customerId);\n  };\n\n  // Get collection priority customers\n  const getCollectionPriority = () => {\n    return customers.filter(customer => (customer.overdueAmount || 0) > 0).sort((a, b) => (b.overdueAmount || 0) - (a.overdueAmount || 0)).slice(0, 10); // Top 10 priority customers\n  };\n\n  // Calculate customer metrics\n  const getCustomerMetrics = customerId => {\n    const customer = getCustomerById(customerId);\n    const customerInvoices = getCustomerInvoices(customerId);\n    const customerPayments = getCustomerPayments(customerId);\n    if (!customer) return null;\n    const totalInvoiced = customerInvoices.reduce((sum, inv) => sum + (inv.amount || 0), 0);\n    const totalPaid = customerPayments.reduce((sum, pay) => sum + (pay.amount || 0), 0);\n    const outstandingInvoices = customerInvoices.filter(inv => inv.status !== 'paid').length;\n    const overdueInvoices = customerInvoices.filter(inv => inv.status === 'overdue').length;\n    return {\n      totalInvoiced,\n      totalPaid,\n      currentBalance: customer.totalOwed || 0,\n      creditAvailable: (customer.creditLimit || 0) - (customer.totalOwed || 0),\n      outstandingInvoices,\n      overdueInvoices,\n      paymentHistory: customerPayments.length,\n      avgPaymentDays: customer.avgPaymentDays || 0\n    };\n  };\n\n  // Refresh specific data\n  const refreshCustomers = async () => {\n    try {\n      const response = await arService.getCustomers();\n      setCustomers(response.data || []);\n      return response.data;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  };\n  const refreshInvoices = async () => {\n    try {\n      const response = await arService.getInvoices();\n      setInvoices(response.data || []);\n      return response.data;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  };\n  const refreshPayments = async () => {\n    try {\n      const response = await arService.getPayments();\n      setPayments(response.data || []);\n      return response.data;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  };\n\n  // Clear error\n  const clearError = () => {\n    setError(null);\n  };\n  return {\n    // Data\n    customers,\n    invoices,\n    payments,\n    loading,\n    error,\n    // Calculated data\n    calculateARSummary,\n    getAgingData,\n    // CRUD operations\n    createCustomer,\n    createInvoice,\n    createPayment,\n    // Filter functions\n    getFilteredCustomers,\n    getFilteredInvoices,\n    getFilteredPayments,\n    // Utility functions\n    getCustomerById,\n    getInvoiceById,\n    getCustomerInvoices,\n    getCustomerPayments,\n    getCollectionPriority,\n    getCustomerMetrics,\n    // Refresh functions\n    refreshData: loadData,\n    refreshCustomers,\n    refreshInvoices,\n    refreshPayments,\n    // Error handling\n    clearError\n  };\n};\n_s(useARData, \"ZXq1d6BFupsTWvdpadZYXn9dwtM=\");","map":{"version":3,"names":["useState","useEffect","arService","useARData","_s","customers","setCustomers","invoices","setInvoices","payments","setPayments","loading","setLoading","error","setError","loadData","customersResponse","invoicesResponse","paymentsResponse","Promise","all","getCustomers","getInvoices","getPayments","data","err","console","message","calculateARSummary","length","totalAR","totalOverdue","customersWithBalance","avgDaysOutstanding","reduce","sum","customer","totalOwed","overdueAmount","filter","totalDays","avgPaymentDays","Math","round","getAgingData","aging","current","days30","days60","days90","over90","forEach","invoice","status","daysPastDue","daysOverdue","balance","createCustomer","customerData","response","success","prev","Error","createInvoice","invoiceData","map","id","customerId","amount","invoiceCount","createPayment","paymentData","invoiceId","paid","max","updatedAt","Date","toISOString","lastPayment","date","getFilteredCustomers","filters","filtered","customerType","searchTerm","term","toLowerCase","_customer$name","_customer$email","_customer$id","name","includes","email","getFilteredInvoices","dateFrom","dateTo","_invoice$id","_invoice$customerName","_invoice$reference","customerName","reference","getFilteredPayments","payment","method","_payment$id","_payment$customerName","_payment$invoiceId","_payment$reference","getCustomerById","find","getInvoiceById","getCustomerInvoices","getCustomerPayments","getCollectionPriority","sort","a","b","slice","getCustomerMetrics","customerInvoices","customerPayments","totalInvoiced","inv","totalPaid","pay","outstandingInvoices","overdueInvoices","currentBalance","creditAvailable","creditLimit","paymentHistory","refreshCustomers","refreshInvoices","refreshPayments","clearError","refreshData"],"sources":["C:/Users/Logic-Unit/my-account/src/hooks/useARData.js"],"sourcesContent":["// import { useState, useEffect } from 'react';\r\n// import { arService } from '../services/arService';\r\n\r\n// export const useARData = () => {\r\n//   const [customers, setCustomers] = useState([]);\r\n//   const [invoices, setInvoices] = useState([]);\r\n//   const [payments, setPayments] = useState([]);\r\n//   const [loading, setLoading] = useState(true);\r\n//   const [error, setError] = useState(null);\r\n\r\n//   useEffect(() => {\r\n//     loadData();\r\n//   }, []);\r\n\r\n//   const loadData = async () => {\r\n//     try {\r\n//       setLoading(true);\r\n//       const [customersData, invoicesData, paymentsData] = await Promise.all([\r\n//         arService.getCustomers(),\r\n//         arService.getInvoices(),\r\n//         arService.getPayments()\r\n//       ]);\r\n      \r\n//       setCustomers(customersData);\r\n//       setInvoices(invoicesData);\r\n//       setPayments(paymentsData);\r\n//     } catch (err) {\r\n//       setError(err.message);\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   const calculateARSummary = () => {\r\n//     const totalAR = customers.reduce((sum, customer) => sum + customer.totalOwed, 0);\r\n//     const totalOverdue = customers.reduce((sum, customer) => sum + customer.overdueAmount, 0);\r\n//     const customersWithBalance = customers.filter(customer => customer.totalOwed > 0).length;\r\n//     const avgDaysOutstanding = customers.reduce((sum, customer) => sum + customer.avgPaymentDays, 0) / customers.length;\r\n\r\n//     return {\r\n//       totalAR,\r\n//       totalOverdue,\r\n//       customersWithBalance,\r\n//       avgDaysOutstanding: Math.round(avgDaysOutstanding)\r\n//     };\r\n//   };\r\n\r\n//   const getAgingData = () => {\r\n//     const aging = {\r\n//       current: 0,\r\n//       days30: 0,\r\n//       days60: 0,\r\n//       days90: 0,\r\n//       over90: 0\r\n//     };\r\n\r\n//     invoices.forEach(invoice => {\r\n//       if (invoice.status === 'paid') return;\r\n      \r\n//       const daysPastDue = invoice.daysOverdue || 0;\r\n      \r\n//       if (daysPastDue <= 0) {\r\n//         aging.current += invoice.balance;\r\n//       } else if (daysPastDue <= 30) {\r\n//         aging.days30 += invoice.balance;\r\n//       } else if (daysPastDue <= 60) {\r\n//         aging.days60 += invoice.balance;\r\n//       } else if (daysPastDue <= 90) {\r\n//         aging.days90 += invoice.balance;\r\n//       } else {\r\n//         aging.over90 += invoice.balance;\r\n//       }\r\n//     });\r\n\r\n//     return aging;\r\n//   };\r\n\r\n//   return {\r\n//     customers,\r\n//     invoices,\r\n//     payments,\r\n//     loading,\r\n//     error,\r\n//     calculateARSummary,\r\n//     getAgingData,\r\n//     refreshData: loadData\r\n//   };\r\n// };\r\n\r\n\r\n// src/hooks/useARData.js\r\nimport { useState, useEffect } from 'react';\r\nimport { arService } from '../services/arService';\r\n\r\nexport const useARData = () => {\r\n  const [customers, setCustomers] = useState([]);\r\n  const [invoices, setInvoices] = useState([]);\r\n  const [payments, setPayments] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    loadData();\r\n  }, []);\r\n\r\n  const loadData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      // Load all AR data\r\n      const [customersResponse, invoicesResponse, paymentsResponse] = await Promise.all([\r\n        arService.getCustomers(),\r\n        arService.getInvoices(),\r\n        arService.getPayments()\r\n      ]);\r\n      \r\n      // Extract data from response objects\r\n      setCustomers(customersResponse.data || []);\r\n      setInvoices(invoicesResponse.data || []);\r\n      setPayments(paymentsResponse.data || []);\r\n      \r\n    } catch (err) {\r\n      console.error('Error loading AR data:', err);\r\n      setError(err.message || 'Failed to load data');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const calculateARSummary = () => {\r\n    if (customers.length === 0) {\r\n      return {\r\n        totalAR: 0,\r\n        totalOverdue: 0,\r\n        customersWithBalance: 0,\r\n        avgDaysOutstanding: 0\r\n      };\r\n    }\r\n\r\n    const totalAR = customers.reduce((sum, customer) => sum + (customer.totalOwed || 0), 0);\r\n    const totalOverdue = customers.reduce((sum, customer) => sum + (customer.overdueAmount || 0), 0);\r\n    const customersWithBalance = customers.filter(customer => (customer.totalOwed || 0) > 0).length;\r\n    const totalDays = customers.reduce((sum, customer) => sum + (customer.avgPaymentDays || 0), 0);\r\n    const avgDaysOutstanding = customers.length > 0 ? totalDays / customers.length : 0;\r\n\r\n    return {\r\n      totalAR,\r\n      totalOverdue,\r\n      customersWithBalance,\r\n      avgDaysOutstanding: Math.round(avgDaysOutstanding)\r\n    };\r\n  };\r\n\r\n  const getAgingData = () => {\r\n    const aging = {\r\n      current: 0,\r\n      days30: 0,\r\n      days60: 0,\r\n      days90: 0,\r\n      over90: 0\r\n    };\r\n\r\n    invoices.forEach(invoice => {\r\n      if (invoice.status === 'paid') return;\r\n      \r\n      const daysPastDue = invoice.daysOverdue || 0;\r\n      const balance = invoice.balance || 0;\r\n      \r\n      if (daysPastDue <= 0) {\r\n        aging.current += balance;\r\n      } else if (daysPastDue <= 30) {\r\n        aging.days30 += balance;\r\n      } else if (daysPastDue <= 60) {\r\n        aging.days60 += balance;\r\n      } else if (daysPastDue <= 90) {\r\n        aging.days90 += balance;\r\n      } else {\r\n        aging.over90 += balance;\r\n      }\r\n    });\r\n\r\n    return aging;\r\n  };\r\n\r\n  // Create new customer\r\n  const createCustomer = async (customerData) => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await arService.createCustomer(customerData);\r\n      \r\n      if (response.success) {\r\n        // Add to local state\r\n        setCustomers(prev => [response.data, ...prev]);\r\n        return response.data;\r\n      }\r\n      throw new Error(response.message || 'Failed to create customer');\r\n    } catch (err) {\r\n      setError(err.message);\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Create new invoice\r\n  const createInvoice = async (invoiceData) => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await arService.createInvoice(invoiceData);\r\n      \r\n      if (response.success) {\r\n        // Update local state\r\n        setInvoices(prev => [response.data, ...prev]);\r\n        \r\n        // Update customer totals\r\n        setCustomers(prev => \r\n          prev.map(customer => \r\n            customer.id === invoiceData.customerId\r\n              ? {\r\n                  ...customer,\r\n                  totalOwed: customer.totalOwed + invoiceData.amount,\r\n                  invoiceCount: customer.invoiceCount + 1\r\n                }\r\n              : customer\r\n          )\r\n        );\r\n        \r\n        return response.data;\r\n      }\r\n      throw new Error(response.message || 'Failed to create invoice');\r\n    } catch (err) {\r\n      setError(err.message);\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Record new payment\r\n  const createPayment = async (paymentData) => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await arService.createPayment(paymentData);\r\n      \r\n      if (response.success) {\r\n        // Update local state\r\n        setPayments(prev => [response.data, ...prev]);\r\n        \r\n        // Update invoice balance\r\n        setInvoices(prev => \r\n          prev.map(invoice => \r\n            invoice.id === paymentData.invoiceId\r\n              ? {\r\n                  ...invoice,\r\n                  paid: invoice.paid + paymentData.amount,\r\n                  balance: Math.max(0, invoice.amount - (invoice.paid + paymentData.amount)),\r\n                  status: (invoice.amount - (invoice.paid + paymentData.amount)) === 0 ? 'paid' : 'partial',\r\n                  updatedAt: new Date().toISOString()\r\n                }\r\n              : invoice\r\n          )\r\n        );\r\n        \r\n        // Update customer balance\r\n        setCustomers(prev =>\r\n          prev.map(customer =>\r\n            customer.id === paymentData.customerId\r\n              ? {\r\n                  ...customer,\r\n                  totalOwed: Math.max(0, customer.totalOwed - paymentData.amount),\r\n                  lastPayment: paymentData.date\r\n                }\r\n              : customer\r\n          )\r\n        );\r\n        \r\n        return response.data;\r\n      }\r\n      throw new Error(response.message || 'Failed to record payment');\r\n    } catch (err) {\r\n      setError(err.message);\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Filter functions\r\n  const getFilteredCustomers = (filters = {}) => {\r\n    let filtered = [...customers];\r\n\r\n    if (filters.customerType && filters.customerType !== 'all') {\r\n      filtered = filtered.filter(customer => customer.customerType === filters.customerType);\r\n    }\r\n\r\n    if (filters.status && filters.status !== 'all') {\r\n      filtered = filtered.filter(customer => {\r\n        if (filters.status === 'overdue') return (customer.overdueAmount || 0) > 0;\r\n        if (filters.status === 'current') return (customer.totalOwed || 0) > 0 && (customer.overdueAmount || 0) === 0;\r\n        if (filters.status === 'paid_up') return (customer.totalOwed || 0) === 0;\r\n        return true;\r\n      });\r\n    }\r\n\r\n    if (filters.searchTerm) {\r\n      const term = filters.searchTerm.toLowerCase();\r\n      filtered = filtered.filter(customer =>\r\n        customer.name?.toLowerCase().includes(term) ||\r\n        customer.email?.toLowerCase().includes(term) ||\r\n        customer.id?.toLowerCase().includes(term)\r\n      );\r\n    }\r\n\r\n    return filtered;\r\n  };\r\n\r\n  const getFilteredInvoices = (filters = {}) => {\r\n    let filtered = [...invoices];\r\n\r\n    if (filters.status && filters.status !== 'all') {\r\n      filtered = filtered.filter(invoice => invoice.status === filters.status);\r\n    }\r\n\r\n    if (filters.customerId) {\r\n      filtered = filtered.filter(invoice => invoice.customerId === filters.customerId);\r\n    }\r\n\r\n    if (filters.dateFrom) {\r\n      filtered = filtered.filter(invoice => invoice.date >= filters.dateFrom);\r\n    }\r\n\r\n    if (filters.dateTo) {\r\n      filtered = filtered.filter(invoice => invoice.date <= filters.dateTo);\r\n    }\r\n\r\n    if (filters.searchTerm) {\r\n      const term = filters.searchTerm.toLowerCase();\r\n      filtered = filtered.filter(invoice =>\r\n        invoice.id?.toLowerCase().includes(term) ||\r\n        invoice.customerName?.toLowerCase().includes(term) ||\r\n        invoice.reference?.toLowerCase().includes(term)\r\n      );\r\n    }\r\n\r\n    return filtered;\r\n  };\r\n\r\n  const getFilteredPayments = (filters = {}) => {\r\n    let filtered = [...payments];\r\n\r\n    if (filters.status && filters.status !== 'all') {\r\n      filtered = filtered.filter(payment => payment.status === filters.status);\r\n    }\r\n\r\n    if (filters.method && filters.method !== 'all') {\r\n      filtered = filtered.filter(payment => payment.method === filters.method);\r\n    }\r\n\r\n    if (filters.customerId) {\r\n      filtered = filtered.filter(payment => payment.customerId === filters.customerId);\r\n    }\r\n\r\n    if (filters.dateFrom) {\r\n      filtered = filtered.filter(payment => payment.date >= filters.dateFrom);\r\n    }\r\n\r\n    if (filters.dateTo) {\r\n      filtered = filtered.filter(payment => payment.date <= filters.dateTo);\r\n    }\r\n\r\n    if (filters.searchTerm) {\r\n      const term = filters.searchTerm.toLowerCase();\r\n      filtered = filtered.filter(payment =>\r\n        payment.id?.toLowerCase().includes(term) ||\r\n        payment.customerName?.toLowerCase().includes(term) ||\r\n        payment.invoiceId?.toLowerCase().includes(term) ||\r\n        payment.reference?.toLowerCase().includes(term)\r\n      );\r\n    }\r\n\r\n    return filtered;\r\n  };\r\n\r\n  // Get customer by ID\r\n  const getCustomerById = (customerId) => {\r\n    return customers.find(customer => customer.id === customerId);\r\n  };\r\n\r\n  // Get invoice by ID\r\n  const getInvoiceById = (invoiceId) => {\r\n    return invoices.find(invoice => invoice.id === invoiceId);\r\n  };\r\n\r\n  // Get customer invoices\r\n  const getCustomerInvoices = (customerId) => {\r\n    return invoices.filter(invoice => invoice.customerId === customerId);\r\n  };\r\n\r\n  // Get customer payments\r\n  const getCustomerPayments = (customerId) => {\r\n    return payments.filter(payment => payment.customerId === customerId);\r\n  };\r\n\r\n  // Get collection priority customers\r\n  const getCollectionPriority = () => {\r\n    return customers\r\n      .filter(customer => (customer.overdueAmount || 0) > 0)\r\n      .sort((a, b) => (b.overdueAmount || 0) - (a.overdueAmount || 0))\r\n      .slice(0, 10); // Top 10 priority customers\r\n  };\r\n\r\n  // Calculate customer metrics\r\n  const getCustomerMetrics = (customerId) => {\r\n    const customer = getCustomerById(customerId);\r\n    const customerInvoices = getCustomerInvoices(customerId);\r\n    const customerPayments = getCustomerPayments(customerId);\r\n\r\n    if (!customer) return null;\r\n\r\n    const totalInvoiced = customerInvoices.reduce((sum, inv) => sum + (inv.amount || 0), 0);\r\n    const totalPaid = customerPayments.reduce((sum, pay) => sum + (pay.amount || 0), 0);\r\n    const outstandingInvoices = customerInvoices.filter(inv => inv.status !== 'paid').length;\r\n    const overdueInvoices = customerInvoices.filter(inv => inv.status === 'overdue').length;\r\n\r\n    return {\r\n      totalInvoiced,\r\n      totalPaid,\r\n      currentBalance: customer.totalOwed || 0,\r\n      creditAvailable: (customer.creditLimit || 0) - (customer.totalOwed || 0),\r\n      outstandingInvoices,\r\n      overdueInvoices,\r\n      paymentHistory: customerPayments.length,\r\n      avgPaymentDays: customer.avgPaymentDays || 0\r\n    };\r\n  };\r\n\r\n  // Refresh specific data\r\n  const refreshCustomers = async () => {\r\n    try {\r\n      const response = await arService.getCustomers();\r\n      setCustomers(response.data || []);\r\n      return response.data;\r\n    } catch (err) {\r\n      setError(err.message);\r\n      throw err;\r\n    }\r\n  };\r\n\r\n  const refreshInvoices = async () => {\r\n    try {\r\n      const response = await arService.getInvoices();\r\n      setInvoices(response.data || []);\r\n      return response.data;\r\n    } catch (err) {\r\n      setError(err.message);\r\n      throw err;\r\n    }\r\n  };\r\n\r\n  const refreshPayments = async () => {\r\n    try {\r\n      const response = await arService.getPayments();\r\n      setPayments(response.data || []);\r\n      return response.data;\r\n    } catch (err) {\r\n      setError(err.message);\r\n      throw err;\r\n    }\r\n  };\r\n\r\n  // Clear error\r\n  const clearError = () => {\r\n    setError(null);\r\n  };\r\n\r\n  return {\r\n    // Data\r\n    customers,\r\n    invoices,\r\n    payments,\r\n    loading,\r\n    error,\r\n\r\n    // Calculated data\r\n    calculateARSummary,\r\n    getAgingData,\r\n\r\n    // CRUD operations\r\n    createCustomer,\r\n    createInvoice,\r\n    createPayment,\r\n\r\n    // Filter functions\r\n    getFilteredCustomers,\r\n    getFilteredInvoices,\r\n    getFilteredPayments,\r\n\r\n    // Utility functions\r\n    getCustomerById,\r\n    getInvoiceById,\r\n    getCustomerInvoices,\r\n    getCustomerPayments,\r\n    getCollectionPriority,\r\n    getCustomerMetrics,\r\n\r\n    // Refresh functions\r\n    refreshData: loadData,\r\n    refreshCustomers,\r\n    refreshInvoices,\r\n    refreshPayments,\r\n\r\n    // Error handling\r\n    clearError\r\n  };\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}