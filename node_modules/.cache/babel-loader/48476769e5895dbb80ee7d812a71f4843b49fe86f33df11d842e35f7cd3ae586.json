{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Logic-Unit\\\\my-account\\\\src\\\\pages\\\\GeneralLedger.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect, useCallback } from 'react';\n// import { \n//   Book, \n//   Plus, \n//   Filter, \n//   Search, \n//   Calendar, \n//   FileText, \n//   Edit, \n//   Trash2, \n//   Save, \n//   X, \n//   AlertCircle,\n//   CheckCircle,\n//   DollarSign,\n//   TrendingUp,\n//   Eye,\n//   Download,\n//   RefreshCw\n// } from 'lucide-react';\n\n// const GeneralLedger = () => {\n//   const [journalEntries, setJournalEntries] = useState([]);\n//   const [accounts, setAccounts] = useState([]);\n//   const [filteredEntries, setFilteredEntries] = useState([]);\n//   const [selectedEntry, setSelectedEntry] = useState(null);\n//   const [isAddingEntry, setIsAddingEntry] = useState(false);\n//   const [loading, setLoading] = useState({\n//     entries: false,\n//     accounts: false,\n//     purchase: false\n//   });\n//   const [errors, setErrors] = useState({\n//     entries: null,\n//     accounts: null,\n//     purchase: null\n//   });\n//   const [filters, setFilters] = useState({\n//     dateFrom: '',\n//     dateTo: '',\n//     accountId: '',\n//     transactionType: 'all',\n//     searchTerm: ''\n//   });\n//   const [trialBalance, setTrialBalance] = useState([]);\n//   const [showTrialBalance, setShowTrialBalance] = useState(false);\n//   const [newEntry, setNewEntry] = useState({\n//     date: new Date().toISOString().split('T')[0],\n//     description: '',\n//     reference: '',\n//     entries: [\n//       { accountId: '', debit: 0, credit: 0, description: '' },\n//       { accountId: '', debit: 0, credit: 0, description: '' }\n//     ]\n//   });\n\n//   // API Configuration\n//   const API_BASE_URL_SALES_ORDERS = 'https://api-pos.hulmsolutions.com/POS/accounting2/31fc8df0-61db-41e5-bb67-070fde367ea1/orders?start=0&size=200';\n//   const API_BASE_URL_CHARTS_OF_ACCOUNTS = 'http://localhost:8080/api/accounts';\n//   const API_BASE_URL_PURCHASE_ORDERS = 'https://api-pos.hulmsolutions.com/POS/accounting2/31fc8df0-61db-41e5-bb67-070fde367ea1/PurchaseOrderManagement/purchaseOrdersWithoutDetails';\n\n//   // Fetch sales order data from API\n//   const fetchSalesOrderData = async () => {\n//     try {\n//       const response = await fetch(API_BASE_URL_SALES_ORDERS, {\n//         method: 'GET',\n//         headers: {\n//           'Authorization': 'Bearer Hamid',\n//           'Content-Type': 'application/json',\n//         },\n//       });\n\n//       if (!response.ok) {\n//         throw new Error(`Sales API request failed with status ${response.status}`);\n//       }\n\n//       const data = await response.json();\n//       return data;\n//     } catch (error) {\n//       console.error('Error fetching sales order data:', error);\n//       return null;\n//     }\n//   };\n\n//   // Fetch purchase order data from API\n//   const fetchPurchaseOrderData = async () => {\n//     try {\n//       console.log('Making purchase orders API call to:', API_BASE_URL_PURCHASE_ORDERS);\n\n//       const response = await fetch(API_BASE_URL_PURCHASE_ORDERS, {\n//         method: 'GET',\n//         headers: {\n//           'Authorization': 'Bearer Hamid',\n//           'Content-Type': 'application/json',\n//         },\n//       });\n\n//       console.log('Purchase orders API response status:', response.status);\n\n//       if (!response.ok) {\n//         throw new Error(`Purchase API request failed with status ${response.status}`);\n//       }\n\n//       const data = await response.json();\n//       console.log('Purchase orders API data received:', data);\n//       return data;\n//     } catch (error) {\n//       console.error('Error fetching purchase order data:', error);\n//       return null;\n//     }\n//   };\n\n//   // Format date from API format\n//   const formatDateFromCreatedAt = (createdAt) => {\n//     try {\n//       const parts = createdAt.split('.');\n//       if (parts.length >= 3) {\n//         return `${parts[0]}-${parts[1].padStart(2, '0')}-${parts[2].padStart(2, '0')}`;\n//       }\n//       return new Date().toISOString().split('T')[0];\n//     } catch (error) {\n//       return new Date().toISOString().split('T')[0];\n//     }\n//   };\n\n//   // Helper function to flatten hierarchical account structure\n//   const flattenAccounts = (accounts) => {\n//     const result = [];\n\n//     const processAccount = (account) => {\n//       result.push(account);\n\n//       if (account.children && Array.isArray(account.children)) {\n//         account.children.forEach(child => processAccount(child));\n//       }\n//     };\n\n//     accounts.forEach(account => processAccount(account));\n//     return result;\n//   };\n\n//   // Fetch Charts of Accounts from API\n//   const loadChartsOfAccounts = useCallback(async () => {\n//     setLoading(prev => ({ ...prev, accounts: true }));\n//     setErrors(prev => ({ ...prev, accounts: null }));\n\n//     try {\n//       const response = await fetch(API_BASE_URL_CHARTS_OF_ACCOUNTS, {\n//         method: 'GET',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//       });\n\n//       if (!response.ok) {\n//         throw new Error(`Failed to fetch accounts: ${response.status}`);\n//       }\n\n//       const data = await response.json();\n//       console.log('Raw accounts data from API:', data);\n\n//       if (!Array.isArray(data)) {\n//         throw new Error('API response is not an array');\n//       }\n\n//       const allAccounts = flattenAccounts(data);\n//       console.log('All flattened accounts:', allAccounts.length);\n\n//       const usableAccounts = allAccounts.filter(account => \n//         account.category === 'account' && \n//         account.id && \n//         account.code && \n//         account.name && \n//         account.type\n//       );\n\n//       console.log('Usable accounts (category=account):', usableAccounts.length);\n\n//       if (usableAccounts.length === 0) {\n//         console.log('No usable accounts found, using fallback');\n//         throw new Error('No usable accounts returned from API');\n//       }\n\n//       usableAccounts.sort((a, b) => a.code.localeCompare(b.code));\n\n//       setAccounts(usableAccounts);\n//       setLoading(prev => ({ ...prev, accounts: false }));\n\n//       console.log(`Successfully loaded ${usableAccounts.length} accounts from API`);\n//       return usableAccounts;\n\n//     } catch (error) {\n//       console.error('Error loading charts of accounts:', error);\n//       setErrors(prev => ({ ...prev, accounts: error.message }));\n//       setLoading(prev => ({ ...prev, accounts: false }));\n\n//       console.log('Using fallback chart of accounts');\n\n//       setAccounts([]);\n//       return [];\n//     }\n//   }, []);\n\n//   // Convert Purchase Order to Journal Entry\n//   const convertPurchaseOrderToJournalEntry = useCallback((purchaseOrder, accountsList) => {\n//     if (!purchaseOrder || !purchaseOrder.purchaseOrderItems) {\n//       return null;\n//     }\n\n//     const entries = [];\n\n//     const appliedItems = purchaseOrder.purchaseOrderItems.filter(item => \n//       item.status === 'applied' && item.quantity > 0\n//     );\n\n//     if (appliedItems.length === 0) {\n//       return null;\n//     }\n\n//     const totalAmount = appliedItems.reduce((sum, item) => \n//       sum + (parseFloat(item.pricePerUnit || 0) * parseFloat(item.quantity || 0)), 0\n//     );\n\n//     if (totalAmount <= 0) {\n//       return null;\n//     }\n\n//     const findAccountByType = (type, preferredId = null) => {\n//       if (preferredId) {\n//         const specificAccount = accountsList.find(acc => acc.id === preferredId);\n//         if (specificAccount) return specificAccount;\n//       }\n\n//       const matchingAccount = accountsList.find(acc => \n//         acc.type && acc.type.toLowerCase() === type.toLowerCase()\n//       );\n\n//       if (matchingAccount) return matchingAccount;\n\n//       const fallbackAccounts = {\n//         // 'assets': { id: '13', code: '1112', name: 'Bank - Main Account', type: 'assets' },\n//         // 'liabilities': { id: '28', code: '2110', name: 'Accounts Payable', type: 'liabilities' },\n//         // 'expenses': { id: '50', code: '5100', name: 'Cost of Goods Sold', type: 'expenses' }\n//       };\n\n//       return fallbackAccounts[type.toLowerCase()] || { \n//         id: 'UNKNOWN', \n//         name: `Unknown ${type} Account`, \n//         code: 'N/A' \n//       };\n//     };\n\n//     const inventoryAccount = findAccountByType('assets', '19');\n//     entries.push({\n//       accountId: inventoryAccount.id,\n//       accountName: inventoryAccount.name,\n//       accountCode: inventoryAccount.code,\n//       debit: totalAmount,\n//       credit: 0,\n//       description: `Inventory purchase from PO #${purchaseOrder.id} - ${appliedItems.length} items`\n//     });\n\n//     const payableAccount = findAccountByType('liabilities', '28');\n//     entries.push({\n//       accountId: payableAccount.id,\n//       accountName: payableAccount.name,\n//       accountCode: payableAccount.code,\n//       debit: 0,\n//       credit: totalAmount,\n//       description: `Amount owed for PO #${purchaseOrder.id} - ${purchaseOrder.remarks || 'Purchase order'}`\n//     });\n\n//     return {\n//       id: `POID-${purchaseOrder.id}`,\n//       date: new Date().toISOString().split('T')[0],\n//       description: `Purchase Order #${purchaseOrder.id} - ${appliedItems.map(item => `Product ${item.product_Id} (${item.quantity})`).join(', ')}`,\n//       reference: `PURCHASE-${purchaseOrder.id}`,\n//       transactionType: 'automatic',\n//       source: 'Purchase Orders',\n//       status: 'posted',\n//       entries: entries,\n//       totalDebit: Math.round(totalAmount * 100) / 100,\n//       totalCredit: Math.round(totalAmount * 100) / 100,\n//       createdAt: new Date().toISOString(),\n//       originalPurchaseOrder: purchaseOrder\n//     };\n//   }, []);\n\n//   // Convert Sales Order to Journal Entry\n//   const convertSalesOrderToJournalEntry = useCallback((order, accountsList) => {\n//     if (!order) return null;\n\n//     const entries = [];\n\n//     const subTotal = parseFloat(order.subTotal) || 0;\n//     const taxAmount = parseFloat(order.taxAmount) || 0;\n//     const total = parseFloat(order.total) || 0;\n\n//     if (!order.paid || !order.fulfilled || order.status !== 'Closed') {\n//       return null;\n//     }\n\n//     const findAccountByType = (type, preferredId = null) => {\n//       if (preferredId) {\n//         const specificAccount = accountsList.find(acc => acc.id === preferredId);\n//         if (specificAccount) return specificAccount;\n//       }\n\n//       const matchingAccount = accountsList.find(acc => \n//         acc.type && acc.type.toLowerCase() === type.toLowerCase()\n//       );\n\n//       if (matchingAccount) return matchingAccount;\n\n//       const fallbackAccounts = {\n//         // 'assets': { id: '13', code: '1112', name: 'Bank - Main Account', type: 'assets' },\n//         // 'revenue': { id: '40', code: '4111', name: 'Mobile Service Revenue', type: 'revenue' },\n//         // 'liabilities': { id: '29', code: '2130', name: 'Sales Tax Payable', type: 'liabilities' },\n//         // 'expenses': { id: '50', code: '5100', name: 'Cost of Goods Sold', type: 'expenses' }\n//       };\n\n//       return fallbackAccounts[type.toLowerCase()] || { \n//         id: 'UNKNOWN', \n//         name: `Unknown ${type} Account`, \n//         code: 'N/A' \n//       };\n//     };\n\n//     const cashAccount = findAccountByType('assets');\n//     entries.push({\n//       accountId: cashAccount.id,\n//       accountName: cashAccount.name,\n//       accountCode: cashAccount.code,\n//       debit: total,\n//       credit: 0,\n//       description: `Cash received from Order #${order.orderId} - ${order.lineItems.map(item => item.productName).join(', ')}`\n//     });\n\n//     if (subTotal > 0) {\n//       const revenueAccount = findAccountByType('revenue');\n//       entries.push({\n//         accountId: revenueAccount.id,\n//         accountName: revenueAccount.name,\n//         accountCode: revenueAccount.code,\n//         debit: 0,\n//         credit: subTotal,\n//         description: `Revenue from Order #${order.orderId}`\n//       });\n//     }\n\n//     if (taxAmount > 0) {\n//       const taxAccount = findAccountByType('liabilities');\n//       entries.push({\n//         accountId: taxAccount.id,\n//         accountName: taxAccount.name,\n//         accountCode: taxAccount.code,\n//         debit: 0,\n//         credit: taxAmount,\n//         description: `${order.taxRate}% tax collected on Order #${order.orderId}`\n//       });\n//     }\n\n//     let totalCOGS = 0;\n//     order.lineItems.forEach(item => {\n//       if (item.fulfilled && item.status === 'Fulfilled') {\n//         const costPrice = parseFloat(item.costPrice) || 0;\n//         const quantity = parseFloat(item.quantity) || 0;\n//         const itemCOGS = costPrice * quantity;\n//         totalCOGS += itemCOGS;\n//       }\n//     });\n\n//     if (totalCOGS > 0) {\n//       const cogsAccount = findAccountByType('expenses');\n//       entries.push({\n//         accountId: cogsAccount.id,\n//         accountName: cogsAccount.name,\n//         accountCode: cogsAccount.code,\n//         debit: totalCOGS,\n//         credit: 0,\n//         description: `COGS for Order #${order.orderId}`\n//       });\n\n//       const inventoryAccount = findAccountByType('assets', '16');\n//       entries.push({\n//         accountId: inventoryAccount.id,\n//         accountName: inventoryAccount.name,\n//         accountCode: inventoryAccount.code,\n//         debit: 0,\n//         credit: totalCOGS,\n//         description: `Inventory reduction - Order #${order.orderId}`\n//       });\n//     }\n\n//     const totalDebit = entries.reduce((sum, entry) => sum + parseFloat(entry.debit || 0), 0);\n//     const totalCredit = entries.reduce((sum, entry) => sum + parseFloat(entry.credit || 0), 0);\n\n//     return {\n//       id: `ORDERID-${order.orderId}`,\n//       date: formatDateFromCreatedAt(order.createdAt),\n//       description: `Sales Order #${order.orderId} - ${order.lineItems.map(item => `${item.productName} (${item.quantity})`).join(', ')}`,\n//       reference: `ORDER-${order.orderId}`,\n//       transactionType: 'automatic',\n//       source: 'POS Sales',\n//       status: 'posted',\n//       entries: entries,\n//       totalDebit: Math.round(totalDebit * 100) / 100,\n//       totalCredit: Math.round(totalCredit * 100) / 100,\n//       createdAt: order.createdAt,\n//       originalOrder: order\n//     };\n//   }, []);\n\n//   // Load Journal Entries from all sources\n//   const loadJournalEntriesFromAPI = useCallback(async () => {\n//     setLoading(prev => ({ ...prev, entries: true, purchase: true }));\n//     setErrors(prev => ({ ...prev, entries: null, purchase: null }));\n\n//     try {\n//       // Fetch both sales and purchase orders in parallel\n//       const [salesOrders, purchaseOrders] = await Promise.all([\n//         fetchSalesOrderData(),\n//         fetchPurchaseOrderData()\n//       ]);\n\n//       let allJournalEntries = [];\n\n//       // Process sales orders\n//       if (salesOrders && Array.isArray(salesOrders)) {\n//         const journalEntriesFromSales = salesOrders\n//           .filter(order => order.paid && order.fulfilled && order.status === 'Closed')\n//           .map(order => convertSalesOrderToJournalEntry(order, accounts))\n//           .filter(entry => entry !== null);\n\n//         allJournalEntries = [...allJournalEntries, ...journalEntriesFromSales];\n//         console.log(`Processed ${journalEntriesFromSales.length} sales journal entries`);\n//       }\n\n//       // Process purchase orders\n//       if (purchaseOrders && Array.isArray(purchaseOrders)) {\n//         const journalEntriesFromPurchases = purchaseOrders\n//           .map(order => convertPurchaseOrderToJournalEntry(order, accounts))\n//           .filter(entry => entry !== null);\n\n//         allJournalEntries = [...allJournalEntries, ...journalEntriesFromPurchases];\n//         console.log(`Processed ${journalEntriesFromPurchases.length} purchase journal entries`);\n//       }\n\n//       // Load manual entries from localStorage\n//       let manualEntries = [];\n//       try {\n//         const storedEntries = localStorage.getItem('manualJournalEntries');\n//         manualEntries = storedEntries ? JSON.parse(storedEntries) : [];\n//       } catch (error) {\n//         console.warn('Error loading manual entries from localStorage:', error);\n//         manualEntries = [];\n//       }\n\n//       allJournalEntries = [...allJournalEntries, ...manualEntries];\n\n//       // Sort by date\n//       allJournalEntries.sort((a, b) => b.date.localeCompare(a.date));\n\n//       setJournalEntries(allJournalEntries);\n//       setFilteredEntries(allJournalEntries);\n//       setLoading(prev => ({ ...prev, entries: false, purchase: false }));\n\n//       console.log(`Total journal entries loaded: ${allJournalEntries.length}`);\n//     } catch (error) {\n//       console.error('Error loading journal entries:', error);\n//       setErrors(prev => ({ ...prev, entries: error.message }));\n//       setLoading(prev => ({ ...prev, entries: false, purchase: false }));\n//     }\n//   }, [accounts, convertSalesOrderToJournalEntry, convertPurchaseOrderToJournalEntry]);\n\n//   // Filter entries\n//   const filterEntries = useCallback(() => {\n//     let filtered = [...journalEntries];\n\n//     if (filters.dateFrom) {\n//       filtered = filtered.filter(entry => entry.date >= filters.dateFrom);\n//     }\n\n//     if (filters.dateTo) {\n//       filtered = filtered.filter(entry => entry.date <= filters.dateTo);\n//     }\n\n//     if (filters.accountId) {\n//       filtered = filtered.filter(entry => {\n//         return entry.entries.some(e => e.accountId === filters.accountId);\n//       });\n//     }\n\n//     if (filters.transactionType !== 'all') {\n//       filtered = filtered.filter(entry => entry.transactionType === filters.transactionType);\n//     }\n\n//     if (filters.searchTerm) {\n//       const term = filters.searchTerm.toLowerCase();\n//       filtered = filtered.filter(entry => \n//         entry.description.toLowerCase().includes(term) ||\n//         entry.reference.toLowerCase().includes(term) ||\n//         entry.entries.some(e => e.description.toLowerCase().includes(term))\n//       );\n//     }\n\n//     setFilteredEntries(filtered);\n//   }, [journalEntries, filters]);\n\n//   // Generate trial balance\n//   const generateTrialBalance = useCallback(() => {\n//     const balances = {};\n\n//     accounts.forEach(account => {\n//       if (account.category === 'account') {\n//         balances[account.id] = {\n//           accountId: account.id,\n//           accountCode: account.code,\n//           accountName: account.name,\n//           accountType: account.type || 'unknown',\n//           debit: 0,\n//           credit: 0,\n//           balance: 0\n//         };\n//       }\n//     });\n\n//     journalEntries.forEach(entry => {\n//       if (entry.status === 'posted') {\n//         entry.entries.forEach(entryLine => {\n//           const accountId = entryLine.accountId;\n//           if (!balances[accountId]) {\n//             balances[accountId] = {\n//               accountId: accountId,\n//               accountCode: entryLine.accountCode || accountId,\n//               accountName: entryLine.accountName || `Account ${accountId}`,\n//               accountType: 'unknown',\n//               debit: 0,\n//               credit: 0,\n//               balance: 0\n//             };\n//           }\n\n//           balances[accountId].debit += parseFloat(entryLine.debit || 0);\n//           balances[accountId].credit += parseFloat(entryLine.credit || 0);\n//         });\n//       }\n//     });\n\n//     Object.values(balances).forEach(account => {\n//       if (account.accountType === 'assets' || account.accountType === 'expenses') {\n//         account.balance = account.debit - account.credit;\n//       } else {\n//         account.balance = account.credit - account.debit;\n//       }\n//     });\n\n//     const trialBalanceData = Object.values(balances)\n//       .filter(account => account.debit > 0 || account.credit > 0)\n//       .sort((a, b) => a.accountCode.localeCompare(b.accountCode));\n\n//     setTrialBalance(trialBalanceData);\n//     setShowTrialBalance(true);\n//   }, [accounts, journalEntries]);\n\n//   // Helper functions for entry management\n//   const addEntryLine = () => {\n//     setNewEntry({\n//       ...newEntry,\n//       entries: [...newEntry.entries, { accountId: '', debit: 0, credit: 0, description: '' }]\n//     });\n//   };\n\n//   const removeEntryLine = (index) => {\n//     if (newEntry.entries.length > 2) {\n//       const updatedEntries = newEntry.entries.filter((_, i) => i !== index);\n//       setNewEntry({ ...newEntry, entries: updatedEntries });\n//     }\n//   };\n\n//   const updateEntryLine = (index, field, value) => {\n//     const updatedEntries = [...newEntry.entries];\n//     updatedEntries[index] = { ...updatedEntries[index], [field]: value };\n//     setNewEntry({ ...newEntry, entries: updatedEntries });\n//   };\n//   const calculateTotals = (entries) => {\n//     const totalDebit = entries.reduce((sum, entry) => sum + (parseFloat(entry.debit) || 0), 0);\n//     const totalCredit = entries.reduce((sum, entry) => sum + (parseFloat(entry.credit) || 0), 0);\n//     return { totalDebit, totalCredit };\n//   };\n\n//   const isBalanced = (entries) => {\n//     const { totalDebit, totalCredit } = calculateTotals(entries);\n//     return Math.abs(totalDebit - totalCredit) < 0.01;\n//   };\n\n//   const saveJournalEntry = () => {\n//     if (!newEntry.description || !newEntry.entries.every(e => e.accountId)) {\n//       alert('Please fill in all required fields');\n//       return;\n//     }\n\n//     if (!isBalanced(newEntry.entries)) {\n//       alert('Journal entry must be balanced - total debits must equal total credits');\n//       return;\n//     }\n\n//     const { totalDebit, totalCredit } = calculateTotals(newEntry.entries);\n\n//     const entriesWithNames = newEntry.entries.map(entry => ({\n//       ...entry,\n//       accountName: accounts.find(acc => acc.id === entry.accountId)?.name || '',\n//       debit: parseFloat(entry.debit) || 0,\n//       credit: parseFloat(entry.credit) || 0\n//     }));\n\n//     const journalEntry = {\n//       id: `JE-MANUAL-${Date.now()}`,\n//       date: newEntry.date,\n//       description: newEntry.description,\n//       reference: newEntry.reference || `MAN${Date.now()}`,\n//       transactionType: 'manual',\n//       source: 'Manual',\n//       status: 'posted',\n//       entries: entriesWithNames,\n//       totalDebit,\n//       totalCredit,\n//       createdAt: new Date().toISOString()\n//     };\n\n//     try {\n//       const existingManualEntries = JSON.parse(localStorage.getItem('manualJournalEntries') || '[]');\n//       const updatedManualEntries = [...existingManualEntries, journalEntry];\n//       localStorage.setItem('manualJournalEntries', JSON.stringify(updatedManualEntries));\n//     } catch (error) {\n//       console.warn('Could not save to localStorage:', error);\n//     }\n\n//     setJournalEntries([...journalEntries, journalEntry]);\n\n//     setNewEntry({\n//       date: new Date().toISOString().split('T')[0],\n//       description: '',\n//       reference: '',\n//       entries: [\n//         { accountId: '', debit: 0, credit: 0, description: '' },\n//         { accountId: '', debit: 0, credit: 0, description: '' }\n//       ]\n//     });\n//     setIsAddingEntry(false);\n//   };\n\n//   const getAccountName = useCallback((accountId) => {\n//     const account = accounts.find(acc => acc.id === accountId || acc.code === accountId);\n\n//     if (account) {\n//       return `${account.code} - ${account.name}`;\n//     }\n\n//     let accountName = '';\n\n//     journalEntries.forEach(entry => {\n//       entry.entries.forEach(entryLine => {\n//         if (entryLine.accountId === accountId && entryLine.accountName) {\n//           accountName = entryLine.accountName;\n//         }\n//       });\n//     });\n\n//     if (accountName) {\n//       return `${accountId} - ${accountName}`;\n//     }\n\n//     const prefix = accountId.toString().substring(0, 1);\n//     let accountType = '';\n\n//     if (prefix === '1') accountType = 'Assets';\n//     else if (prefix === '2') accountType = 'Liabilities';\n//     else if (prefix === '3') accountType = 'Equity';\n//     else if (prefix === '4') accountType = 'Revenue';\n//     else if (prefix === '5') accountType = 'Expenses';\n\n//     return accountType ? `${accountId} - ${accountType} Account` : `${accountId} - Unknown Account`;\n//   }, [accounts, journalEntries]);\n\n//   // useEffect hooks\n//   useEffect(() => {\n//     loadChartsOfAccounts();\n//   }, [loadChartsOfAccounts]);\n\n//   useEffect(() => {\n//     if (accounts.length > 0) {\n//       loadJournalEntriesFromAPI();\n//     }\n//   }, [accounts, loadJournalEntriesFromAPI]);\n\n//   useEffect(() => {\n//     if (journalEntries.length > 0) {\n//       filterEntries();\n//     }\n//   }, [journalEntries, filters, filterEntries]);\n\n//   const { totalDebit, totalCredit } = calculateTotals(newEntry.entries);\n//   const entryIsBalanced = isBalanced(newEntry.entries);\n\n//   return (\n//     <div className=\"max-w-7xl mx-auto p-6 bg-white\">\n//       {/* Header */}\n//       <div className=\"mb-8\">\n//         <h1 className=\"text-3xl font-bold text-gray-900 mb-2 flex items-center\">\n//           <Book className=\"mr-3 text-emerald-600\" />\n//           General Ledger\n//         </h1>\n//         <p className=\"text-gray-600\">Real-time transaction recording and journal entry management</p>\n\n//         {loading.accounts && (\n//           <div className=\"mt-2 p-2 bg-blue-50 text-blue-700 rounded-md text-sm flex items-center\">\n//             <RefreshCw className=\"animate-spin mr-2\" size={16} />\n//             Loading chart of accounts...\n//           </div>\n//         )}\n\n//         {errors.accounts && (\n//           <div className=\"mt-2 p-2 bg-red-50 text-red-700 rounded-md text-sm flex items-center\">\n//             <AlertCircle className=\"mr-2\" size={16} />\n//             Error loading accounts: {errors.accounts}\n//           </div>\n//         )}\n\n//         {loading.entries && (\n//           <div className=\"mt-2 p-2 bg-blue-50 text-blue-700 rounded-md text-sm flex items-center\">\n//             <RefreshCw className=\"animate-spin mr-2\" size={16} />\n//             Loading journal entries...\n//           </div>\n//         )}\n\n//         {errors.entries && (\n//           <div className=\"mt-2 p-2 bg-red-50 text-red-700 rounded-md text-sm flex items-center\">\n//             <AlertCircle className=\"mr-2\" size={16} />\n//             Error loading entries: {errors.entries}\n//           </div>\n//         )}\n//       </div>\n\n//       {/* Quick Stats */}\n//       <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n//         <div className=\"bg-blue-50 p-4 rounded-lg border border-blue-200\">\n//           <div className=\"flex items-center justify-between\">\n//             <div>\n//               <p className=\"text-blue-600 text-sm font-medium\">Total Entries</p>\n//               <p className=\"text-2xl font-bold text-blue-900\">{journalEntries.length}</p>\n//             </div>\n//             <FileText className=\"text-blue-600\" size={24} />\n//           </div>\n//         </div>\n\n//         <div className=\"bg-green-50 p-4 rounded-lg border border-green-200\">\n//           <div className=\"flex items-center justify-between\">\n//             <div>\n//               <p className=\"text-green-600 text-sm font-medium\">Purchase Entries</p>\n//               <p className=\"text-2xl font-bold text-green-900\">\n//                 {journalEntries.filter(e => e.source === 'Purchase Orders').length}\n//               </p>\n//             </div>\n//             <TrendingUp className=\"text-green-600\" size={24} />\n//           </div>\n//         </div>\n\n//         <div className=\"bg-orange-50 p-4 rounded-lg border border-orange-200\">\n//           <div className=\"flex items-center justify-between\">\n//             <div>\n//               <p className=\"text-orange-600 text-sm font-medium\">Manual Entries</p>\n//               <p className=\"text-2xl font-bold text-orange-900\">\n//                 {journalEntries.filter(e => e.transactionType === 'manual').length}\n//               </p>\n//             </div>\n//             <Edit className=\"text-orange-600\" size={24} />\n//           </div>\n//         </div>\n\n//         <div className=\"bg-purple-50 p-4 rounded-lg border border-purple-200\">\n//           <div className=\"flex items-center justify-between\">\n//             <div>\n//               <p className=\"text-purple-600 text-sm font-medium\">Total Value</p>\n//               <p className=\"text-2xl font-bold text-purple-900\">\n//                 PKR {journalEntries.reduce((sum, entry) => sum + entry.totalDebit, 0).toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\n//               </p>\n//             </div>\n//             <DollarSign className=\"text-purple-600\" size={24} />\n//           </div>\n//         </div>\n//       </div>\n\n//       {/* Controls */}\n//       <div className=\"flex flex-wrap items-center justify-between gap-4 mb-6\">\n//         <div className=\"flex flex-wrap items-center gap-4\">\n//           {/* Date Filters */}\n//           <div className=\"flex items-center space-x-2\">\n//             <Calendar size={16} className=\"text-gray-400\" />\n//             <input\n//               type=\"date\"\n//               value={filters.dateFrom}\n//               onChange={(e) => setFilters({ ...filters, dateFrom: e.target.value })}\n//               className=\"px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\n//               placeholder=\"From\"\n//             />\n//             <span className=\"text-gray-500\">to</span>\n//             <input\n//               type=\"date\"\n//               value={filters.dateTo}\n//               onChange={(e) => setFilters({ ...filters, dateTo: e.target.value })}\n//               className=\"px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\n//               placeholder=\"To\"\n//             />\n//           </div>\n\n//           {/* Account Filter */}\n//           <div className=\"relative\">\n//             <Filter className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" size={16} />\n//             <select\n//               value={filters.accountId}\n//               onChange={(e) => setFilters({ ...filters, accountId: e.target.value })}\n//               className=\"pl-10 pr-8 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\n//             >\n//               <option value=\"\">All Accounts</option>\n\n//               {/* Group accounts by type for better organization */}\n//               {accounts.length > 0 && (\n//                 <>\n//                   {/* Assets */}\n//                   <optgroup label=\"Assets\">\n//                     {accounts\n//                       .filter(acc => acc.type === 'assets' && acc.category === 'account')\n//                       .map(account => (\n//                         <option key={account.id} value={account.id}>\n//                           {account.code} - {account.name}\n//                         </option>\n//                       ))}\n//                   </optgroup>\n\n//                   {/* Liabilities */}\n//                   <optgroup label=\"Liabilities\">\n//                     {accounts\n//                       .filter(acc => acc.type === 'liabilities' && acc.category === 'account')\n//                       .map(account => (\n//                         <option key={account.id} value={account.id}>\n//                           {account.code} - {account.name}\n//                         </option>\n//                       ))}\n//                   </optgroup>\n\n//                   {/* Equity */}\n//                   <optgroup label=\"Equity\">\n//                     {accounts\n//                       .filter(acc => acc.type === 'equity' && acc.category === 'account')\n//                       .map(account => (\n//                         <option key={account.id} value={account.id}>\n//                           {account.code} - {account.name}\n//                         </option>\n//                       ))}\n//                   </optgroup>\n\n//                   {/* Revenue */}\n//                   <optgroup label=\"Revenue\">\n//                     {accounts\n//                       .filter(acc => acc.type === 'revenue' && acc.category === 'account')\n//                       .map(account => (\n//                         <option key={account.id} value={account.id}>\n//                           {account.code} - {account.name}\n//                         </option>\n//                       ))}\n//                   </optgroup>\n\n//                   {/* Expenses */}\n//                   <optgroup label=\"Expenses\">\n//                     {accounts\n//                       .filter(acc => acc.type === 'expenses' && acc.category === 'account')\n//                       .map(account => (\n//                         <option key={account.id} value={account.id}>\n//                           {account.code} - {account.name}\n//                         </option>\n//                       ))}\n//                   </optgroup>\n//                 </>\n//               )}\n\n//               {accounts.length === 0 && (\n//                 <option disabled>Loading accounts...</option>\n//               )}\n//             </select>\n//           </div>\n\n//           {/* Transaction Type Filter */}\n//           <select\n//             value={filters.transactionType}\n//             onChange={(e) => setFilters({ ...filters, transactionType: e.target.value })}\n//             className=\"px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\n//           >\n//             <option value=\"all\">All Types</option>\n//             <option value=\"automatic\">Automatic (POS/Purchase)</option>\n//             <option value=\"manual\">Manual</option>\n//           </select>\n\n//           {/* Search */}\n//           <div className=\"relative\">\n//             <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" size={16} />\n//             <input\n//               type=\"text\"\n//               placeholder=\"Search entries...\"\n//               value={filters.searchTerm}\n//               onChange={(e) => setFilters({ ...filters, searchTerm: e.target.value })}\n//               className=\"pl-10 pr-4 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\n//             />\n//           </div>\n//         </div>\n\n//         <div className=\"flex space-x-3\">\n//           <button\n//             onClick={loadJournalEntriesFromAPI}\n//             disabled={loading.entries}\n//             className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center space-x-2 disabled:bg-gray-400\"\n//           >\n//             {loading.entries ? <RefreshCw className=\"animate-spin\" size={16} /> : <RefreshCw size={16} />}\n//             <span>Refresh from API</span>\n//           </button>\n//           <button\n//             onClick={loadChartsOfAccounts}\n//             disabled={loading.accounts}\n//             className=\"px-4 py-2 bg-teal-600 text-white rounded-lg hover:bg-teal-700 flex items-center space-x-2 disabled:bg-gray-400\"\n//           >\n//             {loading.accounts ? <RefreshCw className=\"animate-spin\" size={16} /> : <RefreshCw size={16} />}\n//             <span>Refresh Accounts</span>\n//           </button>\n//           <button\n//             onClick={() => {\n//               setFilters({\n//                 dateFrom: '',\n//                 dateTo: '',\n//                 accountId: '',\n//                 transactionType: 'all',\n//                 searchTerm: ''\n//               });\n//               setFilteredEntries([...journalEntries]);\n//             }}\n//             className=\"px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 flex items-center space-x-2\"\n//           >\n//             <X size={16} />\n//             <span>Clear Filters</span>\n//           </button>\n//           <button\n//             onClick={() => setIsAddingEntry(true)}\n//             className=\"px-4 py-2 bg-emerald-600 text-white rounded-lg hover:bg-emerald-700 flex items-center space-x-2\"\n//           >\n//             <Plus size={16} />\n//             <span>Add Entry</span>\n//           </button>\n//           <button\n//             onClick={generateTrialBalance}\n//             className=\"px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 flex items-center space-x-2\"\n//           >\n//             <FileText size={16} />\n//             <span>Trial Balance</span>\n//           </button>\n//         </div>\n//       </div>\n\n//       {/* Journal Entry Form */}\n//       {isAddingEntry && (\n//         <div className=\"mb-8 p-6 bg-gray-50 rounded-lg border\">\n//           <h3 className=\"text-lg font-semibold mb-4\">Add Manual Journal Entry</h3>\n\n//           <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n//             <div>\n//               <label className=\"block text-sm font-medium text-gray-700 mb-1\">Date *</label>\n//               <input\n//                 type=\"date\"\n//                 value={newEntry.date}\n//                 onChange={(e) => setNewEntry({ ...newEntry, date: e.target.value })}\n//                 className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\n//               />\n//             </div>\n//             <div>\n//               <label className=\"block text-sm font-medium text-gray-700 mb-1\">Description *</label>\n//               <input\n//                 type=\"text\"\n//                 value={newEntry.description}\n//                 onChange={(e) => setNewEntry({ ...newEntry, description: e.target.value })}\n//                 placeholder=\"Enter description\"\n//                 className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\n//               />\n//             </div>\n//             <div>\n//               <label className=\"block text-sm font-medium text-gray-700 mb-1\">Reference</label>\n//               <input\n//                 type=\"text\"\n//                 value={newEntry.reference}\n//                 onChange={(e) => setNewEntry({ ...newEntry, reference: e.target.value })}\n//                 placeholder=\"Reference number\"\n//                 className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\n//               />\n//             </div>\n//           </div>\n\n//           {/* Entry Lines */}\n//           <div className=\"mb-4\">\n//             <label className=\"block text-sm font-medium text-gray-700 mb-2\">Journal Entry Lines</label>\n//             <div className=\"space-y-3\">\n//               {newEntry.entries.map((entry, index) => (\n//                 <div key={index} className=\"grid grid-cols-12 gap-2 items-center bg-white p-3 rounded border\">\n//                   <div className=\"col-span-4\">\n//                     <select\n//                       value={entry.accountId}\n//                       onChange={(e) => updateEntryLine(index, 'accountId', e.target.value)}\n//                       className=\"w-full px-2 py-1 border border-gray-300 rounded text-sm focus:ring-2 focus:ring-emerald-500\"\n//                     >\n//                       <option value=\"\">Select Account</option>\n\n//                       {accounts.length > 0 && (\n//                         <>\n//                           {/* Assets */}\n//                           <optgroup label=\"Assets\">\n//                             {accounts\n//                               .filter(acc => acc.type === 'assets' && acc.category === 'account')\n//                               .map(account => (\n//                                 <option key={account.id} value={account.id}>\n//                                   {account.code} - {account.name}\n//                                 </option>\n//                               ))}\n//                           </optgroup>\n\n//                           {/* Liabilities */}\n//                           <optgroup label=\"Liabilities\">\n//                             {accounts\n//                               .filter(acc => acc.type === 'liabilities' && acc.category === 'account')\n//                               .map(account => (\n//                                 <option key={account.id} value={account.id}>\n//                                   {account.code} - {account.name}\n//                                 </option>\n//                               ))}\n//                           </optgroup>\n\n//                           {/* Equity */}\n//                           <optgroup label=\"Equity\">\n//                             {accounts\n//                               .filter(acc => acc.type === 'equity' && acc.category === 'account')\n//                               .map(account => (\n//                                 <option key={account.id} value={account.id}>\n//                                   {account.code} - {account.name}\n//                                 </option>\n//                               ))}\n//                           </optgroup>\n\n//                           {/* Revenue */}\n//                           <optgroup label=\"Revenue\">\n//                             {accounts\n//                               .filter(acc => acc.type === 'revenue' && acc.category === 'account')\n//                               .map(account => (\n//                                 <option key={account.id} value={account.id}>\n//                                   {account.code} - {account.name}\n//                                 </option>\n//                               ))}\n//                           </optgroup>\n\n//                           {/* Expenses */}\n//                           <optgroup label=\"Expenses\">\n//                             {accounts\n//                               .filter(acc => acc.type === 'expenses' && acc.category === 'account')\n//                               .map(account => (\n//                                 <option key={account.id} value={account.id}>\n//                                   {account.code} - {account.name}\n//                                 </option>\n//                               ))}\n//                           </optgroup>\n//                         </>\n//                       )}\n\n//                       {accounts.length === 0 && (\n//                         <option disabled>Loading accounts...</option>\n//                       )}\n//                     </select>\n//                   </div>\n//                   <div className=\"col-span-3\">\n//                     <input\n//                       type=\"text\"\n//                       value={entry.description}\n//                       onChange={(e) => updateEntryLine(index, 'description', e.target.value)}\n//                       placeholder=\"Description\"\n//                       className=\"w-full px-2 py-1 border border-gray-300 rounded text-sm focus:ring-2 focus:ring-emerald-500\"\n//                     />\n//                   </div>\n//                   <div className=\"col-span-2\">\n//                     <input\n//                       type=\"number\"\n//                       step=\"0.01\"\n//                       value={entry.debit}\n//                       onChange={(e) => updateEntryLine(index, 'debit', e.target.value)}\n//                       placeholder=\"Debit\"\n//                       className=\"w-full px-2 py-1 border border-gray-300 rounded text-sm focus:ring-2 focus:ring-emerald-500\"\n//                     />\n//                   </div>\n//                   <div className=\"col-span-2\">\n//                     <input\n//                       type=\"number\"\n//                       step=\"0.01\"\n//                       value={entry.credit}\n//                       onChange={(e) => updateEntryLine(index, 'credit', e.target.value)}\n//                       placeholder=\"Credit\"\n//                       className=\"w-full px-2 py-1 border border-gray-300 rounded text-sm focus:ring-2 focus:ring-emerald-500\"\n//                     />\n//                   </div>\n//                   <div className=\"col-span-1\">\n//                     {newEntry.entries.length > 2 && (\n//                       <button\n//                         onClick={() => removeEntryLine(index)}\n//                         className=\"p-1 text-red-600 hover:bg-red-100 rounded\"\n//                       >\n//                         <Trash2 size={14} />\n//                       </button>\n//                     )}\n//                   </div>\n//                 </div>\n//               ))}\n//             </div>\n\n//             <div className=\"flex justify-between items-center mt-3\">\n//               <button\n//                 onClick={addEntryLine}\n//                 className=\"px-3 py-1 text-sm bg-gray-200 text-gray-700 rounded hover:bg-gray-300 flex items-center space-x-1\"\n//               >\n//                 <Plus size={14} />\n//                 <span>Add Line</span>\n//               </button>\n\n//               <div className=\"flex items-center space-x-4\">\n//                 <div className=\"text-sm\">\n//                   <span className=\"font-medium\">Total Debit: PKR {totalDebit.toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}</span>\n//                   <span className=\"mx-2\">|</span>\n//                   <span className=\"font-medium\">Total Credit: PKR {totalCredit.toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}</span>\n//                 </div>\n//                 {entryIsBalanced ? (\n//                   <div className=\"flex items-center text-green-600\">\n//                     <CheckCircle size={16} className=\"mr-1\" />\n//                     <span className=\"text-sm\">Balanced</span>\n//                   </div>\n//                 ) : (\n//                   <div className=\"flex items-center text-red-600\">\n//                     <AlertCircle size={16} className=\"mr-1\" />\n//                     <span className=\"text-sm\">Not Balanced</span>\n//                   </div>\n//                 )}\n//               </div>\n//             </div>\n//           </div>\n\n//           <div className=\"flex space-x-3\">\n//             <button\n//               onClick={saveJournalEntry}\n//               disabled={!entryIsBalanced}\n//               className=\"px-4 py-2 bg-emerald-600 text-white rounded-lg hover:bg-emerald-700 disabled:bg-gray-400 flex items-center space-x-2\"\n//             >\n//               <Save size={16} />\n//               <span>Save Entry</span>\n//             </button>\n//             <button\n//               onClick={() => setIsAddingEntry(false)}\n//               className=\"px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 flex items-center space-x-2\"\n//             >\n//               <X size={16} />\n//               <span>Cancel</span>\n//             </button>\n//           </div>\n//         </div>\n//       )}\n\n//       {/* Journal Entries Table */}\n//       <div className=\"bg-white border border-gray-200 rounded-lg overflow-hidden\">\n//         <div className=\"px-6 py-4 border-b border-gray-200\">\n//           <h2 className=\"text-lg font-semibold text-gray-900\">Journal Entries</h2>\n//           <p className=\"text-sm text-gray-600 mt-1\">\n//             Showing {filteredEntries.length} of {journalEntries.length} entries\n//           </p>\n//         </div>\n\n//         <div className=\"overflow-x-auto\">\n//           <table className=\"w-full\">\n//             <thead className=\"bg-gray-50\">\n//               <tr>\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                   Entry ID\n//                 </th>\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                   Date\n//                 </th>\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                   Description\n//                 </th>\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                   Reference\n//                 </th>\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                   Source\n//                 </th>\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                   Amount\n//                 </th>\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                   Status\n//                 </th>\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                   Actions\n//                 </th>\n//               </tr>\n//             </thead>\n//             <tbody className=\"bg-white divide-y divide-gray-200\">\n//               {filteredEntries.map((entry) => (\n//                 <tr key={entry.id} className=\"hover:bg-gray-50\">\n//                   <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\n//                     {entry.id}\n//                   </td>\n//                   <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n//                     {entry.date}\n//                   </td>\n//                   <td className=\"px-6 py-4 text-sm text-gray-900 max-w-xs truncate\">\n//                     {entry.description}\n//                   </td>\n//                   <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n//                     {entry.reference}\n//                   </td>\n//                   <td className=\"px-6 py-4 whitespace-nowrap\">\n//                     <span className={`px-2 py-1 text-xs font-medium rounded-full ${\n//                       entry.source === 'POS Sales' ? 'bg-green-100 text-green-800' : \n//                       entry.source === 'Purchase Orders' ? 'bg-blue-100 text-blue-800' :\n//                       entry.source === 'Manual' ? 'bg-orange-100 text-orange-800' :\n//                       'bg-gray-100 text-gray-800'\n//                     }`}>\n//                       {entry.source}\n//                     </span>\n//                   </td>\n//                   <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n//                     PKR {entry.totalDebit.toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\n//                   </td>\n//                   <td className=\"px-6 py-4 whitespace-nowrap\">\n//                     <span className={`px-2 py-1 text-xs font-medium rounded-full ${\n//                       entry.status === 'posted' ? 'bg-blue-100 text-blue-800' : 'bg-yellow-100 text-yellow-800'\n//                     }`}>\n//                       {entry.status}\n//                     </span>\n//                   </td>\n//                   <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">\n//                     <button\n//                       onClick={() => setSelectedEntry(entry)}\n//                       className=\"text-emerald-600 hover:text-emerald-900 mr-3\"\n//                     >\n//                       <Eye size={16} />\n//                     </button>\n//                   </td>\n//                 </tr>\n//               ))}\n//             </tbody>\n//           </table>\n//         </div>\n//       </div>\n\n//       {/* Entry Details Modal */}\n//       {selectedEntry && (\n//         <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center p-4 z-50\">\n//           <div className=\"bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-y-auto\">\n//             <div className=\"px-6 py-4 border-b border-gray-200\">\n//               <div className=\"flex items-center justify-between\">\n//                 <h3 className=\"text-lg font-semibold text-gray-900\">\n//                   Journal Entry Details - {selectedEntry.id}\n//                 </h3>\n//                 <button\n//                   onClick={() => setSelectedEntry(null)}\n//                   className=\"text-gray-400 hover:text-gray-600\"\n//                 >\n//                   <X size={20} />\n//                 </button>\n//               </div>\n//             </div>\n\n//             <div className=\"px-6 py-4\">\n//               {/* Entry Header */}\n//               <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-6\">\n//                 <div>\n//                   <label className=\"text-sm font-medium text-gray-500\">Date</label>\n//                   <p className=\"text-sm text-gray-900\">{selectedEntry.date}</p>\n//                 </div>\n//                 <div>\n//                   <label className=\"text-sm font-medium text-gray-500\">Reference</label>\n//                   <p className=\"text-sm text-gray-900\">{selectedEntry.reference}</p>\n//                 </div>\n//                 <div>\n//                   <label className=\"text-sm font-medium text-gray-500\">Description</label>\n//                   <p className=\"text-sm text-gray-900\">{selectedEntry.description}</p>\n//                 </div>\n//                 <div>\n//                   <label className=\"text-sm font-medium text-gray-500\">Source</label>\n//                   <span className={`px-2 py-1 text-xs font-medium rounded-full ${\n//                     selectedEntry.source === 'POS Sales' ? 'bg-green-100 text-green-800' : \n//                     selectedEntry.source === 'Purchase Orders' ? 'bg-blue-100 text-blue-800' :\n//                     'bg-orange-100 text-orange-800'\n//                   }`}>\n//                     {selectedEntry.source}\n//                   </span>\n//                 </div>\n//               </div>\n\n//               {/* Entry Lines */}\n//               <div className=\"mb-6\">\n//                 <h4 className=\"text-sm font-medium text-gray-700 mb-3\">Account Entries</h4>\n//                 <div className=\"overflow-x-auto\">\n//                   <table className=\"w-full border border-gray-200 rounded\">\n//                     <thead className=\"bg-gray-50\">\n//                       <tr>\n//                         <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500\">Account</th>\n//                         <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500\">Description</th>\n//                         <th className=\"px-4 py-2 text-right text-xs font-medium text-gray-500\">Debit</th>\n//                         <th className=\"px-4 py-2 text-right text-xs font-medium text-gray-500\">Credit</th>\n//                       </tr>\n//                     </thead>\n//                     <tbody className=\"divide-y divide-gray-200\">\n//                       {selectedEntry.entries.map((entryLine, index) => (\n//                         <tr key={index}>\n//                           <td className=\"px-4 py-2 text-sm text-gray-900\">\n//                             {getAccountName(entryLine.accountId)}\n//                           </td>\n//                           <td className=\"px-4 py-2 text-sm text-gray-600\">\n//                             {entryLine.description}\n//                           </td>\n//                           <td className=\"px-4 py-2 text-sm text-gray-900 text-right\">\n//                             {entryLine.debit > 0 ? `${entryLine.debit.toFixed(2)}` : '-'}\n//                           </td>\n//                           <td className=\"px-4 py-2 text-sm text-gray-900 text-right\">\n//                             {entryLine.credit > 0 ? `${entryLine.credit.toFixed(2)}` : '-'}\n//                           </td>\n//                         </tr>\n//                       ))}\n//                     </tbody>\n//                     <tfoot className=\"bg-gray-50\">\n//                       <tr>\n//                         <td colSpan=\"2\" className=\"px-4 py-2 text-sm font-medium text-gray-900\">\n//                           Totals:\n//                         </td>\n//                         <td className=\"px-4 py-2 text-sm font-bold text-gray-900 text-right\">\n//                           PKR {selectedEntry.totalDebit.toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\n//                         </td>\n//                         <td className=\"px-4 py-2 text-sm font-bold text-gray-900 text-right\">\n//                           PKR {selectedEntry.totalCredit.toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\n//                         </td>\n//                       </tr>\n//                     </tfoot>\n//                   </table>\n//                 </div>\n//               </div>\n\n//               {/* Original Purchase Order Info (if available) */}\n//               {selectedEntry.originalPurchaseOrder && (\n//                 <div className=\"mb-6 p-4 bg-gray-50 rounded-lg\">\n//                   <h4 className=\"text-sm font-medium text-gray-700 mb-3\">Original Purchase Order Details</h4>\n//                   <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n//                     <div>\n//                       <span className=\"font-medium text-gray-500\">PO ID:</span>\n//                       <p className=\"text-gray-900\">{selectedEntry.originalPurchaseOrder.id}</p>\n//                     </div>\n//                     <div>\n//                       <span className=\"font-medium text-gray-500\">Status:</span>\n//                       <p className=\"text-gray-900\">{selectedEntry.originalPurchaseOrder.status}</p>\n//                     </div>\n//                     <div>\n//                       <span className=\"font-medium text-gray-500\">Vendor ID:</span>\n//                       <p className=\"text-gray-900\">{selectedEntry.originalPurchaseOrder.vendor_Id || 'N/A'}</p>\n//                     </div>\n//                     <div>\n//                       <span className=\"font-medium text-gray-500\">Type:</span>\n//                       <p className=\"text-gray-900\">{selectedEntry.originalPurchaseOrder.type || 'Standard'}</p>\n//                     </div>\n//                   </div>\n\n//                   {/* Purchase Items */}\n//                   <div className=\"mt-4\">\n//                     <span className=\"font-medium text-gray-500\">Purchase Items (Applied Only):</span>\n//                     <div className=\"mt-2 space-y-2\">\n//                       {selectedEntry.originalPurchaseOrder.purchaseOrderItems\n//                         .filter(item => item.status === 'applied' && item.quantity > 0)\n//                         .map((item, index) => (\n//                         <div key={index} className=\"text-sm bg-white p-2 rounded border\">\n//                           <span className=\"font-medium\">Product ID: {item.product_Id}</span> - \n//                           Qty: {item.quantity}, Price per Unit: PKR {parseFloat(item.pricePerUnit).toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}, \n//                           Total: PKR {(parseFloat(item.pricePerUnit) * parseFloat(item.quantity)).toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\n//                           {item.remarks && item.remarks !== 'null' && <span className=\"text-gray-500\"> ({item.remarks})</span>}\n//                         </div>\n//                       ))}\n//                     </div>\n\n//                     {selectedEntry.originalPurchaseOrder.remarks && selectedEntry.originalPurchaseOrder.remarks !== 'null' && (\n//                       <div className=\"mt-3\">\n//                         <span className=\"font-medium text-gray-500\">Remarks:</span>\n//                         <p className=\"text-gray-900 text-sm\">{selectedEntry.originalPurchaseOrder.remarks}</p>\n//                       </div>\n//                     )}\n//                   </div>\n//                 </div>\n//               )}\n\n//               {/* Original Order Info (if available) */}\n//               {selectedEntry.originalOrder && (\n//                 <div className=\"mb-6 p-4 bg-gray-50 rounded-lg\">\n//                   <h4 className=\"text-sm font-medium text-gray-700 mb-3\">Original Sales Order Details</h4>\n//                   <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n//                     <div>\n//                       <span className=\"font-medium text-gray-500\">Order ID:</span>\n//                       <p className=\"text-gray-900\">{selectedEntry.originalOrder.orderId}</p>\n//                     </div>\n//                     <div>\n//                       <span className=\"font-medium text-gray-500\">Status:</span>\n//                       <p className=\"text-gray-900\">{selectedEntry.originalOrder.status}</p>\n//                     </div>\n//                     <div>\n//                       <span className=\"font-medium text-gray-500\">Payment Status:</span>\n//                       <p className=\"text-gray-900\">{selectedEntry.originalOrder.paid ? 'Paid' : 'Unpaid'}</p>\n//                     </div>\n//                     <div>\n//                       <span className=\"font-medium text-gray-500\">Fulfilled:</span>\n//                       <p className=\"text-gray-900\">{selectedEntry.originalOrder.fulfilled ? 'Yes' : 'No'}</p>\n//                     </div>\n//                   </div>\n\n//                   {/* Line Items */}\n//                   <div className=\"mt-4\">\n//                     <span className=\"font-medium text-gray-500\">Line Items:</span>\n//                     <div className=\"mt-2 space-y-2\">\n//                       {selectedEntry.originalOrder.lineItems.map((item, index) => (\n//                         <div key={index} className=\"text-sm bg-white p-2 rounded border\">\n//                           <span className=\"font-medium\">{item.productName}</span> - \n//                           Qty: {item.quantity}, Price: PKR {parseFloat(item.price).toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}, \n//                           Total: PKR {parseFloat(item.total).toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\n//                           {item.taxAmount > 0 && <span className=\"text-gray-500\"> (Tax: PKR {parseFloat(item.taxAmount).toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})})</span>}\n//                         </div>\n//                       ))}\n//                     </div>\n//                   </div>\n//                 </div>\n//               )}\n\n//               {/* Entry Metadata */}\n//               <div className=\"text-xs text-gray-500\">\n//                 <p>Created: {new Date(selectedEntry.createdAt).toLocaleString()}</p>\n//                 <p>Status: {selectedEntry.status}</p>\n//                 <p>Type: {selectedEntry.transactionType}</p>\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n//       )}\n\n// {/* Trial Balance Modal */}\n// {showTrialBalance && (\n//   <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center p-4 z-50\">\n//     <div className=\"bg-white rounded-lg max-w-5xl w-full max-h-[90vh] overflow-y-auto\">\n//       <div className=\"px-6 py-4 border-b border-gray-200\">\n//         <div className=\"flex items-center justify-between\">\n//           <h3 className=\"text-lg font-semibold text-gray-900\">\n//             Trial Balance\n//             {filters.dateFrom && filters.dateTo\n//               ? ` (${new Date(filters.dateFrom).toLocaleDateString()} → ${new Date(filters.dateTo).toLocaleDateString()})`\n//               : ` - As of ${new Date().toLocaleDateString()}`}\n//           </h3>\n//           <div className=\"flex items-center space-x-2\">\n//             <button\n//               onClick={() => {\n//                 alert('Export functionality would be implemented here');\n//               }}\n//               className=\"px-3 py-1 bg-emerald-600 text-white rounded text-sm hover:bg-emerald-700 flex items-center space-x-1\"\n//             >\n//               <Download size={14} />\n//               <span>Export</span>\n//             </button>\n//             <button\n//               onClick={() => setShowTrialBalance(false)}\n//               className=\"text-gray-400 hover:text-gray-600\"\n//             >\n//               <X size={20} />\n//             </button>\n//           </div>\n//         </div>\n//       </div>\n\n//       {/* ✅ Date Filters */}\n//       <div className=\"px-6 py-4 border-b border-gray-200 flex items-center space-x-3\">\n//         <input\n//           type=\"date\"\n//           value={filters.dateFrom || ''}\n//           onChange={(e) => setFilters({ ...filters, dateFrom: e.target.value })}\n//           className=\"px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-rose-500\"\n//         />\n//         <span className=\"text-gray-500\">to</span>\n//         <input\n//           type=\"date\"\n//           value={filters.dateTo || ''}\n//           onChange={(e) => setFilters({ ...filters, dateTo: e.target.value })}\n//           className=\"px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-rose-500\"\n//         />\n//         {(filters.dateFrom || filters.dateTo) && (\n//           <button\n//             onClick={() => setFilters({ ...filters, dateFrom: '', dateTo: '' })}\n//             className=\"ml-2 px-3 py-1 bg-gray-200 rounded hover:bg-gray-300 text-sm\"\n//           >\n//             Clear\n//           </button>\n//         )}\n//       </div>\n\n//       <div className=\"px-6 py-4\">\n//         <div className=\"overflow-x-auto\">\n//           {(() => {\n//             const filteredTrialBalance = trialBalance.filter((item) => {\n//               if (!filters.dateFrom && !filters.dateTo) return true;\n//               const txDate = new Date(item.date); // assumes each entry has `date`\n//               const from = filters.dateFrom ? new Date(filters.dateFrom) : null;\n//               const to = filters.dateTo ? new Date(filters.dateTo) : null;\n//               if (from && txDate < from) return false;\n//               if (to && txDate > to) return false;\n//               return true;\n//             });\n\n//             return (\n//               <table className=\"w-full\">\n//                 <thead className=\"bg-gray-50\">\n//                   <tr>\n//                     <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                       Date\n//                     </th>\n//                     <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                       Account Code\n//                     </th>\n//                     <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                       Account Name\n//                     </th>\n//                     <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                       Type\n//                     </th>\n//                     <th className=\"px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                       Debit Total\n//                     </th>\n//                     <th className=\"px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                       Credit Total\n//                     </th>\n//                     <th className=\"px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                       Balance\n//                     </th>\n//                   </tr>\n//                 </thead>\n//                 <tbody className=\"bg-white divide-y divide-gray-200\">\n//                   {filteredTrialBalance.map((item) => (\n//                     <tr key={item.accountId}>\n//                       <td className=\"px-4 py-4 whitespace-nowrap text-sm text-gray-900\">\n//                         {new Date(item.date).toLocaleDateString()}\n//                       </td>\n//                       <td className=\"px-4 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\n//                         {item.accountCode}\n//                       </td>\n//                       <td className=\"px-4 py-4 whitespace-nowrap text-sm text-gray-900\">\n//                         {item.accountName}\n//                       </td>\n//                       <td className=\"px-4 py-4 whitespace-nowrap\">\n//                         <span\n//                           className={`px-2 py-1 text-xs font-medium rounded-full ${\n//                             item.accountType === 'assets'\n//                               ? 'bg-green-100 text-green-800'\n//                               : item.accountType === 'liabilities'\n//                               ? 'bg-red-100 text-red-800'\n//                               : item.accountType === 'equity'\n//                               ? 'bg-blue-100 text-blue-800'\n//                               : item.accountType === 'revenue'\n//                               ? 'bg-purple-100 text-purple-800'\n//                               : item.accountType === 'expenses'\n//                               ? 'bg-orange-100 text-orange-800'\n//                               : 'bg-gray-100 text-gray-800'\n//                           }`}\n//                         >\n//                           {item.accountType?.charAt(0).toUpperCase() +\n//                             item.accountType?.slice(1) || 'Unknown'}\n//                         </span>\n//                       </td>\n//                       <td className=\"px-4 py-4 whitespace-nowrap text-sm text-gray-900 text-right\">\n//                         PKR{' '}\n//                         {item.debit.toLocaleString('en-PK', {\n//                           minimumFractionDigits: 2,\n//                           maximumFractionDigits: 2,\n//                         })}\n//                       </td>\n//                       <td className=\"px-4 py-4 whitespace-nowrap text-sm text-gray-900 text-right\">\n//                         PKR{' '}\n//                         {item.credit.toLocaleString('en-PK', {\n//                           minimumFractionDigits: 2,\n//                           maximumFractionDigits: 2,\n//                         })}\n//                       </td>\n//                       <td className=\"px-4 py-4 whitespace-nowrap text-sm font-medium text-right\">\n//                         <span\n//                           className={\n//                             item.balance >= 0 ? 'text-green-600' : 'text-red-600'\n//                           }\n//                         >\n//                           PKR{' '}\n//                           {Math.abs(item.balance).toLocaleString('en-PK', {\n//                             minimumFractionDigits: 2,\n//                             maximumFractionDigits: 2,\n//                           })}\n//                           {item.balance < 0 && ' (CR)'}\n//                         </span>\n//                       </td>\n//                     </tr>\n//                   ))}\n//                 </tbody>\n\n//                 {/* ✅ Totals now based on filtered data */}\n//                 <tfoot className=\"bg-gray-50\">\n//                   <tr>\n//                     <td\n//                       colSpan=\"4\"\n//                       className=\"px-4 py-3 text-sm font-bold text-gray-900\"\n//                     >\n//                       TOTALS:\n//                     </td>\n//                     <td className=\"px-4 py-3 text-sm font-bold text-gray-900 text-right\">\n//                       PKR{' '}\n//                       {filteredTrialBalance\n//                         .reduce((sum, acc) => sum + acc.debit, 0)\n//                         .toLocaleString('en-PK', {\n//                           minimumFractionDigits: 2,\n//                           maximumFractionDigits: 2,\n//                         })}\n//                     </td>\n//                     <td className=\"px-4 py-3 text-sm font-bold text-gray-900 text-right\">\n//                       PKR{' '}\n//                       {filteredTrialBalance\n//                         .reduce((sum, acc) => sum + acc.credit, 0)\n//                         .toLocaleString('en-PK', {\n//                           minimumFractionDigits: 2,\n//                           maximumFractionDigits: 2,\n//                         })}\n//                     </td>\n//                     <td className=\"px-4 py-3 text-sm font-bold text-gray-900 text-right\">\n//                       PKR{' '}\n//                       {Math.abs(\n//                         filteredTrialBalance.reduce(\n//                           (sum, acc) => sum + acc.balance,\n//                           0\n//                         )\n//                       ).toLocaleString('en-PK', {\n//                         minimumFractionDigits: 2,\n//                         maximumFractionDigits: 2,\n//                       })}\n//                     </td>\n//                   </tr>\n//                 </tfoot>\n//               </table>\n//             );\n//           })()}\n//         </div>\n//       </div>\n//     </div>\n//   </div>\n// )}\n\n//       {/* Integration Status */}\n//       <div className=\"mt-8 grid grid-cols-1 md:grid-cols-3 gap-4\">\n//         <div className=\"p-4 bg-blue-50 border border-blue-200 rounded-lg\">\n//           <div className=\"flex items-center mb-2\">\n//             <RefreshCw className=\"text-blue-600 mr-2\" size={16} />\n//             <h4 className=\"font-medium text-blue-800\">Dual API Integration</h4>\n//           </div>\n//           <p className=\"text-sm text-blue-700\">\n//             Sales and Purchase orders automatically create journal entries from live API data\n//           </p>\n//         </div>\n\n//         <div className=\"p-4 bg-blue-50 border border-blue-200 rounded-lg\">\n//           <div className=\"flex items-center mb-2\">\n//             <RefreshCw className=\"text-blue-600 mr-2\" size={16} />\n//             <h4 className=\"font-medium text-blue-800\">Real-time Sync</h4>\n//           </div>\n//           <p className=\"text-sm text-blue-700\">\n//             Journal entries updated automatically with each sales transaction\n//           </p>\n//         </div>\n\n//         <div className=\"p-4 bg-orange-50 border border-orange-200 rounded-lg\">\n//           <div className=\"flex items-center mb-2\">\n//             <FileText className=\"text-orange-600 mr-2\" size={16} />\n//             <h4 className=\"font-medium text-orange-800\">Manual Entries</h4>\n//           </div>\n//           <p className=\"text-sm text-orange-700\">\n//             Add adjustments and corrections with full double-entry validation\n//           </p>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default GeneralLedger;\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { Book } from 'lucide-react';\nimport { useGeneralLedgerData } from '../hooks/useGeneralLedgerData';\nimport { useJournalEntries } from '../hooks/useJournalEntries';\nimport { useTrialBalance } from '../hooks/useTrialBalance';\nimport GLHeader from '../components/GeneralLedger/GLHeader';\nimport GLStats from '../components/GeneralLedger/GLStats';\nimport GLControls from '../components/GeneralLedger/GLControls';\nimport GLJournalEntryForm from '../components/GeneralLedger/GLJournalEntryForm';\nimport GLJournalEntriesTable from '../components/GeneralLedger/GLJournalEntriesTable';\nimport GLIntegrationStatus from '../components/GeneralLedger/GLIntegrationStatus';\nimport JournalEntryDetailModal from '../modals/JournalEntryDetailModal';\nimport TrialBalanceModal from '../modals/TrialBalanceModal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GeneralLedger = () => {\n  _s();\n  // State management\n  const [selectedEntry, setSelectedEntry] = useState(null);\n  const [isAddingEntry, setIsAddingEntry] = useState(false);\n  const [showTrialBalance, setShowTrialBalance] = useState(false);\n  const [filters, setFilters] = useState({\n    dateFrom: '',\n    dateTo: '',\n    accountId: '',\n    transactionType: 'all',\n    searchTerm: ''\n  });\n\n  // Custom hooks for data management\n  const {\n    accounts,\n    loading: accountsLoading,\n    error: accountsError,\n    loadChartsOfAccounts\n  } = useGeneralLedgerData();\n  const {\n    journalEntries,\n    filteredEntries,\n    newEntry,\n    setNewEntry,\n    loading: entriesLoading,\n    errors,\n    loadJournalEntriesFromAPI,\n    filterEntries,\n    saveJournalEntry,\n    getAccountName\n  } = useJournalEntries(accounts);\n  const {\n    trialBalance,\n    generateTrialBalance\n  } = useTrialBalance(accounts, journalEntries);\n\n  // Load accounts on mount\n  useEffect(() => {\n    loadChartsOfAccounts();\n  }, [loadChartsOfAccounts]);\n\n  // Load journal entries when accounts are loaded\n  useEffect(() => {\n    if (accounts.length > 0) {\n      loadJournalEntriesFromAPI();\n    }\n  }, [accounts, loadJournalEntriesFromAPI]);\n\n  // Filter entries when filters or journal entries change\n  useEffect(() => {\n    if (journalEntries.length > 0) {\n      filterEntries(filters);\n    }\n  }, [journalEntries, filters, filterEntries]);\n\n  // Event handlers\n  const handleRefresh = () => {\n    loadJournalEntriesFromAPI();\n  };\n  const handleRefreshAccounts = () => {\n    loadChartsOfAccounts();\n  };\n  const handleClearFilters = () => {\n    setFilters({\n      dateFrom: '',\n      dateTo: '',\n      accountId: '',\n      transactionType: 'all',\n      searchTerm: ''\n    });\n  };\n  const handleSaveEntry = () => {\n    const success = saveJournalEntry(newEntry);\n    if (success) {\n      setIsAddingEntry(false);\n    }\n  };\n  const handleGenerateTrialBalance = () => {\n    generateTrialBalance();\n    setShowTrialBalance(true);\n  };\n  const loading = {\n    accounts: accountsLoading,\n    entries: entriesLoading,\n    purchase: false // This can be managed separately if needed\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"max-w-7xl mx-auto p-6 bg-white\",\n    children: [/*#__PURE__*/_jsxDEV(GLHeader, {\n      loading: loading,\n      errors: {\n        accounts: accountsError,\n        ...errors\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1821,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GLStats, {\n      journalEntries: journalEntries\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1826,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GLControls, {\n      filters: filters,\n      setFilters: setFilters,\n      accounts: accounts,\n      loading: loading,\n      onRefresh: handleRefresh,\n      onRefreshAccounts: handleRefreshAccounts,\n      onClearFilters: handleClearFilters,\n      onAddEntry: () => setIsAddingEntry(true),\n      onGenerateTrialBalance: handleGenerateTrialBalance\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1828,\n      columnNumber: 7\n    }, this), isAddingEntry && /*#__PURE__*/_jsxDEV(GLJournalEntryForm, {\n      newEntry: newEntry,\n      setNewEntry: setNewEntry,\n      accounts: accounts,\n      onSave: handleSaveEntry,\n      onCancel: () => setIsAddingEntry(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1841,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(GLJournalEntriesTable, {\n      entries: filteredEntries,\n      totalEntries: journalEntries.length,\n      onViewEntry: setSelectedEntry\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1850,\n      columnNumber: 7\n    }, this), selectedEntry && /*#__PURE__*/_jsxDEV(JournalEntryDetailModal, {\n      entry: selectedEntry,\n      onClose: () => setSelectedEntry(null),\n      getAccountName: getAccountName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1857,\n      columnNumber: 9\n    }, this), showTrialBalance && /*#__PURE__*/_jsxDEV(TrialBalanceModal, {\n      trialBalance: trialBalance,\n      filters: filters,\n      setFilters: setFilters,\n      onClose: () => setShowTrialBalance(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1865,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(GLIntegrationStatus, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1873,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1820,\n    columnNumber: 5\n  }, this);\n};\n_s(GeneralLedger, \"jo2dKUnuFy1kMw2eye8n39iHOnc=\", false, function () {\n  return [useGeneralLedgerData, useJournalEntries, useTrialBalance];\n});\n_c = GeneralLedger;\nexport default GeneralLedger;\nvar _c;\n$RefreshReg$(_c, \"GeneralLedger\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","Book","useGeneralLedgerData","useJournalEntries","useTrialBalance","GLHeader","GLStats","GLControls","GLJournalEntryForm","GLJournalEntriesTable","GLIntegrationStatus","JournalEntryDetailModal","TrialBalanceModal","jsxDEV","_jsxDEV","GeneralLedger","_s","selectedEntry","setSelectedEntry","isAddingEntry","setIsAddingEntry","showTrialBalance","setShowTrialBalance","filters","setFilters","dateFrom","dateTo","accountId","transactionType","searchTerm","accounts","loading","accountsLoading","error","accountsError","loadChartsOfAccounts","journalEntries","filteredEntries","newEntry","setNewEntry","entriesLoading","errors","loadJournalEntriesFromAPI","filterEntries","saveJournalEntry","getAccountName","trialBalance","generateTrialBalance","length","handleRefresh","handleRefreshAccounts","handleClearFilters","handleSaveEntry","success","handleGenerateTrialBalance","entries","purchase","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onRefresh","onRefreshAccounts","onClearFilters","onAddEntry","onGenerateTrialBalance","onSave","onCancel","totalEntries","onViewEntry","entry","onClose","_c","$RefreshReg$"],"sources":["C:/Users/Logic-Unit/my-account/src/pages/GeneralLedger.jsx"],"sourcesContent":["// import React, { useState, useEffect, useCallback } from 'react';\r\n// import { \r\n//   Book, \r\n//   Plus, \r\n//   Filter, \r\n//   Search, \r\n//   Calendar, \r\n//   FileText, \r\n//   Edit, \r\n//   Trash2, \r\n//   Save, \r\n//   X, \r\n//   AlertCircle,\r\n//   CheckCircle,\r\n//   DollarSign,\r\n//   TrendingUp,\r\n//   Eye,\r\n//   Download,\r\n//   RefreshCw\r\n// } from 'lucide-react';\r\n\r\n// const GeneralLedger = () => {\r\n//   const [journalEntries, setJournalEntries] = useState([]);\r\n//   const [accounts, setAccounts] = useState([]);\r\n//   const [filteredEntries, setFilteredEntries] = useState([]);\r\n//   const [selectedEntry, setSelectedEntry] = useState(null);\r\n//   const [isAddingEntry, setIsAddingEntry] = useState(false);\r\n//   const [loading, setLoading] = useState({\r\n//     entries: false,\r\n//     accounts: false,\r\n//     purchase: false\r\n//   });\r\n//   const [errors, setErrors] = useState({\r\n//     entries: null,\r\n//     accounts: null,\r\n//     purchase: null\r\n//   });\r\n//   const [filters, setFilters] = useState({\r\n//     dateFrom: '',\r\n//     dateTo: '',\r\n//     accountId: '',\r\n//     transactionType: 'all',\r\n//     searchTerm: ''\r\n//   });\r\n//   const [trialBalance, setTrialBalance] = useState([]);\r\n//   const [showTrialBalance, setShowTrialBalance] = useState(false);\r\n//   const [newEntry, setNewEntry] = useState({\r\n//     date: new Date().toISOString().split('T')[0],\r\n//     description: '',\r\n//     reference: '',\r\n//     entries: [\r\n//       { accountId: '', debit: 0, credit: 0, description: '' },\r\n//       { accountId: '', debit: 0, credit: 0, description: '' }\r\n//     ]\r\n//   });\r\n\r\n//   // API Configuration\r\n//   const API_BASE_URL_SALES_ORDERS = 'https://api-pos.hulmsolutions.com/POS/accounting2/31fc8df0-61db-41e5-bb67-070fde367ea1/orders?start=0&size=200';\r\n//   const API_BASE_URL_CHARTS_OF_ACCOUNTS = 'http://localhost:8080/api/accounts';\r\n//   const API_BASE_URL_PURCHASE_ORDERS = 'https://api-pos.hulmsolutions.com/POS/accounting2/31fc8df0-61db-41e5-bb67-070fde367ea1/PurchaseOrderManagement/purchaseOrdersWithoutDetails';\r\n\r\n//   // Fetch sales order data from API\r\n//   const fetchSalesOrderData = async () => {\r\n//     try {\r\n//       const response = await fetch(API_BASE_URL_SALES_ORDERS, {\r\n//         method: 'GET',\r\n//         headers: {\r\n//           'Authorization': 'Bearer Hamid',\r\n//           'Content-Type': 'application/json',\r\n//         },\r\n//       });\r\n      \r\n//       if (!response.ok) {\r\n//         throw new Error(`Sales API request failed with status ${response.status}`);\r\n//       }\r\n      \r\n//       const data = await response.json();\r\n//       return data;\r\n//     } catch (error) {\r\n//       console.error('Error fetching sales order data:', error);\r\n//       return null;\r\n//     }\r\n//   };\r\n\r\n//   // Fetch purchase order data from API\r\n//   const fetchPurchaseOrderData = async () => {\r\n//     try {\r\n//       console.log('Making purchase orders API call to:', API_BASE_URL_PURCHASE_ORDERS);\r\n      \r\n//       const response = await fetch(API_BASE_URL_PURCHASE_ORDERS, {\r\n//         method: 'GET',\r\n//         headers: {\r\n//           'Authorization': 'Bearer Hamid',\r\n//           'Content-Type': 'application/json',\r\n//         },\r\n//       });\r\n      \r\n//       console.log('Purchase orders API response status:', response.status);\r\n      \r\n//       if (!response.ok) {\r\n//         throw new Error(`Purchase API request failed with status ${response.status}`);\r\n//       }\r\n      \r\n//       const data = await response.json();\r\n//       console.log('Purchase orders API data received:', data);\r\n//       return data;\r\n//     } catch (error) {\r\n//       console.error('Error fetching purchase order data:', error);\r\n//       return null;\r\n//     }\r\n//   };\r\n\r\n//   // Format date from API format\r\n//   const formatDateFromCreatedAt = (createdAt) => {\r\n//     try {\r\n//       const parts = createdAt.split('.');\r\n//       if (parts.length >= 3) {\r\n//         return `${parts[0]}-${parts[1].padStart(2, '0')}-${parts[2].padStart(2, '0')}`;\r\n//       }\r\n//       return new Date().toISOString().split('T')[0];\r\n//     } catch (error) {\r\n//       return new Date().toISOString().split('T')[0];\r\n//     }\r\n//   };\r\n\r\n//   // Helper function to flatten hierarchical account structure\r\n//   const flattenAccounts = (accounts) => {\r\n//     const result = [];\r\n    \r\n//     const processAccount = (account) => {\r\n//       result.push(account);\r\n      \r\n//       if (account.children && Array.isArray(account.children)) {\r\n//         account.children.forEach(child => processAccount(child));\r\n//       }\r\n//     };\r\n    \r\n//     accounts.forEach(account => processAccount(account));\r\n//     return result;\r\n//   };\r\n\r\n//   // Fetch Charts of Accounts from API\r\n//   const loadChartsOfAccounts = useCallback(async () => {\r\n//     setLoading(prev => ({ ...prev, accounts: true }));\r\n//     setErrors(prev => ({ ...prev, accounts: null }));\r\n    \r\n//     try {\r\n//       const response = await fetch(API_BASE_URL_CHARTS_OF_ACCOUNTS, {\r\n//         method: 'GET',\r\n//         headers: {\r\n//           'Content-Type': 'application/json',\r\n//         },\r\n//       });\r\n      \r\n//       if (!response.ok) {\r\n//         throw new Error(`Failed to fetch accounts: ${response.status}`);\r\n//       }\r\n      \r\n//       const data = await response.json();\r\n//       console.log('Raw accounts data from API:', data);\r\n      \r\n//       if (!Array.isArray(data)) {\r\n//         throw new Error('API response is not an array');\r\n//       }\r\n      \r\n//       const allAccounts = flattenAccounts(data);\r\n//       console.log('All flattened accounts:', allAccounts.length);\r\n      \r\n//       const usableAccounts = allAccounts.filter(account => \r\n//         account.category === 'account' && \r\n//         account.id && \r\n//         account.code && \r\n//         account.name && \r\n//         account.type\r\n//       );\r\n      \r\n//       console.log('Usable accounts (category=account):', usableAccounts.length);\r\n      \r\n//       if (usableAccounts.length === 0) {\r\n//         console.log('No usable accounts found, using fallback');\r\n//         throw new Error('No usable accounts returned from API');\r\n//       }\r\n      \r\n//       usableAccounts.sort((a, b) => a.code.localeCompare(b.code));\r\n      \r\n//       setAccounts(usableAccounts);\r\n//       setLoading(prev => ({ ...prev, accounts: false }));\r\n      \r\n//       console.log(`Successfully loaded ${usableAccounts.length} accounts from API`);\r\n//       return usableAccounts;\r\n      \r\n//     } catch (error) {\r\n//       console.error('Error loading charts of accounts:', error);\r\n//       setErrors(prev => ({ ...prev, accounts: error.message }));\r\n//       setLoading(prev => ({ ...prev, accounts: false }));\r\n      \r\n//       console.log('Using fallback chart of accounts');\r\n  \r\n//       setAccounts([]);\r\n//       return [];\r\n//     }\r\n//   }, []);\r\n\r\n//   // Convert Purchase Order to Journal Entry\r\n//   const convertPurchaseOrderToJournalEntry = useCallback((purchaseOrder, accountsList) => {\r\n//     if (!purchaseOrder || !purchaseOrder.purchaseOrderItems) {\r\n//       return null;\r\n//     }\r\n\r\n//     const entries = [];\r\n    \r\n//     const appliedItems = purchaseOrder.purchaseOrderItems.filter(item => \r\n//       item.status === 'applied' && item.quantity > 0\r\n//     );\r\n    \r\n//     if (appliedItems.length === 0) {\r\n//       return null;\r\n//     }\r\n    \r\n//     const totalAmount = appliedItems.reduce((sum, item) => \r\n//       sum + (parseFloat(item.pricePerUnit || 0) * parseFloat(item.quantity || 0)), 0\r\n//     );\r\n    \r\n//     if (totalAmount <= 0) {\r\n//       return null;\r\n//     }\r\n\r\n//     const findAccountByType = (type, preferredId = null) => {\r\n//       if (preferredId) {\r\n//         const specificAccount = accountsList.find(acc => acc.id === preferredId);\r\n//         if (specificAccount) return specificAccount;\r\n//       }\r\n      \r\n//       const matchingAccount = accountsList.find(acc => \r\n//         acc.type && acc.type.toLowerCase() === type.toLowerCase()\r\n//       );\r\n      \r\n//       if (matchingAccount) return matchingAccount;\r\n      \r\n//       const fallbackAccounts = {\r\n//         // 'assets': { id: '13', code: '1112', name: 'Bank - Main Account', type: 'assets' },\r\n//         // 'liabilities': { id: '28', code: '2110', name: 'Accounts Payable', type: 'liabilities' },\r\n//         // 'expenses': { id: '50', code: '5100', name: 'Cost of Goods Sold', type: 'expenses' }\r\n//       };\r\n      \r\n//       return fallbackAccounts[type.toLowerCase()] || { \r\n//         id: 'UNKNOWN', \r\n//         name: `Unknown ${type} Account`, \r\n//         code: 'N/A' \r\n//       };\r\n//     };\r\n    \r\n//     const inventoryAccount = findAccountByType('assets', '19');\r\n//     entries.push({\r\n//       accountId: inventoryAccount.id,\r\n//       accountName: inventoryAccount.name,\r\n//       accountCode: inventoryAccount.code,\r\n//       debit: totalAmount,\r\n//       credit: 0,\r\n//       description: `Inventory purchase from PO #${purchaseOrder.id} - ${appliedItems.length} items`\r\n//     });\r\n    \r\n//     const payableAccount = findAccountByType('liabilities', '28');\r\n//     entries.push({\r\n//       accountId: payableAccount.id,\r\n//       accountName: payableAccount.name,\r\n//       accountCode: payableAccount.code,\r\n//       debit: 0,\r\n//       credit: totalAmount,\r\n//       description: `Amount owed for PO #${purchaseOrder.id} - ${purchaseOrder.remarks || 'Purchase order'}`\r\n//     });\r\n    \r\n//     return {\r\n//       id: `POID-${purchaseOrder.id}`,\r\n//       date: new Date().toISOString().split('T')[0],\r\n//       description: `Purchase Order #${purchaseOrder.id} - ${appliedItems.map(item => `Product ${item.product_Id} (${item.quantity})`).join(', ')}`,\r\n//       reference: `PURCHASE-${purchaseOrder.id}`,\r\n//       transactionType: 'automatic',\r\n//       source: 'Purchase Orders',\r\n//       status: 'posted',\r\n//       entries: entries,\r\n//       totalDebit: Math.round(totalAmount * 100) / 100,\r\n//       totalCredit: Math.round(totalAmount * 100) / 100,\r\n//       createdAt: new Date().toISOString(),\r\n//       originalPurchaseOrder: purchaseOrder\r\n//     };\r\n//   }, []);\r\n\r\n//   // Convert Sales Order to Journal Entry\r\n//   const convertSalesOrderToJournalEntry = useCallback((order, accountsList) => {\r\n//     if (!order) return null;\r\n\r\n//     const entries = [];\r\n    \r\n//     const subTotal = parseFloat(order.subTotal) || 0;\r\n//     const taxAmount = parseFloat(order.taxAmount) || 0;\r\n//     const total = parseFloat(order.total) || 0;\r\n    \r\n//     if (!order.paid || !order.fulfilled || order.status !== 'Closed') {\r\n//       return null;\r\n//     }\r\n    \r\n//     const findAccountByType = (type, preferredId = null) => {\r\n//       if (preferredId) {\r\n//         const specificAccount = accountsList.find(acc => acc.id === preferredId);\r\n//         if (specificAccount) return specificAccount;\r\n//       }\r\n      \r\n//       const matchingAccount = accountsList.find(acc => \r\n//         acc.type && acc.type.toLowerCase() === type.toLowerCase()\r\n//       );\r\n      \r\n//       if (matchingAccount) return matchingAccount;\r\n      \r\n//       const fallbackAccounts = {\r\n//         // 'assets': { id: '13', code: '1112', name: 'Bank - Main Account', type: 'assets' },\r\n//         // 'revenue': { id: '40', code: '4111', name: 'Mobile Service Revenue', type: 'revenue' },\r\n//         // 'liabilities': { id: '29', code: '2130', name: 'Sales Tax Payable', type: 'liabilities' },\r\n//         // 'expenses': { id: '50', code: '5100', name: 'Cost of Goods Sold', type: 'expenses' }\r\n//       };\r\n      \r\n//       return fallbackAccounts[type.toLowerCase()] || { \r\n//         id: 'UNKNOWN', \r\n//         name: `Unknown ${type} Account`, \r\n//         code: 'N/A' \r\n//       };\r\n//     };\r\n    \r\n//     const cashAccount = findAccountByType('assets');\r\n//     entries.push({\r\n//       accountId: cashAccount.id,\r\n//       accountName: cashAccount.name,\r\n//       accountCode: cashAccount.code,\r\n//       debit: total,\r\n//       credit: 0,\r\n//       description: `Cash received from Order #${order.orderId} - ${order.lineItems.map(item => item.productName).join(', ')}`\r\n//     });\r\n\r\n//     if (subTotal > 0) {\r\n//       const revenueAccount = findAccountByType('revenue');\r\n//       entries.push({\r\n//         accountId: revenueAccount.id,\r\n//         accountName: revenueAccount.name,\r\n//         accountCode: revenueAccount.code,\r\n//         debit: 0,\r\n//         credit: subTotal,\r\n//         description: `Revenue from Order #${order.orderId}`\r\n//       });\r\n//     }\r\n\r\n//     if (taxAmount > 0) {\r\n//       const taxAccount = findAccountByType('liabilities');\r\n//       entries.push({\r\n//         accountId: taxAccount.id,\r\n//         accountName: taxAccount.name,\r\n//         accountCode: taxAccount.code,\r\n//         debit: 0,\r\n//         credit: taxAmount,\r\n//         description: `${order.taxRate}% tax collected on Order #${order.orderId}`\r\n//       });\r\n//     }\r\n\r\n//     let totalCOGS = 0;\r\n//     order.lineItems.forEach(item => {\r\n//       if (item.fulfilled && item.status === 'Fulfilled') {\r\n//         const costPrice = parseFloat(item.costPrice) || 0;\r\n//         const quantity = parseFloat(item.quantity) || 0;\r\n//         const itemCOGS = costPrice * quantity;\r\n//         totalCOGS += itemCOGS;\r\n//       }\r\n//     });\r\n\r\n//     if (totalCOGS > 0) {\r\n//       const cogsAccount = findAccountByType('expenses');\r\n//       entries.push({\r\n//         accountId: cogsAccount.id,\r\n//         accountName: cogsAccount.name,\r\n//         accountCode: cogsAccount.code,\r\n//         debit: totalCOGS,\r\n//         credit: 0,\r\n//         description: `COGS for Order #${order.orderId}`\r\n//       });\r\n\r\n//       const inventoryAccount = findAccountByType('assets', '16');\r\n//       entries.push({\r\n//         accountId: inventoryAccount.id,\r\n//         accountName: inventoryAccount.name,\r\n//         accountCode: inventoryAccount.code,\r\n//         debit: 0,\r\n//         credit: totalCOGS,\r\n//         description: `Inventory reduction - Order #${order.orderId}`\r\n//       });\r\n//     }\r\n\r\n//     const totalDebit = entries.reduce((sum, entry) => sum + parseFloat(entry.debit || 0), 0);\r\n//     const totalCredit = entries.reduce((sum, entry) => sum + parseFloat(entry.credit || 0), 0);\r\n\r\n//     return {\r\n//       id: `ORDERID-${order.orderId}`,\r\n//       date: formatDateFromCreatedAt(order.createdAt),\r\n//       description: `Sales Order #${order.orderId} - ${order.lineItems.map(item => `${item.productName} (${item.quantity})`).join(', ')}`,\r\n//       reference: `ORDER-${order.orderId}`,\r\n//       transactionType: 'automatic',\r\n//       source: 'POS Sales',\r\n//       status: 'posted',\r\n//       entries: entries,\r\n//       totalDebit: Math.round(totalDebit * 100) / 100,\r\n//       totalCredit: Math.round(totalCredit * 100) / 100,\r\n//       createdAt: order.createdAt,\r\n//       originalOrder: order\r\n//     };\r\n//   }, []);\r\n\r\n//   // Load Journal Entries from all sources\r\n//   const loadJournalEntriesFromAPI = useCallback(async () => {\r\n//     setLoading(prev => ({ ...prev, entries: true, purchase: true }));\r\n//     setErrors(prev => ({ ...prev, entries: null, purchase: null }));\r\n    \r\n//     try {\r\n//       // Fetch both sales and purchase orders in parallel\r\n//       const [salesOrders, purchaseOrders] = await Promise.all([\r\n//         fetchSalesOrderData(),\r\n//         fetchPurchaseOrderData()\r\n//       ]);\r\n      \r\n//       let allJournalEntries = [];\r\n      \r\n//       // Process sales orders\r\n//       if (salesOrders && Array.isArray(salesOrders)) {\r\n//         const journalEntriesFromSales = salesOrders\r\n//           .filter(order => order.paid && order.fulfilled && order.status === 'Closed')\r\n//           .map(order => convertSalesOrderToJournalEntry(order, accounts))\r\n//           .filter(entry => entry !== null);\r\n        \r\n//         allJournalEntries = [...allJournalEntries, ...journalEntriesFromSales];\r\n//         console.log(`Processed ${journalEntriesFromSales.length} sales journal entries`);\r\n//       }\r\n      \r\n//       // Process purchase orders\r\n//       if (purchaseOrders && Array.isArray(purchaseOrders)) {\r\n//         const journalEntriesFromPurchases = purchaseOrders\r\n//           .map(order => convertPurchaseOrderToJournalEntry(order, accounts))\r\n//           .filter(entry => entry !== null);\r\n        \r\n//         allJournalEntries = [...allJournalEntries, ...journalEntriesFromPurchases];\r\n//         console.log(`Processed ${journalEntriesFromPurchases.length} purchase journal entries`);\r\n//       }\r\n      \r\n//       // Load manual entries from localStorage\r\n//       let manualEntries = [];\r\n//       try {\r\n//         const storedEntries = localStorage.getItem('manualJournalEntries');\r\n//         manualEntries = storedEntries ? JSON.parse(storedEntries) : [];\r\n//       } catch (error) {\r\n//         console.warn('Error loading manual entries from localStorage:', error);\r\n//         manualEntries = [];\r\n//       }\r\n      \r\n//       allJournalEntries = [...allJournalEntries, ...manualEntries];\r\n      \r\n//       // Sort by date\r\n//       allJournalEntries.sort((a, b) => b.date.localeCompare(a.date));\r\n      \r\n//       setJournalEntries(allJournalEntries);\r\n//       setFilteredEntries(allJournalEntries);\r\n//       setLoading(prev => ({ ...prev, entries: false, purchase: false }));\r\n      \r\n//       console.log(`Total journal entries loaded: ${allJournalEntries.length}`);\r\n//     } catch (error) {\r\n//       console.error('Error loading journal entries:', error);\r\n//       setErrors(prev => ({ ...prev, entries: error.message }));\r\n//       setLoading(prev => ({ ...prev, entries: false, purchase: false }));\r\n//     }\r\n//   }, [accounts, convertSalesOrderToJournalEntry, convertPurchaseOrderToJournalEntry]);\r\n\r\n//   // Filter entries\r\n//   const filterEntries = useCallback(() => {\r\n//     let filtered = [...journalEntries];\r\n\r\n//     if (filters.dateFrom) {\r\n//       filtered = filtered.filter(entry => entry.date >= filters.dateFrom);\r\n//     }\r\n    \r\n//     if (filters.dateTo) {\r\n//       filtered = filtered.filter(entry => entry.date <= filters.dateTo);\r\n//     }\r\n    \r\n//     if (filters.accountId) {\r\n//       filtered = filtered.filter(entry => {\r\n//         return entry.entries.some(e => e.accountId === filters.accountId);\r\n//       });\r\n//     }\r\n    \r\n//     if (filters.transactionType !== 'all') {\r\n//       filtered = filtered.filter(entry => entry.transactionType === filters.transactionType);\r\n//     }\r\n    \r\n//     if (filters.searchTerm) {\r\n//       const term = filters.searchTerm.toLowerCase();\r\n//       filtered = filtered.filter(entry => \r\n//         entry.description.toLowerCase().includes(term) ||\r\n//         entry.reference.toLowerCase().includes(term) ||\r\n//         entry.entries.some(e => e.description.toLowerCase().includes(term))\r\n//       );\r\n//     }\r\n\r\n//     setFilteredEntries(filtered);\r\n//   }, [journalEntries, filters]);\r\n\r\n//   // Generate trial balance\r\n//   const generateTrialBalance = useCallback(() => {\r\n//     const balances = {};\r\n    \r\n//     accounts.forEach(account => {\r\n//       if (account.category === 'account') {\r\n//         balances[account.id] = {\r\n//           accountId: account.id,\r\n//           accountCode: account.code,\r\n//           accountName: account.name,\r\n//           accountType: account.type || 'unknown',\r\n//           debit: 0,\r\n//           credit: 0,\r\n//           balance: 0\r\n//         };\r\n//       }\r\n//     });\r\n    \r\n//     journalEntries.forEach(entry => {\r\n//       if (entry.status === 'posted') {\r\n//         entry.entries.forEach(entryLine => {\r\n//           const accountId = entryLine.accountId;\r\n//           if (!balances[accountId]) {\r\n//             balances[accountId] = {\r\n//               accountId: accountId,\r\n//               accountCode: entryLine.accountCode || accountId,\r\n//               accountName: entryLine.accountName || `Account ${accountId}`,\r\n//               accountType: 'unknown',\r\n//               debit: 0,\r\n//               credit: 0,\r\n//               balance: 0\r\n//             };\r\n//           }\r\n          \r\n//           balances[accountId].debit += parseFloat(entryLine.debit || 0);\r\n//           balances[accountId].credit += parseFloat(entryLine.credit || 0);\r\n//         });\r\n//       }\r\n//     });\r\n\r\n//     Object.values(balances).forEach(account => {\r\n//       if (account.accountType === 'assets' || account.accountType === 'expenses') {\r\n//         account.balance = account.debit - account.credit;\r\n//       } else {\r\n//         account.balance = account.credit - account.debit;\r\n//       }\r\n//     });\r\n\r\n//     const trialBalanceData = Object.values(balances)\r\n//       .filter(account => account.debit > 0 || account.credit > 0)\r\n//       .sort((a, b) => a.accountCode.localeCompare(b.accountCode));\r\n    \r\n//     setTrialBalance(trialBalanceData);\r\n//     setShowTrialBalance(true);\r\n//   }, [accounts, journalEntries]);\r\n\r\n//   // Helper functions for entry management\r\n//   const addEntryLine = () => {\r\n//     setNewEntry({\r\n//       ...newEntry,\r\n//       entries: [...newEntry.entries, { accountId: '', debit: 0, credit: 0, description: '' }]\r\n//     });\r\n//   };\r\n\r\n//   const removeEntryLine = (index) => {\r\n//     if (newEntry.entries.length > 2) {\r\n//       const updatedEntries = newEntry.entries.filter((_, i) => i !== index);\r\n//       setNewEntry({ ...newEntry, entries: updatedEntries });\r\n//     }\r\n//   };\r\n\r\n//   const updateEntryLine = (index, field, value) => {\r\n//     const updatedEntries = [...newEntry.entries];\r\n//     updatedEntries[index] = { ...updatedEntries[index], [field]: value };\r\n//     setNewEntry({ ...newEntry, entries: updatedEntries });\r\n//   };\r\n//   const calculateTotals = (entries) => {\r\n//     const totalDebit = entries.reduce((sum, entry) => sum + (parseFloat(entry.debit) || 0), 0);\r\n//     const totalCredit = entries.reduce((sum, entry) => sum + (parseFloat(entry.credit) || 0), 0);\r\n//     return { totalDebit, totalCredit };\r\n//   };\r\n\r\n//   const isBalanced = (entries) => {\r\n//     const { totalDebit, totalCredit } = calculateTotals(entries);\r\n//     return Math.abs(totalDebit - totalCredit) < 0.01;\r\n//   };\r\n\r\n//   const saveJournalEntry = () => {\r\n//     if (!newEntry.description || !newEntry.entries.every(e => e.accountId)) {\r\n//       alert('Please fill in all required fields');\r\n//       return;\r\n//     }\r\n\r\n//     if (!isBalanced(newEntry.entries)) {\r\n//       alert('Journal entry must be balanced - total debits must equal total credits');\r\n//       return;\r\n//     }\r\n\r\n//     const { totalDebit, totalCredit } = calculateTotals(newEntry.entries);\r\n    \r\n//     const entriesWithNames = newEntry.entries.map(entry => ({\r\n//       ...entry,\r\n//       accountName: accounts.find(acc => acc.id === entry.accountId)?.name || '',\r\n//       debit: parseFloat(entry.debit) || 0,\r\n//       credit: parseFloat(entry.credit) || 0\r\n//     }));\r\n\r\n//     const journalEntry = {\r\n//       id: `JE-MANUAL-${Date.now()}`,\r\n//       date: newEntry.date,\r\n//       description: newEntry.description,\r\n//       reference: newEntry.reference || `MAN${Date.now()}`,\r\n//       transactionType: 'manual',\r\n//       source: 'Manual',\r\n//       status: 'posted',\r\n//       entries: entriesWithNames,\r\n//       totalDebit,\r\n//       totalCredit,\r\n//       createdAt: new Date().toISOString()\r\n//     };\r\n\r\n//     try {\r\n//       const existingManualEntries = JSON.parse(localStorage.getItem('manualJournalEntries') || '[]');\r\n//       const updatedManualEntries = [...existingManualEntries, journalEntry];\r\n//       localStorage.setItem('manualJournalEntries', JSON.stringify(updatedManualEntries));\r\n//     } catch (error) {\r\n//       console.warn('Could not save to localStorage:', error);\r\n//     }\r\n\r\n//     setJournalEntries([...journalEntries, journalEntry]);\r\n    \r\n//     setNewEntry({\r\n//       date: new Date().toISOString().split('T')[0],\r\n//       description: '',\r\n//       reference: '',\r\n//       entries: [\r\n//         { accountId: '', debit: 0, credit: 0, description: '' },\r\n//         { accountId: '', debit: 0, credit: 0, description: '' }\r\n//       ]\r\n//     });\r\n//     setIsAddingEntry(false);\r\n//   };\r\n\r\n//   const getAccountName = useCallback((accountId) => {\r\n//     const account = accounts.find(acc => acc.id === accountId || acc.code === accountId);\r\n    \r\n//     if (account) {\r\n//       return `${account.code} - ${account.name}`;\r\n//     }\r\n    \r\n//     let accountName = '';\r\n    \r\n//     journalEntries.forEach(entry => {\r\n//       entry.entries.forEach(entryLine => {\r\n//         if (entryLine.accountId === accountId && entryLine.accountName) {\r\n//           accountName = entryLine.accountName;\r\n//         }\r\n//       });\r\n//     });\r\n    \r\n//     if (accountName) {\r\n//       return `${accountId} - ${accountName}`;\r\n//     }\r\n    \r\n//     const prefix = accountId.toString().substring(0, 1);\r\n//     let accountType = '';\r\n    \r\n//     if (prefix === '1') accountType = 'Assets';\r\n//     else if (prefix === '2') accountType = 'Liabilities';\r\n//     else if (prefix === '3') accountType = 'Equity';\r\n//     else if (prefix === '4') accountType = 'Revenue';\r\n//     else if (prefix === '5') accountType = 'Expenses';\r\n    \r\n//     return accountType ? `${accountId} - ${accountType} Account` : `${accountId} - Unknown Account`;\r\n//   }, [accounts, journalEntries]);\r\n\r\n//   // useEffect hooks\r\n//   useEffect(() => {\r\n//     loadChartsOfAccounts();\r\n//   }, [loadChartsOfAccounts]);\r\n\r\n//   useEffect(() => {\r\n//     if (accounts.length > 0) {\r\n//       loadJournalEntriesFromAPI();\r\n//     }\r\n//   }, [accounts, loadJournalEntriesFromAPI]);\r\n\r\n//   useEffect(() => {\r\n//     if (journalEntries.length > 0) {\r\n//       filterEntries();\r\n//     }\r\n//   }, [journalEntries, filters, filterEntries]);\r\n\r\n//   const { totalDebit, totalCredit } = calculateTotals(newEntry.entries);\r\n//   const entryIsBalanced = isBalanced(newEntry.entries);\r\n\r\n//   return (\r\n//     <div className=\"max-w-7xl mx-auto p-6 bg-white\">\r\n//       {/* Header */}\r\n//       <div className=\"mb-8\">\r\n//         <h1 className=\"text-3xl font-bold text-gray-900 mb-2 flex items-center\">\r\n//           <Book className=\"mr-3 text-emerald-600\" />\r\n//           General Ledger\r\n//         </h1>\r\n//         <p className=\"text-gray-600\">Real-time transaction recording and journal entry management</p>\r\n        \r\n//         {loading.accounts && (\r\n//           <div className=\"mt-2 p-2 bg-blue-50 text-blue-700 rounded-md text-sm flex items-center\">\r\n//             <RefreshCw className=\"animate-spin mr-2\" size={16} />\r\n//             Loading chart of accounts...\r\n//           </div>\r\n//         )}\r\n        \r\n//         {errors.accounts && (\r\n//           <div className=\"mt-2 p-2 bg-red-50 text-red-700 rounded-md text-sm flex items-center\">\r\n//             <AlertCircle className=\"mr-2\" size={16} />\r\n//             Error loading accounts: {errors.accounts}\r\n//           </div>\r\n//         )}\r\n\r\n//         {loading.entries && (\r\n//           <div className=\"mt-2 p-2 bg-blue-50 text-blue-700 rounded-md text-sm flex items-center\">\r\n//             <RefreshCw className=\"animate-spin mr-2\" size={16} />\r\n//             Loading journal entries...\r\n//           </div>\r\n//         )}\r\n        \r\n//         {errors.entries && (\r\n//           <div className=\"mt-2 p-2 bg-red-50 text-red-700 rounded-md text-sm flex items-center\">\r\n//             <AlertCircle className=\"mr-2\" size={16} />\r\n//             Error loading entries: {errors.entries}\r\n//           </div>\r\n//         )}\r\n//       </div>\r\n\r\n//       {/* Quick Stats */}\r\n//       <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\r\n//         <div className=\"bg-blue-50 p-4 rounded-lg border border-blue-200\">\r\n//           <div className=\"flex items-center justify-between\">\r\n//             <div>\r\n//               <p className=\"text-blue-600 text-sm font-medium\">Total Entries</p>\r\n//               <p className=\"text-2xl font-bold text-blue-900\">{journalEntries.length}</p>\r\n//             </div>\r\n//             <FileText className=\"text-blue-600\" size={24} />\r\n//           </div>\r\n//         </div>\r\n\r\n//         <div className=\"bg-green-50 p-4 rounded-lg border border-green-200\">\r\n//           <div className=\"flex items-center justify-between\">\r\n//             <div>\r\n//               <p className=\"text-green-600 text-sm font-medium\">Purchase Entries</p>\r\n//               <p className=\"text-2xl font-bold text-green-900\">\r\n//                 {journalEntries.filter(e => e.source === 'Purchase Orders').length}\r\n//               </p>\r\n//             </div>\r\n//             <TrendingUp className=\"text-green-600\" size={24} />\r\n//           </div>\r\n//         </div>\r\n\r\n//         <div className=\"bg-orange-50 p-4 rounded-lg border border-orange-200\">\r\n//           <div className=\"flex items-center justify-between\">\r\n//             <div>\r\n//               <p className=\"text-orange-600 text-sm font-medium\">Manual Entries</p>\r\n//               <p className=\"text-2xl font-bold text-orange-900\">\r\n//                 {journalEntries.filter(e => e.transactionType === 'manual').length}\r\n//               </p>\r\n//             </div>\r\n//             <Edit className=\"text-orange-600\" size={24} />\r\n//           </div>\r\n//         </div>\r\n\r\n//         <div className=\"bg-purple-50 p-4 rounded-lg border border-purple-200\">\r\n//           <div className=\"flex items-center justify-between\">\r\n//             <div>\r\n//               <p className=\"text-purple-600 text-sm font-medium\">Total Value</p>\r\n//               <p className=\"text-2xl font-bold text-purple-900\">\r\n//                 PKR {journalEntries.reduce((sum, entry) => sum + entry.totalDebit, 0).toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\r\n//               </p>\r\n//             </div>\r\n//             <DollarSign className=\"text-purple-600\" size={24} />\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n\r\n//       {/* Controls */}\r\n//       <div className=\"flex flex-wrap items-center justify-between gap-4 mb-6\">\r\n//         <div className=\"flex flex-wrap items-center gap-4\">\r\n//           {/* Date Filters */}\r\n//           <div className=\"flex items-center space-x-2\">\r\n//             <Calendar size={16} className=\"text-gray-400\" />\r\n//             <input\r\n//               type=\"date\"\r\n//               value={filters.dateFrom}\r\n//               onChange={(e) => setFilters({ ...filters, dateFrom: e.target.value })}\r\n//               className=\"px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\r\n//               placeholder=\"From\"\r\n//             />\r\n//             <span className=\"text-gray-500\">to</span>\r\n//             <input\r\n//               type=\"date\"\r\n//               value={filters.dateTo}\r\n//               onChange={(e) => setFilters({ ...filters, dateTo: e.target.value })}\r\n//               className=\"px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\r\n//               placeholder=\"To\"\r\n//             />\r\n//           </div>\r\n\r\n//           {/* Account Filter */}\r\n//           <div className=\"relative\">\r\n//             <Filter className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" size={16} />\r\n//             <select\r\n//               value={filters.accountId}\r\n//               onChange={(e) => setFilters({ ...filters, accountId: e.target.value })}\r\n//               className=\"pl-10 pr-8 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\r\n//             >\r\n//               <option value=\"\">All Accounts</option>\r\n              \r\n//               {/* Group accounts by type for better organization */}\r\n//               {accounts.length > 0 && (\r\n//                 <>\r\n//                   {/* Assets */}\r\n//                   <optgroup label=\"Assets\">\r\n//                     {accounts\r\n//                       .filter(acc => acc.type === 'assets' && acc.category === 'account')\r\n//                       .map(account => (\r\n//                         <option key={account.id} value={account.id}>\r\n//                           {account.code} - {account.name}\r\n//                         </option>\r\n//                       ))}\r\n//                   </optgroup>\r\n                  \r\n//                   {/* Liabilities */}\r\n//                   <optgroup label=\"Liabilities\">\r\n//                     {accounts\r\n//                       .filter(acc => acc.type === 'liabilities' && acc.category === 'account')\r\n//                       .map(account => (\r\n//                         <option key={account.id} value={account.id}>\r\n//                           {account.code} - {account.name}\r\n//                         </option>\r\n//                       ))}\r\n//                   </optgroup>\r\n                  \r\n//                   {/* Equity */}\r\n//                   <optgroup label=\"Equity\">\r\n//                     {accounts\r\n//                       .filter(acc => acc.type === 'equity' && acc.category === 'account')\r\n//                       .map(account => (\r\n//                         <option key={account.id} value={account.id}>\r\n//                           {account.code} - {account.name}\r\n//                         </option>\r\n//                       ))}\r\n//                   </optgroup>\r\n                  \r\n//                   {/* Revenue */}\r\n//                   <optgroup label=\"Revenue\">\r\n//                     {accounts\r\n//                       .filter(acc => acc.type === 'revenue' && acc.category === 'account')\r\n//                       .map(account => (\r\n//                         <option key={account.id} value={account.id}>\r\n//                           {account.code} - {account.name}\r\n//                         </option>\r\n//                       ))}\r\n//                   </optgroup>\r\n                  \r\n//                   {/* Expenses */}\r\n//                   <optgroup label=\"Expenses\">\r\n//                     {accounts\r\n//                       .filter(acc => acc.type === 'expenses' && acc.category === 'account')\r\n//                       .map(account => (\r\n//                         <option key={account.id} value={account.id}>\r\n//                           {account.code} - {account.name}\r\n//                         </option>\r\n//                       ))}\r\n//                   </optgroup>\r\n//                 </>\r\n//               )}\r\n              \r\n//               {accounts.length === 0 && (\r\n//                 <option disabled>Loading accounts...</option>\r\n//               )}\r\n//             </select>\r\n//           </div>\r\n\r\n//           {/* Transaction Type Filter */}\r\n//           <select\r\n//             value={filters.transactionType}\r\n//             onChange={(e) => setFilters({ ...filters, transactionType: e.target.value })}\r\n//             className=\"px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\r\n//           >\r\n//             <option value=\"all\">All Types</option>\r\n//             <option value=\"automatic\">Automatic (POS/Purchase)</option>\r\n//             <option value=\"manual\">Manual</option>\r\n//           </select>\r\n\r\n//           {/* Search */}\r\n//           <div className=\"relative\">\r\n//             <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" size={16} />\r\n//             <input\r\n//               type=\"text\"\r\n//               placeholder=\"Search entries...\"\r\n//               value={filters.searchTerm}\r\n//               onChange={(e) => setFilters({ ...filters, searchTerm: e.target.value })}\r\n//               className=\"pl-10 pr-4 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\r\n//             />\r\n//           </div>\r\n//         </div>\r\n\r\n//         <div className=\"flex space-x-3\">\r\n//           <button\r\n//             onClick={loadJournalEntriesFromAPI}\r\n//             disabled={loading.entries}\r\n//             className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center space-x-2 disabled:bg-gray-400\"\r\n//           >\r\n//             {loading.entries ? <RefreshCw className=\"animate-spin\" size={16} /> : <RefreshCw size={16} />}\r\n//             <span>Refresh from API</span>\r\n//           </button>\r\n//           <button\r\n//             onClick={loadChartsOfAccounts}\r\n//             disabled={loading.accounts}\r\n//             className=\"px-4 py-2 bg-teal-600 text-white rounded-lg hover:bg-teal-700 flex items-center space-x-2 disabled:bg-gray-400\"\r\n//           >\r\n//             {loading.accounts ? <RefreshCw className=\"animate-spin\" size={16} /> : <RefreshCw size={16} />}\r\n//             <span>Refresh Accounts</span>\r\n//           </button>\r\n//           <button\r\n//             onClick={() => {\r\n//               setFilters({\r\n//                 dateFrom: '',\r\n//                 dateTo: '',\r\n//                 accountId: '',\r\n//                 transactionType: 'all',\r\n//                 searchTerm: ''\r\n//               });\r\n//               setFilteredEntries([...journalEntries]);\r\n//             }}\r\n//             className=\"px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 flex items-center space-x-2\"\r\n//           >\r\n//             <X size={16} />\r\n//             <span>Clear Filters</span>\r\n//           </button>\r\n//           <button\r\n//             onClick={() => setIsAddingEntry(true)}\r\n//             className=\"px-4 py-2 bg-emerald-600 text-white rounded-lg hover:bg-emerald-700 flex items-center space-x-2\"\r\n//           >\r\n//             <Plus size={16} />\r\n//             <span>Add Entry</span>\r\n//           </button>\r\n//           <button\r\n//             onClick={generateTrialBalance}\r\n//             className=\"px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 flex items-center space-x-2\"\r\n//           >\r\n//             <FileText size={16} />\r\n//             <span>Trial Balance</span>\r\n//           </button>\r\n//         </div>\r\n//       </div>\r\n\r\n//       {/* Journal Entry Form */}\r\n//       {isAddingEntry && (\r\n//         <div className=\"mb-8 p-6 bg-gray-50 rounded-lg border\">\r\n//           <h3 className=\"text-lg font-semibold mb-4\">Add Manual Journal Entry</h3>\r\n          \r\n//           <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\r\n//             <div>\r\n//               <label className=\"block text-sm font-medium text-gray-700 mb-1\">Date *</label>\r\n//               <input\r\n//                 type=\"date\"\r\n//                 value={newEntry.date}\r\n//                 onChange={(e) => setNewEntry({ ...newEntry, date: e.target.value })}\r\n//                 className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\r\n//               />\r\n//             </div>\r\n//             <div>\r\n//               <label className=\"block text-sm font-medium text-gray-700 mb-1\">Description *</label>\r\n//               <input\r\n//                 type=\"text\"\r\n//                 value={newEntry.description}\r\n//                 onChange={(e) => setNewEntry({ ...newEntry, description: e.target.value })}\r\n//                 placeholder=\"Enter description\"\r\n//                 className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\r\n//               />\r\n//             </div>\r\n//             <div>\r\n//               <label className=\"block text-sm font-medium text-gray-700 mb-1\">Reference</label>\r\n//               <input\r\n//                 type=\"text\"\r\n//                 value={newEntry.reference}\r\n//                 onChange={(e) => setNewEntry({ ...newEntry, reference: e.target.value })}\r\n//                 placeholder=\"Reference number\"\r\n//                 className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\r\n//               />\r\n//             </div>\r\n//           </div>\r\n\r\n//           {/* Entry Lines */}\r\n//           <div className=\"mb-4\">\r\n//             <label className=\"block text-sm font-medium text-gray-700 mb-2\">Journal Entry Lines</label>\r\n//             <div className=\"space-y-3\">\r\n//               {newEntry.entries.map((entry, index) => (\r\n//                 <div key={index} className=\"grid grid-cols-12 gap-2 items-center bg-white p-3 rounded border\">\r\n//                   <div className=\"col-span-4\">\r\n//                     <select\r\n//                       value={entry.accountId}\r\n//                       onChange={(e) => updateEntryLine(index, 'accountId', e.target.value)}\r\n//                       className=\"w-full px-2 py-1 border border-gray-300 rounded text-sm focus:ring-2 focus:ring-emerald-500\"\r\n//                     >\r\n//                       <option value=\"\">Select Account</option>\r\n                      \r\n//                       {accounts.length > 0 && (\r\n//                         <>\r\n//                           {/* Assets */}\r\n//                           <optgroup label=\"Assets\">\r\n//                             {accounts\r\n//                               .filter(acc => acc.type === 'assets' && acc.category === 'account')\r\n//                               .map(account => (\r\n//                                 <option key={account.id} value={account.id}>\r\n//                                   {account.code} - {account.name}\r\n//                                 </option>\r\n//                               ))}\r\n//                           </optgroup>\r\n                          \r\n//                           {/* Liabilities */}\r\n//                           <optgroup label=\"Liabilities\">\r\n//                             {accounts\r\n//                               .filter(acc => acc.type === 'liabilities' && acc.category === 'account')\r\n//                               .map(account => (\r\n//                                 <option key={account.id} value={account.id}>\r\n//                                   {account.code} - {account.name}\r\n//                                 </option>\r\n//                               ))}\r\n//                           </optgroup>\r\n                          \r\n//                           {/* Equity */}\r\n//                           <optgroup label=\"Equity\">\r\n//                             {accounts\r\n//                               .filter(acc => acc.type === 'equity' && acc.category === 'account')\r\n//                               .map(account => (\r\n//                                 <option key={account.id} value={account.id}>\r\n//                                   {account.code} - {account.name}\r\n//                                 </option>\r\n//                               ))}\r\n//                           </optgroup>\r\n                          \r\n//                           {/* Revenue */}\r\n//                           <optgroup label=\"Revenue\">\r\n//                             {accounts\r\n//                               .filter(acc => acc.type === 'revenue' && acc.category === 'account')\r\n//                               .map(account => (\r\n//                                 <option key={account.id} value={account.id}>\r\n//                                   {account.code} - {account.name}\r\n//                                 </option>\r\n//                               ))}\r\n//                           </optgroup>\r\n                          \r\n//                           {/* Expenses */}\r\n//                           <optgroup label=\"Expenses\">\r\n//                             {accounts\r\n//                               .filter(acc => acc.type === 'expenses' && acc.category === 'account')\r\n//                               .map(account => (\r\n//                                 <option key={account.id} value={account.id}>\r\n//                                   {account.code} - {account.name}\r\n//                                 </option>\r\n//                               ))}\r\n//                           </optgroup>\r\n//                         </>\r\n//                       )}\r\n                      \r\n//                       {accounts.length === 0 && (\r\n//                         <option disabled>Loading accounts...</option>\r\n//                       )}\r\n//                     </select>\r\n//                   </div>\r\n//                   <div className=\"col-span-3\">\r\n//                     <input\r\n//                       type=\"text\"\r\n//                       value={entry.description}\r\n//                       onChange={(e) => updateEntryLine(index, 'description', e.target.value)}\r\n//                       placeholder=\"Description\"\r\n//                       className=\"w-full px-2 py-1 border border-gray-300 rounded text-sm focus:ring-2 focus:ring-emerald-500\"\r\n//                     />\r\n//                   </div>\r\n//                   <div className=\"col-span-2\">\r\n//                     <input\r\n//                       type=\"number\"\r\n//                       step=\"0.01\"\r\n//                       value={entry.debit}\r\n//                       onChange={(e) => updateEntryLine(index, 'debit', e.target.value)}\r\n//                       placeholder=\"Debit\"\r\n//                       className=\"w-full px-2 py-1 border border-gray-300 rounded text-sm focus:ring-2 focus:ring-emerald-500\"\r\n//                     />\r\n//                   </div>\r\n//                   <div className=\"col-span-2\">\r\n//                     <input\r\n//                       type=\"number\"\r\n//                       step=\"0.01\"\r\n//                       value={entry.credit}\r\n//                       onChange={(e) => updateEntryLine(index, 'credit', e.target.value)}\r\n//                       placeholder=\"Credit\"\r\n//                       className=\"w-full px-2 py-1 border border-gray-300 rounded text-sm focus:ring-2 focus:ring-emerald-500\"\r\n//                     />\r\n//                   </div>\r\n//                   <div className=\"col-span-1\">\r\n//                     {newEntry.entries.length > 2 && (\r\n//                       <button\r\n//                         onClick={() => removeEntryLine(index)}\r\n//                         className=\"p-1 text-red-600 hover:bg-red-100 rounded\"\r\n//                       >\r\n//                         <Trash2 size={14} />\r\n//                       </button>\r\n//                     )}\r\n//                   </div>\r\n//                 </div>\r\n//               ))}\r\n//             </div>\r\n\r\n//             <div className=\"flex justify-between items-center mt-3\">\r\n//               <button\r\n//                 onClick={addEntryLine}\r\n//                 className=\"px-3 py-1 text-sm bg-gray-200 text-gray-700 rounded hover:bg-gray-300 flex items-center space-x-1\"\r\n//               >\r\n//                 <Plus size={14} />\r\n//                 <span>Add Line</span>\r\n//               </button>\r\n\r\n//               <div className=\"flex items-center space-x-4\">\r\n//                 <div className=\"text-sm\">\r\n//                   <span className=\"font-medium\">Total Debit: PKR {totalDebit.toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}</span>\r\n//                   <span className=\"mx-2\">|</span>\r\n//                   <span className=\"font-medium\">Total Credit: PKR {totalCredit.toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}</span>\r\n//                 </div>\r\n//                 {entryIsBalanced ? (\r\n//                   <div className=\"flex items-center text-green-600\">\r\n//                     <CheckCircle size={16} className=\"mr-1\" />\r\n//                     <span className=\"text-sm\">Balanced</span>\r\n//                   </div>\r\n//                 ) : (\r\n//                   <div className=\"flex items-center text-red-600\">\r\n//                     <AlertCircle size={16} className=\"mr-1\" />\r\n//                     <span className=\"text-sm\">Not Balanced</span>\r\n//                   </div>\r\n//                 )}\r\n//               </div>\r\n//             </div>\r\n//           </div>\r\n\r\n//           <div className=\"flex space-x-3\">\r\n//             <button\r\n//               onClick={saveJournalEntry}\r\n//               disabled={!entryIsBalanced}\r\n//               className=\"px-4 py-2 bg-emerald-600 text-white rounded-lg hover:bg-emerald-700 disabled:bg-gray-400 flex items-center space-x-2\"\r\n//             >\r\n//               <Save size={16} />\r\n//               <span>Save Entry</span>\r\n//             </button>\r\n//             <button\r\n//               onClick={() => setIsAddingEntry(false)}\r\n//               className=\"px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 flex items-center space-x-2\"\r\n//             >\r\n//               <X size={16} />\r\n//               <span>Cancel</span>\r\n//             </button>\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n\r\n//       {/* Journal Entries Table */}\r\n//       <div className=\"bg-white border border-gray-200 rounded-lg overflow-hidden\">\r\n//         <div className=\"px-6 py-4 border-b border-gray-200\">\r\n//           <h2 className=\"text-lg font-semibold text-gray-900\">Journal Entries</h2>\r\n//           <p className=\"text-sm text-gray-600 mt-1\">\r\n//             Showing {filteredEntries.length} of {journalEntries.length} entries\r\n//           </p>\r\n//         </div>\r\n\r\n//         <div className=\"overflow-x-auto\">\r\n//           <table className=\"w-full\">\r\n//             <thead className=\"bg-gray-50\">\r\n//               <tr>\r\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                   Entry ID\r\n//                 </th>\r\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                   Date\r\n//                 </th>\r\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                   Description\r\n//                 </th>\r\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                   Reference\r\n//                 </th>\r\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                   Source\r\n//                 </th>\r\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                   Amount\r\n//                 </th>\r\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                   Status\r\n//                 </th>\r\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                   Actions\r\n//                 </th>\r\n//               </tr>\r\n//             </thead>\r\n//             <tbody className=\"bg-white divide-y divide-gray-200\">\r\n//               {filteredEntries.map((entry) => (\r\n//                 <tr key={entry.id} className=\"hover:bg-gray-50\">\r\n//                   <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\r\n//                     {entry.id}\r\n//                   </td>\r\n//                   <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\r\n//                     {entry.date}\r\n//                   </td>\r\n//                   <td className=\"px-6 py-4 text-sm text-gray-900 max-w-xs truncate\">\r\n//                     {entry.description}\r\n//                   </td>\r\n//                   <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\r\n//                     {entry.reference}\r\n//                   </td>\r\n//                   <td className=\"px-6 py-4 whitespace-nowrap\">\r\n//                     <span className={`px-2 py-1 text-xs font-medium rounded-full ${\r\n//                       entry.source === 'POS Sales' ? 'bg-green-100 text-green-800' : \r\n//                       entry.source === 'Purchase Orders' ? 'bg-blue-100 text-blue-800' :\r\n//                       entry.source === 'Manual' ? 'bg-orange-100 text-orange-800' :\r\n//                       'bg-gray-100 text-gray-800'\r\n//                     }`}>\r\n//                       {entry.source}\r\n//                     </span>\r\n//                   </td>\r\n//                   <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\r\n//                     PKR {entry.totalDebit.toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\r\n//                   </td>\r\n//                   <td className=\"px-6 py-4 whitespace-nowrap\">\r\n//                     <span className={`px-2 py-1 text-xs font-medium rounded-full ${\r\n//                       entry.status === 'posted' ? 'bg-blue-100 text-blue-800' : 'bg-yellow-100 text-yellow-800'\r\n//                     }`}>\r\n//                       {entry.status}\r\n//                     </span>\r\n//                   </td>\r\n//                   <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">\r\n//                     <button\r\n//                       onClick={() => setSelectedEntry(entry)}\r\n//                       className=\"text-emerald-600 hover:text-emerald-900 mr-3\"\r\n//                     >\r\n//                       <Eye size={16} />\r\n//                     </button>\r\n//                   </td>\r\n//                 </tr>\r\n//               ))}\r\n//             </tbody>\r\n//           </table>\r\n//         </div>\r\n//       </div>\r\n\r\n//       {/* Entry Details Modal */}\r\n//       {selectedEntry && (\r\n//         <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center p-4 z-50\">\r\n//           <div className=\"bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-y-auto\">\r\n//             <div className=\"px-6 py-4 border-b border-gray-200\">\r\n//               <div className=\"flex items-center justify-between\">\r\n//                 <h3 className=\"text-lg font-semibold text-gray-900\">\r\n//                   Journal Entry Details - {selectedEntry.id}\r\n//                 </h3>\r\n//                 <button\r\n//                   onClick={() => setSelectedEntry(null)}\r\n//                   className=\"text-gray-400 hover:text-gray-600\"\r\n//                 >\r\n//                   <X size={20} />\r\n//                 </button>\r\n//               </div>\r\n//             </div>\r\n            \r\n//             <div className=\"px-6 py-4\">\r\n//               {/* Entry Header */}\r\n//               <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-6\">\r\n//                 <div>\r\n//                   <label className=\"text-sm font-medium text-gray-500\">Date</label>\r\n//                   <p className=\"text-sm text-gray-900\">{selectedEntry.date}</p>\r\n//                 </div>\r\n//                 <div>\r\n//                   <label className=\"text-sm font-medium text-gray-500\">Reference</label>\r\n//                   <p className=\"text-sm text-gray-900\">{selectedEntry.reference}</p>\r\n//                 </div>\r\n//                 <div>\r\n//                   <label className=\"text-sm font-medium text-gray-500\">Description</label>\r\n//                   <p className=\"text-sm text-gray-900\">{selectedEntry.description}</p>\r\n//                 </div>\r\n//                 <div>\r\n//                   <label className=\"text-sm font-medium text-gray-500\">Source</label>\r\n//                   <span className={`px-2 py-1 text-xs font-medium rounded-full ${\r\n//                     selectedEntry.source === 'POS Sales' ? 'bg-green-100 text-green-800' : \r\n//                     selectedEntry.source === 'Purchase Orders' ? 'bg-blue-100 text-blue-800' :\r\n//                     'bg-orange-100 text-orange-800'\r\n//                   }`}>\r\n//                     {selectedEntry.source}\r\n//                   </span>\r\n//                 </div>\r\n//               </div>\r\n              \r\n//               {/* Entry Lines */}\r\n//               <div className=\"mb-6\">\r\n//                 <h4 className=\"text-sm font-medium text-gray-700 mb-3\">Account Entries</h4>\r\n//                 <div className=\"overflow-x-auto\">\r\n//                   <table className=\"w-full border border-gray-200 rounded\">\r\n//                     <thead className=\"bg-gray-50\">\r\n//                       <tr>\r\n//                         <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500\">Account</th>\r\n//                         <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500\">Description</th>\r\n//                         <th className=\"px-4 py-2 text-right text-xs font-medium text-gray-500\">Debit</th>\r\n//                         <th className=\"px-4 py-2 text-right text-xs font-medium text-gray-500\">Credit</th>\r\n//                       </tr>\r\n//                     </thead>\r\n//                     <tbody className=\"divide-y divide-gray-200\">\r\n//                       {selectedEntry.entries.map((entryLine, index) => (\r\n//                         <tr key={index}>\r\n//                           <td className=\"px-4 py-2 text-sm text-gray-900\">\r\n//                             {getAccountName(entryLine.accountId)}\r\n//                           </td>\r\n//                           <td className=\"px-4 py-2 text-sm text-gray-600\">\r\n//                             {entryLine.description}\r\n//                           </td>\r\n//                           <td className=\"px-4 py-2 text-sm text-gray-900 text-right\">\r\n//                             {entryLine.debit > 0 ? `${entryLine.debit.toFixed(2)}` : '-'}\r\n//                           </td>\r\n//                           <td className=\"px-4 py-2 text-sm text-gray-900 text-right\">\r\n//                             {entryLine.credit > 0 ? `${entryLine.credit.toFixed(2)}` : '-'}\r\n//                           </td>\r\n//                         </tr>\r\n//                       ))}\r\n//                     </tbody>\r\n//                     <tfoot className=\"bg-gray-50\">\r\n//                       <tr>\r\n//                         <td colSpan=\"2\" className=\"px-4 py-2 text-sm font-medium text-gray-900\">\r\n//                           Totals:\r\n//                         </td>\r\n//                         <td className=\"px-4 py-2 text-sm font-bold text-gray-900 text-right\">\r\n//                           PKR {selectedEntry.totalDebit.toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\r\n//                         </td>\r\n//                         <td className=\"px-4 py-2 text-sm font-bold text-gray-900 text-right\">\r\n//                           PKR {selectedEntry.totalCredit.toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\r\n//                         </td>\r\n//                       </tr>\r\n//                     </tfoot>\r\n//                   </table>\r\n//                 </div>\r\n//               </div>\r\n\r\n//               {/* Original Purchase Order Info (if available) */}\r\n//               {selectedEntry.originalPurchaseOrder && (\r\n//                 <div className=\"mb-6 p-4 bg-gray-50 rounded-lg\">\r\n//                   <h4 className=\"text-sm font-medium text-gray-700 mb-3\">Original Purchase Order Details</h4>\r\n//                   <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\r\n//                     <div>\r\n//                       <span className=\"font-medium text-gray-500\">PO ID:</span>\r\n//                       <p className=\"text-gray-900\">{selectedEntry.originalPurchaseOrder.id}</p>\r\n//                     </div>\r\n//                     <div>\r\n//                       <span className=\"font-medium text-gray-500\">Status:</span>\r\n//                       <p className=\"text-gray-900\">{selectedEntry.originalPurchaseOrder.status}</p>\r\n//                     </div>\r\n//                     <div>\r\n//                       <span className=\"font-medium text-gray-500\">Vendor ID:</span>\r\n//                       <p className=\"text-gray-900\">{selectedEntry.originalPurchaseOrder.vendor_Id || 'N/A'}</p>\r\n//                     </div>\r\n//                     <div>\r\n//                       <span className=\"font-medium text-gray-500\">Type:</span>\r\n//                       <p className=\"text-gray-900\">{selectedEntry.originalPurchaseOrder.type || 'Standard'}</p>\r\n//                     </div>\r\n//                   </div>\r\n                  \r\n//                   {/* Purchase Items */}\r\n//                   <div className=\"mt-4\">\r\n//                     <span className=\"font-medium text-gray-500\">Purchase Items (Applied Only):</span>\r\n//                     <div className=\"mt-2 space-y-2\">\r\n//                       {selectedEntry.originalPurchaseOrder.purchaseOrderItems\r\n//                         .filter(item => item.status === 'applied' && item.quantity > 0)\r\n//                         .map((item, index) => (\r\n//                         <div key={index} className=\"text-sm bg-white p-2 rounded border\">\r\n//                           <span className=\"font-medium\">Product ID: {item.product_Id}</span> - \r\n//                           Qty: {item.quantity}, Price per Unit: PKR {parseFloat(item.pricePerUnit).toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}, \r\n//                           Total: PKR {(parseFloat(item.pricePerUnit) * parseFloat(item.quantity)).toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\r\n//                           {item.remarks && item.remarks !== 'null' && <span className=\"text-gray-500\"> ({item.remarks})</span>}\r\n//                         </div>\r\n//                       ))}\r\n//                     </div>\r\n                    \r\n//                     {selectedEntry.originalPurchaseOrder.remarks && selectedEntry.originalPurchaseOrder.remarks !== 'null' && (\r\n//                       <div className=\"mt-3\">\r\n//                         <span className=\"font-medium text-gray-500\">Remarks:</span>\r\n//                         <p className=\"text-gray-900 text-sm\">{selectedEntry.originalPurchaseOrder.remarks}</p>\r\n//                       </div>\r\n//                     )}\r\n//                   </div>\r\n//                 </div>\r\n//               )}\r\n\r\n//               {/* Original Order Info (if available) */}\r\n//               {selectedEntry.originalOrder && (\r\n//                 <div className=\"mb-6 p-4 bg-gray-50 rounded-lg\">\r\n//                   <h4 className=\"text-sm font-medium text-gray-700 mb-3\">Original Sales Order Details</h4>\r\n//                   <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\r\n//                     <div>\r\n//                       <span className=\"font-medium text-gray-500\">Order ID:</span>\r\n//                       <p className=\"text-gray-900\">{selectedEntry.originalOrder.orderId}</p>\r\n//                     </div>\r\n//                     <div>\r\n//                       <span className=\"font-medium text-gray-500\">Status:</span>\r\n//                       <p className=\"text-gray-900\">{selectedEntry.originalOrder.status}</p>\r\n//                     </div>\r\n//                     <div>\r\n//                       <span className=\"font-medium text-gray-500\">Payment Status:</span>\r\n//                       <p className=\"text-gray-900\">{selectedEntry.originalOrder.paid ? 'Paid' : 'Unpaid'}</p>\r\n//                     </div>\r\n//                     <div>\r\n//                       <span className=\"font-medium text-gray-500\">Fulfilled:</span>\r\n//                       <p className=\"text-gray-900\">{selectedEntry.originalOrder.fulfilled ? 'Yes' : 'No'}</p>\r\n//                     </div>\r\n//                   </div>\r\n                  \r\n//                   {/* Line Items */}\r\n//                   <div className=\"mt-4\">\r\n//                     <span className=\"font-medium text-gray-500\">Line Items:</span>\r\n//                     <div className=\"mt-2 space-y-2\">\r\n//                       {selectedEntry.originalOrder.lineItems.map((item, index) => (\r\n//                         <div key={index} className=\"text-sm bg-white p-2 rounded border\">\r\n//                           <span className=\"font-medium\">{item.productName}</span> - \r\n//                           Qty: {item.quantity}, Price: PKR {parseFloat(item.price).toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}, \r\n//                           Total: PKR {parseFloat(item.total).toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\r\n//                           {item.taxAmount > 0 && <span className=\"text-gray-500\"> (Tax: PKR {parseFloat(item.taxAmount).toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})})</span>}\r\n//                         </div>\r\n//                       ))}\r\n//                     </div>\r\n//                   </div>\r\n//                 </div>\r\n//               )}\r\n\r\n//               {/* Entry Metadata */}\r\n//               <div className=\"text-xs text-gray-500\">\r\n//                 <p>Created: {new Date(selectedEntry.createdAt).toLocaleString()}</p>\r\n//                 <p>Status: {selectedEntry.status}</p>\r\n//                 <p>Type: {selectedEntry.transactionType}</p>\r\n//               </div>\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n\r\n\r\n// {/* Trial Balance Modal */}\r\n// {showTrialBalance && (\r\n//   <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center p-4 z-50\">\r\n//     <div className=\"bg-white rounded-lg max-w-5xl w-full max-h-[90vh] overflow-y-auto\">\r\n//       <div className=\"px-6 py-4 border-b border-gray-200\">\r\n//         <div className=\"flex items-center justify-between\">\r\n//           <h3 className=\"text-lg font-semibold text-gray-900\">\r\n//             Trial Balance\r\n//             {filters.dateFrom && filters.dateTo\r\n//               ? ` (${new Date(filters.dateFrom).toLocaleDateString()} → ${new Date(filters.dateTo).toLocaleDateString()})`\r\n//               : ` - As of ${new Date().toLocaleDateString()}`}\r\n//           </h3>\r\n//           <div className=\"flex items-center space-x-2\">\r\n//             <button\r\n//               onClick={() => {\r\n//                 alert('Export functionality would be implemented here');\r\n//               }}\r\n//               className=\"px-3 py-1 bg-emerald-600 text-white rounded text-sm hover:bg-emerald-700 flex items-center space-x-1\"\r\n//             >\r\n//               <Download size={14} />\r\n//               <span>Export</span>\r\n//             </button>\r\n//             <button\r\n//               onClick={() => setShowTrialBalance(false)}\r\n//               className=\"text-gray-400 hover:text-gray-600\"\r\n//             >\r\n//               <X size={20} />\r\n//             </button>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n\r\n//       {/* ✅ Date Filters */}\r\n//       <div className=\"px-6 py-4 border-b border-gray-200 flex items-center space-x-3\">\r\n//         <input\r\n//           type=\"date\"\r\n//           value={filters.dateFrom || ''}\r\n//           onChange={(e) => setFilters({ ...filters, dateFrom: e.target.value })}\r\n//           className=\"px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-rose-500\"\r\n//         />\r\n//         <span className=\"text-gray-500\">to</span>\r\n//         <input\r\n//           type=\"date\"\r\n//           value={filters.dateTo || ''}\r\n//           onChange={(e) => setFilters({ ...filters, dateTo: e.target.value })}\r\n//           className=\"px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-rose-500\"\r\n//         />\r\n//         {(filters.dateFrom || filters.dateTo) && (\r\n//           <button\r\n//             onClick={() => setFilters({ ...filters, dateFrom: '', dateTo: '' })}\r\n//             className=\"ml-2 px-3 py-1 bg-gray-200 rounded hover:bg-gray-300 text-sm\"\r\n//           >\r\n//             Clear\r\n//           </button>\r\n//         )}\r\n//       </div>\r\n\r\n//       <div className=\"px-6 py-4\">\r\n//         <div className=\"overflow-x-auto\">\r\n//           {(() => {\r\n//             const filteredTrialBalance = trialBalance.filter((item) => {\r\n//               if (!filters.dateFrom && !filters.dateTo) return true;\r\n//               const txDate = new Date(item.date); // assumes each entry has `date`\r\n//               const from = filters.dateFrom ? new Date(filters.dateFrom) : null;\r\n//               const to = filters.dateTo ? new Date(filters.dateTo) : null;\r\n//               if (from && txDate < from) return false;\r\n//               if (to && txDate > to) return false;\r\n//               return true;\r\n//             });\r\n\r\n//             return (\r\n//               <table className=\"w-full\">\r\n//                 <thead className=\"bg-gray-50\">\r\n//                   <tr>\r\n//                     <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                       Date\r\n//                     </th>\r\n//                     <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                       Account Code\r\n//                     </th>\r\n//                     <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                       Account Name\r\n//                     </th>\r\n//                     <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                       Type\r\n//                     </th>\r\n//                     <th className=\"px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                       Debit Total\r\n//                     </th>\r\n//                     <th className=\"px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                       Credit Total\r\n//                     </th>\r\n//                     <th className=\"px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                       Balance\r\n//                     </th>\r\n//                   </tr>\r\n//                 </thead>\r\n//                 <tbody className=\"bg-white divide-y divide-gray-200\">\r\n//                   {filteredTrialBalance.map((item) => (\r\n//                     <tr key={item.accountId}>\r\n//                       <td className=\"px-4 py-4 whitespace-nowrap text-sm text-gray-900\">\r\n//                         {new Date(item.date).toLocaleDateString()}\r\n//                       </td>\r\n//                       <td className=\"px-4 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\r\n//                         {item.accountCode}\r\n//                       </td>\r\n//                       <td className=\"px-4 py-4 whitespace-nowrap text-sm text-gray-900\">\r\n//                         {item.accountName}\r\n//                       </td>\r\n//                       <td className=\"px-4 py-4 whitespace-nowrap\">\r\n//                         <span\r\n//                           className={`px-2 py-1 text-xs font-medium rounded-full ${\r\n//                             item.accountType === 'assets'\r\n//                               ? 'bg-green-100 text-green-800'\r\n//                               : item.accountType === 'liabilities'\r\n//                               ? 'bg-red-100 text-red-800'\r\n//                               : item.accountType === 'equity'\r\n//                               ? 'bg-blue-100 text-blue-800'\r\n//                               : item.accountType === 'revenue'\r\n//                               ? 'bg-purple-100 text-purple-800'\r\n//                               : item.accountType === 'expenses'\r\n//                               ? 'bg-orange-100 text-orange-800'\r\n//                               : 'bg-gray-100 text-gray-800'\r\n//                           }`}\r\n//                         >\r\n//                           {item.accountType?.charAt(0).toUpperCase() +\r\n//                             item.accountType?.slice(1) || 'Unknown'}\r\n//                         </span>\r\n//                       </td>\r\n//                       <td className=\"px-4 py-4 whitespace-nowrap text-sm text-gray-900 text-right\">\r\n//                         PKR{' '}\r\n//                         {item.debit.toLocaleString('en-PK', {\r\n//                           minimumFractionDigits: 2,\r\n//                           maximumFractionDigits: 2,\r\n//                         })}\r\n//                       </td>\r\n//                       <td className=\"px-4 py-4 whitespace-nowrap text-sm text-gray-900 text-right\">\r\n//                         PKR{' '}\r\n//                         {item.credit.toLocaleString('en-PK', {\r\n//                           minimumFractionDigits: 2,\r\n//                           maximumFractionDigits: 2,\r\n//                         })}\r\n//                       </td>\r\n//                       <td className=\"px-4 py-4 whitespace-nowrap text-sm font-medium text-right\">\r\n//                         <span\r\n//                           className={\r\n//                             item.balance >= 0 ? 'text-green-600' : 'text-red-600'\r\n//                           }\r\n//                         >\r\n//                           PKR{' '}\r\n//                           {Math.abs(item.balance).toLocaleString('en-PK', {\r\n//                             minimumFractionDigits: 2,\r\n//                             maximumFractionDigits: 2,\r\n//                           })}\r\n//                           {item.balance < 0 && ' (CR)'}\r\n//                         </span>\r\n//                       </td>\r\n//                     </tr>\r\n//                   ))}\r\n//                 </tbody>\r\n\r\n//                 {/* ✅ Totals now based on filtered data */}\r\n//                 <tfoot className=\"bg-gray-50\">\r\n//                   <tr>\r\n//                     <td\r\n//                       colSpan=\"4\"\r\n//                       className=\"px-4 py-3 text-sm font-bold text-gray-900\"\r\n//                     >\r\n//                       TOTALS:\r\n//                     </td>\r\n//                     <td className=\"px-4 py-3 text-sm font-bold text-gray-900 text-right\">\r\n//                       PKR{' '}\r\n//                       {filteredTrialBalance\r\n//                         .reduce((sum, acc) => sum + acc.debit, 0)\r\n//                         .toLocaleString('en-PK', {\r\n//                           minimumFractionDigits: 2,\r\n//                           maximumFractionDigits: 2,\r\n//                         })}\r\n//                     </td>\r\n//                     <td className=\"px-4 py-3 text-sm font-bold text-gray-900 text-right\">\r\n//                       PKR{' '}\r\n//                       {filteredTrialBalance\r\n//                         .reduce((sum, acc) => sum + acc.credit, 0)\r\n//                         .toLocaleString('en-PK', {\r\n//                           minimumFractionDigits: 2,\r\n//                           maximumFractionDigits: 2,\r\n//                         })}\r\n//                     </td>\r\n//                     <td className=\"px-4 py-3 text-sm font-bold text-gray-900 text-right\">\r\n//                       PKR{' '}\r\n//                       {Math.abs(\r\n//                         filteredTrialBalance.reduce(\r\n//                           (sum, acc) => sum + acc.balance,\r\n//                           0\r\n//                         )\r\n//                       ).toLocaleString('en-PK', {\r\n//                         minimumFractionDigits: 2,\r\n//                         maximumFractionDigits: 2,\r\n//                       })}\r\n//                     </td>\r\n//                   </tr>\r\n//                 </tfoot>\r\n//               </table>\r\n//             );\r\n//           })()}\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   </div>\r\n// )}\r\n\r\n\r\n\r\n//       {/* Integration Status */}\r\n//       <div className=\"mt-8 grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n//         <div className=\"p-4 bg-blue-50 border border-blue-200 rounded-lg\">\r\n//           <div className=\"flex items-center mb-2\">\r\n//             <RefreshCw className=\"text-blue-600 mr-2\" size={16} />\r\n//             <h4 className=\"font-medium text-blue-800\">Dual API Integration</h4>\r\n//           </div>\r\n//           <p className=\"text-sm text-blue-700\">\r\n//             Sales and Purchase orders automatically create journal entries from live API data\r\n//           </p>\r\n//         </div>\r\n\r\n//         <div className=\"p-4 bg-blue-50 border border-blue-200 rounded-lg\">\r\n//           <div className=\"flex items-center mb-2\">\r\n//             <RefreshCw className=\"text-blue-600 mr-2\" size={16} />\r\n//             <h4 className=\"font-medium text-blue-800\">Real-time Sync</h4>\r\n//           </div>\r\n//           <p className=\"text-sm text-blue-700\">\r\n//             Journal entries updated automatically with each sales transaction\r\n//           </p>\r\n//         </div>\r\n\r\n//         <div className=\"p-4 bg-orange-50 border border-orange-200 rounded-lg\">\r\n//           <div className=\"flex items-center mb-2\">\r\n//             <FileText className=\"text-orange-600 mr-2\" size={16} />\r\n//             <h4 className=\"font-medium text-orange-800\">Manual Entries</h4>\r\n//           </div>\r\n//           <p className=\"text-sm text-orange-700\">\r\n//             Add adjustments and corrections with full double-entry validation\r\n//           </p>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default GeneralLedger;\r\n\r\n\r\nimport React, { useState, useEffect, useCallback } from 'react';\r\nimport { Book } from 'lucide-react';\r\nimport { useGeneralLedgerData } from '../hooks/useGeneralLedgerData';\r\nimport { useJournalEntries } from '../hooks/useJournalEntries';\r\nimport { useTrialBalance } from '../hooks/useTrialBalance';\r\nimport GLHeader from '../components/GeneralLedger/GLHeader';\r\nimport GLStats from '../components/GeneralLedger/GLStats';\r\nimport GLControls from '../components/GeneralLedger/GLControls';\r\nimport GLJournalEntryForm from '../components/GeneralLedger/GLJournalEntryForm';\r\nimport GLJournalEntriesTable from '../components/GeneralLedger/GLJournalEntriesTable';\r\nimport GLIntegrationStatus from '../components/GeneralLedger/GLIntegrationStatus';\r\nimport JournalEntryDetailModal from '../modals/JournalEntryDetailModal';\r\nimport TrialBalanceModal from '../modals/TrialBalanceModal';\r\n\r\nconst GeneralLedger = () => {\r\n  // State management\r\n  const [selectedEntry, setSelectedEntry] = useState(null);\r\n  const [isAddingEntry, setIsAddingEntry] = useState(false);\r\n  const [showTrialBalance, setShowTrialBalance] = useState(false);\r\n  const [filters, setFilters] = useState({\r\n    dateFrom: '',\r\n    dateTo: '',\r\n    accountId: '',\r\n    transactionType: 'all',\r\n    searchTerm: ''\r\n  });\r\n\r\n  // Custom hooks for data management\r\n  const {\r\n    accounts,\r\n    loading: accountsLoading,\r\n    error: accountsError,\r\n    loadChartsOfAccounts\r\n  } = useGeneralLedgerData();\r\n\r\n  const {\r\n    journalEntries,\r\n    filteredEntries,\r\n    newEntry,\r\n    setNewEntry,\r\n    loading: entriesLoading,\r\n    errors,\r\n    loadJournalEntriesFromAPI,\r\n    filterEntries,\r\n    saveJournalEntry,\r\n    getAccountName\r\n  } = useJournalEntries(accounts);\r\n\r\n  const {\r\n    trialBalance,\r\n    generateTrialBalance\r\n  } = useTrialBalance(accounts, journalEntries);\r\n\r\n  // Load accounts on mount\r\n  useEffect(() => {\r\n    loadChartsOfAccounts();\r\n  }, [loadChartsOfAccounts]);\r\n\r\n  // Load journal entries when accounts are loaded\r\n  useEffect(() => {\r\n    if (accounts.length > 0) {\r\n      loadJournalEntriesFromAPI();\r\n    }\r\n  }, [accounts, loadJournalEntriesFromAPI]);\r\n\r\n  // Filter entries when filters or journal entries change\r\n  useEffect(() => {\r\n    if (journalEntries.length > 0) {\r\n      filterEntries(filters);\r\n    }\r\n  }, [journalEntries, filters, filterEntries]);\r\n\r\n  // Event handlers\r\n  const handleRefresh = () => {\r\n    loadJournalEntriesFromAPI();\r\n  };\r\n\r\n  const handleRefreshAccounts = () => {\r\n    loadChartsOfAccounts();\r\n  };\r\n\r\n  const handleClearFilters = () => {\r\n    setFilters({\r\n      dateFrom: '',\r\n      dateTo: '',\r\n      accountId: '',\r\n      transactionType: 'all',\r\n      searchTerm: ''\r\n    });\r\n  };\r\n\r\n  const handleSaveEntry = () => {\r\n    const success = saveJournalEntry(newEntry);\r\n    if (success) {\r\n      setIsAddingEntry(false);\r\n    }\r\n  };\r\n\r\n  const handleGenerateTrialBalance = () => {\r\n    generateTrialBalance();\r\n    setShowTrialBalance(true);\r\n  };\r\n\r\n  const loading = {\r\n    accounts: accountsLoading,\r\n    entries: entriesLoading,\r\n    purchase: false // This can be managed separately if needed\r\n  };\r\n\r\n  return (\r\n    <div className=\"max-w-7xl mx-auto p-6 bg-white\">\r\n      <GLHeader \r\n        loading={loading}\r\n        errors={{ accounts: accountsError, ...errors }}\r\n      />\r\n\r\n      <GLStats journalEntries={journalEntries} />\r\n\r\n      <GLControls\r\n        filters={filters}\r\n        setFilters={setFilters}\r\n        accounts={accounts}\r\n        loading={loading}\r\n        onRefresh={handleRefresh}\r\n        onRefreshAccounts={handleRefreshAccounts}\r\n        onClearFilters={handleClearFilters}\r\n        onAddEntry={() => setIsAddingEntry(true)}\r\n        onGenerateTrialBalance={handleGenerateTrialBalance}\r\n      />\r\n\r\n      {isAddingEntry && (\r\n        <GLJournalEntryForm\r\n          newEntry={newEntry}\r\n          setNewEntry={setNewEntry}\r\n          accounts={accounts}\r\n          onSave={handleSaveEntry}\r\n          onCancel={() => setIsAddingEntry(false)}\r\n        />\r\n      )}\r\n\r\n      <GLJournalEntriesTable\r\n        entries={filteredEntries}\r\n        totalEntries={journalEntries.length}\r\n        onViewEntry={setSelectedEntry}\r\n      />\r\n\r\n      {selectedEntry && (\r\n        <JournalEntryDetailModal\r\n          entry={selectedEntry}\r\n          onClose={() => setSelectedEntry(null)}\r\n          getAccountName={getAccountName}\r\n        />\r\n      )}\r\n\r\n      {showTrialBalance && (\r\n        <TrialBalanceModal\r\n          trialBalance={trialBalance}\r\n          filters={filters}\r\n          setFilters={setFilters}\r\n          onClose={() => setShowTrialBalance(false)}\r\n        />\r\n      )}\r\n\r\n      <GLIntegrationStatus />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GeneralLedger;"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AAC/D,SAASC,IAAI,QAAQ,cAAc;AACnC,SAASC,oBAAoB,QAAQ,+BAA+B;AACpE,SAASC,iBAAiB,QAAQ,4BAA4B;AAC9D,SAASC,eAAe,QAAQ,0BAA0B;AAC1D,OAAOC,QAAQ,MAAM,sCAAsC;AAC3D,OAAOC,OAAO,MAAM,qCAAqC;AACzD,OAAOC,UAAU,MAAM,wCAAwC;AAC/D,OAAOC,kBAAkB,MAAM,gDAAgD;AAC/E,OAAOC,qBAAqB,MAAM,mDAAmD;AACrF,OAAOC,mBAAmB,MAAM,iDAAiD;AACjF,OAAOC,uBAAuB,MAAM,mCAAmC;AACvE,OAAOC,iBAAiB,MAAM,6BAA6B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5D,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B;EACA,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGpB,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAACqB,aAAa,EAAEC,gBAAgB,CAAC,GAAGtB,QAAQ,CAAC,KAAK,CAAC;EACzD,MAAM,CAACuB,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGxB,QAAQ,CAAC,KAAK,CAAC;EAC/D,MAAM,CAACyB,OAAO,EAAEC,UAAU,CAAC,GAAG1B,QAAQ,CAAC;IACrC2B,QAAQ,EAAE,EAAE;IACZC,MAAM,EAAE,EAAE;IACVC,SAAS,EAAE,EAAE;IACbC,eAAe,EAAE,KAAK;IACtBC,UAAU,EAAE;EACd,CAAC,CAAC;;EAEF;EACA,MAAM;IACJC,QAAQ;IACRC,OAAO,EAAEC,eAAe;IACxBC,KAAK,EAAEC,aAAa;IACpBC;EACF,CAAC,GAAGjC,oBAAoB,CAAC,CAAC;EAE1B,MAAM;IACJkC,cAAc;IACdC,eAAe;IACfC,QAAQ;IACRC,WAAW;IACXR,OAAO,EAAES,cAAc;IACvBC,MAAM;IACNC,yBAAyB;IACzBC,aAAa;IACbC,gBAAgB;IAChBC;EACF,CAAC,GAAG1C,iBAAiB,CAAC2B,QAAQ,CAAC;EAE/B,MAAM;IACJgB,YAAY;IACZC;EACF,CAAC,GAAG3C,eAAe,CAAC0B,QAAQ,EAAEM,cAAc,CAAC;;EAE7C;EACArC,SAAS,CAAC,MAAM;IACdoC,oBAAoB,CAAC,CAAC;EACxB,CAAC,EAAE,CAACA,oBAAoB,CAAC,CAAC;;EAE1B;EACApC,SAAS,CAAC,MAAM;IACd,IAAI+B,QAAQ,CAACkB,MAAM,GAAG,CAAC,EAAE;MACvBN,yBAAyB,CAAC,CAAC;IAC7B;EACF,CAAC,EAAE,CAACZ,QAAQ,EAAEY,yBAAyB,CAAC,CAAC;;EAEzC;EACA3C,SAAS,CAAC,MAAM;IACd,IAAIqC,cAAc,CAACY,MAAM,GAAG,CAAC,EAAE;MAC7BL,aAAa,CAACpB,OAAO,CAAC;IACxB;EACF,CAAC,EAAE,CAACa,cAAc,EAAEb,OAAO,EAAEoB,aAAa,CAAC,CAAC;;EAE5C;EACA,MAAMM,aAAa,GAAGA,CAAA,KAAM;IAC1BP,yBAAyB,CAAC,CAAC;EAC7B,CAAC;EAED,MAAMQ,qBAAqB,GAAGA,CAAA,KAAM;IAClCf,oBAAoB,CAAC,CAAC;EACxB,CAAC;EAED,MAAMgB,kBAAkB,GAAGA,CAAA,KAAM;IAC/B3B,UAAU,CAAC;MACTC,QAAQ,EAAE,EAAE;MACZC,MAAM,EAAE,EAAE;MACVC,SAAS,EAAE,EAAE;MACbC,eAAe,EAAE,KAAK;MACtBC,UAAU,EAAE;IACd,CAAC,CAAC;EACJ,CAAC;EAED,MAAMuB,eAAe,GAAGA,CAAA,KAAM;IAC5B,MAAMC,OAAO,GAAGT,gBAAgB,CAACN,QAAQ,CAAC;IAC1C,IAAIe,OAAO,EAAE;MACXjC,gBAAgB,CAAC,KAAK,CAAC;IACzB;EACF,CAAC;EAED,MAAMkC,0BAA0B,GAAGA,CAAA,KAAM;IACvCP,oBAAoB,CAAC,CAAC;IACtBzB,mBAAmB,CAAC,IAAI,CAAC;EAC3B,CAAC;EAED,MAAMS,OAAO,GAAG;IACdD,QAAQ,EAAEE,eAAe;IACzBuB,OAAO,EAAEf,cAAc;IACvBgB,QAAQ,EAAE,KAAK,CAAC;EAClB,CAAC;EAED,oBACE1C,OAAA;IAAK2C,SAAS,EAAC,gCAAgC;IAAAC,QAAA,gBAC7C5C,OAAA,CAACT,QAAQ;MACP0B,OAAO,EAAEA,OAAQ;MACjBU,MAAM,EAAE;QAAEX,QAAQ,EAAEI,aAAa;QAAE,GAAGO;MAAO;IAAE;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChD,CAAC,eAEFhD,OAAA,CAACR,OAAO;MAAC8B,cAAc,EAAEA;IAAe;MAAAuB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAE3ChD,OAAA,CAACP,UAAU;MACTgB,OAAO,EAAEA,OAAQ;MACjBC,UAAU,EAAEA,UAAW;MACvBM,QAAQ,EAAEA,QAAS;MACnBC,OAAO,EAAEA,OAAQ;MACjBgC,SAAS,EAAEd,aAAc;MACzBe,iBAAiB,EAAEd,qBAAsB;MACzCe,cAAc,EAAEd,kBAAmB;MACnCe,UAAU,EAAEA,CAAA,KAAM9C,gBAAgB,CAAC,IAAI,CAAE;MACzC+C,sBAAsB,EAAEb;IAA2B;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpD,CAAC,EAED3C,aAAa,iBACZL,OAAA,CAACN,kBAAkB;MACjB8B,QAAQ,EAAEA,QAAS;MACnBC,WAAW,EAAEA,WAAY;MACzBT,QAAQ,EAAEA,QAAS;MACnBsC,MAAM,EAAEhB,eAAgB;MACxBiB,QAAQ,EAAEA,CAAA,KAAMjD,gBAAgB,CAAC,KAAK;IAAE;MAAAuC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzC,CACF,eAEDhD,OAAA,CAACL,qBAAqB;MACpB8C,OAAO,EAAElB,eAAgB;MACzBiC,YAAY,EAAElC,cAAc,CAACY,MAAO;MACpCuB,WAAW,EAAErD;IAAiB;MAAAyC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/B,CAAC,EAED7C,aAAa,iBACZH,OAAA,CAACH,uBAAuB;MACtB6D,KAAK,EAAEvD,aAAc;MACrBwD,OAAO,EAAEA,CAAA,KAAMvD,gBAAgB,CAAC,IAAI,CAAE;MACtC2B,cAAc,EAAEA;IAAe;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChC,CACF,EAEAzC,gBAAgB,iBACfP,OAAA,CAACF,iBAAiB;MAChBkC,YAAY,EAAEA,YAAa;MAC3BvB,OAAO,EAAEA,OAAQ;MACjBC,UAAU,EAAEA,UAAW;MACvBiD,OAAO,EAAEA,CAAA,KAAMnD,mBAAmB,CAAC,KAAK;IAAE;MAAAqC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3C,CACF,eAEDhD,OAAA,CAACJ,mBAAmB;MAAAiD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACpB,CAAC;AAEV,CAAC;AAAC9C,EAAA,CAxJID,aAAa;EAAA,QAmBbb,oBAAoB,EAapBC,iBAAiB,EAKjBC,eAAe;AAAA;AAAAsE,EAAA,GArCf3D,aAAa;AA0JnB,eAAeA,aAAa;AAAC,IAAA2D,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}