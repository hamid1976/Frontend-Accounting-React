{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Logic-Unit\\\\my-account\\\\src\\\\components\\\\AccountsPayable\\\\RecordPaymentModal.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import { X, Calendar, DollarSign, CreditCard, FileText, AlertCircle } from 'lucide-react';\n// import { formatCurrency } from '../AccountsReceivable/AccountsReceivableUtils/formatters';\n\n// const RecordPaymentModal = ({ invoiceId, amount, onClose, onSubmit, onPaymentComplete, customerId, total }) => {\n//   const [formData, setFormData] = useState({\n//     date: new Date().toISOString().split('T')[0],\n//     amount: '',\n//     method: '',\n//     account: '',\n//     memo: ''\n//   });\n\n//   const [accounts, setAccounts] = useState([]);\n//   const [loading, setLoading] = useState(false);\n//   const [errors, setErrors] = useState({});\n//   const [isAlreadyPaid, setIsAlreadyPaid] = useState(false);\n//   const [currentRemainingAmount, setCurrentRemainingAmount] = useState(amount);\n//   const [originalTotalAmount, setOriginalTotalAmount] = useState(total || amount);\n\n//   // Initialize payment data with props and localStorage data\n//   useEffect(() => {\n//     console.log(\"RecordPaymentModal props:\", { invoiceId, amount, total });\n\n//     // First, set initial values from props\n//     const initialAmount = parseFloat(amount) || 0;\n//     const initialTotal = parseFloat(total) || initialAmount;\n\n//     setCurrentRemainingAmount(initialAmount);\n//     setOriginalTotalAmount(initialTotal);\n//     setFormData(prev => ({ ...prev, amount: initialAmount.toString() }));\n\n//     // Then check localStorage for additional/override data\n//     try {\n//       const existingOrders = JSON.parse(localStorage.getItem('orders') || '[]');\n//       const order = existingOrders.find(o => \n//         o.orderId === invoiceId || o.id === invoiceId || o.POID === invoiceId\n//       );\n\n//       if (order) {\n//         console.log(\"Found order in localStorage:\", order);\n\n//         // Calculate remaining based on payment history if remainingAmount is not set\n//         let remaining = order.remainingAmount;\n//         let orderTotal = order.total;\n\n//         if (remaining === undefined || remaining === null) {\n//           // If no remainingAmount field, calculate it from payments\n//           const payments = JSON.parse(localStorage.getItem('payments') || '[]');\n//           const orderPayments = payments.filter(p => \n//             p.orderId === invoiceId || p.invoiceId === invoiceId\n//           );\n\n//           const totalPaid = orderPayments.reduce((sum, payment) => sum + payment.amount, 0);\n//           remaining = Math.max(0, orderTotal - totalPaid);\n//         }\n\n//         // Only override props if we have valid data from localStorage\n//         if (remaining !== undefined && remaining !== null && remaining > 0) {\n//           setCurrentRemainingAmount(remaining);\n//           setFormData(prev => ({ ...prev, amount: remaining.toString() }));\n//         }\n\n//         if (orderTotal !== undefined && orderTotal !== null && orderTotal > 0) {\n//           setOriginalTotalAmount(orderTotal);\n//         }\n\n//         // Check if already paid\n//         if (order.paid || order.paymentStatus === 'paid' || remaining <= 0) {\n//           setIsAlreadyPaid(true);\n//         }\n//       }\n//     } catch (error) {\n//       console.error(\"Error processing localStorage data:\", error);\n//       // Fall back to the props in case of error\n//       console.log(\"Falling back to props due to error:\", { amount, total });\n//     }\n\n//     // Final safety check - ensure we have valid values\n//     if (originalTotalAmount <= 0 && initialTotal > 0) {\n//       setOriginalTotalAmount(initialTotal);\n//     }\n\n//     if (currentRemainingAmount <= 0 && initialAmount > 0) {\n//       setCurrentRemainingAmount(initialAmount);\n//       setFormData(prev => ({ ...prev, amount: initialAmount.toString() }));\n//     }\n//   }, [invoiceId, amount, total]);\n\n//   // Fetch accounts on mount\n//   useEffect(() => {\n//     fetchAccounts();\n//   }, []);\n\n//   const fetchAccounts = async () => {\n//     try {\n//       const response = await fetch('http://localhost:8080/api/accounts');\n//       const data = await response.json();\n\n//       const assetAccounts = data.filter(acct => acct.type === 'assets');\n//       const accountMap = {};\n//       assetAccounts.forEach(acct => accountMap[acct.id] = { ...acct, children: [] });\n\n//       assetAccounts.forEach(acct => {\n//         if (acct.parentId && accountMap[acct.parentId]) {\n//           accountMap[acct.parentId].children.push(accountMap[acct.id]);\n//         }\n//       });\n\n//       const tree = assetAccounts.filter(acct => !acct.parentId || !accountMap[acct.parentId]);\n//       setAccounts(tree);\n//     } catch (err) {\n//       console.error('Failed to fetch accounts:', err);\n//     }\n//   };\n\n//   const handleChange = (field, value) => {\n//     setFormData(prev => ({ ...prev, [field]: value }));\n//     if (errors[field]) {\n//       setErrors(prev => ({ ...prev, [field]: '' }));\n//     }\n//   };\n\n//   const handleSubmit = async () => {\n//     if (isAlreadyPaid) {\n//       setErrors({\n//         general: 'This invoice has already been fully paid. No further payments allowed.'\n//       });\n//       return;\n//     }\n\n//     setLoading(true);\n\n//     try {\n//       const paymentAmount = parseFloat(formData.amount);\n//       const newRemainingAmount = Math.max(0, currentRemainingAmount - paymentAmount);\n//       const isFullPayment = newRemainingAmount <= 0;\n//       const paymentStatus = isFullPayment ? 'paid' : 'partial';\n\n//       // Create payment record\n//       const paymentData = {\n//         id: `PAY-${Date.now()}`,\n//         customerId: customerId || null,\n//         vendorId: customerId || null, // Added for APPaymentsTab compatibility\n//         orderId: invoiceId,\n//         date: formData.date,\n//         amount: paymentAmount,\n//         method: formData.method, // Match field name used in APPaymentsTab\n//         paymentMethod: formData.method,\n//         accountId: formData.account,\n//         accountName: getAccountNameById(formData.account, accounts) || 'Unknown Account',\n//         accountType: getAccountTypeById(formData.account, accounts) || 'Not specified',\n//         memo: formData.memo,\n//         status: paymentStatus,\n//         remainingAmount: newRemainingAmount,\n//         createdAt: new Date().toISOString(),\n//         createdBy: 'current_user'\n//       };\n\n//       // Save payment to localStorage\n//       const existingPayments = JSON.parse(localStorage.getItem('payments') || '[]');\n//       const updatedPayments = [...existingPayments, paymentData];\n//       localStorage.setItem('payments', JSON.stringify(updatedPayments));\n\n//       // Update order in localStorage\n//       const existingOrders = JSON.parse(localStorage.getItem('orders') || '[]');\n//       const orderIndex = existingOrders.findIndex(order =>\n//         order.orderId === invoiceId || order.id === invoiceId\n//       );\n\n//       if (orderIndex !== -1) {\n//         existingOrders[orderIndex] = {\n//           ...existingOrders[orderIndex],\n//           paid: isFullPayment,\n//           paymentStatus: paymentStatus,\n//           lastPaymentDate: formData.date,\n//           lastPaymentAmount: paymentAmount,\n//           remainingAmount: newRemainingAmount,\n//           paymentHistory: [\n//             ...(existingOrders[orderIndex].paymentHistory || []),\n//             paymentData.id\n//           ]\n//         };\n//         localStorage.setItem('orders', JSON.stringify(existingOrders));\n//       }\n\n//       // API Call\n//       const apiUrl = `https://api-pos.hulmsolutions.com/POS/accountinghamid/bea876f9-b274-4cd2-9f86-d28953bee69d/orders/Paid/${invoiceId}`;\n//       const payload = {\n//         customerId: customerId,\n//         orderId: invoiceId,\n//         paid: isFullPayment,\n//         billUnitId: \"2\",\n//         billStatus: \"pending\",\n//         amount: paymentAmount,         // ✅ actual amount being paid\n//         total: originalTotalAmount     // ✅ full invoice total\n//       };\n\n//       try {\n//         const apiResponse = await fetch(apiUrl, {\n//           method: \"PUT\",\n//           headers: {\n//             \"Content-Type\": \"application/json\",\n//             \"Authorization\": `Bearer $hAMID`\n//           },\n//           body: JSON.stringify(payload)\n//         });\n\n//         if (!apiResponse.ok) {\n//           console.warn(\"API call failed but continuing with local updates\");\n//         }\n//       } catch (apiError) {\n//         // Continue even if API fails\n//         console.warn(\"API call failed but continuing with local updates:\", apiError);\n//       }\n\n//       // Callbacks\n//       if (onSubmit) {\n//         onSubmit(paymentData, isFullPayment);\n//       }\n\n//       if (onPaymentComplete) {\n//         onPaymentComplete(paymentData, isFullPayment);\n//       }\n\n//       const message = isFullPayment\n//         ? \"Payment recorded successfully. Invoice is now fully paid.\"\n//         : `Partial payment of ${formatCurrency(paymentAmount)} recorded. Remaining balance: ${formatCurrency(newRemainingAmount)}`;\n\n//       console.log(message);\n\n//       // Close the modal\n//       onClose();\n//     } catch (error) {\n//       console.error(\"Error recording payment:\", error);\n//       setErrors({ general: \"Failed to record payment. Please try again.\" });\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const getAccountNameById = (accountId, accountList) => {\n//     for (const account of accountList) {\n//       if (account.id === accountId) {\n//         return account.name;\n//       }\n//       if (account.children && account.children.length > 0) {\n//         const foundInChildren = getAccountNameById(accountId, account.children);\n//         if (foundInChildren) return foundInChildren;\n//       }\n//     }\n//     return null;\n//   };\n\n//   const getAccountTypeById = (accountId, accountList) => {\n//     for (const account of accountList) {\n//       if (account.id === accountId) {\n//         return account.type; // ← will return \"assets\", \"liabilities\", etc.\n//       }\n//       if (account.children && account.children.length > 0) {\n//         const foundInChildren = getAccountTypeById(accountId, account.children);\n//         if (foundInChildren) return foundInChildren;\n//       }\n//     }\n//     return null;\n//   };\n\n//   const renderAccountOptions = (accountList, level = 0) => {\n//     return accountList.map(account => (\n//       <React.Fragment key={account.id}>\n//         <option value={account.id}>\n//           {'-'.repeat(level * 2)} {account.code} - {account.name}\n//         </option>\n//         {account.children && account.children.length > 0 && (\n//           renderAccountOptions(account.children, level + 1)\n//         )}\n//       </React.Fragment>\n//     ));\n//   };\n\n//   const paymentAmount = parseFloat(formData.amount) || 0;\n//   const remainingAmount = Math.max(0, currentRemainingAmount - paymentAmount);\n//   const isFullPayment = remainingAmount <= 0 && paymentAmount > 0;\n\n//   return (\n//     <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n//       <div className=\"bg-white rounded-xl shadow-2xl max-w-md w-full\">\n//         {/* Header */}\n//         <div className=\"px-6 py-4 border-b border-gray-200\">\n//           <div className=\"flex items-center justify-between\">\n//             <h2 className=\"text-xl font-semibold text-gray-900\">\n//               Record a payment for this invoice\n//             </h2>\n//             <button\n//               onClick={onClose}\n//               className=\"text-gray-400 hover:text-gray-600 transition-colors\"\n//             >\n//               <X size={24} />\n//             </button>\n//           </div>\n//         </div>\n\n//         {/* Form Body */}\n//         <div className=\"px-6 py-4 space-y-5\">\n//           {errors.general && (\n//             <div className=\"p-3 bg-red-50 border border-red-200 rounded-lg flex items-start gap-2\">\n//               <AlertCircle size={20} className=\"text-red-600 flex-shrink-0 mt-0.5\" />\n//               <span className=\"text-sm text-red-700\">{errors.general}</span>\n//             </div>\n//           )}\n\n//           {/* Show invoice information section */}\n//           <div className=\"p-4 bg-blue-50 border border-blue-200 rounded-lg\">\n//             <h3 className=\"text-sm font-semibold text-blue-800 mb-2\">Invoice Information</h3>\n//             <div className=\"grid grid-cols-2 gap-3\">\n//               <div>\n//                 <label className=\"text-xs text-blue-700\">Total Bill Amount:</label>\n//                 <p className=\"text-sm font-bold text-blue-900\">{formatCurrency(originalTotalAmount)}</p>\n//               </div>\n//               <div>\n//                 <label className=\"text-xs text-blue-700\">Remaining Amount:</label>\n//                 <p className=\"text-sm font-bold text-blue-900\">{formatCurrency(currentRemainingAmount)}</p>\n//               </div>\n//             </div>\n//           </div>\n\n//           {/* Date Field */}\n//           <div>\n//             <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\">\n//               <Calendar size={16} />\n//               Date\n//             </label>\n//             <input\n//               type=\"date\"\n//               value={formData.date}\n//               onChange={(e) => handleChange('date', e.target.value)}\n//               className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\n//                 errors.date ? 'border-red-500' : 'border-gray-300'\n//               }`}\n//             />\n//             {errors.date && <span className=\"text-xs text-red-600 mt-1\">{errors.date}</span>}\n//           </div>\n\n//           {/* Amount Field */}\n//           <div>\n//             <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\">\n//               <DollarSign size={16} />\n//               Payment Amount\n//             </label>\n//             <div className=\"relative\">\n//               <span className=\"absolute left-3 top-1/2 -translate-y-1/2 text-gray-500 font-medium\">\n//                 Rs\n//               </span>\n//               <input\n//                 type=\"number\"\n//                 step=\"0.01\"\n//                 value={formData.amount}\n//                 onChange={(e) => handleChange('amount', e.target.value)}\n//                 className={`w-full pl-10 pr-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\n//                   errors.amount ? 'border-red-500' : 'border-gray-300'\n//                 }`}\n//                 placeholder=\"0.00\"\n\n//               />\n//             </div>\n//             {errors.amount && <span className=\"text-xs text-red-600 mt-1\">{errors.amount}</span>}\n\n//             {/* Display total bill amount below the amount field */}\n//             <div className=\"mt-2 text-sm flex items-center justify-between\">\n//               <span className=\"text-gray-700\">\n//                 Total Bill Amount: <span className=\"font-semibold\">{formatCurrency(originalTotalAmount)}</span>\n//               </span>\n\n//               {paymentAmount > 0 && (\n//                 <span className={isFullPayment ? \"text-green-600 font-medium\" : \"text-orange-600\"}>\n//                   {isFullPayment ? (\n//                     \"Invoice will be fully paid\"\n//                   ) : (\n//                     <>Remaining: {formatCurrency(remainingAmount)}</>\n//                   )}\n//                 </span>\n//               )}\n//             </div>\n//           </div>\n\n//           {/* Payment Method */}\n//           <div>\n//             <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\">\n//               <CreditCard size={16} />\n//               Method\n//             </label>\n//             <select\n//               value={formData.method}\n//               onChange={(e) => handleChange('method', e.target.value)}\n//               className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\n//                 errors.method ? 'border-red-500' : 'border-gray-300'\n//               }`}\n//             >\n//               <option value=\"\">Select a payment method...</option>\n//               <option value=\"cash\">Cash</option>\n//               <option value=\"check\">Check</option>\n//               <option value=\"bank_transfer\">Bank Transfer</option>\n//               <option value=\"credit_card\">Credit Card</option>\n//               <option value=\"debit_card\">Debit Card</option>\n//               <option value=\"online\">Online Payment</option>\n//             </select>\n//             {errors.method && <span className=\"text-xs text-red-600 mt-1\">{errors.method}</span>}\n//           </div>\n\n//           {/* Account */}\n//           <div>\n//             <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\">\n//               <FileText size={16} />\n//               Account\n//             </label>\n//             <select\n//               value={formData.account}\n//               onChange={(e) => handleChange('account', e.target.value)}\n//               className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\n//                 errors.account ? 'border-red-500' : 'border-gray-300'\n//               }`}\n//             >\n//               <option value=\"\">Select a payment account...</option>\n//               {renderAccountOptions(accounts)}\n//             </select>\n//             {errors.account && <span className=\"text-xs text-red-600 mt-1\">{errors.account}</span>}\n//             <p className=\"text-xs text-gray-500 mt-1\">\n//               Any account into which you deposit and withdraw funds from.{' '}\n//               <a href=\"#\" className=\"text-blue-600 hover:text-blue-700\">Learn more</a>\n//             </p>\n//           </div>\n\n//           {/* Memo */}\n//           <div>\n//             <label className=\"text-sm font-medium text-gray-700 mb-1 block\">\n//               Memo / notes\n//             </label>\n//             <textarea\n//               value={formData.memo}\n//               onChange={(e) => handleChange('memo', e.target.value)}\n//               rows={3}\n//               className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n//               placeholder=\"Add any additional notes...\"\n//             />\n//           </div>\n//         </div>\n\n//         {/* Footer */}\n//         <div className=\"px-6 py-4 border-t border-gray-200 flex items-center justify-end gap-3\">\n//           <button\n//             onClick={onClose}\n//             className=\"px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors\"\n//           >\n//             Cancel\n//           </button>\n//           <button\n//             onClick={handleSubmit}\n//             disabled={loading || !formData.amount || parseFloat(formData.amount) <= 0}\n//             className={`px-6 py-2 rounded-lg font-medium transition-colors ${\n//               loading || !formData.amount || parseFloat(formData.amount) <= 0\n//                 ? 'bg-gray-300 text-gray-500 cursor-not-allowed'\n//                 : 'bg-blue-600 text-white hover:bg-blue-700'\n//             }`}\n//           >\n//             {loading ? 'Processing...' : 'Submit'}\n//           </button>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default RecordPaymentModal;\n\nimport React, { useState, useEffect } from 'react';\nimport { X, Calendar, DollarSign, CreditCard, FileText, AlertCircle } from 'lucide-react';\n// import { formatCurrency } from '../AccountsReceivable/AccountsReceivableUtils/formatters';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst RecordPaymentModal = ({\n  invoiceId,\n  amount,\n  onClose,\n  onSubmit,\n  onPaymentComplete,\n  customerId,\n  total\n}) => {\n  _s();\n  const [formData, setFormData] = useState({\n    date: new Date().toISOString().split('T')[0],\n    amount: '',\n    method: '',\n    account: '',\n    memo: ''\n  });\n  const [accounts, setAccounts] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [errors, setErrors] = useState({});\n  const [isAlreadyPaid, setIsAlreadyPaid] = useState(false);\n  const [currentRemainingAmount, setCurrentRemainingAmount] = useState(amount);\n  const [originalTotalAmount, setOriginalTotalAmount] = useState(total || amount);\n\n  // Initialize payment data with props and localStorage data\n  useEffect(() => {\n    console.log(\"RecordPaymentModal props:\", {\n      invoiceId,\n      amount,\n      total\n    });\n\n    // First, set initial values from props\n    const initialAmount = parseFloat(amount) || 0;\n    const initialTotal = parseFloat(total) || initialAmount;\n    setCurrentRemainingAmount(initialAmount);\n    setOriginalTotalAmount(initialTotal);\n    setFormData(prev => ({\n      ...prev,\n      amount: initialAmount.toString()\n    }));\n\n    // Then check localStorage for additional/override data\n    try {\n      const existingOrders = JSON.parse(localStorage.getItem('orders') || '[]');\n      const order = existingOrders.find(o => o.orderId === invoiceId || o.id === invoiceId || o.POID === invoiceId);\n      if (order) {\n        console.log(\"Found order in localStorage:\", order);\n\n        // Calculate remaining based on payment history if remainingAmount is not set\n        let remaining = order.remainingAmount;\n        let orderTotal = order.total;\n        if (remaining === undefined || remaining === null) {\n          // If no remainingAmount field, calculate it from payments\n          const payments = JSON.parse(localStorage.getItem('payments') || '[]');\n          const orderPayments = payments.filter(p => p.orderId === invoiceId || p.invoiceId === invoiceId);\n          const totalPaid = orderPayments.reduce((sum, payment) => sum + payment.amount, 0);\n          remaining = Math.max(0, orderTotal - totalPaid);\n        }\n\n        // Only override props if we have valid data from localStorage\n        if (remaining !== undefined && remaining !== null && remaining > 0) {\n          setCurrentRemainingAmount(remaining);\n          setFormData(prev => ({\n            ...prev,\n            amount: remaining.toString()\n          }));\n        }\n        if (orderTotal !== undefined && orderTotal !== null && orderTotal > 0) {\n          setOriginalTotalAmount(orderTotal);\n        }\n\n        // Check if already paid\n        if (order.paid || order.paymentStatus === 'paid' || remaining <= 0) {\n          setIsAlreadyPaid(true);\n        }\n      }\n    } catch (error) {\n      console.error(\"Error processing localStorage data:\", error);\n      // Fall back to the props in case of error\n      console.log(\"Falling back to props due to error:\", {\n        amount,\n        total\n      });\n    }\n\n    // Final safety check - ensure we have valid values\n    if (originalTotalAmount <= 0 && initialTotal > 0) {\n      setOriginalTotalAmount(initialTotal);\n    }\n    if (currentRemainingAmount <= 0 && initialAmount > 0) {\n      setCurrentRemainingAmount(initialAmount);\n      setFormData(prev => ({\n        ...prev,\n        amount: initialAmount.toString()\n      }));\n    }\n  }, [invoiceId, amount, total]);\n\n  // Fetch accounts on mount\n  useEffect(() => {\n    fetchAccounts();\n  }, []);\n  const fetchAccounts = async () => {\n    try {\n      const response = await fetch('http://localhost:8080/api/accounts');\n      const data = await response.json();\n      const assetAccounts = data.filter(acct => acct.type === 'assets');\n      const accountMap = {};\n      assetAccounts.forEach(acct => accountMap[acct.id] = {\n        ...acct,\n        children: []\n      });\n      assetAccounts.forEach(acct => {\n        if (acct.parentId && accountMap[acct.parentId]) {\n          accountMap[acct.parentId].children.push(accountMap[acct.id]);\n        }\n      });\n      const tree = assetAccounts.filter(acct => !acct.parentId || !accountMap[acct.parentId]);\n      setAccounts(tree);\n    } catch (err) {\n      console.error('Failed to fetch accounts:', err);\n    }\n  };\n  const handleChange = (field, value) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n    if (errors[field]) {\n      setErrors(prev => ({\n        ...prev,\n        [field]: ''\n      }));\n    }\n  };\n  const validateForm = () => {\n    const newErrors = {};\n    if (!formData.date) {\n      newErrors.date = 'Payment date is required';\n    }\n    const paymentAmount = parseFloat(formData.amount);\n    if (!formData.amount || paymentAmount <= 0) {\n      newErrors.amount = 'Valid payment amount is required';\n    } else if (paymentAmount > currentRemainingAmount) {\n      newErrors.amount = `Payment cannot exceed remaining amount of ${formatCurrency(currentRemainingAmount)}`;\n    }\n    if (!formData.method) {\n      newErrors.method = 'Payment method is required';\n    }\n    if (!formData.account) {\n      newErrors.account = 'Deposit account is required';\n    }\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n  const handleSubmit = async () => {\n    if (isAlreadyPaid) {\n      setErrors({\n        general: 'This invoice has already been fully paid. No further payments allowed.'\n      });\n      return;\n    }\n    if (!validateForm()) return;\n    setLoading(true);\n    try {\n      const paymentAmount = parseFloat(formData.amount);\n      const newRemainingAmount = Math.max(0, currentRemainingAmount - paymentAmount);\n      const isFullPayment = newRemainingAmount <= 0;\n      const paymentStatus = isFullPayment ? 'paid' : 'partial';\n\n      // Create payment record formatted for compatibility with APPaymentsTab\n      const paymentData = {\n        id: `PAY-${Date.now()}`,\n        invoiceId: invoiceId,\n        // Use invoiceId for APPaymentsTab compatibility\n        orderId: invoiceId,\n        customerId: customerId || null,\n        vendorId: customerId || null,\n        // Keep for backward compatibility\n        date: formData.date,\n        createdAt: new Date().toISOString(),\n        amount: paymentAmount,\n        total: originalTotalAmount,\n        paymentMethod: formData.method,\n        // Format for APPaymentsTab\n        method: formData.method,\n        // Keep for backward compatibility\n        accountId: formData.account,\n        accountName: getAccountNameById(formData.account, accounts) || 'Not specified',\n        accountType: getAccountTypeById(formData.account, accounts) || 'Not specified',\n        memo: formData.memo,\n        status: paymentStatus,\n        remainingAmount: newRemainingAmount,\n        createdBy: 'current_user',\n        source: 'manual' // To distinguish from API-sourced payments\n      };\n\n      // Save payment to localStorage\n      const existingPayments = JSON.parse(localStorage.getItem('payments') || '[]');\n      const updatedPayments = [...existingPayments, paymentData];\n      localStorage.setItem('payments', JSON.stringify(updatedPayments));\n\n      // Update order in localStorage\n      const existingOrders = JSON.parse(localStorage.getItem('orders') || '[]');\n      const orderIndex = existingOrders.findIndex(order => order.orderId === invoiceId || order.id === invoiceId || order.POID === invoiceId);\n      if (orderIndex !== -1) {\n        existingOrders[orderIndex] = {\n          ...existingOrders[orderIndex],\n          paid: isFullPayment,\n          paymentStatus: paymentStatus,\n          lastPaymentDate: formData.date,\n          lastPaymentAmount: paymentAmount,\n          remainingAmount: newRemainingAmount,\n          paymentHistory: [...(existingOrders[orderIndex].paymentHistory || []), paymentData.id]\n        };\n        localStorage.setItem('orders', JSON.stringify(existingOrders));\n      } else {\n        // If order doesn't exist in localStorage, create a new entry\n        const newOrder = {\n          id: invoiceId,\n          orderId: invoiceId,\n          POID: invoiceId,\n          vendorId: customerId,\n          total: originalTotalAmount,\n          paid: isFullPayment,\n          paymentStatus: paymentStatus,\n          lastPaymentDate: formData.date,\n          lastPaymentAmount: paymentAmount,\n          remainingAmount: newRemainingAmount,\n          paymentHistory: [paymentData.id],\n          createdAt: new Date().toISOString()\n        };\n        existingOrders.push(newOrder);\n        localStorage.setItem('orders', JSON.stringify(existingOrders));\n      }\n\n      // Notify other components that payments have changed\n      window.dispatchEvent(new Event('storage'));\n      window.dispatchEvent(new Event('paymentsUpdated'));\n\n      // Callbacks\n      if (onSubmit) {\n        onSubmit(paymentData, isFullPayment);\n      }\n      if (onPaymentComplete) {\n        onPaymentComplete(paymentData, isFullPayment);\n      }\n      const message = isFullPayment ? \"Payment recorded successfully. Invoice is now fully paid.\" : `Partial payment of ${formatCurrency(paymentAmount)} recorded. Remaining balance: ${formatCurrency(newRemainingAmount)}`;\n      console.log(message);\n\n      // Close the modal\n      onClose();\n    } catch (error) {\n      console.error(\"Error recording payment:\", error);\n      setErrors({\n        general: \"Failed to record payment. Please try again.\"\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n  const getAccountNameById = (accountId, accountList) => {\n    for (const account of accountList) {\n      if (account.id === accountId) {\n        return account.name;\n      }\n      if (account.children && account.children.length > 0) {\n        const foundInChildren = getAccountNameById(accountId, account.children);\n        if (foundInChildren) return foundInChildren;\n      }\n    }\n    return null;\n  };\n  const getAccountTypeById = (accountId, accountList) => {\n    for (const account of accountList) {\n      if (account.id === accountId) {\n        return account.type; // ← will return \"assets\", \"liabilities\", etc.\n      }\n      if (account.children && account.children.length > 0) {\n        const foundInChildren = getAccountTypeById(accountId, account.children);\n        if (foundInChildren) return foundInChildren;\n      }\n    }\n    return null;\n  };\n  const renderAccountOptions = (accountList, level = 0) => {\n    return accountList.map(account => /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: account.id,\n        children: ['-'.repeat(level * 2), \" \", account.code, \" - \", account.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 772,\n        columnNumber: 9\n      }, this), account.children && account.children.length > 0 && renderAccountOptions(account.children, level + 1)]\n    }, account.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 771,\n      columnNumber: 7\n    }, this));\n  };\n  const paymentAmount = parseFloat(formData.amount) || 0;\n  const remainingAmount = Math.max(0, currentRemainingAmount - paymentAmount);\n  const isFullPayment = remainingAmount <= 0 && paymentAmount > 0;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-white rounded-xl shadow-2xl max-w-md w-full\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"px-6 py-4 border-b border-gray-200\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center justify-between\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"text-xl font-semibold text-gray-900\",\n            children: \"Record a payment for this invoice\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 792,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: onClose,\n            className: \"text-gray-400 hover:text-gray-600 transition-colors\",\n            children: /*#__PURE__*/_jsxDEV(X, {\n              size: 24\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 799,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 795,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 791,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 790,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"px-6 py-4 space-y-5\",\n        children: [errors.general && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"p-3 bg-red-50 border border-red-200 rounded-lg flex items-start gap-2\",\n          children: [/*#__PURE__*/_jsxDEV(AlertCircle, {\n            size: 20,\n            className: \"text-red-600 flex-shrink-0 mt-0.5\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 808,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-sm text-red-700\",\n            children: errors.general\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 809,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 807,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"p-4 bg-blue-50 border border-blue-200 rounded-lg\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"text-sm font-semibold text-blue-800 mb-2\",\n            children: \"Invoice Information\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 815,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"grid grid-cols-2 gap-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"text-xs text-blue-700\",\n                children: \"Total Bill Amount:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 818,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"text-sm font-bold text-blue-900\",\n                children: formatCurrency(originalTotalAmount)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 819,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 817,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"text-xs text-blue-700\",\n                children: \"Remaining Amount:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 822,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"text-sm font-bold text-blue-900\",\n                children: formatCurrency(currentRemainingAmount)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 823,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 821,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 816,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 814,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\",\n            children: [/*#__PURE__*/_jsxDEV(Calendar, {\n              size: 16\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 831,\n              columnNumber: 15\n            }, this), \"Date\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 830,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"date\",\n            value: formData.date,\n            onChange: e => handleChange('date', e.target.value),\n            className: `w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${errors.date ? 'border-red-500' : 'border-gray-300'}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 834,\n            columnNumber: 13\n          }, this), errors.date && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-xs text-red-600 mt-1\",\n            children: errors.date\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 842,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 829,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\",\n            children: [/*#__PURE__*/_jsxDEV(DollarSign, {\n              size: 16\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 848,\n              columnNumber: 15\n            }, this), \"Payment Amount\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 847,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"relative\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"absolute left-3 top-1/2 -translate-y-1/2 text-gray-500 font-medium\",\n              children: \"Rs\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 852,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              step: \"0.01\",\n              value: formData.amount,\n              onChange: e => handleChange('amount', e.target.value),\n              className: `w-full pl-10 pr-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${errors.amount ? 'border-red-500' : 'border-gray-300'}`,\n              placeholder: \"0.00\",\n              max: currentRemainingAmount\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 855,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 851,\n            columnNumber: 13\n          }, this), errors.amount && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-xs text-red-600 mt-1\",\n            children: errors.amount\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 867,\n            columnNumber: 31\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mt-2 text-sm flex items-center justify-between\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"text-gray-700\",\n              children: [\"Total Bill Amount: \", /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"font-semibold\",\n                children: formatCurrency(originalTotalAmount)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 872,\n                columnNumber: 36\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 871,\n              columnNumber: 15\n            }, this), paymentAmount > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: isFullPayment ? \"text-green-600 font-medium\" : \"text-orange-600\",\n              children: isFullPayment ? \"Invoice will be fully paid\" : /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [\"Remaining: \", formatCurrency(remainingAmount)]\n              }, void 0, true)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 876,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 870,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 846,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\",\n            children: [/*#__PURE__*/_jsxDEV(CreditCard, {\n              size: 16\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 890,\n              columnNumber: 15\n            }, this), \"Method\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 889,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: formData.method,\n            onChange: e => handleChange('method', e.target.value),\n            className: `w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${errors.method ? 'border-red-500' : 'border-gray-300'}`,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select a payment method...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 900,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"cash\",\n              children: \"Cash\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 901,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"check\",\n              children: \"Check\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 902,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"bank_transfer\",\n              children: \"Bank Transfer\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 903,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"credit_card\",\n              children: \"Credit Card\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 904,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"debit_card\",\n              children: \"Debit Card\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 905,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"online\",\n              children: \"Online Payment\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 906,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 893,\n            columnNumber: 13\n          }, this), errors.method && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-xs text-red-600 mt-1\",\n            children: errors.method\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 908,\n            columnNumber: 31\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 888,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\",\n            children: [/*#__PURE__*/_jsxDEV(FileText, {\n              size: 16\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 914,\n              columnNumber: 15\n            }, this), \"Account\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 913,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: formData.account,\n            onChange: e => handleChange('account', e.target.value),\n            className: `w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${errors.account ? 'border-red-500' : 'border-gray-300'}`,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select a payment account...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 924,\n              columnNumber: 15\n            }, this), renderAccountOptions(accounts)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 917,\n            columnNumber: 13\n          }, this), errors.account && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-xs text-red-600 mt-1\",\n            children: errors.account\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 927,\n            columnNumber: 32\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-xs text-gray-500 mt-1\",\n            children: [\"Any account into which you deposit and withdraw funds from.\", ' ', /*#__PURE__*/_jsxDEV(\"a\", {\n              href: \"#\",\n              className: \"text-blue-600 hover:text-blue-700\",\n              children: \"Learn more\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 930,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 928,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 912,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"text-sm font-medium text-gray-700 mb-1 block\",\n            children: \"Memo / notes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 936,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            value: formData.memo,\n            onChange: e => handleChange('memo', e.target.value),\n            rows: 3,\n            className: \"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\",\n            placeholder: \"Add any additional notes...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 939,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 935,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 805,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"px-6 py-4 border-t border-gray-200 flex items-center justify-end gap-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: onClose,\n          className: \"px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors\",\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 951,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSubmit,\n          disabled: loading || !formData.amount || parseFloat(formData.amount) <= 0,\n          className: `px-6 py-2 rounded-lg font-medium transition-colors ${loading || !formData.amount || parseFloat(formData.amount) <= 0 ? 'bg-gray-300 text-gray-500 cursor-not-allowed' : 'bg-blue-600 text-white hover:bg-blue-700'}`,\n          children: loading ? 'Processing...' : 'Submit'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 957,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 950,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 788,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 787,\n    columnNumber: 5\n  }, this);\n};\n_s(RecordPaymentModal, \"1QcC+FPaK2cT59FMTDk+3tOtxfo=\");\n_c = RecordPaymentModal;\nexport default RecordPaymentModal;\nvar _c;\n$RefreshReg$(_c, \"RecordPaymentModal\");","map":{"version":3,"names":["React","useState","useEffect","X","Calendar","DollarSign","CreditCard","FileText","AlertCircle","jsxDEV","_jsxDEV","Fragment","_Fragment","RecordPaymentModal","invoiceId","amount","onClose","onSubmit","onPaymentComplete","customerId","total","_s","formData","setFormData","date","Date","toISOString","split","method","account","memo","accounts","setAccounts","loading","setLoading","errors","setErrors","isAlreadyPaid","setIsAlreadyPaid","currentRemainingAmount","setCurrentRemainingAmount","originalTotalAmount","setOriginalTotalAmount","console","log","initialAmount","parseFloat","initialTotal","prev","toString","existingOrders","JSON","parse","localStorage","getItem","order","find","o","orderId","id","POID","remaining","remainingAmount","orderTotal","undefined","payments","orderPayments","filter","p","totalPaid","reduce","sum","payment","Math","max","paid","paymentStatus","error","fetchAccounts","response","fetch","data","json","assetAccounts","acct","type","accountMap","forEach","children","parentId","push","tree","err","handleChange","field","value","validateForm","newErrors","paymentAmount","formatCurrency","Object","keys","length","handleSubmit","general","newRemainingAmount","isFullPayment","paymentData","now","vendorId","createdAt","paymentMethod","accountId","accountName","getAccountNameById","accountType","getAccountTypeById","status","createdBy","source","existingPayments","updatedPayments","setItem","stringify","orderIndex","findIndex","lastPaymentDate","lastPaymentAmount","paymentHistory","newOrder","window","dispatchEvent","Event","message","accountList","name","foundInChildren","renderAccountOptions","level","map","repeat","code","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","size","onChange","e","target","step","placeholder","href","rows","disabled","_c","$RefreshReg$"],"sources":["C:/Users/Logic-Unit/my-account/src/components/AccountsPayable/RecordPaymentModal.jsx"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import { X, Calendar, DollarSign, CreditCard, FileText, AlertCircle } from 'lucide-react';\r\n// import { formatCurrency } from '../AccountsReceivable/AccountsReceivableUtils/formatters';\r\n\r\n// const RecordPaymentModal = ({ invoiceId, amount, onClose, onSubmit, onPaymentComplete, customerId, total }) => {\r\n//   const [formData, setFormData] = useState({\r\n//     date: new Date().toISOString().split('T')[0],\r\n//     amount: '',\r\n//     method: '',\r\n//     account: '',\r\n//     memo: ''\r\n//   });\r\n\r\n//   const [accounts, setAccounts] = useState([]);\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [errors, setErrors] = useState({});\r\n//   const [isAlreadyPaid, setIsAlreadyPaid] = useState(false);\r\n//   const [currentRemainingAmount, setCurrentRemainingAmount] = useState(amount);\r\n//   const [originalTotalAmount, setOriginalTotalAmount] = useState(total || amount);\r\n\r\n//   // Initialize payment data with props and localStorage data\r\n//   useEffect(() => {\r\n//     console.log(\"RecordPaymentModal props:\", { invoiceId, amount, total });\r\n    \r\n//     // First, set initial values from props\r\n//     const initialAmount = parseFloat(amount) || 0;\r\n//     const initialTotal = parseFloat(total) || initialAmount;\r\n    \r\n//     setCurrentRemainingAmount(initialAmount);\r\n//     setOriginalTotalAmount(initialTotal);\r\n//     setFormData(prev => ({ ...prev, amount: initialAmount.toString() }));\r\n    \r\n//     // Then check localStorage for additional/override data\r\n//     try {\r\n//       const existingOrders = JSON.parse(localStorage.getItem('orders') || '[]');\r\n//       const order = existingOrders.find(o => \r\n//         o.orderId === invoiceId || o.id === invoiceId || o.POID === invoiceId\r\n//       );\r\n\r\n//       if (order) {\r\n//         console.log(\"Found order in localStorage:\", order);\r\n        \r\n//         // Calculate remaining based on payment history if remainingAmount is not set\r\n//         let remaining = order.remainingAmount;\r\n//         let orderTotal = order.total;\r\n        \r\n//         if (remaining === undefined || remaining === null) {\r\n//           // If no remainingAmount field, calculate it from payments\r\n//           const payments = JSON.parse(localStorage.getItem('payments') || '[]');\r\n//           const orderPayments = payments.filter(p => \r\n//             p.orderId === invoiceId || p.invoiceId === invoiceId\r\n//           );\r\n          \r\n//           const totalPaid = orderPayments.reduce((sum, payment) => sum + payment.amount, 0);\r\n//           remaining = Math.max(0, orderTotal - totalPaid);\r\n//         }\r\n        \r\n//         // Only override props if we have valid data from localStorage\r\n//         if (remaining !== undefined && remaining !== null && remaining > 0) {\r\n//           setCurrentRemainingAmount(remaining);\r\n//           setFormData(prev => ({ ...prev, amount: remaining.toString() }));\r\n//         }\r\n        \r\n//         if (orderTotal !== undefined && orderTotal !== null && orderTotal > 0) {\r\n//           setOriginalTotalAmount(orderTotal);\r\n//         }\r\n        \r\n//         // Check if already paid\r\n//         if (order.paid || order.paymentStatus === 'paid' || remaining <= 0) {\r\n//           setIsAlreadyPaid(true);\r\n//         }\r\n//       }\r\n//     } catch (error) {\r\n//       console.error(\"Error processing localStorage data:\", error);\r\n//       // Fall back to the props in case of error\r\n//       console.log(\"Falling back to props due to error:\", { amount, total });\r\n//     }\r\n\r\n//     // Final safety check - ensure we have valid values\r\n//     if (originalTotalAmount <= 0 && initialTotal > 0) {\r\n//       setOriginalTotalAmount(initialTotal);\r\n//     }\r\n    \r\n//     if (currentRemainingAmount <= 0 && initialAmount > 0) {\r\n//       setCurrentRemainingAmount(initialAmount);\r\n//       setFormData(prev => ({ ...prev, amount: initialAmount.toString() }));\r\n//     }\r\n//   }, [invoiceId, amount, total]);\r\n\r\n//   // Fetch accounts on mount\r\n//   useEffect(() => {\r\n//     fetchAccounts();\r\n//   }, []);\r\n\r\n//   const fetchAccounts = async () => {\r\n//     try {\r\n//       const response = await fetch('http://localhost:8080/api/accounts');\r\n//       const data = await response.json();\r\n\r\n//       const assetAccounts = data.filter(acct => acct.type === 'assets');\r\n//       const accountMap = {};\r\n//       assetAccounts.forEach(acct => accountMap[acct.id] = { ...acct, children: [] });\r\n\r\n//       assetAccounts.forEach(acct => {\r\n//         if (acct.parentId && accountMap[acct.parentId]) {\r\n//           accountMap[acct.parentId].children.push(accountMap[acct.id]);\r\n//         }\r\n//       });\r\n\r\n//       const tree = assetAccounts.filter(acct => !acct.parentId || !accountMap[acct.parentId]);\r\n//       setAccounts(tree);\r\n//     } catch (err) {\r\n//       console.error('Failed to fetch accounts:', err);\r\n//     }\r\n//   };\r\n\r\n//   const handleChange = (field, value) => {\r\n//     setFormData(prev => ({ ...prev, [field]: value }));\r\n//     if (errors[field]) {\r\n//       setErrors(prev => ({ ...prev, [field]: '' }));\r\n//     }\r\n//   };\r\n\r\n\r\n\r\n//   const handleSubmit = async () => {\r\n//     if (isAlreadyPaid) {\r\n//       setErrors({\r\n//         general: 'This invoice has already been fully paid. No further payments allowed.'\r\n//       });\r\n//       return;\r\n//     }\r\n\r\n\r\n//     setLoading(true);\r\n\r\n//     try {\r\n//       const paymentAmount = parseFloat(formData.amount);\r\n//       const newRemainingAmount = Math.max(0, currentRemainingAmount - paymentAmount);\r\n//       const isFullPayment = newRemainingAmount <= 0;\r\n//       const paymentStatus = isFullPayment ? 'paid' : 'partial';\r\n\r\n//       // Create payment record\r\n//       const paymentData = {\r\n//         id: `PAY-${Date.now()}`,\r\n//         customerId: customerId || null,\r\n//         vendorId: customerId || null, // Added for APPaymentsTab compatibility\r\n//         orderId: invoiceId,\r\n//         date: formData.date,\r\n//         amount: paymentAmount,\r\n//         method: formData.method, // Match field name used in APPaymentsTab\r\n//         paymentMethod: formData.method,\r\n//         accountId: formData.account,\r\n//         accountName: getAccountNameById(formData.account, accounts) || 'Unknown Account',\r\n//         accountType: getAccountTypeById(formData.account, accounts) || 'Not specified',\r\n//         memo: formData.memo,\r\n//         status: paymentStatus,\r\n//         remainingAmount: newRemainingAmount,\r\n//         createdAt: new Date().toISOString(),\r\n//         createdBy: 'current_user'\r\n//       };\r\n\r\n//       // Save payment to localStorage\r\n//       const existingPayments = JSON.parse(localStorage.getItem('payments') || '[]');\r\n//       const updatedPayments = [...existingPayments, paymentData];\r\n//       localStorage.setItem('payments', JSON.stringify(updatedPayments));\r\n\r\n//       // Update order in localStorage\r\n//       const existingOrders = JSON.parse(localStorage.getItem('orders') || '[]');\r\n//       const orderIndex = existingOrders.findIndex(order =>\r\n//         order.orderId === invoiceId || order.id === invoiceId\r\n//       );\r\n\r\n//       if (orderIndex !== -1) {\r\n//         existingOrders[orderIndex] = {\r\n//           ...existingOrders[orderIndex],\r\n//           paid: isFullPayment,\r\n//           paymentStatus: paymentStatus,\r\n//           lastPaymentDate: formData.date,\r\n//           lastPaymentAmount: paymentAmount,\r\n//           remainingAmount: newRemainingAmount,\r\n//           paymentHistory: [\r\n//             ...(existingOrders[orderIndex].paymentHistory || []),\r\n//             paymentData.id\r\n//           ]\r\n//         };\r\n//         localStorage.setItem('orders', JSON.stringify(existingOrders));\r\n//       }\r\n\r\n//       // API Call\r\n//       const apiUrl = `https://api-pos.hulmsolutions.com/POS/accountinghamid/bea876f9-b274-4cd2-9f86-d28953bee69d/orders/Paid/${invoiceId}`;\r\n//       const payload = {\r\n//         customerId: customerId,\r\n//         orderId: invoiceId,\r\n//         paid: isFullPayment,\r\n//         billUnitId: \"2\",\r\n//         billStatus: \"pending\",\r\n//         amount: paymentAmount,         // ✅ actual amount being paid\r\n//         total: originalTotalAmount     // ✅ full invoice total\r\n//       };\r\n\r\n//       try {\r\n//         const apiResponse = await fetch(apiUrl, {\r\n//           method: \"PUT\",\r\n//           headers: {\r\n//             \"Content-Type\": \"application/json\",\r\n//             \"Authorization\": `Bearer $hAMID`\r\n//           },\r\n//           body: JSON.stringify(payload)\r\n//         });\r\n\r\n//         if (!apiResponse.ok) {\r\n//           console.warn(\"API call failed but continuing with local updates\");\r\n//         }\r\n//       } catch (apiError) {\r\n//         // Continue even if API fails\r\n//         console.warn(\"API call failed but continuing with local updates:\", apiError);\r\n//       }\r\n\r\n//       // Callbacks\r\n//       if (onSubmit) {\r\n//         onSubmit(paymentData, isFullPayment);\r\n//       }\r\n\r\n//       if (onPaymentComplete) {\r\n//         onPaymentComplete(paymentData, isFullPayment);\r\n//       }\r\n\r\n//       const message = isFullPayment\r\n//         ? \"Payment recorded successfully. Invoice is now fully paid.\"\r\n//         : `Partial payment of ${formatCurrency(paymentAmount)} recorded. Remaining balance: ${formatCurrency(newRemainingAmount)}`;\r\n\r\n//       console.log(message);\r\n      \r\n//       // Close the modal\r\n//       onClose();\r\n//     } catch (error) {\r\n//       console.error(\"Error recording payment:\", error);\r\n//       setErrors({ general: \"Failed to record payment. Please try again.\" });\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   const getAccountNameById = (accountId, accountList) => {\r\n//     for (const account of accountList) {\r\n//       if (account.id === accountId) {\r\n//         return account.name;\r\n//       }\r\n//       if (account.children && account.children.length > 0) {\r\n//         const foundInChildren = getAccountNameById(accountId, account.children);\r\n//         if (foundInChildren) return foundInChildren;\r\n//       }\r\n//     }\r\n//     return null;\r\n//   };\r\n  \r\n//   const getAccountTypeById = (accountId, accountList) => {\r\n//     for (const account of accountList) {\r\n//       if (account.id === accountId) {\r\n//         return account.type; // ← will return \"assets\", \"liabilities\", etc.\r\n//       }\r\n//       if (account.children && account.children.length > 0) {\r\n//         const foundInChildren = getAccountTypeById(accountId, account.children);\r\n//         if (foundInChildren) return foundInChildren;\r\n//       }\r\n//     }\r\n//     return null;\r\n//   };\r\n\r\n//   const renderAccountOptions = (accountList, level = 0) => {\r\n//     return accountList.map(account => (\r\n//       <React.Fragment key={account.id}>\r\n//         <option value={account.id}>\r\n//           {'-'.repeat(level * 2)} {account.code} - {account.name}\r\n//         </option>\r\n//         {account.children && account.children.length > 0 && (\r\n//           renderAccountOptions(account.children, level + 1)\r\n//         )}\r\n//       </React.Fragment>\r\n//     ));\r\n//   };\r\n\r\n//   const paymentAmount = parseFloat(formData.amount) || 0;\r\n//   const remainingAmount = Math.max(0, currentRemainingAmount - paymentAmount);\r\n//   const isFullPayment = remainingAmount <= 0 && paymentAmount > 0;\r\n\r\n//   return (\r\n//     <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\r\n//       <div className=\"bg-white rounded-xl shadow-2xl max-w-md w-full\">\r\n//         {/* Header */}\r\n//         <div className=\"px-6 py-4 border-b border-gray-200\">\r\n//           <div className=\"flex items-center justify-between\">\r\n//             <h2 className=\"text-xl font-semibold text-gray-900\">\r\n//               Record a payment for this invoice\r\n//             </h2>\r\n//             <button\r\n//               onClick={onClose}\r\n//               className=\"text-gray-400 hover:text-gray-600 transition-colors\"\r\n//             >\r\n//               <X size={24} />\r\n//             </button>\r\n//           </div>\r\n//         </div>\r\n\r\n//         {/* Form Body */}\r\n//         <div className=\"px-6 py-4 space-y-5\">\r\n//           {errors.general && (\r\n//             <div className=\"p-3 bg-red-50 border border-red-200 rounded-lg flex items-start gap-2\">\r\n//               <AlertCircle size={20} className=\"text-red-600 flex-shrink-0 mt-0.5\" />\r\n//               <span className=\"text-sm text-red-700\">{errors.general}</span>\r\n//             </div>\r\n//           )}\r\n\r\n//           {/* Show invoice information section */}\r\n//           <div className=\"p-4 bg-blue-50 border border-blue-200 rounded-lg\">\r\n//             <h3 className=\"text-sm font-semibold text-blue-800 mb-2\">Invoice Information</h3>\r\n//             <div className=\"grid grid-cols-2 gap-3\">\r\n//               <div>\r\n//                 <label className=\"text-xs text-blue-700\">Total Bill Amount:</label>\r\n//                 <p className=\"text-sm font-bold text-blue-900\">{formatCurrency(originalTotalAmount)}</p>\r\n//               </div>\r\n//               <div>\r\n//                 <label className=\"text-xs text-blue-700\">Remaining Amount:</label>\r\n//                 <p className=\"text-sm font-bold text-blue-900\">{formatCurrency(currentRemainingAmount)}</p>\r\n//               </div>\r\n//             </div>\r\n//           </div>\r\n            \r\n//           {/* Date Field */}\r\n//           <div>\r\n//             <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\">\r\n//               <Calendar size={16} />\r\n//               Date\r\n//             </label>\r\n//             <input\r\n//               type=\"date\"\r\n//               value={formData.date}\r\n//               onChange={(e) => handleChange('date', e.target.value)}\r\n//               className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\r\n//                 errors.date ? 'border-red-500' : 'border-gray-300'\r\n//               }`}\r\n//             />\r\n//             {errors.date && <span className=\"text-xs text-red-600 mt-1\">{errors.date}</span>}\r\n//           </div>\r\n\r\n//           {/* Amount Field */}\r\n//           <div>\r\n//             <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\">\r\n//               <DollarSign size={16} />\r\n//               Payment Amount\r\n//             </label>\r\n//             <div className=\"relative\">\r\n//               <span className=\"absolute left-3 top-1/2 -translate-y-1/2 text-gray-500 font-medium\">\r\n//                 Rs\r\n//               </span>\r\n//               <input\r\n//                 type=\"number\"\r\n//                 step=\"0.01\"\r\n//                 value={formData.amount}\r\n//                 onChange={(e) => handleChange('amount', e.target.value)}\r\n//                 className={`w-full pl-10 pr-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\r\n//                   errors.amount ? 'border-red-500' : 'border-gray-300'\r\n//                 }`}\r\n//                 placeholder=\"0.00\"\r\n              \r\n//               />\r\n//             </div>\r\n//             {errors.amount && <span className=\"text-xs text-red-600 mt-1\">{errors.amount}</span>}\r\n            \r\n//             {/* Display total bill amount below the amount field */}\r\n//             <div className=\"mt-2 text-sm flex items-center justify-between\">\r\n//               <span className=\"text-gray-700\">\r\n//                 Total Bill Amount: <span className=\"font-semibold\">{formatCurrency(originalTotalAmount)}</span>\r\n//               </span>\r\n              \r\n//               {paymentAmount > 0 && (\r\n//                 <span className={isFullPayment ? \"text-green-600 font-medium\" : \"text-orange-600\"}>\r\n//                   {isFullPayment ? (\r\n//                     \"Invoice will be fully paid\"\r\n//                   ) : (\r\n//                     <>Remaining: {formatCurrency(remainingAmount)}</>\r\n//                   )}\r\n//                 </span>\r\n//               )}\r\n//             </div>\r\n//           </div>\r\n\r\n//           {/* Payment Method */}\r\n//           <div>\r\n//             <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\">\r\n//               <CreditCard size={16} />\r\n//               Method\r\n//             </label>\r\n//             <select\r\n//               value={formData.method}\r\n//               onChange={(e) => handleChange('method', e.target.value)}\r\n//               className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\r\n//                 errors.method ? 'border-red-500' : 'border-gray-300'\r\n//               }`}\r\n//             >\r\n//               <option value=\"\">Select a payment method...</option>\r\n//               <option value=\"cash\">Cash</option>\r\n//               <option value=\"check\">Check</option>\r\n//               <option value=\"bank_transfer\">Bank Transfer</option>\r\n//               <option value=\"credit_card\">Credit Card</option>\r\n//               <option value=\"debit_card\">Debit Card</option>\r\n//               <option value=\"online\">Online Payment</option>\r\n//             </select>\r\n//             {errors.method && <span className=\"text-xs text-red-600 mt-1\">{errors.method}</span>}\r\n//           </div>\r\n\r\n//           {/* Account */}\r\n//           <div>\r\n//             <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\">\r\n//               <FileText size={16} />\r\n//               Account\r\n//             </label>\r\n//             <select\r\n//               value={formData.account}\r\n//               onChange={(e) => handleChange('account', e.target.value)}\r\n//               className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\r\n//                 errors.account ? 'border-red-500' : 'border-gray-300'\r\n//               }`}\r\n//             >\r\n//               <option value=\"\">Select a payment account...</option>\r\n//               {renderAccountOptions(accounts)}\r\n//             </select>\r\n//             {errors.account && <span className=\"text-xs text-red-600 mt-1\">{errors.account}</span>}\r\n//             <p className=\"text-xs text-gray-500 mt-1\">\r\n//               Any account into which you deposit and withdraw funds from.{' '}\r\n//               <a href=\"#\" className=\"text-blue-600 hover:text-blue-700\">Learn more</a>\r\n//             </p>\r\n//           </div>\r\n\r\n//           {/* Memo */}\r\n//           <div>\r\n//             <label className=\"text-sm font-medium text-gray-700 mb-1 block\">\r\n//               Memo / notes\r\n//             </label>\r\n//             <textarea\r\n//               value={formData.memo}\r\n//               onChange={(e) => handleChange('memo', e.target.value)}\r\n//               rows={3}\r\n//               className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\r\n//               placeholder=\"Add any additional notes...\"\r\n//             />\r\n//           </div>\r\n//         </div>\r\n\r\n//         {/* Footer */}\r\n//         <div className=\"px-6 py-4 border-t border-gray-200 flex items-center justify-end gap-3\">\r\n//           <button\r\n//             onClick={onClose}\r\n//             className=\"px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors\"\r\n//           >\r\n//             Cancel\r\n//           </button>\r\n//           <button\r\n//             onClick={handleSubmit}\r\n//             disabled={loading || !formData.amount || parseFloat(formData.amount) <= 0}\r\n//             className={`px-6 py-2 rounded-lg font-medium transition-colors ${\r\n//               loading || !formData.amount || parseFloat(formData.amount) <= 0\r\n//                 ? 'bg-gray-300 text-gray-500 cursor-not-allowed'\r\n//                 : 'bg-blue-600 text-white hover:bg-blue-700'\r\n//             }`}\r\n//           >\r\n//             {loading ? 'Processing...' : 'Submit'}\r\n//           </button>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default RecordPaymentModal;\r\n\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { X, Calendar, DollarSign, CreditCard, FileText, AlertCircle } from 'lucide-react';\r\n// import { formatCurrency } from '../AccountsReceivable/AccountsReceivableUtils/formatters';\r\n\r\nconst RecordPaymentModal = ({ invoiceId, amount, onClose, onSubmit, onPaymentComplete, customerId, total }) => {\r\n  const [formData, setFormData] = useState({\r\n    date: new Date().toISOString().split('T')[0],\r\n    amount: '',\r\n    method: '',\r\n    account: '',\r\n    memo: ''\r\n  });\r\n\r\n  const [accounts, setAccounts] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [errors, setErrors] = useState({});\r\n  const [isAlreadyPaid, setIsAlreadyPaid] = useState(false);\r\n  const [currentRemainingAmount, setCurrentRemainingAmount] = useState(amount);\r\n  const [originalTotalAmount, setOriginalTotalAmount] = useState(total || amount);\r\n\r\n  // Initialize payment data with props and localStorage data\r\n  useEffect(() => {\r\n    console.log(\"RecordPaymentModal props:\", { invoiceId, amount, total });\r\n    \r\n    // First, set initial values from props\r\n    const initialAmount = parseFloat(amount) || 0;\r\n    const initialTotal = parseFloat(total) || initialAmount;\r\n    \r\n    setCurrentRemainingAmount(initialAmount);\r\n    setOriginalTotalAmount(initialTotal);\r\n    setFormData(prev => ({ ...prev, amount: initialAmount.toString() }));\r\n    \r\n    // Then check localStorage for additional/override data\r\n    try {\r\n      const existingOrders = JSON.parse(localStorage.getItem('orders') || '[]');\r\n      const order = existingOrders.find(o => \r\n        o.orderId === invoiceId || o.id === invoiceId || o.POID === invoiceId\r\n      );\r\n\r\n      if (order) {\r\n        console.log(\"Found order in localStorage:\", order);\r\n        \r\n        // Calculate remaining based on payment history if remainingAmount is not set\r\n        let remaining = order.remainingAmount;\r\n        let orderTotal = order.total;\r\n        \r\n        if (remaining === undefined || remaining === null) {\r\n          // If no remainingAmount field, calculate it from payments\r\n          const payments = JSON.parse(localStorage.getItem('payments') || '[]');\r\n          const orderPayments = payments.filter(p => \r\n            p.orderId === invoiceId || p.invoiceId === invoiceId\r\n          );\r\n          \r\n          const totalPaid = orderPayments.reduce((sum, payment) => sum + payment.amount, 0);\r\n          remaining = Math.max(0, orderTotal - totalPaid);\r\n        }\r\n        \r\n        // Only override props if we have valid data from localStorage\r\n        if (remaining !== undefined && remaining !== null && remaining > 0) {\r\n          setCurrentRemainingAmount(remaining);\r\n          setFormData(prev => ({ ...prev, amount: remaining.toString() }));\r\n        }\r\n        \r\n        if (orderTotal !== undefined && orderTotal !== null && orderTotal > 0) {\r\n          setOriginalTotalAmount(orderTotal);\r\n        }\r\n        \r\n        // Check if already paid\r\n        if (order.paid || order.paymentStatus === 'paid' || remaining <= 0) {\r\n          setIsAlreadyPaid(true);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error processing localStorage data:\", error);\r\n      // Fall back to the props in case of error\r\n      console.log(\"Falling back to props due to error:\", { amount, total });\r\n    }\r\n\r\n    // Final safety check - ensure we have valid values\r\n    if (originalTotalAmount <= 0 && initialTotal > 0) {\r\n      setOriginalTotalAmount(initialTotal);\r\n    }\r\n    \r\n    if (currentRemainingAmount <= 0 && initialAmount > 0) {\r\n      setCurrentRemainingAmount(initialAmount);\r\n      setFormData(prev => ({ ...prev, amount: initialAmount.toString() }));\r\n    }\r\n  }, [invoiceId, amount, total]);\r\n\r\n  // Fetch accounts on mount\r\n  useEffect(() => {\r\n    fetchAccounts();\r\n  }, []);\r\n\r\n  const fetchAccounts = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:8080/api/accounts');\r\n      const data = await response.json();\r\n\r\n      const assetAccounts = data.filter(acct => acct.type === 'assets');\r\n      const accountMap = {};\r\n      assetAccounts.forEach(acct => accountMap[acct.id] = { ...acct, children: [] });\r\n\r\n      assetAccounts.forEach(acct => {\r\n        if (acct.parentId && accountMap[acct.parentId]) {\r\n          accountMap[acct.parentId].children.push(accountMap[acct.id]);\r\n        }\r\n      });\r\n\r\n      const tree = assetAccounts.filter(acct => !acct.parentId || !accountMap[acct.parentId]);\r\n      setAccounts(tree);\r\n    } catch (err) {\r\n      console.error('Failed to fetch accounts:', err);\r\n    }\r\n  };\r\n\r\n  const handleChange = (field, value) => {\r\n    setFormData(prev => ({ ...prev, [field]: value }));\r\n    if (errors[field]) {\r\n      setErrors(prev => ({ ...prev, [field]: '' }));\r\n    }\r\n  };\r\n\r\n  const validateForm = () => {\r\n    const newErrors = {};\r\n    \r\n    if (!formData.date) {\r\n      newErrors.date = 'Payment date is required';\r\n    }\r\n    \r\n    const paymentAmount = parseFloat(formData.amount);\r\n    if (!formData.amount || paymentAmount <= 0) {\r\n      newErrors.amount = 'Valid payment amount is required';\r\n    } else if (paymentAmount > currentRemainingAmount) {\r\n      newErrors.amount = `Payment cannot exceed remaining amount of ${formatCurrency(currentRemainingAmount)}`;\r\n    }\r\n    \r\n    if (!formData.method) {\r\n      newErrors.method = 'Payment method is required';\r\n    }\r\n    \r\n    if (!formData.account) {\r\n      newErrors.account = 'Deposit account is required';\r\n    }\r\n\r\n    setErrors(newErrors);\r\n    return Object.keys(newErrors).length === 0;\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    if (isAlreadyPaid) {\r\n      setErrors({\r\n        general: 'This invoice has already been fully paid. No further payments allowed.'\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (!validateForm()) return;\r\n\r\n    setLoading(true);\r\n\r\n    try {\r\n      const paymentAmount = parseFloat(formData.amount);\r\n      const newRemainingAmount = Math.max(0, currentRemainingAmount - paymentAmount);\r\n      const isFullPayment = newRemainingAmount <= 0;\r\n      const paymentStatus = isFullPayment ? 'paid' : 'partial';\r\n\r\n      // Create payment record formatted for compatibility with APPaymentsTab\r\n      const paymentData = {\r\n        id: `PAY-${Date.now()}`,\r\n        invoiceId: invoiceId, // Use invoiceId for APPaymentsTab compatibility\r\n        orderId: invoiceId,\r\n        customerId: customerId || null,\r\n        vendorId: customerId || null, // Keep for backward compatibility\r\n        date: formData.date,\r\n        createdAt: new Date().toISOString(),\r\n        amount: paymentAmount,\r\n        total: originalTotalAmount,\r\n        paymentMethod: formData.method, // Format for APPaymentsTab\r\n        method: formData.method, // Keep for backward compatibility\r\n        accountId: formData.account,\r\n        accountName: getAccountNameById(formData.account, accounts) || 'Not specified',\r\n        accountType: getAccountTypeById(formData.account, accounts) || 'Not specified',\r\n        memo: formData.memo,\r\n        status: paymentStatus,\r\n        remainingAmount: newRemainingAmount,\r\n        createdBy: 'current_user',\r\n        source: 'manual' // To distinguish from API-sourced payments\r\n      };\r\n\r\n      // Save payment to localStorage\r\n      const existingPayments = JSON.parse(localStorage.getItem('payments') || '[]');\r\n      const updatedPayments = [...existingPayments, paymentData];\r\n      localStorage.setItem('payments', JSON.stringify(updatedPayments));\r\n\r\n      // Update order in localStorage\r\n      const existingOrders = JSON.parse(localStorage.getItem('orders') || '[]');\r\n      const orderIndex = existingOrders.findIndex(order =>\r\n        order.orderId === invoiceId || order.id === invoiceId || order.POID === invoiceId\r\n      );\r\n\r\n      if (orderIndex !== -1) {\r\n        existingOrders[orderIndex] = {\r\n          ...existingOrders[orderIndex],\r\n          paid: isFullPayment,\r\n          paymentStatus: paymentStatus,\r\n          lastPaymentDate: formData.date,\r\n          lastPaymentAmount: paymentAmount,\r\n          remainingAmount: newRemainingAmount,\r\n          paymentHistory: [\r\n            ...(existingOrders[orderIndex].paymentHistory || []),\r\n            paymentData.id\r\n          ]\r\n        };\r\n        localStorage.setItem('orders', JSON.stringify(existingOrders));\r\n      } else {\r\n        // If order doesn't exist in localStorage, create a new entry\r\n        const newOrder = {\r\n          id: invoiceId,\r\n          orderId: invoiceId,\r\n          POID: invoiceId,\r\n          vendorId: customerId,\r\n          total: originalTotalAmount,\r\n          paid: isFullPayment,\r\n          paymentStatus: paymentStatus,\r\n          lastPaymentDate: formData.date,\r\n          lastPaymentAmount: paymentAmount,\r\n          remainingAmount: newRemainingAmount,\r\n          paymentHistory: [paymentData.id],\r\n          createdAt: new Date().toISOString()\r\n        };\r\n        existingOrders.push(newOrder);\r\n        localStorage.setItem('orders', JSON.stringify(existingOrders));\r\n      }\r\n\r\n      // Notify other components that payments have changed\r\n      window.dispatchEvent(new Event('storage'));\r\n      window.dispatchEvent(new Event('paymentsUpdated'));\r\n\r\n      // Callbacks\r\n      if (onSubmit) {\r\n        onSubmit(paymentData, isFullPayment);\r\n      }\r\n\r\n      if (onPaymentComplete) {\r\n        onPaymentComplete(paymentData, isFullPayment);\r\n      }\r\n\r\n      const message = isFullPayment\r\n        ? \"Payment recorded successfully. Invoice is now fully paid.\"\r\n        : `Partial payment of ${formatCurrency(paymentAmount)} recorded. Remaining balance: ${formatCurrency(newRemainingAmount)}`;\r\n\r\n      console.log(message);\r\n      \r\n      // Close the modal\r\n      onClose();\r\n    } catch (error) {\r\n      console.error(\"Error recording payment:\", error);\r\n      setErrors({ general: \"Failed to record payment. Please try again.\" });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const getAccountNameById = (accountId, accountList) => {\r\n    for (const account of accountList) {\r\n      if (account.id === accountId) {\r\n        return account.name;\r\n      }\r\n      if (account.children && account.children.length > 0) {\r\n        const foundInChildren = getAccountNameById(accountId, account.children);\r\n        if (foundInChildren) return foundInChildren;\r\n      }\r\n    }\r\n    return null;\r\n  };\r\n  \r\n  const getAccountTypeById = (accountId, accountList) => {\r\n    for (const account of accountList) {\r\n      if (account.id === accountId) {\r\n        return account.type; // ← will return \"assets\", \"liabilities\", etc.\r\n      }\r\n      if (account.children && account.children.length > 0) {\r\n        const foundInChildren = getAccountTypeById(accountId, account.children);\r\n        if (foundInChildren) return foundInChildren;\r\n      }\r\n    }\r\n    return null;\r\n  };\r\n\r\n  const renderAccountOptions = (accountList, level = 0) => {\r\n    return accountList.map(account => (\r\n      <React.Fragment key={account.id}>\r\n        <option value={account.id}>\r\n          {'-'.repeat(level * 2)} {account.code} - {account.name}\r\n        </option>\r\n        {account.children && account.children.length > 0 && (\r\n          renderAccountOptions(account.children, level + 1)\r\n        )}\r\n      </React.Fragment>\r\n    ));\r\n  };\r\n\r\n  const paymentAmount = parseFloat(formData.amount) || 0;\r\n  const remainingAmount = Math.max(0, currentRemainingAmount - paymentAmount);\r\n  const isFullPayment = remainingAmount <= 0 && paymentAmount > 0;\r\n\r\n  return (\r\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\r\n      <div className=\"bg-white rounded-xl shadow-2xl max-w-md w-full\">\r\n        {/* Header */}\r\n        <div className=\"px-6 py-4 border-b border-gray-200\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <h2 className=\"text-xl font-semibold text-gray-900\">\r\n              Record a payment for this invoice\r\n            </h2>\r\n            <button\r\n              onClick={onClose}\r\n              className=\"text-gray-400 hover:text-gray-600 transition-colors\"\r\n            >\r\n              <X size={24} />\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Form Body */}\r\n        <div className=\"px-6 py-4 space-y-5\">\r\n          {errors.general && (\r\n            <div className=\"p-3 bg-red-50 border border-red-200 rounded-lg flex items-start gap-2\">\r\n              <AlertCircle size={20} className=\"text-red-600 flex-shrink-0 mt-0.5\" />\r\n              <span className=\"text-sm text-red-700\">{errors.general}</span>\r\n            </div>\r\n          )}\r\n\r\n          {/* Show invoice information section */}\r\n          <div className=\"p-4 bg-blue-50 border border-blue-200 rounded-lg\">\r\n            <h3 className=\"text-sm font-semibold text-blue-800 mb-2\">Invoice Information</h3>\r\n            <div className=\"grid grid-cols-2 gap-3\">\r\n              <div>\r\n                <label className=\"text-xs text-blue-700\">Total Bill Amount:</label>\r\n                <p className=\"text-sm font-bold text-blue-900\">{formatCurrency(originalTotalAmount)}</p>\r\n              </div>\r\n              <div>\r\n                <label className=\"text-xs text-blue-700\">Remaining Amount:</label>\r\n                <p className=\"text-sm font-bold text-blue-900\">{formatCurrency(currentRemainingAmount)}</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n            \r\n          {/* Date Field */}\r\n          <div>\r\n            <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\">\r\n              <Calendar size={16} />\r\n              Date\r\n            </label>\r\n            <input\r\n              type=\"date\"\r\n              value={formData.date}\r\n              onChange={(e) => handleChange('date', e.target.value)}\r\n              className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\r\n                errors.date ? 'border-red-500' : 'border-gray-300'\r\n              }`}\r\n            />\r\n            {errors.date && <span className=\"text-xs text-red-600 mt-1\">{errors.date}</span>}\r\n          </div>\r\n\r\n          {/* Amount Field */}\r\n          <div>\r\n            <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\">\r\n              <DollarSign size={16} />\r\n              Payment Amount\r\n            </label>\r\n            <div className=\"relative\">\r\n              <span className=\"absolute left-3 top-1/2 -translate-y-1/2 text-gray-500 font-medium\">\r\n                Rs\r\n              </span>\r\n              <input\r\n                type=\"number\"\r\n                step=\"0.01\"\r\n                value={formData.amount}\r\n                onChange={(e) => handleChange('amount', e.target.value)}\r\n                className={`w-full pl-10 pr-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\r\n                  errors.amount ? 'border-red-500' : 'border-gray-300'\r\n                }`}\r\n                placeholder=\"0.00\"\r\n                max={currentRemainingAmount}\r\n              />\r\n            </div>\r\n            {errors.amount && <span className=\"text-xs text-red-600 mt-1\">{errors.amount}</span>}\r\n            \r\n            {/* Display total bill amount below the amount field */}\r\n            <div className=\"mt-2 text-sm flex items-center justify-between\">\r\n              <span className=\"text-gray-700\">\r\n                Total Bill Amount: <span className=\"font-semibold\">{formatCurrency(originalTotalAmount)}</span>\r\n              </span>\r\n              \r\n              {paymentAmount > 0 && (\r\n                <span className={isFullPayment ? \"text-green-600 font-medium\" : \"text-orange-600\"}>\r\n                  {isFullPayment ? (\r\n                    \"Invoice will be fully paid\"\r\n                  ) : (\r\n                    <>Remaining: {formatCurrency(remainingAmount)}</>\r\n                  )}\r\n                </span>\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Payment Method */}\r\n          <div>\r\n            <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\">\r\n              <CreditCard size={16} />\r\n              Method\r\n            </label>\r\n            <select\r\n              value={formData.method}\r\n              onChange={(e) => handleChange('method', e.target.value)}\r\n              className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\r\n                errors.method ? 'border-red-500' : 'border-gray-300'\r\n              }`}\r\n            >\r\n              <option value=\"\">Select a payment method...</option>\r\n              <option value=\"cash\">Cash</option>\r\n              <option value=\"check\">Check</option>\r\n              <option value=\"bank_transfer\">Bank Transfer</option>\r\n              <option value=\"credit_card\">Credit Card</option>\r\n              <option value=\"debit_card\">Debit Card</option>\r\n              <option value=\"online\">Online Payment</option>\r\n            </select>\r\n            {errors.method && <span className=\"text-xs text-red-600 mt-1\">{errors.method}</span>}\r\n          </div>\r\n\r\n          {/* Account */}\r\n          <div>\r\n            <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-1\">\r\n              <FileText size={16} />\r\n              Account\r\n            </label>\r\n            <select\r\n              value={formData.account}\r\n              onChange={(e) => handleChange('account', e.target.value)}\r\n              className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\r\n                errors.account ? 'border-red-500' : 'border-gray-300'\r\n              }`}\r\n            >\r\n              <option value=\"\">Select a payment account...</option>\r\n              {renderAccountOptions(accounts)}\r\n            </select>\r\n            {errors.account && <span className=\"text-xs text-red-600 mt-1\">{errors.account}</span>}\r\n            <p className=\"text-xs text-gray-500 mt-1\">\r\n              Any account into which you deposit and withdraw funds from.{' '}\r\n              <a href=\"#\" className=\"text-blue-600 hover:text-blue-700\">Learn more</a>\r\n            </p>\r\n          </div>\r\n\r\n          {/* Memo */}\r\n          <div>\r\n            <label className=\"text-sm font-medium text-gray-700 mb-1 block\">\r\n              Memo / notes\r\n            </label>\r\n            <textarea\r\n              value={formData.memo}\r\n              onChange={(e) => handleChange('memo', e.target.value)}\r\n              rows={3}\r\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\r\n              placeholder=\"Add any additional notes...\"\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        {/* Footer */}\r\n        <div className=\"px-6 py-4 border-t border-gray-200 flex items-center justify-end gap-3\">\r\n          <button\r\n            onClick={onClose}\r\n            className=\"px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors\"\r\n          >\r\n            Cancel\r\n          </button>\r\n          <button\r\n            onClick={handleSubmit}\r\n            disabled={loading || !formData.amount || parseFloat(formData.amount) <= 0}\r\n            className={`px-6 py-2 rounded-lg font-medium transition-colors ${\r\n              loading || !formData.amount || parseFloat(formData.amount) <= 0\r\n                ? 'bg-gray-300 text-gray-500 cursor-not-allowed'\r\n                : 'bg-blue-600 text-white hover:bg-blue-700'\r\n            }`}\r\n          >\r\n            {loading ? 'Processing...' : 'Submit'}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RecordPaymentModal;"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,CAAC,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,WAAW,QAAQ,cAAc;AACzF;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEA,MAAMC,kBAAkB,GAAGA,CAAC;EAAEC,SAAS;EAAEC,MAAM;EAAEC,OA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}