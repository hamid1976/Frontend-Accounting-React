{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Logic-Unit\\\\my-account\\\\src\\\\pages\\\\GeneralLedger.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import { \n//   Book, \n//   Plus, \n//   Filter, \n//   Search, \n//   Calendar, \n//   FileText, \n//   Edit, \n//   Trash2, \n//   Save, \n//   X, \n//   AlertCircle,\n//   CheckCircle,\n//   DollarSign,\n//   TrendingUp,\n//   Eye,\n//   Download\n// } from 'lucide-react';\n\n// const GeneralLedger = () => {\n//   const [journalEntries, setJournalEntries] = useState([]);\n//   const [accounts, setAccounts] = useState([]);\n//   const [filteredEntries, setFilteredEntries] = useState([]);\n//   const [selectedEntry, setSelectedEntry] = useState(null);\n//   const [isAddingEntry, setIsAddingEntry] = useState(false);\n//   const [filters, setFilters] = useState({\n//     dateFrom: '',\n//     dateTo: '',\n//     accountId: '',\n//     transactionType: 'all',\n//     searchTerm: ''\n//   });\n//   const [trialBalance, setTrialBalance] = useState([]);\n//   const [showTrialBalance, setShowTrialBalance] = useState(false);\n//   const [newEntry, setNewEntry] = useState({\n//     date: new Date().toISOString().split('T')[0],\n//     description: '',\n//     reference: '',\n//     entries: [\n//       { accountId: '', debit: 0, credit: 0, description: '' },\n//       { accountId: '', debit: 0, credit: 0, description: '' }\n//     ]\n//   });\n\n//   // Sample Chart of Accounts\n//   const chartOfAccounts = [\n//     { id: '1111', code: '1111', name: 'Petty Cash', type: 'assets' },\n//     { id: '1112', code: '1112', name: 'Bank - Main Account', type: 'assets' },\n//     { id: '1120', code: '1120', name: 'Accounts Receivable', type: 'assets' },\n//     { id: '1130', code: '1130', name: 'Inventory', type: 'assets' },\n//     { id: '2110', code: '2110', name: 'Accounts Payable', type: 'liabilities' },\n//     { id: '2130', code: '2130', name: 'Sales Tax Payable', type: 'liabilities' },\n//     { id: '4100', code: '4100', name: 'Sales Revenue - Medical', type: 'revenue' },\n//     { id: '5100', code: '5100', name: 'Cost of Goods Sold', type: 'expenses' },\n//     { id: '5200', code: '5200', name: 'Purchase Expenses', type: 'expenses' },\n//     { id: '5210', code: '5210', name: 'Office Supplies', type: 'expenses' }\n//   ];\n\n//   useEffect(() => {\n//     setAccounts(chartOfAccounts);\n//     loadSampleJournalEntries();\n//   }, []);\n\n//   useEffect(() => {\n//     filterEntries();\n//   }, [journalEntries, filters]);\n\n//   const loadSampleJournalEntries = () => {\n//     const sampleEntries = [\n//       {\n//         id: 'JE001',\n//         date: '2025-01-15',\n//         description: 'POS Sale #POS001 - Medical products',\n//         reference: 'POS001',\n//         transactionType: 'automatic',\n//         source: 'POS',\n//         status: 'posted',\n//         entries: [\n//           { accountId: '1111', accountName: 'Petty Cash', debit: 60.50, credit: 0, description: 'Cash received from customer' },\n//           { accountId: '4100', accountName: 'Sales Revenue - Medical', debit: 0, credit: 55.00, description: 'Revenue from medical products' },\n//           { accountId: '2130', accountName: 'Sales Tax Payable', debit: 0, credit: 5.50, description: 'Sales tax collected' },\n//           { accountId: '5100', accountName: 'Cost of Goods Sold', debit: 33.00, credit: 0, description: 'Cost of products sold' },\n//           { accountId: '1130', accountName: 'Inventory', debit: 0, credit: 33.00, description: 'Inventory reduction' }\n//         ],\n//         totalDebit: 93.50,\n//         totalCredit: 93.50,\n//         createdAt: '2025-01-15T10:30:00Z'\n//       },\n//       {\n//         id: 'JE002',\n//         date: '2025-01-14',\n//         description: 'Purchase Order #PO002 - Medical inventory',\n//         reference: 'PO002',\n//         transactionType: 'automatic',\n//         source: 'Purchase',\n//         status: 'posted',\n//         entries: [\n//           { accountId: '1130', accountName: 'Inventory', debit: 350.00, credit: 0, description: 'Medical products purchased' },\n//           { accountId: '2110', accountName: 'Accounts Payable', debit: 0, credit: 350.00, description: 'Amount owed to Medical Supply Co.' }\n//         ],\n//         totalDebit: 350.00,\n//         totalCredit: 350.00,\n//         createdAt: '2025-01-14T14:20:00Z'\n//       },\n//       {\n//         id: 'JE003',\n//         date: '2025-01-13',\n//         description: 'Manual adjustment - Inventory count variance',\n//         reference: 'ADJ001',\n//         transactionType: 'manual',\n//         source: 'Manual',\n//         status: 'posted',\n//         entries: [\n//           { accountId: '1130', accountName: 'Inventory', debit: 25.00, credit: 0, description: 'Inventory adjustment - undercount' },\n//           { accountId: '5200', accountName: 'Purchase Expenses', debit: 0, credit: 25.00, description: 'Adjustment to purchase variance' }\n//         ],\n//         totalDebit: 25.00,\n//         totalCredit: 25.00,\n//         createdAt: '2025-01-13T16:45:00Z'\n//       },\n//       {\n//         id: 'JE004',\n//         date: '2025-01-15',\n//         description: 'POS Sale #POS002 - Medical products',\n//         reference: 'POS002',\n//         transactionType: 'automatic',\n//         source: 'POS',\n//         status: 'posted',\n//         entries: [\n//           { accountId: '1112', accountName: 'Bank - Main Account', debit: 85.00, credit: 0, description: 'Card payment received' },\n//           { accountId: '4100', accountName: 'Sales Revenue - Medical', debit: 0, credit: 77.27, description: 'Revenue from medical products' },\n//           { accountId: '2130', accountName: 'Sales Tax Payable', debit: 0, credit: 7.73, description: 'Sales tax collected' },\n//           { accountId: '5100', accountName: 'Cost of Goods Sold', debit: 46.36, credit: 0, description: 'Cost of products sold' },\n//           { accountId: '1130', accountName: 'Inventory', debit: 0, credit: 46.36, description: 'Inventory reduction' }\n//         ],\n//         totalDebit: 131.36,\n//         totalCredit: 131.36,\n//         createdAt: '2025-01-15T15:20:00Z'\n//       }\n//     ];\n\n//     setJournalEntries(sampleEntries);\n//   };\n\n//   const filterEntries = () => {\n//     let filtered = [...journalEntries];\n\n//     if (filters.dateFrom) {\n//       filtered = filtered.filter(entry => entry.date >= filters.dateFrom);\n//     }\n//     if (filters.dateTo) {\n//       filtered = filtered.filter(entry => entry.date <= filters.dateTo);\n//     }\n//     if (filters.accountId) {\n//       filtered = filtered.filter(entry => \n//         entry.entries.some(e => e.accountId === filters.accountId)\n//       );\n//     }\n//     if (filters.transactionType !== 'all') {\n//       filtered = filtered.filter(entry => entry.transactionType === filters.transactionType);\n//     }\n//     if (filters.searchTerm) {\n//       const term = filters.searchTerm.toLowerCase();\n//       filtered = filtered.filter(entry => \n//         entry.description.toLowerCase().includes(term) ||\n//         entry.reference.toLowerCase().includes(term) ||\n//         entry.entries.some(e => e.description.toLowerCase().includes(term))\n//       );\n//     }\n\n//     setFilteredEntries(filtered);\n//   };\n\n//   const generateTrialBalance = () => {\n//     const balances = {};\n\n//     // Initialize all accounts\n//     chartOfAccounts.forEach(account => {\n//       balances[account.id] = {\n//         accountId: account.id,\n//         accountCode: account.code,\n//         accountName: account.name,\n//         accountType: account.type,\n//         debit: 0,\n//         credit: 0,\n//         balance: 0\n//       };\n//     });\n\n//     // Calculate balances from journal entries\n//     journalEntries.forEach(entry => {\n//       if (entry.status === 'posted') {\n//         entry.entries.forEach(entryLine => {\n//           if (balances[entryLine.accountId]) {\n//             balances[entryLine.accountId].debit += entryLine.debit;\n//             balances[entryLine.accountId].credit += entryLine.credit;\n//           }\n//         });\n//       }\n//     });\n\n//     // Calculate net balances\n//     Object.values(balances).forEach(account => {\n//       if (account.accountType === 'assets' || account.accountType === 'expenses') {\n//         account.balance = account.debit - account.credit;\n//       } else {\n//         account.balance = account.credit - account.debit;\n//       }\n//     });\n\n//     const trialBalanceData = Object.values(balances)\n//       .filter(account => account.debit !== 0 || account.credit !== 0)\n//       .sort((a, b) => a.accountCode.localeCompare(b.accountCode));\n\n//     setTrialBalance(trialBalanceData);\n//     setShowTrialBalance(true);\n//   };\n\n//   const addEntryLine = () => {\n//     setNewEntry({\n//       ...newEntry,\n//       entries: [...newEntry.entries, { accountId: '', debit: 0, credit: 0, description: '' }]\n//     });\n//   };\n\n//   const removeEntryLine = (index) => {\n//     if (newEntry.entries.length > 2) {\n//       const updatedEntries = newEntry.entries.filter((_, i) => i !== index);\n//       setNewEntry({ ...newEntry, entries: updatedEntries });\n//     }\n//   };\n\n//   const updateEntryLine = (index, field, value) => {\n//     const updatedEntries = [...newEntry.entries];\n//     updatedEntries[index] = { ...updatedEntries[index], [field]: value };\n//     setNewEntry({ ...newEntry, entries: updatedEntries });\n//   };\n\n//   const calculateTotals = (entries) => {\n//     const totalDebit = entries.reduce((sum, entry) => sum + (parseFloat(entry.debit) || 0), 0);\n//     const totalCredit = entries.reduce((sum, entry) => sum + (parseFloat(entry.credit) || 0), 0);\n//     return { totalDebit, totalCredit };\n//   };\n\n//   const isBalanced = (entries) => {\n//     const { totalDebit, totalCredit } = calculateTotals(entries);\n//     return Math.abs(totalDebit - totalCredit) < 0.01;\n//   };\n\n//   const saveJournalEntry = () => {\n//     if (!newEntry.description || !newEntry.entries.every(e => e.accountId)) {\n//       alert('Please fill in all required fields');\n//       return;\n//     }\n\n//     if (!isBalanced(newEntry.entries)) {\n//       alert('Journal entry must be balanced - total debits must equal total credits');\n//       return;\n//     }\n\n//     const { totalDebit, totalCredit } = calculateTotals(newEntry.entries);\n\n//     // Add account names to entries\n//     const entriesWithNames = newEntry.entries.map(entry => ({\n//       ...entry,\n//       accountName: accounts.find(acc => acc.id === entry.accountId)?.name || '',\n//       debit: parseFloat(entry.debit) || 0,\n//       credit: parseFloat(entry.credit) || 0\n//     }));\n\n//     const journalEntry = {\n//       id: `JE${String(journalEntries.length + 1).padStart(3, '0')}`,\n//       date: newEntry.date,\n//       description: newEntry.description,\n//       reference: newEntry.reference || `MAN${Date.now()}`,\n//       transactionType: 'manual',\n//       source: 'Manual',\n//       status: 'posted',\n//       entries: entriesWithNames,\n//       totalDebit,\n//       totalCredit,\n//       createdAt: new Date().toISOString()\n//     };\n\n//     setJournalEntries([...journalEntries, journalEntry]);\n\n//     // Reset form\n//     setNewEntry({\n//       date: new Date().toISOString().split('T')[0],\n//       description: '',\n//       reference: '',\n//       entries: [\n//         { accountId: '', debit: 0, credit: 0, description: '' },\n//         { accountId: '', debit: 0, credit: 0, description: '' }\n//       ]\n//     });\n//     setIsAddingEntry(false);\n//   };\n\n//   const getAccountName = (accountId) => {\n//     const account = accounts.find(acc => acc.id === accountId);\n//     return account ? `${account.code} - ${account.name}` : '';\n//   };\n\n//   const { totalDebit, totalCredit } = calculateTotals(newEntry.entries);\n//   const entryIsBalanced = isBalanced(newEntry.entries);\n\n//   return (\n//     <div className=\"max-w-7xl mx-auto p-6 bg-white\">\n//       {/* Header */}\n//       <div className=\"mb-8\">\n//         <h1 className=\"text-3xl font-bold text-gray-900 mb-2 flex items-center\">\n//           <Book className=\"mr-3 text-emerald-600\" />\n//           General Ledger\n//         </h1>\n//         <p className=\"text-gray-600\">Real-time transaction recording and journal entry management</p>\n//       </div>\n\n//       {/* Quick Stats */}\n//       <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n//         <div className=\"bg-blue-50 p-4 rounded-lg border border-blue-200\">\n//           <div className=\"flex items-center justify-between\">\n//             <div>\n//               <p className=\"text-blue-600 text-sm font-medium\">Total Entries</p>\n//               <p className=\"text-2xl font-bold text-blue-900\">{journalEntries.length}</p>\n//             </div>\n//             <FileText className=\"text-blue-600\" size={24} />\n//           </div>\n//         </div>\n\n//         <div className=\"bg-green-50 p-4 rounded-lg border border-green-200\">\n//           <div className=\"flex items-center justify-between\">\n//             <div>\n//               <p className=\"text-green-600 text-sm font-medium\">Automatic Entries</p>\n//               <p className=\"text-2xl font-bold text-green-900\">\n//                 {journalEntries.filter(e => e.transactionType === 'automatic').length}\n//               </p>\n//             </div>\n//             <TrendingUp className=\"text-green-600\" size={24} />\n//           </div>\n//         </div>\n\n//         <div className=\"bg-orange-50 p-4 rounded-lg border border-orange-200\">\n//           <div className=\"flex items-center justify-between\">\n//             <div>\n//               <p className=\"text-orange-600 text-sm font-medium\">Manual Entries</p>\n//               <p className=\"text-2xl font-bold text-orange-900\">\n//                 {journalEntries.filter(e => e.transactionType === 'manual').length}\n//               </p>\n//             </div>\n//             <Edit className=\"text-orange-600\" size={24} />\n//           </div>\n//         </div>\n\n//         <div className=\"bg-purple-50 p-4 rounded-lg border border-purple-200\">\n//           <div className=\"flex items-center justify-between\">\n//             <div>\n//               <p className=\"text-purple-600 text-sm font-medium\">Total Value</p>\n//               <p className=\"text-2xl font-bold text-purple-900\">\n//                 ${journalEntries.reduce((sum, entry) => sum + entry.totalDebit, 0).toFixed(2)}\n//               </p>\n//             </div>\n//             <DollarSign className=\"text-purple-600\" size={24} />\n//           </div>\n//         </div>\n//       </div>\n\n//       {/* Controls */}\n//       <div className=\"flex flex-wrap items-center justify-between gap-4 mb-6\">\n//         <div className=\"flex flex-wrap items-center gap-4\">\n//           {/* Date Filters */}\n//           <div className=\"flex items-center space-x-2\">\n//             <Calendar size={16} className=\"text-gray-400\" />\n//             <input\n//               type=\"date\"\n//               value={filters.dateFrom}\n//               onChange={(e) => setFilters({ ...filters, dateFrom: e.target.value })}\n//               className=\"px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\n//               placeholder=\"From\"\n//             />\n//             <span className=\"text-gray-500\">to</span>\n//             <input\n//               type=\"date\"\n//               value={filters.dateTo}\n//               onChange={(e) => setFilters({ ...filters, dateTo: e.target.value })}\n//               className=\"px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\n//               placeholder=\"To\"\n//             />\n//           </div>\n\n//           {/* Account Filter */}\n//           <div className=\"relative\">\n//             <Filter className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" size={16} />\n//             <select\n//               value={filters.accountId}\n//               onChange={(e) => setFilters({ ...filters, accountId: e.target.value })}\n//               className=\"pl-10 pr-8 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\n//             >\n//               <option value=\"\">All Accounts</option>\n//               {accounts.map(account => (\n//                 <option key={account.id} value={account.id}>\n//                   {account.code} - {account.name}\n//                 </option>\n//               ))}\n//             </select>\n//           </div>\n\n//           {/* Transaction Type Filter */}\n//           <select\n//             value={filters.transactionType}\n//             onChange={(e) => setFilters({ ...filters, transactionType: e.target.value })}\n//             className=\"px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\n//           >\n//             <option value=\"all\">All Types</option>\n//             <option value=\"automatic\">Automatic</option>\n//             <option value=\"manual\">Manual</option>\n//           </select>\n\n//           {/* Search */}\n//           <div className=\"relative\">\n//             <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" size={16} />\n//             <input\n//               type=\"text\"\n//               placeholder=\"Search entries...\"\n//               value={filters.searchTerm}\n//               onChange={(e) => setFilters({ ...filters, searchTerm: e.target.value })}\n//               className=\"pl-10 pr-4 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\n//             />\n//           </div>\n//         </div>\n\n//         <div className=\"flex space-x-3\">\n//           <button\n//             onClick={() => setIsAddingEntry(true)}\n//             className=\"px-4 py-2 bg-emerald-600 text-white rounded-lg hover:bg-emerald-700 flex items-center space-x-2\"\n//           >\n//             <Plus size={16} />\n//             <span>Add Entry</span>\n//           </button>\n//           <button\n//             onClick={generateTrialBalance}\n//             className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center space-x-2\"\n//           >\n//             <FileText size={16} />\n//             <span>Trial Balance</span>\n//           </button>\n//         </div>\n//       </div>\n\n//       {/* Journal Entry Form */}\n//       {isAddingEntry && (\n//         <div className=\"mb-8 p-6 bg-gray-50 rounded-lg border\">\n//           <h3 className=\"text-lg font-semibold mb-4\">Add Manual Journal Entry</h3>\n\n//           <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n//             <div>\n//               <label className=\"block text-sm font-medium text-gray-700 mb-1\">Date *</label>\n//               <input\n//                 type=\"date\"\n//                 value={newEntry.date}\n//                 onChange={(e) => setNewEntry({ ...newEntry, date: e.target.value })}\n//                 className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\n//               />\n//             </div>\n//             <div>\n//               <label className=\"block text-sm font-medium text-gray-700 mb-1\">Description *</label>\n//               <input\n//                 type=\"text\"\n//                 value={newEntry.description}\n//                 onChange={(e) => setNewEntry({ ...newEntry, description: e.target.value })}\n//                 placeholder=\"Enter description\"\n//                 className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\n//               />\n//             </div>\n//             <div>\n//               <label className=\"block text-sm font-medium text-gray-700 mb-1\">Reference</label>\n//               <input\n//                 type=\"text\"\n//                 value={newEntry.reference}\n//                 onChange={(e) => setNewEntry({ ...newEntry, reference: e.target.value })}\n//                 placeholder=\"Reference number\"\n//                 className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\n//               />\n//             </div>\n//           </div>\n\n//           {/* Entry Lines */}\n//           <div className=\"mb-4\">\n//             <label className=\"block text-sm font-medium text-gray-700 mb-2\">Journal Entry Lines</label>\n//             <div className=\"space-y-3\">\n//               {newEntry.entries.map((entry, index) => (\n//                 <div key={index} className=\"grid grid-cols-12 gap-2 items-center bg-white p-3 rounded border\">\n//                   <div className=\"col-span-4\">\n//                     <select\n//                       value={entry.accountId}\n//                       onChange={(e) => updateEntryLine(index, 'accountId', e.target.value)}\n//                       className=\"w-full px-2 py-1 border border-gray-300 rounded text-sm focus:ring-2 focus:ring-emerald-500\"\n//                     >\n//                       <option value=\"\">Select Account</option>\n//                       {accounts.map(account => (\n//                         <option key={account.id} value={account.id}>\n//                           {account.code} - {account.name}\n//                         </option>\n//                       ))}\n//                     </select>\n//                   </div>\n//                   <div className=\"col-span-3\">\n//                     <input\n//                       type=\"text\"\n//                       value={entry.description}\n//                       onChange={(e) => updateEntryLine(index, 'description', e.target.value)}\n//                       placeholder=\"Description\"\n//                       className=\"w-full px-2 py-1 border border-gray-300 rounded text-sm focus:ring-2 focus:ring-emerald-500\"\n//                     />\n//                   </div>\n//                   <div className=\"col-span-2\">\n//                     <input\n//                       type=\"number\"\n//                       step=\"0.01\"\n//                       value={entry.debit}\n//                       onChange={(e) => updateEntryLine(index, 'debit', e.target.value)}\n//                       placeholder=\"Debit\"\n//                       className=\"w-full px-2 py-1 border border-gray-300 rounded text-sm focus:ring-2 focus:ring-emerald-500\"\n//                     />\n//                   </div>\n//                   <div className=\"col-span-2\">\n//                     <input\n//                       type=\"number\"\n//                       step=\"0.01\"\n//                       value={entry.credit}\n//                       onChange={(e) => updateEntryLine(index, 'credit', e.target.value)}\n//                       placeholder=\"Credit\"\n//                       className=\"w-full px-2 py-1 border border-gray-300 rounded text-sm focus:ring-2 focus:ring-emerald-500\"\n//                     />\n//                   </div>\n//                   <div className=\"col-span-1\">\n//                     {newEntry.entries.length > 2 && (\n//                       <button\n//                         onClick={() => removeEntryLine(index)}\n//                         className=\"p-1 text-red-600 hover:bg-red-100 rounded\"\n//                       >\n//                         <Trash2 size={14} />\n//                       </button>\n//                     )}\n//                   </div>\n//                 </div>\n//               ))}\n//             </div>\n\n//             <div className=\"flex justify-between items-center mt-3\">\n//               <button\n//                 onClick={addEntryLine}\n//                 className=\"px-3 py-1 text-sm bg-gray-200 text-gray-700 rounded hover:bg-gray-300 flex items-center space-x-1\"\n//               >\n//                 <Plus size={14} />\n//                 <span>Add Line</span>\n//               </button>\n\n//               <div className=\"flex items-center space-x-4\">\n//                 <div className=\"text-sm\">\n//                   <span className=\"font-medium\">Total Debit: ${totalDebit.toFixed(2)}</span>\n//                   <span className=\"mx-2\">|</span>\n//                   <span className=\"font-medium\">Total Credit: ${totalCredit.toFixed(2)}</span>\n//                 </div>\n//                 {entryIsBalanced ? (\n//                   <div className=\"flex items-center text-green-600\">\n//                     <CheckCircle size={16} className=\"mr-1\" />\n//                     <span className=\"text-sm\">Balanced</span>\n//                   </div>\n//                 ) : (\n//                   <div className=\"flex items-center text-red-600\">\n//                     <AlertCircle size={16} className=\"mr-1\" />\n//                     <span className=\"text-sm\">Not Balanced</span>\n//                   </div>\n//                 )}\n//               </div>\n//             </div>\n//           </div>\n\n//           <div className=\"flex space-x-3\">\n//             <button\n//               onClick={saveJournalEntry}\n//               disabled={!entryIsBalanced}\n//               className=\"px-4 py-2 bg-emerald-600 text-white rounded-lg hover:bg-emerald-700 disabled:bg-gray-400 flex items-center space-x-2\"\n//             >\n//               <Save size={16} />\n//               <span>Save Entry</span>\n//             </button>\n//             <button\n//               onClick={() => setIsAddingEntry(false)}\n//               className=\"px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 flex items-center space-x-2\"\n//             >\n//               <X size={16} />\n//               <span>Cancel</span>\n//             </button>\n//           </div>\n//         </div>\n//       )}\n\n//       {/* Journal Entries Table */}\n//       <div className=\"bg-white border border-gray-200 rounded-lg overflow-hidden\">\n//         <div className=\"px-6 py-4 border-b border-gray-200\">\n//           <h2 className=\"text-lg font-semibold text-gray-900\">Journal Entries</h2>\n//           <p className=\"text-sm text-gray-600 mt-1\">\n//             Showing {filteredEntries.length} of {journalEntries.length} entries\n//           </p>\n//         </div>\n\n//         <div className=\"overflow-x-auto\">\n//           <table className=\"w-full\">\n//             <thead className=\"bg-gray-50\">\n//               <tr>\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                   Entry ID\n//                 </th>\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                   Date\n//                 </th>\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                   Description\n//                 </th>\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                   Reference\n//                 </th>\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                   Source\n//                 </th>\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                   Amount\n//                 </th>\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                   Status\n//                 </th>\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                   Actions\n//                 </th>\n//               </tr>\n//             </thead>\n//             <tbody className=\"bg-white divide-y divide-gray-200\">\n//               {filteredEntries.map((entry) => (\n//                 <tr key={entry.id} className=\"hover:bg-gray-50\">\n//                   <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\n//                     {entry.id}\n//                   </td>\n//                   <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n//                     {entry.date}\n//                   </td>\n//                   <td className=\"px-6 py-4 text-sm text-gray-900 max-w-xs truncate\">\n//                     {entry.description}\n//                   </td>\n//                   <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n//                     {entry.reference}\n//                   </td>\n//                   <td className=\"px-6 py-4 whitespace-nowrap\">\n//                     <span className={`px-2 py-1 text-xs font-medium rounded-full ${\n//                       entry.transactionType === 'automatic' ? 'bg-green-100 text-green-800' : 'bg-orange-100 text-orange-800'\n//                     }`}>\n//                       {entry.source}\n//                     </span>\n//                   </td>\n//                   <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n//                     ${entry.totalDebit.toFixed(2)}\n//                   </td>\n//                   <td className=\"px-6 py-4 whitespace-nowrap\">\n//                     <span className={`px-2 py-1 text-xs font-medium rounded-full ${\n//                       entry.status === 'posted' ? 'bg-blue-100 text-blue-800' : 'bg-yellow-100 text-yellow-800'\n//                     }`}>\n//                       {entry.status}\n//                     </span>\n//                   </td>\n//                   <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">\n//                     <button\n//                       onClick={() => setSelectedEntry(entry)}\n//                       className=\"text-emerald-600 hover:text-emerald-900 mr-3\"\n//                     >\n//                       <Eye size={16} />\n//                     </button>\n//                   </td>\n//                 </tr>\n//               ))}\n//             </tbody>\n//           </table>\n//         </div>\n//       </div>\n\n//       {/* Entry Details Modal */}\n//       {selectedEntry && (\n//         <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center p-4 z-50\">\n//           <div className=\"bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-y-auto\">\n//             <div className=\"px-6 py-4 border-b border-gray-200\">\n//               <div className=\"flex items-center justify-between\">\n//                 <h3 className=\"text-lg font-semibold text-gray-900\">\n//                   Journal Entry Details - {selectedEntry.id}\n//                 </h3>\n//                 <button\n//                   onClick={() => setSelectedEntry(null)}\n//                   className=\"text-gray-400 hover:text-gray-600\"\n//                 >\n//                   <X size={20} />\n//                 </button>\n//               </div>\n//             </div>\n\n//             <div className=\"px-6 py-4\">\n//               {/* Entry Header */}\n//               <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-6\">\n//                 <div>\n//                   <label className=\"text-sm font-medium text-gray-500\">Date</label>\n//                   <p className=\"text-sm text-gray-900\">{selectedEntry.date}</p>\n//                 </div>\n//                 <div>\n//                   <label className=\"text-sm font-medium text-gray-500\">Reference</label>\n//                   <p className=\"text-sm text-gray-900\">{selectedEntry.reference}</p>\n//                 </div>\n//                 <div>\n//                   <label className=\"text-sm font-medium text-gray-500\">Description</label>\n//                   <p className=\"text-sm text-gray-900\">{selectedEntry.description}</p>\n//                 </div>\n//                 <div>\n//                   <label className=\"text-sm font-medium text-gray-500\">Source</label>\n//                   <span className={`px-2 py-1 text-xs font-medium rounded-full ${\n//                     selectedEntry.transactionType === 'automatic' ? 'bg-green-100 text-green-800' : 'bg-orange-100 text-orange-800'\n//                   }`}>\n//                     {selectedEntry.source}\n//                   </span>\n//                 </div>\n//               </div>\n\n//               {/* Entry Lines */}\n//               <div className=\"mb-6\">\n//                 <h4 className=\"text-sm font-medium text-gray-700 mb-3\">Account Entries</h4>\n//                 <div className=\"overflow-x-auto\">\n//                   <table className=\"w-full border border-gray-200 rounded\">\n//                     <thead className=\"bg-gray-50\">\n//                       <tr>\n//                         <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500\">Account</th>\n//                         <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500\">Description</th>\n//                         <th className=\"px-4 py-2 text-right text-xs font-medium text-gray-500\">Debit</th>\n//                         <th className=\"px-4 py-2 text-right text-xs font-medium text-gray-500\">Credit</th>\n//                       </tr>\n//                     </thead>\n//                     <tbody className=\"divide-y divide-gray-200\">\n//                       {selectedEntry.entries.map((entryLine, index) => (\n//                         <tr key={index}>\n//                           <td className=\"px-4 py-2 text-sm text-gray-900\">\n//                             {getAccountName(entryLine.accountId)}\n//                           </td>\n//                           <td className=\"px-4 py-2 text-sm text-gray-600\">\n//                             {entryLine.description}\n//                           </td>\n//                           <td className=\"px-4 py-2 text-sm text-gray-900 text-right\">\n//                             {entryLine.debit > 0 ? `${entryLine.debit.toFixed(2)}` : '-'}\n//                           </td>\n//                           <td className=\"px-4 py-2 text-sm text-gray-900 text-right\">\n//                             {entryLine.credit > 0 ? `${entryLine.credit.toFixed(2)}` : '-'}\n//                           </td>\n//                         </tr>\n//                       ))}\n//                     </tbody>\n//                     <tfoot className=\"bg-gray-50\">\n//                       <tr>\n//                         <td colSpan=\"2\" className=\"px-4 py-2 text-sm font-medium text-gray-900\">\n//                           Totals:\n//                         </td>\n//                         <td className=\"px-4 py-2 text-sm font-bold text-gray-900 text-right\">\n//                           ${selectedEntry.totalDebit.toFixed(2)}\n//                         </td>\n//                         <td className=\"px-4 py-2 text-sm font-bold text-gray-900 text-right\">\n//                           ${selectedEntry.totalCredit.toFixed(2)}\n//                         </td>\n//                       </tr>\n//                     </tfoot>\n//                   </table>\n//                 </div>\n//               </div>\n\n//               {/* Entry Metadata */}\n//               <div className=\"text-xs text-gray-500\">\n//                 <p>Created: {new Date(selectedEntry.createdAt).toLocaleString()}</p>\n//                 <p>Status: {selectedEntry.status}</p>\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n//       )}\n\n//       {/* Trial Balance Modal */}\n//       {showTrialBalance && (\n//         <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center p-4 z-50\">\n//           <div className=\"bg-white rounded-lg max-w-5xl w-full max-h-[90vh] overflow-y-auto\">\n//             <div className=\"px-6 py-4 border-b border-gray-200\">\n//               <div className=\"flex items-center justify-between\">\n//                 <h3 className=\"text-lg font-semibold text-gray-900\">\n//                   Trial Balance - As of {new Date().toLocaleDateString()}\n//                 </h3>\n//                 <div className=\"flex items-center space-x-2\">\n//                   <button\n//                     onClick={() => {\n//                       // Export functionality would go here\n//                       alert('Export functionality would be implemented here');\n//                     }}\n//                     className=\"px-3 py-1 bg-emerald-600 text-white rounded text-sm hover:bg-emerald-700 flex items-center space-x-1\"\n//                   >\n//                     <Download size={14} />\n//                     <span>Export</span>\n//                   </button>\n//                   <button\n//                     onClick={() => setShowTrialBalance(false)}\n//                     className=\"text-gray-400 hover:text-gray-600\"\n//                   >\n//                     <X size={20} />\n//                   </button>\n//                 </div>\n//               </div>\n//             </div>\n\n//             <div className=\"px-6 py-4\">\n//               <div className=\"overflow-x-auto\">\n//                 <table className=\"w-full\">\n//                   <thead className=\"bg-gray-50\">\n//                     <tr>\n//                       <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                         Account Code\n//                       </th>\n//                       <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                         Account Name\n//                       </th>\n//                       <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                         Type\n//                       </th>\n//                       <th className=\"px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                         Debit Total\n//                       </th>\n//                       <th className=\"px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                         Credit Total\n//                       </th>\n//                       <th className=\"px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                         Balance\n//                       </th>\n//                     </tr>\n//                   </thead>\n//                   <tbody className=\"bg-white divide-y divide-gray-200\">\n//                     {trialBalance.map((account) => (\n//                       <tr key={account.accountId}>\n//                         <td className=\"px-4 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\n//                           {account.accountCode}\n//                         </td>\n//                         <td className=\"px-4 py-4 whitespace-nowrap text-sm text-gray-900\">\n//                           {account.accountName}\n//                         </td>\n//                         <td className=\"px-4 py-4 whitespace-nowrap\">\n//                           <span className={`px-2 py-1 text-xs font-medium rounded-full ${\n//                             account.accountType === 'assets' ? 'bg-green-100 text-green-800' :\n//                             account.accountType === 'liabilities' ? 'bg-red-100 text-red-800' :\n//                             account.accountType === 'equity' ? 'bg-blue-100 text-blue-800' :\n//                             account.accountType === 'revenue' ? 'bg-purple-100 text-purple-800' :\n//                             'bg-orange-100 text-orange-800'\n//                           }`}>\n//                             {account.accountType}\n//                           </span>\n//                         </td>\n//                         <td className=\"px-4 py-4 whitespace-nowrap text-sm text-gray-900 text-right\">\n//                           ${account.debit.toFixed(2)}\n//                         </td>\n//                         <td className=\"px-4 py-4 whitespace-nowrap text-sm text-gray-900 text-right\">\n//                           ${account.credit.toFixed(2)}\n//                         </td>\n//                         <td className=\"px-4 py-4 whitespace-nowrap text-sm font-medium text-right\">\n//                           <span className={account.balance >= 0 ? 'text-green-600' : 'text-red-600'}>\n//                             ${Math.abs(account.balance).toFixed(2)}\n//                             {account.balance < 0 && ' (CR)'}\n//                           </span>\n//                         </td>\n//                       </tr>\n//                     ))}\n//                   </tbody>\n//                   <tfoot className=\"bg-gray-50\">\n//                     <tr>\n//                       <td colSpan=\"3\" className=\"px-4 py-3 text-sm font-bold text-gray-900\">\n//                         TOTALS:\n//                       </td>\n//                       <td className=\"px-4 py-3 text-sm font-bold text-gray-900 text-right\">\n//                         ${trialBalance.reduce((sum, acc) => sum + acc.debit, 0).toFixed(2)}\n//                       </td>\n//                       <td className=\"px-4 py-3 text-sm font-bold text-gray-900 text-right\">\n//                         ${trialBalance.reduce((sum, acc) => sum + acc.credit, 0).toFixed(2)}\n//                       </td>\n//                       <td className=\"px-4 py-3 text-sm font-bold text-gray-900 text-right\">\n//                         ${Math.abs(trialBalance.reduce((sum, acc) => sum + acc.balance, 0)).toFixed(2)}\n//                       </td>\n//                     </tr>\n//                   </tfoot>\n//                 </table>\n//               </div>\n\n//               {/* Trial Balance Validation */}\n//               <div className=\"mt-4 p-4 bg-green-50 border border-green-200 rounded-lg\">\n//                 <div className=\"flex items-center\">\n//                   <CheckCircle className=\"text-green-600 mr-2\" size={20} />\n//                   <div>\n//                     <h4 className=\"font-medium text-green-800\">Trial Balance is Balanced</h4>\n//                     <p className=\"text-sm text-green-700\">\n//                       Total Debits = Total Credits = ${trialBalance.reduce((sum, acc) => sum + acc.debit, 0).toFixed(2)}\n//                     </p>\n//                   </div>\n//                 </div>\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n//       )}\n\n//       {/* Integration Status */}\n//       <div className=\"mt-8 grid grid-cols-1 md:grid-cols-3 gap-4\">\n//         <div className=\"p-4 bg-green-50 border border-green-200 rounded-lg\">\n//           <div className=\"flex items-center mb-2\">\n//             <CheckCircle className=\"text-green-600 mr-2\" size={16} />\n//             <h4 className=\"font-medium text-green-800\">POS Integration</h4>\n//           </div>\n//           <p className=\"text-sm text-green-700\">\n//             All sales transactions automatically create journal entries\n//           </p>\n//         </div>\n\n//         <div className=\"p-4 bg-green-50 border border-green-200 rounded-lg\">\n//           <div className=\"flex items-center mb-2\">\n//             <CheckCircle className=\"text-green-600 mr-2\" size={16} />\n//             <h4 className=\"font-medium text-green-800\">Purchase Integration</h4>\n//           </div>\n//           <p className=\"text-sm text-green-700\">\n//             Purchase orders automatically update accounts payable and inventory\n//           </p>\n//         </div>\n\n//         <div className=\"p-4 bg-blue-50 border border-blue-200 rounded-lg\">\n//           <div className=\"flex items-center mb-2\">\n//             <FileText className=\"text-blue-600 mr-2\" size={16} />\n//             <h4 className=\"font-medium text-blue-800\">Manual Entries</h4>\n//           </div>\n//           <p className=\"text-sm text-blue-700\">\n//             Add adjustments and corrections with full validation\n//           </p>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default GeneralLedger;\n\n// import React, { useState, useEffect } from 'react';\n// import { \n//   Book, \n//   Plus, \n//   Filter, \n//   Search, \n//   Calendar, \n//   FileText, \n//   Edit, \n//   Trash2, \n//   Save, \n//   X, \n//   AlertCircle,\n//   CheckCircle,\n//   DollarSign,\n//   TrendingUp,\n//   Eye,\n//   Download,\n//   RefreshCw\n// } from 'lucide-react';\n\n// const GeneralLedger = () => {\n//   const [journalEntries, setJournalEntries] = useState([]);\n//   const [accounts, setAccounts] = useState([]);\n//   const [filteredEntries, setFilteredEntries] = useState([]);\n//   const [selectedEntry, setSelectedEntry] = useState(null);\n//   const [isAddingEntry, setIsAddingEntry] = useState(false);\n//   const [loading, setLoading] = useState(false);\n//   const [filters, setFilters] = useState({\n//     dateFrom: '',\n//     dateTo: '',\n//     accountId: '',\n//     transactionType: 'all',\n//     searchTerm: ''\n//   });\n//   const [trialBalance, setTrialBalance] = useState([]);\n//   const [showTrialBalance, setShowTrialBalance] = useState(false);\n//   const [newEntry, setNewEntry] = useState({\n//     date: new Date().toISOString().split('T')[0],\n//     description: '',\n//     reference: '',\n//     entries: [\n//       { accountId: '', debit: 0, credit: 0, description: '' },\n//       { accountId: '', debit: 0, credit: 0, description: '' }\n//     ]\n//   });\n\n//   // Chart of Accounts\n//   const chartOfAccounts = [\n//     { id: '1111', code: '1111', name: 'Petty Cash', type: 'assets' },\n//     { id: '1112', code: '1112', name: 'Bank - Main Account', type: 'assets' },\n//     { id: '1120', code: '1120', name: 'Accounts Receivable', type: 'assets' },\n//     { id: '1130', code: '1130', name: 'Inventory', type: 'assets' },\n//     { id: '2110', code: '2110', name: 'Accounts Payable', type: 'liabilities' },\n//     { id: '2130', code: '2130', name: 'Sales Tax Payable', type: 'liabilities' },\n//     { id: '4100', code: '4100', name: 'Sales Revenue', type: 'revenue' },\n//     { id: '4110', code: '4110', name: 'Electronics Sales', type: 'revenue' },\n//     { id: '5100', code: '5100', name: 'Cost of Goods Sold', type: 'expenses' },\n//     { id: '5200', code: '5200', name: 'Purchase Expenses', type: 'expenses' }\n//   ];\n\n//   // API Configuration\n//   const API_BASE_URL = 'https://api-pos.hulmsolutions.com/POS/accounting2/31fc8df0-61db-41e5-bb67-070fde367ea1/orders?start=0&size=200';\n\n//   useEffect(() => {\n//     setAccounts(chartOfAccounts);\n//     loadJournalEntriesFromAPI();\n//   }, []);\n\n//   useEffect(() => {\n//     filterEntries();\n//   }, [journalEntries, filters]);\n\n//   // Fetch Sales Orders from API and convert to Journal Entries\n//   const loadJournalEntriesFromAPI = async () => {\n//     setLoading(true);\n//     try {\n//       const response = await fetch(`${API_BASE_URL}/orders?start=0&size=200`);\n//       const salesOrders = await response.json();\n\n//       // Convert sales orders to journal entries\n//       const journalEntriesFromSales = salesOrders.map(order => convertSalesOrderToJournalEntry(order));\n\n//       // Load any manual journal entries from localStorage\n//       const manualEntries = JSON.parse(localStorage.getItem('manualJournalEntries') || '[]');\n\n//       // Combine both types of entries\n//       const allEntries = [...journalEntriesFromSales, ...manualEntries];\n\n//       setJournalEntries(allEntries);\n//     } catch (error) {\n//       console.error('Error loading sales orders:', error);\n//       // Fallback to sample data if API fails\n//       loadSampleJournalEntries();\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   // Convert Sales Order to Journal Entry\n//   const convertSalesOrderToJournalEntry = (order) => {\n//     const entries = [];\n//     const subTotal = order.subTotal || 0;\n//     const taxAmount = order.taxAmount || 0;\n//     const total = order.total || 0;\n\n//     // Determine payment method - if paid, assume cash/bank\n//     if (order.paid && order.status === 'Closed') {\n//       // Cash/Bank Account (Debit)\n//       entries.push({\n//         accountId: '1111', // Petty Cash (assume cash payment)\n//         accountName: 'Petty Cash',\n//         debit: total,\n//         credit: 0,\n//         description: `Cash received from sale Order #${order.orderId}`\n//       });\n//     } else if (!order.paid) {\n//       // Accounts Receivable (Debit) for unpaid orders\n//       entries.push({\n//         accountId: '1120',\n//         accountName: 'Accounts Receivable',\n//         debit: total,\n//         credit: 0,\n//         description: `Credit sale Order #${order.orderId}`\n//       });\n//     }\n\n//     // Sales Revenue (Credit)\n//     if (subTotal > 0) {\n//       entries.push({\n//         accountId: '4110', // Electronics Sales\n//         accountName: 'Electronics Sales',\n//         debit: 0,\n//         credit: subTotal,\n//         description: `Revenue from Order #${order.orderId}`\n//       });\n//     }\n\n//     // Sales Tax Payable (Credit)\n//     if (taxAmount > 0) {\n//       entries.push({\n//         accountId: '2130',\n//         accountName: 'Sales Tax Payable',\n//         debit: 0,\n//         credit: taxAmount,\n//         description: `Tax collected on Order #${order.orderId}`\n//       });\n//     }\n\n//     // Cost of Goods Sold and Inventory reduction\n//     order.lineItems.forEach(item => {\n//       const costPrice = item.costPrice || 0;\n//       const quantity = item.quantity || 0;\n//       const totalCost = costPrice * quantity;\n\n//       if (totalCost > 0 && order.fulfilled) {\n//         // Cost of Goods Sold (Debit)\n//         entries.push({\n//           accountId: '5100',\n//           accountName: 'Cost of Goods Sold',\n//           debit: totalCost,\n//           credit: 0,\n//           description: `COGS for ${item.productName}`\n//         });\n\n//         // Inventory (Credit)\n//         entries.push({\n//           accountId: '1130',\n//           accountName: 'Inventory',\n//           debit: 0,\n//           credit: totalCost,\n//           description: `Inventory reduction - ${item.productName}`\n//         });\n//       }\n//     });\n\n//     // Calculate totals\n//     const totalDebit = entries.reduce((sum, entry) => sum + entry.debit, 0);\n//     const totalCredit = entries.reduce((sum, entry) => sum + entry.credit, 0);\n\n//     return {\n//       id: `JE-ORDER-${order.orderId}`,\n//       date: formatDateFromCreatedAt(order.createdAt),\n//       description: `Sales Order #${order.orderId} - ${order.lineItems.map(item => item.productName).join(', ')}`,\n//       reference: `ORDER-${order.orderId}`,\n//       transactionType: 'automatic',\n//       source: 'POS Sales',\n//       status: order.fulfilled ? 'posted' : 'pending',\n//       entries: entries,\n//       totalDebit: Math.round(totalDebit * 100) / 100,\n//       totalCredit: Math.round(totalCredit * 100) / 100,\n//       createdAt: order.createdAt,\n//       originalOrder: order // Keep reference to original order\n//     };\n//   };\n\n//   // Format date from API format (2025.08.18.10.08.54.569) to YYYY-MM-DD\n//   const formatDateFromCreatedAt = (createdAt) => {\n//     try {\n//       const parts = createdAt.split('.');\n//       if (parts.length >= 3) {\n//         return `${parts[0]}-${parts[1].padStart(2, '0')}-${parts[2].padStart(2, '0')}`;\n//       }\n//       return new Date().toISOString().split('T')[0];\n//     } catch (error) {\n//       return new Date().toISOString().split('T')[0];\n//     }\n//   };\n\n//   // Fallback sample data\n//   const loadSampleJournalEntries = () => {\n//     const sampleEntries = [\n//       {\n//         id: 'JE001',\n//         date: '2025-08-18',\n//         description: 'Sample POS Sale - Medical products',\n//         reference: 'POS001',\n//         transactionType: 'automatic',\n//         source: 'POS',\n//         status: 'posted',\n//         entries: [\n//           { accountId: '1111', accountName: 'Petty Cash', debit: 60.50, credit: 0, description: 'Cash received from customer' },\n//           { accountId: '4100', accountName: 'Sales Revenue', debit: 0, credit: 55.00, description: 'Revenue from medical products' },\n//           { accountId: '2130', accountName: 'Sales Tax Payable', debit: 0, credit: 5.50, description: 'Sales tax collected' }\n//         ],\n//         totalDebit: 60.50,\n//         totalCredit: 60.50,\n//         createdAt: '2025-08-18T10:30:00Z'\n//       }\n//     ];\n//     setJournalEntries(sampleEntries);\n//   };\n\n//   const filterEntries = () => {\n//     let filtered = [...journalEntries];\n\n//     if (filters.dateFrom) {\n//       filtered = filtered.filter(entry => entry.date >= filters.dateFrom);\n//     }\n//     if (filters.dateTo) {\n//       filtered = filtered.filter(entry => entry.date <= filters.dateTo);\n//     }\n//     if (filters.accountId) {\n//       filtered = filtered.filter(entry => \n//         entry.entries.some(e => e.accountId === filters.accountId)\n//       );\n//     }\n//     if (filters.transactionType !== 'all') {\n//       filtered = filtered.filter(entry => entry.transactionType === filters.transactionType);\n//     }\n//     if (filters.searchTerm) {\n//       const term = filters.searchTerm.toLowerCase();\n//       filtered = filtered.filter(entry => \n//         entry.description.toLowerCase().includes(term) ||\n//         entry.reference.toLowerCase().includes(term) ||\n//         entry.entries.some(e => e.description.toLowerCase().includes(term))\n//       );\n//     }\n\n//     setFilteredEntries(filtered);\n//   };\n\n//   const generateTrialBalance = () => {\n//     const balances = {};\n\n//     // Initialize all accounts\n//     chartOfAccounts.forEach(account => {\n//       balances[account.id] = {\n//         accountId: account.id,\n//         accountCode: account.code,\n//         accountName: account.name,\n//         accountType: account.type,\n//         debit: 0,\n//         credit: 0,\n//         balance: 0\n//       };\n//     });\n\n//     // Calculate balances from journal entries\n//     journalEntries.forEach(entry => {\n//       if (entry.status === 'posted') {\n//         entry.entries.forEach(entryLine => {\n//           if (balances[entryLine.accountId]) {\n//             balances[entryLine.accountId].debit += entryLine.debit;\n//             balances[entryLine.accountId].credit += entryLine.credit;\n//           }\n//         });\n//       }\n//     });\n\n//     // Calculate net balances\n//     Object.values(balances).forEach(account => {\n//       if (account.accountType === 'assets' || account.accountType === 'expenses') {\n//         account.balance = account.debit - account.credit;\n//       } else {\n//         account.balance = account.credit - account.debit;\n//       }\n//     });\n\n//     const trialBalanceData = Object.values(balances)\n//       .filter(account => account.debit !== 0 || account.credit !== 0)\n//       .sort((a, b) => a.accountCode.localeCompare(b.accountCode));\n\n//     setTrialBalance(trialBalanceData);\n//     setShowTrialBalance(true);\n//   };\n\n//   const addEntryLine = () => {\n//     setNewEntry({\n//       ...newEntry,\n//       entries: [...newEntry.entries, { accountId: '', debit: 0, credit: 0, description: '' }]\n//     });\n//   };\n\n//   const removeEntryLine = (index) => {\n//     if (newEntry.entries.length > 2) {\n//       const updatedEntries = newEntry.entries.filter((_, i) => i !== index);\n//       setNewEntry({ ...newEntry, entries: updatedEntries });\n//     }\n//   };\n\n//   const updateEntryLine = (index, field, value) => {\n//     const updatedEntries = [...newEntry.entries];\n//     updatedEntries[index] = { ...updatedEntries[index], [field]: value };\n//     setNewEntry({ ...newEntry, entries: updatedEntries });\n//   };\n\n//   const calculateTotals = (entries) => {\n//     const totalDebit = entries.reduce((sum, entry) => sum + (parseFloat(entry.debit) || 0), 0);\n//     const totalCredit = entries.reduce((sum, entry) => sum + (parseFloat(entry.credit) || 0), 0);\n//     return { totalDebit, totalCredit };\n//   };\n\n//   const isBalanced = (entries) => {\n//     const { totalDebit, totalCredit } = calculateTotals(entries);\n//     return Math.abs(totalDebit - totalCredit) < 0.01;\n//   };\n\n//   const saveJournalEntry = () => {\n//     if (!newEntry.description || !newEntry.entries.every(e => e.accountId)) {\n//       alert('Please fill in all required fields');\n//       return;\n//     }\n\n//     if (!isBalanced(newEntry.entries)) {\n//       alert('Journal entry must be balanced - total debits must equal total credits');\n//       return;\n//     }\n\n//     const { totalDebit, totalCredit } = calculateTotals(newEntry.entries);\n\n//     // Add account names to entries\n//     const entriesWithNames = newEntry.entries.map(entry => ({\n//       ...entry,\n//       accountName: accounts.find(acc => acc.id === entry.accountId)?.name || '',\n//       debit: parseFloat(entry.debit) || 0,\n//       credit: parseFloat(entry.credit) || 0\n//     }));\n\n//     const journalEntry = {\n//       id: `JE-MANUAL-${Date.now()}`,\n//       date: newEntry.date,\n//       description: newEntry.description,\n//       reference: newEntry.reference || `MAN${Date.now()}`,\n//       transactionType: 'manual',\n//       source: 'Manual',\n//       status: 'posted',\n//       entries: entriesWithNames,\n//       totalDebit,\n//       totalCredit,\n//       createdAt: new Date().toISOString()\n//     };\n\n//     // Save manual entries to localStorage\n//     const existingManualEntries = JSON.parse(localStorage.getItem('manualJournalEntries') || '[]');\n//     const updatedManualEntries = [...existingManualEntries, journalEntry];\n//     localStorage.setItem('manualJournalEntries', JSON.stringify(updatedManualEntries));\n\n//     // Update state\n//     setJournalEntries([...journalEntries, journalEntry]);\n\n//     // Reset form\n//     setNewEntry({\n//       date: new Date().toISOString().split('T')[0],\n//       description: '',\n//       reference: '',\n//       entries: [\n//         { accountId: '', debit: 0, credit: 0, description: '' },\n//         { accountId: '', debit: 0, credit: 0, description: '' }\n//       ]\n//     });\n//     setIsAddingEntry(false);\n//   };\n\n//   const getAccountName = (accountId) => {\n//     const account = accounts.find(acc => acc.id === accountId);\n//     return account ? `${account.code} - ${account.name}` : '';\n//   };\n\n//   const { totalDebit, totalCredit } = calculateTotals(newEntry.entries);\n//   const entryIsBalanced = isBalanced(newEntry.entries);\n\n//   return (\n//     <div className=\"max-w-7xl mx-auto p-6 bg-white\">\n//       {/* Header */}\n//       <div className=\"mb-8\">\n//         <h1 className=\"text-3xl font-bold text-gray-900 mb-2 flex items-center\">\n//           <Book className=\"mr-3 text-emerald-600\" />\n//           General Ledger\n//         </h1>\n//         <p className=\"text-gray-600\">Real-time transaction recording and journal entry management</p>\n//       </div>\n\n//       {/* Quick Stats */}\n//       <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n//         <div className=\"bg-blue-50 p-4 rounded-lg border border-blue-200\">\n//           <div className=\"flex items-center justify-between\">\n//             <div>\n//               <p className=\"text-blue-600 text-sm font-medium\">Total Entries</p>\n//               <p className=\"text-2xl font-bold text-blue-900\">{journalEntries.length}</p>\n//             </div>\n//             <FileText className=\"text-blue-600\" size={24} />\n//           </div>\n//         </div>\n\n//         <div className=\"bg-green-50 p-4 rounded-lg border border-green-200\">\n//           <div className=\"flex items-center justify-between\">\n//             <div>\n//               <p className=\"text-green-600 text-sm font-medium\">POS Entries</p>\n//               <p className=\"text-2xl font-bold text-green-900\">\n//                 {journalEntries.filter(e => e.source === 'POS Sales').length}\n//               </p>\n//             </div>\n//             <TrendingUp className=\"text-green-600\" size={24} />\n//           </div>\n//         </div>\n\n//         <div className=\"bg-orange-50 p-4 rounded-lg border border-orange-200\">\n//           <div className=\"flex items-center justify-between\">\n//             <div>\n//               <p className=\"text-orange-600 text-sm font-medium\">Manual Entries</p>\n//               <p className=\"text-2xl font-bold text-orange-900\">\n//                 {journalEntries.filter(e => e.transactionType === 'manual').length}\n//               </p>\n//             </div>\n//             <Edit className=\"text-orange-600\" size={24} />\n//           </div>\n//         </div>\n\n//         <div className=\"bg-purple-50 p-4 rounded-lg border border-purple-200\">\n//           <div className=\"flex items-center justify-between\">\n//             <div>\n//               <p className=\"text-purple-600 text-sm font-medium\">Total Value</p>\n//               <p className=\"text-2xl font-bold text-purple-900\">\n//                 ${journalEntries.reduce((sum, entry) => sum + entry.totalDebit, 0).toFixed(2)}\n//               </p>\n//             </div>\n//             <DollarSign className=\"text-purple-600\" size={24} />\n//           </div>\n//         </div>\n//       </div>\n\n//       {/* Controls */}\n//       <div className=\"flex flex-wrap items-center justify-between gap-4 mb-6\">\n//         <div className=\"flex flex-wrap items-center gap-4\">\n//           {/* Date Filters */}\n//           <div className=\"flex items-center space-x-2\">\n//             <Calendar size={16} className=\"text-gray-400\" />\n//             <input\n//               type=\"date\"\n//               value={filters.dateFrom}\n//               onChange={(e) => setFilters({ ...filters, dateFrom: e.target.value })}\n//               className=\"px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\n//               placeholder=\"From\"\n//             />\n//             <span className=\"text-gray-500\">to</span>\n//             <input\n//               type=\"date\"\n//               value={filters.dateTo}\n//               onChange={(e) => setFilters({ ...filters, dateTo: e.target.value })}\n//               className=\"px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\n//               placeholder=\"To\"\n//             />\n//           </div>\n\n//           {/* Account Filter */}\n//           <div className=\"relative\">\n//             <Filter className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" size={16} />\n//             <select\n//               value={filters.accountId}\n//               onChange={(e) => setFilters({ ...filters, accountId: e.target.value })}\n//               className=\"pl-10 pr-8 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\n//             >\n//               <option value=\"\">All Accounts</option>\n//               {accounts.map(account => (\n//                 <option key={account.id} value={account.id}>\n//                   {account.code} - {account.name}\n//                 </option>\n//               ))}\n//             </select>\n//           </div>\n\n//           {/* Transaction Type Filter */}\n//           <select\n//             value={filters.transactionType}\n//             onChange={(e) => setFilters({ ...filters, transactionType: e.target.value })}\n//             className=\"px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\n//           >\n//             <option value=\"all\">All Types</option>\n//             <option value=\"automatic\">POS Sales</option>\n//             <option value=\"manual\">Manual</option>\n//           </select>\n\n//           {/* Search */}\n//           <div className=\"relative\">\n//             <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" size={16} />\n//             <input\n//               type=\"text\"\n//               placeholder=\"Search entries...\"\n//               value={filters.searchTerm}\n//               onChange={(e) => setFilters({ ...filters, searchTerm: e.target.value })}\n//               className=\"pl-10 pr-4 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\n//             />\n//           </div>\n//         </div>\n\n//         <div className=\"flex space-x-3\">\n//           <button\n//             onClick={loadJournalEntriesFromAPI}\n//             disabled={loading}\n//             className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center space-x-2 disabled:bg-gray-400\"\n//           >\n//             {loading ? <RefreshCw className=\"animate-spin\" size={16} /> : <RefreshCw size={16} />}\n//             <span>Refresh from API</span>\n//           </button>\n//           <button\n//             onClick={() => setIsAddingEntry(true)}\n//             className=\"px-4 py-2 bg-emerald-600 text-white rounded-lg hover:bg-emerald-700 flex items-center space-x-2\"\n//           >\n//             <Plus size={16} />\n//             <span>Add Entry</span>\n//           </button>\n//           <button\n//             onClick={generateTrialBalance}\n//             className=\"px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 flex items-center space-x-2\"\n//           >\n//             <FileText size={16} />\n//             <span>Trial Balance</span>\n//           </button>\n//         </div>\n//       </div>\n\n//       {/* Journal Entry Form */}\n//       {isAddingEntry && (\n//         <div className=\"mb-8 p-6 bg-gray-50 rounded-lg border\">\n//           <h3 className=\"text-lg font-semibold mb-4\">Add Manual Journal Entry</h3>\n\n//           <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n//             <div>\n//               <label className=\"block text-sm font-medium text-gray-700 mb-1\">Date *</label>\n//               <input\n//                 type=\"date\"\n//                 value={newEntry.date}\n//                 onChange={(e) => setNewEntry({ ...newEntry, date: e.target.value })}\n//                 className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\n//               />\n//             </div>\n//             <div>\n//               <label className=\"block text-sm font-medium text-gray-700 mb-1\">Description *</label>\n//               <input\n//                 type=\"text\"\n//                 value={newEntry.description}\n//                 onChange={(e) => setNewEntry({ ...newEntry, description: e.target.value })}\n//                 placeholder=\"Enter description\"\n//                 className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\n//               />\n//             </div>\n//             <div>\n//               <label className=\"block text-sm font-medium text-gray-700 mb-1\">Reference</label>\n//               <input\n//                 type=\"text\"\n//                 value={newEntry.reference}\n//                 onChange={(e) => setNewEntry({ ...newEntry, reference: e.target.value })}\n//                 placeholder=\"Reference number\"\n//                 className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\n//               />\n//             </div>\n//           </div>\n\n//           {/* Entry Lines */}\n//           <div className=\"mb-4\">\n//             <label className=\"block text-sm font-medium text-gray-700 mb-2\">Journal Entry Lines</label>\n//             <div className=\"space-y-3\">\n//               {newEntry.entries.map((entry, index) => (\n//                 <div key={index} className=\"grid grid-cols-12 gap-2 items-center bg-white p-3 rounded border\">\n//                   <div className=\"col-span-4\">\n//                     <select\n//                       value={entry.accountId}\n//                       onChange={(e) => updateEntryLine(index, 'accountId', e.target.value)}\n//                       className=\"w-full px-2 py-1 border border-gray-300 rounded text-sm focus:ring-2 focus:ring-emerald-500\"\n//                     >\n//                       <option value=\"\">Select Account</option>\n//                       {accounts.map(account => (\n//                         <option key={account.id} value={account.id}>\n//                           {account.code} - {account.name}\n//                         </option>\n//                       ))}\n//                     </select>\n//                   </div>\n//                   <div className=\"col-span-3\">\n//                     <input\n//                       type=\"text\"\n//                       value={entry.description}\n//                       onChange={(e) => updateEntryLine(index, 'description', e.target.value)}\n//                       placeholder=\"Description\"\n//                       className=\"w-full px-2 py-1 border border-gray-300 rounded text-sm focus:ring-2 focus:ring-emerald-500\"\n//                     />\n//                   </div>\n//                   <div className=\"col-span-2\">\n//                     <input\n//                       type=\"number\"\n//                       step=\"0.01\"\n//                       value={entry.debit}\n//                       onChange={(e) => updateEntryLine(index, 'debit', e.target.value)}\n//                       placeholder=\"Debit\"\n//                       className=\"w-full px-2 py-1 border border-gray-300 rounded text-sm focus:ring-2 focus:ring-emerald-500\"\n//                     />\n//                   </div>\n//                   <div className=\"col-span-2\">\n//                     <input\n//                       type=\"number\"\n//                       step=\"0.01\"\n//                       value={entry.credit}\n//                       onChange={(e) => updateEntryLine(index, 'credit', e.target.value)}\n//                       placeholder=\"Credit\"\n//                       className=\"w-full px-2 py-1 border border-gray-300 rounded text-sm focus:ring-2 focus:ring-emerald-500\"\n//                     />\n//                   </div>\n//                   <div className=\"col-span-1\">\n//                     {newEntry.entries.length > 2 && (\n//                       <button\n//                         onClick={() => removeEntryLine(index)}\n//                         className=\"p-1 text-red-600 hover:bg-red-100 rounded\"\n//                       >\n//                         <Trash2 size={14} />\n//                       </button>\n//                     )}\n//                   </div>\n//                 </div>\n//               ))}\n//             </div>\n\n//             <div className=\"flex justify-between items-center mt-3\">\n//               <button\n//                 onClick={addEntryLine}\n//                 className=\"px-3 py-1 text-sm bg-gray-200 text-gray-700 rounded hover:bg-gray-300 flex items-center space-x-1\"\n//               >\n//                 <Plus size={14} />\n//                 <span>Add Line</span>\n//               </button>\n\n//               <div className=\"flex items-center space-x-4\">\n//                 <div className=\"text-sm\">\n//                   <span className=\"font-medium\">Total Debit: ${totalDebit.toFixed(2)}</span>\n//                   <span className=\"mx-2\">|</span>\n//                   <span className=\"font-medium\">Total Credit: ${totalCredit.toFixed(2)}</span>\n//                 </div>\n//                 {entryIsBalanced ? (\n//                   <div className=\"flex items-center text-green-600\">\n//                     <CheckCircle size={16} className=\"mr-1\" />\n//                     <span className=\"text-sm\">Balanced</span>\n//                   </div>\n//                 ) : (\n//                   <div className=\"flex items-center text-red-600\">\n//                     <AlertCircle size={16} className=\"mr-1\" />\n//                     <span className=\"text-sm\">Not Balanced</span>\n//                   </div>\n//                 )}\n//               </div>\n//             </div>\n//           </div>\n\n//           <div className=\"flex space-x-3\">\n//             <button\n//               onClick={saveJournalEntry}\n//               disabled={!entryIsBalanced}\n//               className=\"px-4 py-2 bg-emerald-600 text-white rounded-lg hover:bg-emerald-700 disabled:bg-gray-400 flex items-center space-x-2\"\n//             >\n//               <Save size={16} />\n//               <span>Save Entry</span>\n//             </button>\n//             <button\n//               onClick={() => setIsAddingEntry(false)}\n//               className=\"px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 flex items-center space-x-2\"\n//             >\n//               <X size={16} />\n//               <span>Cancel</span>\n//             </button>\n//           </div>\n//         </div>\n//       )}\n\n//       {/* Journal Entries Table */}\n//       <div className=\"bg-white border border-gray-200 rounded-lg overflow-hidden\">\n//         <div className=\"px-6 py-4 border-b border-gray-200\">\n//           <h2 className=\"text-lg font-semibold text-gray-900\">Journal Entries</h2>\n//           <p className=\"text-sm text-gray-600 mt-1\">\n//             Showing {filteredEntries.length} of {journalEntries.length} entries\n//           </p>\n//         </div>\n\n//         <div className=\"overflow-x-auto\">\n//           <table className=\"w-full\">\n//             <thead className=\"bg-gray-50\">\n//               <tr>\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                   Entry ID\n//                 </th>\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                   Date\n//                 </th>\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                   Description\n//                 </th>\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                   Reference\n//                 </th>\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                   Source\n//                 </th>\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                   Amount\n//                 </th>\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                   Status\n//                 </th>\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                   Actions\n//                 </th>\n//               </tr>\n//             </thead>\n//             <tbody className=\"bg-white divide-y divide-gray-200\">\n//               {filteredEntries.map((entry) => (\n//                 <tr key={entry.id} className=\"hover:bg-gray-50\">\n//                   <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\n//                     {entry.id}\n//                   </td>\n//                   <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n//                     {entry.date}\n//                   </td>\n//                   <td className=\"px-6 py-4 text-sm text-gray-900 max-w-xs truncate\">\n//                     {entry.description}\n//                   </td>\n//                   <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n//                     {entry.reference}\n//                   </td>\n//                   <td className=\"px-6 py-4 whitespace-nowrap\">\n//                     <span className={`px-2 py-1 text-xs font-medium rounded-full ${\n//                       entry.source === 'POS Sales' ? 'bg-green-100 text-green-800' : \n//                       entry.source === 'Manual' ? 'bg-orange-100 text-orange-800' :\n//                       'bg-blue-100 text-blue-800'\n//                     }`}>\n//                       {entry.source}\n//                     </span>\n//                   </td>\n//                   <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n//                     ${entry.totalDebit.toFixed(2)}\n//                   </td>\n//                   <td className=\"px-6 py-4 whitespace-nowrap\">\n//                     <span className={`px-2 py-1 text-xs font-medium rounded-full ${\n//                       entry.status === 'posted' ? 'bg-blue-100 text-blue-800' : 'bg-yellow-100 text-yellow-800'\n//                     }`}>\n//                       {entry.status}\n//                     </span>\n//                   </td>\n//                   <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">\n//                     <button\n//                       onClick={() => setSelectedEntry(entry)}\n//                       className=\"text-emerald-600 hover:text-emerald-900 mr-3\"\n//                     >\n//                       <Eye size={16} />\n//                     </button>\n//                   </td>\n//                 </tr>\n//               ))}\n//             </tbody>\n//           </table>\n//         </div>\n//       </div>\n\n//       {/* Entry Details Modal */}\n//       {selectedEntry && (\n//         <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center p-4 z-50\">\n//           <div className=\"bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-y-auto\">\n//             <div className=\"px-6 py-4 border-b border-gray-200\">\n//               <div className=\"flex items-center justify-between\">\n//                 <h3 className=\"text-lg font-semibold text-gray-900\">\n//                   Journal Entry Details - {selectedEntry.id}\n//                 </h3>\n//                 <button\n//                   onClick={() => setSelectedEntry(null)}\n//                   className=\"text-gray-400 hover:text-gray-600\"\n//                 >\n//                   <X size={20} />\n//                 </button>\n//               </div>\n//             </div>\n\n//             <div className=\"px-6 py-4\">\n//               {/* Entry Header */}\n//               <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-6\">\n//                 <div>\n//                   <label className=\"text-sm font-medium text-gray-500\">Date</label>\n//                   <p className=\"text-sm text-gray-900\">{selectedEntry.date}</p>\n//                 </div>\n//                 <div>\n//                   <label className=\"text-sm font-medium text-gray-500\">Reference</label>\n//                   <p className=\"text-sm text-gray-900\">{selectedEntry.reference}</p>\n//                 </div>\n//                 <div>\n//                   <label className=\"text-sm font-medium text-gray-500\">Description</label>\n//                   <p className=\"text-sm text-gray-900\">{selectedEntry.description}</p>\n//                 </div>\n//                 <div>\n//                   <label className=\"text-sm font-medium text-gray-500\">Source</label>\n//                   <span className={`px-2 py-1 text-xs font-medium rounded-full ${\n//                     selectedEntry.source === 'POS Sales' ? 'bg-green-100 text-green-800' : 'bg-orange-100 text-orange-800'\n//                   }`}>\n//                     {selectedEntry.source}\n//                   </span>\n//                 </div>\n//               </div>\n\n//               {/* Entry Lines */}\n//               <div className=\"mb-6\">\n//                 <h4 className=\"text-sm font-medium text-gray-700 mb-3\">Account Entries</h4>\n//                 <div className=\"overflow-x-auto\">\n//                   <table className=\"w-full border border-gray-200 rounded\">\n//                     <thead className=\"bg-gray-50\">\n//                       <tr>\n//                         <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500\">Account</th>\n//                         <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500\">Description</th>\n//                         <th className=\"px-4 py-2 text-right text-xs font-medium text-gray-500\">Debit</th>\n//                         <th className=\"px-4 py-2 text-right text-xs font-medium text-gray-500\">Credit</th>\n//                       </tr>\n//                     </thead>\n//                     <tbody className=\"divide-y divide-gray-200\">\n//                       {selectedEntry.entries.map((entryLine, index) => (\n//                         <tr key={index}>\n//                           <td className=\"px-4 py-2 text-sm text-gray-900\">\n//                             {getAccountName(entryLine.accountId)}\n//                           </td>\n//                           <td className=\"px-4 py-2 text-sm text-gray-600\">\n//                             {entryLine.description}\n//                           </td>\n//                           <td className=\"px-4 py-2 text-sm text-gray-900 text-right\">\n//                             {entryLine.debit > 0 ? `${entryLine.debit.toFixed(2)}` : '-'}\n//                           </td>\n//                           <td className=\"px-4 py-2 text-sm text-gray-900 text-right\">\n//                             {entryLine.credit > 0 ? `${entryLine.credit.toFixed(2)}` : '-'}\n//                           </td>\n//                         </tr>\n//                       ))}\n//                     </tbody>\n//                     <tfoot className=\"bg-gray-50\">\n//                       <tr>\n//                         <td colSpan=\"2\" className=\"px-4 py-2 text-sm font-medium text-gray-900\">\n//                           Totals:\n//                         </td>\n//                         <td className=\"px-4 py-2 text-sm font-bold text-gray-900 text-right\">\n//                           ${selectedEntry.totalDebit.toFixed(2)}\n//                         </td>\n//                         <td className=\"px-4 py-2 text-sm font-bold text-gray-900 text-right\">\n//                           ${selectedEntry.totalCredit.toFixed(2)}\n//                         </td>\n//                       </tr>\n//                     </tfoot>\n//                   </table>\n//                 </div>\n//               </div>\n\n//               {/* Original Order Info (if available) */}\n//               {selectedEntry.originalOrder && (\n//                 <div className=\"mb-6 p-4 bg-gray-50 rounded-lg\">\n//                   <h4 className=\"text-sm font-medium text-gray-700 mb-3\">Original Sales Order Details</h4>\n//                   <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n//                     <div>\n//                       <span className=\"font-medium text-gray-500\">Order ID:</span>\n//                       <p className=\"text-gray-900\">{selectedEntry.originalOrder.orderId}</p>\n//                     </div>\n//                     <div>\n//                       <span className=\"font-medium text-gray-500\">Status:</span>\n//                       <p className=\"text-gray-900\">{selectedEntry.originalOrder.status}</p>\n//                     </div>\n//                     <div>\n//                       <span className=\"font-medium text-gray-500\">Payment Status:</span>\n//                       <p className=\"text-gray-900\">{selectedEntry.originalOrder.paid ? 'Paid' : 'Unpaid'}</p>\n//                     </div>\n//                     <div>\n//                       <span className=\"font-medium text-gray-500\">Fulfilled:</span>\n//                       <p className=\"text-gray-900\">{selectedEntry.originalOrder.fulfilled ? 'Yes' : 'No'}</p>\n//                     </div>\n//                   </div>\n\n//                   {/* Line Items */}\n//                   <div className=\"mt-4\">\n//                     <span className=\"font-medium text-gray-500\">Line Items:</span>\n//                     <div className=\"mt-2 space-y-2\">\n//                       {selectedEntry.originalOrder.lineItems.map((item, index) => (\n//                         <div key={index} className=\"text-sm bg-white p-2 rounded border\">\n//                           <span className=\"font-medium\">{item.productName}</span> - \n//                           Qty: {item.quantity}, Price: ${item.price}, Total: ${item.total}\n//                           {item.taxAmount > 0 && <span className=\"text-gray-500\"> (Tax: ${item.taxAmount})</span>}\n//                         </div>\n//                       ))}\n//                     </div>\n//                   </div>\n//                 </div>\n//               )}\n\n//               {/* Entry Metadata */}\n//               <div className=\"text-xs text-gray-500\">\n//                 <p>Created: {new Date(selectedEntry.createdAt).toLocaleString()}</p>\n//                 <p>Status: {selectedEntry.status}</p>\n//                 <p>Type: {selectedEntry.transactionType}</p>\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n//       )}\n\n//       {/* Trial Balance Modal */}\n//       {showTrialBalance && (\n//         <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center p-4 z-50\">\n//           <div className=\"bg-white rounded-lg max-w-5xl w-full max-h-[90vh] overflow-y-auto\">\n//             <div className=\"px-6 py-4 border-b border-gray-200\">\n//               <div className=\"flex items-center justify-between\">\n//                 <h3 className=\"text-lg font-semibold text-gray-900\">\n//                   Trial Balance - As of {new Date().toLocaleDateString()}\n//                 </h3>\n//                 <div className=\"flex items-center space-x-2\">\n//                   <button\n//                     onClick={() => {\n//                       // Export functionality would go here\n//                       alert('Export functionality would be implemented here');\n//                     }}\n//                     className=\"px-3 py-1 bg-emerald-600 text-white rounded text-sm hover:bg-emerald-700 flex items-center space-x-1\"\n//                   >\n//                     <Download size={14} />\n//                     <span>Export</span>\n//                   </button>\n//                   <button\n//                     onClick={() => setShowTrialBalance(false)}\n//                     className=\"text-gray-400 hover:text-gray-600\"\n//                   >\n//                     <X size={20} />\n//                   </button>\n//                 </div>\n//               </div>\n//             </div>\n\n//             <div className=\"px-6 py-4\">\n//               <div className=\"overflow-x-auto\">\n//                 <table className=\"w-full\">\n//                   <thead className=\"bg-gray-50\">\n//                     <tr>\n//                       <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                         Account Code\n//                       </th>\n//                       <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                         Account Name\n//                       </th>\n//                       <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                         Type\n//                       </th>\n//                       <th className=\"px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                         Debit Total\n//                       </th>\n//                       <th className=\"px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                         Credit Total\n//                       </th>\n//                       <th className=\"px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                         Balance\n//                       </th>\n//                     </tr>\n//                   </thead>\n//                   <tbody className=\"bg-white divide-y divide-gray-200\">\n//                     {trialBalance.map((account) => (\n//                       <tr key={account.accountId}>\n//                         <td className=\"px-4 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\n//                           {account.accountCode}\n//                         </td>\n//                         <td className=\"px-4 py-4 whitespace-nowrap text-sm text-gray-900\">\n//                           {account.accountName}\n//                         </td>\n//                         <td className=\"px-4 py-4 whitespace-nowrap\">\n//                           <span className={`px-2 py-1 text-xs font-medium rounded-full ${\n//                             account.accountType === 'assets' ? 'bg-green-100 text-green-800' :\n//                             account.accountType === 'liabilities' ? 'bg-red-100 text-red-800' :\n//                             account.accountType === 'equity' ? 'bg-blue-100 text-blue-800' :\n//                             account.accountType === 'revenue' ? 'bg-purple-100 text-purple-800' :\n//                             'bg-orange-100 text-orange-800'\n//                           }`}>\n//                             {account.accountType}\n//                           </span>\n//                         </td>\n//                         <td className=\"px-4 py-4 whitespace-nowrap text-sm text-gray-900 text-right\">\n//                           ${account.debit.toFixed(2)}\n//                         </td>\n//                         <td className=\"px-4 py-4 whitespace-nowrap text-sm text-gray-900 text-right\">\n//                           ${account.credit.toFixed(2)}\n//                         </td>\n//                         <td className=\"px-4 py-4 whitespace-nowrap text-sm font-medium text-right\">\n//                           <span className={account.balance >= 0 ? 'text-green-600' : 'text-red-600'}>\n//                             ${Math.abs(account.balance).toFixed(2)}\n//                             {account.balance < 0 && ' (CR)'}\n//                           </span>\n//                         </td>\n//                       </tr>\n//                     ))}\n//                   </tbody>\n//                   <tfoot className=\"bg-gray-50\">\n//                     <tr>\n//                       <td colSpan=\"3\" className=\"px-4 py-3 text-sm font-bold text-gray-900\">\n//                         TOTALS:\n//                       </td>\n//                       <td className=\"px-4 py-3 text-sm font-bold text-gray-900 text-right\">\n//                         ${trialBalance.reduce((sum, acc) => sum + acc.debit, 0).toFixed(2)}\n//                       </td>\n//                       <td className=\"px-4 py-3 text-sm font-bold text-gray-900 text-right\">\n//                         ${trialBalance.reduce((sum, acc) => sum + acc.credit, 0).toFixed(2)}\n//                       </td>\n//                       <td className=\"px-4 py-3 text-sm font-bold text-gray-900 text-right\">\n//                         ${Math.abs(trialBalance.reduce((sum, acc) => sum + acc.balance, 0)).toFixed(2)}\n//                       </td>\n//                     </tr>\n//                   </tfoot>\n//                 </table>\n//               </div>\n\n//               {/* Trial Balance Validation */}\n//               <div className=\"mt-4 p-4 bg-green-50 border border-green-200 rounded-lg\">\n//                 <div className=\"flex items-center\">\n//                   <CheckCircle className=\"text-green-600 mr-2\" size={20} />\n//                   <div>\n//                     <h4 className=\"font-medium text-green-800\">Trial Balance is Balanced</h4>\n//                     <p className=\"text-sm text-green-700\">\n//                       Total Debits = Total Credits = ${trialBalance.reduce((sum, acc) => sum + acc.debit, 0).toFixed(2)}\n//                     </p>\n//                   </div>\n//                 </div>\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n//       )}\n\n//       {/* Integration Status */}\n//       <div className=\"mt-8 grid grid-cols-1 md:grid-cols-3 gap-4\">\n//         <div className=\"p-4 bg-green-50 border border-green-200 rounded-lg\">\n//           <div className=\"flex items-center mb-2\">\n//             <CheckCircle className=\"text-green-600 mr-2\" size={16} />\n//             <h4 className=\"font-medium text-green-800\">POS API Integration</h4>\n//           </div>\n//           <p className=\"text-sm text-green-700\">\n//             Sales orders automatically create journal entries from live API data\n//           </p>\n//         </div>\n\n//         <div className=\"p-4 bg-blue-50 border border-blue-200 rounded-lg\">\n//           <div className=\"flex items-center mb-2\">\n//             <RefreshCw className=\"text-blue-600 mr-2\" size={16} />\n//             <h4 className=\"font-medium text-blue-800\">Real-time Sync</h4>\n//           </div>\n//           <p className=\"text-sm text-blue-700\">\n//             Journal entries updated automatically with each sales transaction\n//           </p>\n//         </div>\n\n//         <div className=\"p-4 bg-orange-50 border border-orange-200 rounded-lg\">\n//           <div className=\"flex items-center mb-2\">\n//             <FileText className=\"text-orange-600 mr-2\" size={16} />\n//             <h4 className=\"font-medium text-orange-800\">Manual Entries</h4>\n//           </div>\n//           <p className=\"text-sm text-orange-700\">\n//             Add adjustments and corrections with full double-entry validation\n//           </p>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default GeneralLedger;\n\n//CORRECT CODE\n// import React, { useState, useEffect } from 'react';\n// import { \n//   Book, \n//   Plus, \n//   Filter, \n//   Search, \n//   Calendar, \n//   FileText, \n//   Edit, \n//   Trash2, \n//   Save, \n//   X, \n//   AlertCircle,\n//   CheckCircle,\n//   DollarSign,\n//   TrendingUp,\n//   Eye,\n//   Download,\n//   RefreshCw\n// } from 'lucide-react';\n\n// const GeneralLedger = () => {\n//   const [journalEntries, setJournalEntries] = useState([]);\n//   const [accounts, setAccounts] = useState([]);\n//   const [filteredEntries, setFilteredEntries] = useState([]);\n//   const [selectedEntry, setSelectedEntry] = useState(null);\n//   const [isAddingEntry, setIsAddingEntry] = useState(false);\n//   const [loading, setLoading] = useState(false);\n//   const [filters, setFilters] = useState({\n//     dateFrom: '',\n//     dateTo: '',\n//     accountId: '',\n//     transactionType: 'all',\n//     searchTerm: ''\n//   });\n//   const [trialBalance, setTrialBalance] = useState([]);\n//   const [showTrialBalance, setShowTrialBalance] = useState(false);\n//   const [newEntry, setNewEntry] = useState({\n//     date: new Date().toISOString().split('T')[0],\n//     description: '',\n//     reference: '',\n//     entries: [\n//       { accountId: '', debit: 0, credit: 0, description: '' },\n//       { accountId: '', debit: 0, credit: 0, description: '' }\n//     ]\n//   });\n\n//   // Chart of Accounts\n//   const chartOfAccounts = [\n//     { id: '1111', code: '1111', name: 'Petty Cash', type: 'assets' },\n//     { id: '1112', code: '1112', name: 'Bank - Main Account', type: 'assets' },\n//     { id: '1120', code: '1120', name: 'Accounts Receivable', type: 'assets' },\n//     { id: '1130', code: '1130', name: 'Inventory', type: 'assets' },\n//     { id: '2110', code: '2110', name: 'Accounts Payable', type: 'liabilities' },\n//     { id: '2130', code: '2130', name: 'Sales Tax Payable', type: 'liabilities' },\n//     { id: '4100', code: '4100', name: 'Sales Revenue', type: 'revenue' },\n//     { id: '4110', code: '4110', name: 'Electronics Sales', type: 'revenue' },\n//     { id: '5100', code: '5100', name: 'Cost of Goods Sold', type: 'expenses' },\n//     { id: '5200', code: '5200', name: 'Purchase Expenses', type: 'expenses' }\n//   ];\n\n//   // API Configuration - This is already correct\n//   const API_BASE_URL = 'https://api-pos.hulmsolutions.com/POS/accounting2/31fc8df0-61db-41e5-bb67-070fde367ea1/orders?start=0&size=200';\n//   const API_BASE_URL_CHARTS_OF_ACCOUNTS = 'http://localhost:8080/api/accounts';\n\n//   useEffect(() => {\n//     setAccounts(chartOfAccounts);\n//     loadJournalEntriesFromAPI();\n//   }, []);\n\n//   useEffect(() => {\n//     filterEntries();\n//   }, [journalEntries, filters]);\n\n//   async function fetchOrderData() {\n//     try {\n//       const response = await fetch(API_BASE_URL, {\n//         method: 'GET',\n//         headers: {\n//           'Authorization': 'Bearer Hamid',\n//           'Content-Type': 'application/json',\n//         },\n//       });\n\n//       if (!response.ok) {\n//         throw new Error(`API request failed with status ${response.status}`);\n//       }\n\n//       const data = await response.json();\n//       return data;\n//     } catch (error) {\n//       console.error('Error fetching order data:', error);\n//       // Implement notification system for integration errors\n//       return null;\n//     }\n//   }\n\n//   // Fetch Sales Orders from API and convert to Journal Entries\n//   const loadJournalEntriesFromAPI = async () => {\n//     setLoading(true);\n//     try {\n//       // FIXED: Using the correct API_BASE_URL directly instead of appending \"/orders?start=0&size=200\"\n//       const salesOrders = await fetchOrderData();\n\n//       if (!salesOrders) {\n//         throw new Error('Failed to fetch sales orders');\n//       }\n\n//       // Filter only PAID and FULFILLED orders\n//       const completedOrders = salesOrders.filter(order => \n//         order.paid === true && order.fulfilled === true && order.status === 'Closed'\n//       );\n\n//       // Convert completed sales orders to journal entries\n//       const journalEntriesFromSales = completedOrders.map(order => convertSalesOrderToJournalEntry(order))\n//         .filter(entry => entry !== null); // Filter out any null entries\n\n//       // Load any manual journal entries from localStorage\n//       const manualEntries = JSON.parse(localStorage.getItem('manualJournalEntries') || '[]');\n\n//       // Combine both types of entries\n//       const allEntries = [...journalEntriesFromSales, ...manualEntries];\n\n//       setJournalEntries(allEntries);\n//       console.log('Loaded completed orders:', completedOrders.length, 'Total journal entries:', allEntries.length);\n//     } catch (error) {\n//       console.error('Error loading sales orders:', error);\n//       // Fallback to sample data if API fails\n//       loadSampleJournalEntries();\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   // Convert Sales Order to Journal Entry\n//   const convertSalesOrderToJournalEntry = (order) => {\n//     const entries = [];\n\n//     // Use actual values from API (amounts are in PKR, not USD)\n//     const subTotal = parseFloat(order.subTotal) || 0;\n//     const taxAmount = parseFloat(order.taxAmount) || 0;\n//     const total = parseFloat(order.total) || 0;\n\n//     // Only process PAID and FULFILLED orders\n//     if (!order.paid || !order.fulfilled || order.status !== 'Closed') {\n//       return null; // Skip incomplete orders\n//     }\n\n//     // Cash/Bank Account (Debit) - Total amount received\n//     entries.push({\n//       accountId: '1111', // Petty Cash (assume cash payment)\n//       accountName: 'Petty Cash',\n//       debit: total,\n//       credit: 0,\n//       description: `Cash received from Order #${order.orderId} - ${order.lineItems.map(item => item.productName).join(', ')}`\n//     });\n\n//     // Sales Revenue (Credit) - Subtotal\n//     if (subTotal > 0) {\n//       entries.push({\n//         accountId: '4110', // Electronics Sales\n//         accountName: 'Electronics Sales',\n//         debit: 0,\n//         credit: subTotal,\n//         description: `Revenue from Order #${order.orderId}`\n//       });\n//     }\n\n//     // Sales Tax Payable (Credit) - Tax amount\n//     if (taxAmount > 0) {\n//       entries.push({\n//         accountId: '2130',\n//         accountName: 'Sales Tax Payable',\n//         debit: 0,\n//         credit: taxAmount,\n//         description: `${order.taxRate}% tax collected on Order #${order.orderId}`\n//       });\n//     }\n\n//     // Cost of Goods Sold and Inventory reduction (only for fulfilled items)\n//     let totalCOGS = 0;\n//     order.lineItems.forEach(item => {\n//       if (item.fulfilled && item.status === 'Fulfilled') {\n//         const costPrice = parseFloat(item.costPrice) || 0;\n//         const quantity = parseFloat(item.quantity) || 0;\n//         const itemCOGS = costPrice * quantity;\n//         totalCOGS += itemCOGS;\n//       }\n//     });\n\n//     if (totalCOGS > 0) {\n//       // Cost of Goods Sold (Debit)\n//       entries.push({\n//         accountId: '5100',\n//         accountName: 'Cost of Goods Sold',\n//         debit: totalCOGS,\n//         credit: 0,\n//         description: `COGS for Order #${order.orderId}`\n//       });\n\n//       // Inventory (Credit)\n//       entries.push({\n//         accountId: '1130',\n//         accountName: 'Inventory',\n//         debit: 0,\n//         credit: totalCOGS,\n//         description: `Inventory reduction - Order #${order.orderId}`\n//       });\n//     }\n\n//     // Calculate totals\n//     const totalDebit = entries.reduce((sum, entry) => sum + entry.debit, 0);\n//     const totalCredit = entries.reduce((sum, entry) => sum + entry.credit, 0);\n\n//     return {\n//       id: `JE-ORDER-${order.orderId}`,\n//       date: formatDateFromCreatedAt(order.createdAt),\n//       description: `Sales Order #${order.orderId} - ${order.lineItems.map(item => `${item.productName} (${item.quantity})`).join(', ')}`,\n//       reference: `ORDER-${order.orderId}`,\n//       transactionType: 'automatic',\n//       source: 'POS Sales',\n//       status: 'posted',\n//       entries: entries,\n//       totalDebit: Math.round(totalDebit * 100) / 100,\n//       totalCredit: Math.round(totalCredit * 100) / 100,\n//       createdAt: order.createdAt,\n//       originalOrder: order // Keep reference to original order\n//     };\n//   };\n\n//   // Format date from API format (2025.08.18.10.08.54.569) to YYYY-MM-DD\n//   const formatDateFromCreatedAt = (createdAt) => {\n//     try {\n//       const parts = createdAt.split('.');\n//       if (parts.length >= 3) {\n//         return `${parts[0]}-${parts[1].padStart(2, '0')}-${parts[2].padStart(2, '0')}`;\n//       }\n//       return new Date().toISOString().split('T')[0];\n//     } catch (error) {\n//       return new Date().toISOString().split('T')[0];\n//     }\n//   };\n\n//   // Fallback sample data\n//   const loadSampleJournalEntries = () => {\n//     const sampleEntries = [\n//       {\n//         id: 'JE001',\n//         date: '2025-08-18',\n//         description: 'Sample POS Sale - Medical products',\n//         reference: 'POS001',\n//         transactionType: 'automatic',\n//         source: 'POS',\n//         status: 'posted',\n//         entries: [\n//           { accountId: '1111', accountName: 'Petty Cash', debit: 60.50, credit: 0, description: 'Cash received from customer' },\n//           { accountId: '4100', accountName: 'Sales Revenue', debit: 0, credit: 55.00, description: 'Revenue from medical products' },\n//           { accountId: '2130', accountName: 'Sales Tax Payable', debit: 0, credit: 5.50, description: 'Sales tax collected' }\n//         ],\n//         totalDebit: 60.50,\n//         totalCredit: 60.50,\n//         createdAt: '2025-08-18T10:30:00Z'\n//       }\n//     ];\n//     setJournalEntries(sampleEntries);\n//   };\n\n//   const filterEntries = () => {\n//     let filtered = [...journalEntries];\n\n//     if (filters.dateFrom) {\n//       filtered = filtered.filter(entry => entry.date >= filters.dateFrom);\n//     }\n//     if (filters.dateTo) {\n//       filtered = filtered.filter(entry => entry.date <= filters.dateTo);\n//     }\n//     if (filters.accountId) {\n//       filtered = filtered.filter(entry => \n//         entry.entries.some(e => e.accountId === filters.accountId)\n//       );\n//     }\n//     if (filters.transactionType !== 'all') {\n//       filtered = filtered.filter(entry => entry.transactionType === filters.transactionType);\n//     }\n//     if (filters.searchTerm) {\n//       const term = filters.searchTerm.toLowerCase();\n//       filtered = filtered.filter(entry => \n//         entry.description.toLowerCase().includes(term) ||\n//         entry.reference.toLowerCase().includes(term) ||\n//         entry.entries.some(e => e.description.toLowerCase().includes(term))\n//       );\n//     }\n\n//     setFilteredEntries(filtered);\n//   };\n\n//   const generateTrialBalance = () => {\n//     const balances = {};\n\n//     // Initialize all accounts\n//     chartOfAccounts.forEach(account => {\n//       balances[account.id] = {\n//         accountId: account.id,\n//         accountCode: account.code,\n//         accountName: account.name,\n//         accountType: account.type,\n//         debit: 0,\n//         credit: 0,\n//         balance: 0\n//       };\n//     });\n\n//     // Calculate balances from journal entries\n//     journalEntries.forEach(entry => {\n//       if (entry.status === 'posted') {\n//         entry.entries.forEach(entryLine => {\n//           if (balances[entryLine.accountId]) {\n//             balances[entryLine.accountId].debit += entryLine.debit;\n//             balances[entryLine.accountId].credit += entryLine.credit;\n//           }\n//         });\n//       }\n//     });\n\n//     // Calculate net balances\n//     Object.values(balances).forEach(account => {\n//       if (account.accountType === 'assets' || account.accountType === 'expenses') {\n//         account.balance = account.debit - account.credit;\n//       } else {\n//         account.balance = account.credit - account.debit;\n//       }\n//     });\n\n//     const trialBalanceData = Object.values(balances)\n//       .filter(account => account.debit !== 0 || account.credit !== 0)\n//       .sort((a, b) => a.accountCode.localeCompare(b.accountCode));\n\n//     setTrialBalance(trialBalanceData);\n//     setShowTrialBalance(true);\n//   };\n\n//   const addEntryLine = () => {\n//     setNewEntry({\n//       ...newEntry,\n//       entries: [...newEntry.entries, { accountId: '', debit: 0, credit: 0, description: '' }]\n//     });\n//   };\n\n//   const removeEntryLine = (index) => {\n//     if (newEntry.entries.length > 2) {\n//       const updatedEntries = newEntry.entries.filter((_, i) => i !== index);\n//       setNewEntry({ ...newEntry, entries: updatedEntries });\n//     }\n//   };\n\n//   const updateEntryLine = (index, field, value) => {\n//     const updatedEntries = [...newEntry.entries];\n//     updatedEntries[index] = { ...updatedEntries[index], [field]: value };\n//     setNewEntry({ ...newEntry, entries: updatedEntries });\n//   };\n\n//   const calculateTotals = (entries) => {\n//     const totalDebit = entries.reduce((sum, entry) => sum + (parseFloat(entry.debit) || 0), 0);\n//     const totalCredit = entries.reduce((sum, entry) => sum + (parseFloat(entry.credit) || 0), 0);\n//     return { totalDebit, totalCredit };\n//   };\n\n//   const isBalanced = (entries) => {\n//     const { totalDebit, totalCredit } = calculateTotals(entries);\n//     return Math.abs(totalDebit - totalCredit) < 0.01;\n//   };\n\n//   const saveJournalEntry = () => {\n//     if (!newEntry.description || !newEntry.entries.every(e => e.accountId)) {\n//       alert('Please fill in all required fields');\n//       return;\n//     }\n\n//     if (!isBalanced(newEntry.entries)) {\n//       alert('Journal entry must be balanced - total debits must equal total credits');\n//       return;\n//     }\n\n//     const { totalDebit, totalCredit } = calculateTotals(newEntry.entries);\n\n//     // Add account names to entries\n//     const entriesWithNames = newEntry.entries.map(entry => ({\n//       ...entry,\n//       accountName: accounts.find(acc => acc.id === entry.accountId)?.name || '',\n//       debit: parseFloat(entry.debit) || 0,\n//       credit: parseFloat(entry.credit) || 0\n//     }));\n\n//     const journalEntry = {\n//       id: `JE-MANUAL-${Date.now()}`,\n//       date: newEntry.date,\n//       description: newEntry.description,\n//       reference: newEntry.reference || `MAN${Date.now()}`,\n//       transactionType: 'manual',\n//       source: 'Manual',\n//       status: 'posted',\n//       entries: entriesWithNames,\n//       totalDebit,\n//       totalCredit,\n//       createdAt: new Date().toISOString()\n//     };\n\n//     // Save manual entries to localStorage\n//     const existingManualEntries = JSON.parse(localStorage.getItem('manualJournalEntries') || '[]');\n//     const updatedManualEntries = [...existingManualEntries, journalEntry];\n//     localStorage.setItem('manualJournalEntries', JSON.stringify(updatedManualEntries));\n\n//     // Update state\n//     setJournalEntries([...journalEntries, journalEntry]);\n\n//     // Reset form\n//     setNewEntry({\n//       date: new Date().toISOString().split('T')[0],\n//       description: '',\n//       reference: '',\n//       entries: [\n//         { accountId: '', debit: 0, credit: 0, description: '' },\n//         { accountId: '', debit: 0, credit: 0, description: '' }\n//       ]\n//     });\n//     setIsAddingEntry(false);\n//   };\n\n//   const getAccountName = (accountId) => {\n//     const account = accounts.find(acc => acc.id === accountId);\n//     return account ? `${account.code} - ${account.name}` : '';\n//   };\n\n//   const { totalDebit, totalCredit } = calculateTotals(newEntry.entries);\n//   const entryIsBalanced = isBalanced(newEntry.entries);\n\n//   return (\n//     <div className=\"max-w-7xl mx-auto p-6 bg-white\">\n//       {/* Header */}\n//       <div className=\"mb-8\">\n//         <h1 className=\"text-3xl font-bold text-gray-900 mb-2 flex items-center\">\n//           <Book className=\"mr-3 text-emerald-600\" />\n//           General Ledger\n//         </h1>\n//         <p className=\"text-gray-600\">Real-time transaction recording and journal entry management</p>\n//       </div>\n\n//       {/* Quick Stats */}\n//       <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n//         <div className=\"bg-blue-50 p-4 rounded-lg border border-blue-200\">\n//           <div className=\"flex items-center justify-between\">\n//             <div>\n//               <p className=\"text-blue-600 text-sm font-medium\">Total Entries</p>\n//               <p className=\"text-2xl font-bold text-blue-900\">{journalEntries.length}</p>\n//             </div>\n//             <FileText className=\"text-blue-600\" size={24} />\n//           </div>\n//         </div>\n\n//         <div className=\"bg-green-50 p-4 rounded-lg border border-green-200\">\n//           <div className=\"flex items-center justify-between\">\n//             <div>\n//               <p className=\"text-green-600 text-sm font-medium\">POS Entries</p>\n//               <p className=\"text-2xl font-bold text-green-900\">\n//                 {journalEntries.filter(e => e.source === 'POS Sales').length}\n//               </p>\n//             </div>\n//             <TrendingUp className=\"text-green-600\" size={24} />\n//           </div>\n//         </div>\n\n//         <div className=\"bg-orange-50 p-4 rounded-lg border border-orange-200\">\n//           <div className=\"flex items-center justify-between\">\n//             <div>\n//               <p className=\"text-orange-600 text-sm font-medium\">Manual Entries</p>\n//               <p className=\"text-2xl font-bold text-orange-900\">\n//                 {journalEntries.filter(e => e.transactionType === 'manual').length}\n//               </p>\n//             </div>\n//             <Edit className=\"text-orange-600\" size={24} />\n//           </div>\n//         </div>\n\n//         <div className=\"bg-purple-50 p-4 rounded-lg border border-purple-200\">\n//           <div className=\"flex items-center justify-between\">\n//             <div>\n//               <p className=\"text-purple-600 text-sm font-medium\">Total Value</p>\n//               <p className=\"text-2xl font-bold text-purple-900\">\n//                 PKR {journalEntries.reduce((sum, entry) => sum + entry.totalDebit, 0).toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\n//               </p>\n//             </div>\n//             <DollarSign className=\"text-purple-600\" size={24} />\n//           </div>\n//         </div>\n//       </div>\n\n//       {/* Controls */}\n//       <div className=\"flex flex-wrap items-center justify-between gap-4 mb-6\">\n//         <div className=\"flex flex-wrap items-center gap-4\">\n//           {/* Date Filters */}\n//           <div className=\"flex items-center space-x-2\">\n//             <Calendar size={16} className=\"text-gray-400\" />\n//             <input\n//               type=\"date\"\n//               value={filters.dateFrom}\n//               onChange={(e) => setFilters({ ...filters, dateFrom: e.target.value })}\n//               className=\"px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\n//               placeholder=\"From\"\n//             />\n//             <span className=\"text-gray-500\">to</span>\n//             <input\n//               type=\"date\"\n//               value={filters.dateTo}\n//               onChange={(e) => setFilters({ ...filters, dateTo: e.target.value })}\n//               className=\"px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\n//               placeholder=\"To\"\n//             />\n//           </div>\n\n//           {/* Account Filter */}\n//           <div className=\"relative\">\n//             <Filter className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" size={16} />\n//             <select\n//               value={filters.accountId}\n//               onChange={(e) => setFilters({ ...filters, accountId: e.target.value })}\n//               className=\"pl-10 pr-8 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\n//             >\n//               <option value=\"\">All Accounts</option>\n//               {accounts.map(account => (\n//                 <option key={account.id} value={account.id}>\n//                   {account.code} - {account.name}\n//                 </option>\n//               ))}\n//             </select>\n//           </div>\n\n//           {/* Transaction Type Filter */}\n//           <select\n//             value={filters.transactionType}\n//             onChange={(e) => setFilters({ ...filters, transactionType: e.target.value })}\n//             className=\"px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\n//           >\n//             <option value=\"all\">All Types</option>\n//             <option value=\"automatic\">POS Sales</option>\n//             <option value=\"manual\">Manual</option>\n//           </select>\n\n//           {/* Search */}\n//           <div className=\"relative\">\n//             <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" size={16} />\n//             <input\n//               type=\"text\"\n//               placeholder=\"Search entries...\"\n//               value={filters.searchTerm}\n//               onChange={(e) => setFilters({ ...filters, searchTerm: e.target.value })}\n//               className=\"pl-10 pr-4 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\n//             />\n//           </div>\n//         </div>\n\n//         <div className=\"flex space-x-3\">\n//           <button\n//             onClick={loadJournalEntriesFromAPI}\n//             disabled={loading}\n//             className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center space-x-2 disabled:bg-gray-400\"\n//           >\n//             {loading ? <RefreshCw className=\"animate-spin\" size={16} /> : <RefreshCw size={16} />}\n//             <span>Refresh from API</span>\n//           </button>\n//           <button\n//             onClick={() => setIsAddingEntry(true)}\n//             className=\"px-4 py-2 bg-emerald-600 text-white rounded-lg hover:bg-emerald-700 flex items-center space-x-2\"\n//           >\n//             <Plus size={16} />\n//             <span>Add Entry</span>\n//           </button>\n//           <button\n//             onClick={generateTrialBalance}\n//             className=\"px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 flex items-center space-x-2\"\n//           >\n//             <FileText size={16} />\n//             <span>Trial Balance</span>\n//           </button>\n//         </div>\n//       </div>\n\n//       {/* Journal Entry Form */}\n//       {isAddingEntry && (\n//         <div className=\"mb-8 p-6 bg-gray-50 rounded-lg border\">\n//           <h3 className=\"text-lg font-semibold mb-4\">Add Manual Journal Entry</h3>\n\n//           <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n//             <div>\n//               <label className=\"block text-sm font-medium text-gray-700 mb-1\">Date *</label>\n//               <input\n//                 type=\"date\"\n//                 value={newEntry.date}\n//                 onChange={(e) => setNewEntry({ ...newEntry, date: e.target.value })}\n//                 className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\n//               />\n//             </div>\n//             <div>\n//               <label className=\"block text-sm font-medium text-gray-700 mb-1\">Description *</label>\n//               <input\n//                 type=\"text\"\n//                 value={newEntry.description}\n//                 onChange={(e) => setNewEntry({ ...newEntry, description: e.target.value })}\n//                 placeholder=\"Enter description\"\n//                 className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\n//               />\n//             </div>\n//             <div>\n//               <label className=\"block text-sm font-medium text-gray-700 mb-1\">Reference</label>\n//               <input\n//                 type=\"text\"\n//                 value={newEntry.reference}\n//                 onChange={(e) => setNewEntry({ ...newEntry, reference: e.target.value })}\n//                 placeholder=\"Reference number\"\n//                 className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\n//               />\n//             </div>\n//           </div>\n\n//           {/* Entry Lines */}\n//           <div className=\"mb-4\">\n//             <label className=\"block text-sm font-medium text-gray-700 mb-2\">Journal Entry Lines</label>\n//             <div className=\"space-y-3\">\n//               {newEntry.entries.map((entry, index) => (\n//                 <div key={index} className=\"grid grid-cols-12 gap-2 items-center bg-white p-3 rounded border\">\n//                   <div className=\"col-span-4\">\n//                     <select\n//                       value={entry.accountId}\n//                       onChange={(e) => updateEntryLine(index, 'accountId', e.target.value)}\n//                       className=\"w-full px-2 py-1 border border-gray-300 rounded text-sm focus:ring-2 focus:ring-emerald-500\"\n//                     >\n//                       <option value=\"\">Select Account</option>\n//                       {accounts.map(account => (\n//                         <option key={account.id} value={account.id}>\n//                           {account.code} - {account.name}\n//                         </option>\n//                       ))}\n//                     </select>\n//                   </div>\n//                   <div className=\"col-span-3\">\n//                     <input\n//                       type=\"text\"\n//                       value={entry.description}\n//                       onChange={(e) => updateEntryLine(index, 'description', e.target.value)}\n//                       placeholder=\"Description\"\n//                       className=\"w-full px-2 py-1 border border-gray-300 rounded text-sm focus:ring-2 focus:ring-emerald-500\"\n//                     />\n//                   </div>\n//                   <div className=\"col-span-2\">\n//                     <input\n//                       type=\"number\"\n//                       step=\"0.01\"\n//                       value={entry.debit}\n//                       onChange={(e) => updateEntryLine(index, 'debit', e.target.value)}\n//                       placeholder=\"Debit\"\n//                       className=\"w-full px-2 py-1 border border-gray-300 rounded text-sm focus:ring-2 focus:ring-emerald-500\"\n//                     />\n//                   </div>\n//                   <div className=\"col-span-2\">\n//                     <input\n//                       type=\"number\"\n//                       step=\"0.01\"\n//                       value={entry.credit}\n//                       onChange={(e) => updateEntryLine(index, 'credit', e.target.value)}\n//                       placeholder=\"Credit\"\n//                       className=\"w-full px-2 py-1 border border-gray-300 rounded text-sm focus:ring-2 focus:ring-emerald-500\"\n//                     />\n//                   </div>\n//                   <div className=\"col-span-1\">\n//                     {newEntry.entries.length > 2 && (\n//                       <button\n//                         onClick={() => removeEntryLine(index)}\n//                         className=\"p-1 text-red-600 hover:bg-red-100 rounded\"\n//                       >\n//                         <Trash2 size={14} />\n//                       </button>\n//                     )}\n//                   </div>\n//                 </div>\n//               ))}\n//             </div>\n\n//             <div className=\"flex justify-between items-center mt-3\">\n//               <button\n//                 onClick={addEntryLine}\n//                 className=\"px-3 py-1 text-sm bg-gray-200 text-gray-700 rounded hover:bg-gray-300 flex items-center space-x-1\"\n//               >\n//                 <Plus size={14} />\n//                 <span>Add Line</span>\n//               </button>\n\n//               <div className=\"flex items-center space-x-4\">\n//                 <div className=\"text-sm\">\n//                   <span className=\"font-medium\">Total Debit: PKR {totalDebit.toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}</span>\n//                   <span className=\"mx-2\">|</span>\n//                   <span className=\"font-medium\">Total Credit: PKR {totalCredit.toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}</span>\n//                 </div>\n//                 {entryIsBalanced ? (\n//                   <div className=\"flex items-center text-green-600\">\n//                     <CheckCircle size={16} className=\"mr-1\" />\n//                     <span className=\"text-sm\">Balanced</span>\n//                   </div>\n//                 ) : (\n//                   <div className=\"flex items-center text-red-600\">\n//                     <AlertCircle size={16} className=\"mr-1\" />\n//                     <span className=\"text-sm\">Not Balanced</span>\n//                   </div>\n//                 )}\n//               </div>\n//             </div>\n//           </div>\n\n//           <div className=\"flex space-x-3\">\n//             <button\n//               onClick={saveJournalEntry}\n//               disabled={!entryIsBalanced}\n//               className=\"px-4 py-2 bg-emerald-600 text-white rounded-lg hover:bg-emerald-700 disabled:bg-gray-400 flex items-center space-x-2\"\n//             >\n//               <Save size={16} />\n//               <span>Save Entry</span>\n//             </button>\n//             <button\n//               onClick={() => setIsAddingEntry(false)}\n//               className=\"px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 flex items-center space-x-2\"\n//             >\n//               <X size={16} />\n//               <span>Cancel</span>\n//             </button>\n//           </div>\n//         </div>\n//       )}\n\n//       {/* Journal Entries Table */}\n//       <div className=\"bg-white border border-gray-200 rounded-lg overflow-hidden\">\n//         <div className=\"px-6 py-4 border-b border-gray-200\">\n//           <h2 className=\"text-lg font-semibold text-gray-900\">Journal Entries</h2>\n//           <p className=\"text-sm text-gray-600 mt-1\">\n//             Showing {filteredEntries.length} of {journalEntries.length} entries\n//           </p>\n//         </div>\n\n//         <div className=\"overflow-x-auto\">\n//           <table className=\"w-full\">\n//             <thead className=\"bg-gray-50\">\n//               <tr>\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                   Entry ID\n//                 </th>\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                   Date\n//                 </th>\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                   Description\n//                 </th>\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                   Reference\n//                 </th>\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                   Source\n//                 </th>\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                   Amount\n//                 </th>\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                   Status\n//                 </th>\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                   Actions\n//                 </th>\n//               </tr>\n//             </thead>\n//             <tbody className=\"bg-white divide-y divide-gray-200\">\n//               {filteredEntries.map((entry) => (\n//                 <tr key={entry.id} className=\"hover:bg-gray-50\">\n//                   <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\n//                     {entry.id}\n//                   </td>\n//                   <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n//                     {entry.date}\n//                   </td>\n//                   <td className=\"px-6 py-4 text-sm text-gray-900 max-w-xs truncate\">\n//                     {entry.description}\n//                   </td>\n//                   <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n//                     {entry.reference}\n//                   </td>\n//                   <td className=\"px-6 py-4 whitespace-nowrap\">\n//                     <span className={`px-2 py-1 text-xs font-medium rounded-full ${\n//                       entry.source === 'POS Sales' ? 'bg-green-100 text-green-800' : \n//                       entry.source === 'Manual' ? 'bg-orange-100 text-orange-800' :\n//                       'bg-blue-100 text-blue-800'\n//                     }`}>\n//                       {entry.source}\n//                     </span>\n//                   </td>\n//                   <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n//                     PKR {entry.totalDebit.toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\n//                   </td>\n//                   <td className=\"px-6 py-4 whitespace-nowrap\">\n//                     <span className={`px-2 py-1 text-xs font-medium rounded-full ${\n//                       entry.status === 'posted' ? 'bg-blue-100 text-blue-800' : 'bg-yellow-100 text-yellow-800'\n//                     }`}>\n//                       {entry.status}\n//                     </span>\n//                   </td>\n//                   <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">\n//                     <button\n//                       onClick={() => setSelectedEntry(entry)}\n//                       className=\"text-emerald-600 hover:text-emerald-900 mr-3\"\n//                     >\n//                       <Eye size={16} />\n//                     </button>\n//                   </td>\n//                 </tr>\n//               ))}\n//             </tbody>\n//           </table>\n//         </div>\n//       </div>\n\n//       {/* Entry Details Modal */}\n//       {selectedEntry && (\n//         <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center p-4 z-50\">\n//           <div className=\"bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-y-auto\">\n//             <div className=\"px-6 py-4 border-b border-gray-200\">\n//               <div className=\"flex items-center justify-between\">\n//                 <h3 className=\"text-lg font-semibold text-gray-900\">\n//                   Journal Entry Details - {selectedEntry.id}\n//                 </h3>\n//                 <button\n//                   onClick={() => setSelectedEntry(null)}\n//                   className=\"text-gray-400 hover:text-gray-600\"\n//                 >\n//                   <X size={20} />\n//                 </button>\n//               </div>\n//             </div>\n\n//             <div className=\"px-6 py-4\">\n//               {/* Entry Header */}\n//               <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-6\">\n//                 <div>\n//                   <label className=\"text-sm font-medium text-gray-500\">Date</label>\n//                   <p className=\"text-sm text-gray-900\">{selectedEntry.date}</p>\n//                 </div>\n//                 <div>\n//                   <label className=\"text-sm font-medium text-gray-500\">Reference</label>\n//                   <p className=\"text-sm text-gray-900\">{selectedEntry.reference}</p>\n//                 </div>\n//                 <div>\n//                   <label className=\"text-sm font-medium text-gray-500\">Description</label>\n//                   <p className=\"text-sm text-gray-900\">{selectedEntry.description}</p>\n//                 </div>\n//                 <div>\n//                   <label className=\"text-sm font-medium text-gray-500\">Source</label>\n//                   <span className={`px-2 py-1 text-xs font-medium rounded-full ${\n//                     selectedEntry.source === 'POS Sales' ? 'bg-green-100 text-green-800' : 'bg-orange-100 text-orange-800'\n//                   }`}>\n//                     {selectedEntry.source}\n//                   </span>\n//                 </div>\n//               </div>\n\n//               {/* Entry Lines */}\n//               <div className=\"mb-6\">\n//                 <h4 className=\"text-sm font-medium text-gray-700 mb-3\">Account Entries</h4>\n//                 <div className=\"overflow-x-auto\">\n//                   <table className=\"w-full border border-gray-200 rounded\">\n//                     <thead className=\"bg-gray-50\">\n//                       <tr>\n//                         <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500\">Account</th>\n//                         <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500\">Description</th>\n//                         <th className=\"px-4 py-2 text-right text-xs font-medium text-gray-500\">Debit</th>\n//                         <th className=\"px-4 py-2 text-right text-xs font-medium text-gray-500\">Credit</th>\n//                       </tr>\n//                     </thead>\n//                     <tbody className=\"divide-y divide-gray-200\">\n//                       {selectedEntry.entries.map((entryLine, index) => (\n//                         <tr key={index}>\n//                           <td className=\"px-4 py-2 text-sm text-gray-900\">\n//                             {getAccountName(entryLine.accountId)}\n//                           </td>\n//                           <td className=\"px-4 py-2 text-sm text-gray-600\">\n//                             {entryLine.description}\n//                           </td>\n//                           <td className=\"px-4 py-2 text-sm text-gray-900 text-right\">\n//                             {entryLine.debit > 0 ? `${entryLine.debit.toFixed(2)}` : '-'}\n//                           </td>\n//                           <td className=\"px-4 py-2 text-sm text-gray-900 text-right\">\n//                             {entryLine.credit > 0 ? `${entryLine.credit.toFixed(2)}` : '-'}\n//                           </td>\n//                         </tr>\n//                       ))}\n//                     </tbody>\n//                     <tfoot className=\"bg-gray-50\">\n//                       <tr>\n//                         <td colSpan=\"2\" className=\"px-4 py-2 text-sm font-medium text-gray-900\">\n//                           Totals:\n//                         </td>\n//                         <td className=\"px-4 py-2 text-sm font-bold text-gray-900 text-right\">\n//                           PKR {selectedEntry.totalDebit.toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\n//                         </td>\n//                         <td className=\"px-4 py-2 text-sm font-bold text-gray-900 text-right\">\n//                           PKR {selectedEntry.totalCredit.toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\n//                         </td>\n//                       </tr>\n//                     </tfoot>\n//                   </table>\n//                 </div>\n//               </div>\n\n//               {/* Original Order Info (if available) */}\n//               {selectedEntry.originalOrder && (\n//                 <div className=\"mb-6 p-4 bg-gray-50 rounded-lg\">\n//                   <h4 className=\"text-sm font-medium text-gray-700 mb-3\">Original Sales Order Details</h4>\n//                   <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n//                     <div>\n//                       <span className=\"font-medium text-gray-500\">Order ID:</span>\n//                       <p className=\"text-gray-900\">{selectedEntry.originalOrder.orderId}</p>\n//                     </div>\n//                     <div>\n//                       <span className=\"font-medium text-gray-500\">Status:</span>\n//                       <p className=\"text-gray-900\">{selectedEntry.originalOrder.status}</p>\n//                     </div>\n//                     <div>\n//                       <span className=\"font-medium text-gray-500\">Payment Status:</span>\n//                       <p className=\"text-gray-900\">{selectedEntry.originalOrder.paid ? 'Paid' : 'Unpaid'}</p>\n//                     </div>\n//                     <div>\n//                       <span className=\"font-medium text-gray-500\">Fulfilled:</span>\n//                       <p className=\"text-gray-900\">{selectedEntry.originalOrder.fulfilled ? 'Yes' : 'No'}</p>\n//                     </div>\n//                   </div>\n\n//                   {/* Line Items */}\n//                   <div className=\"mt-4\">\n//                     <span className=\"font-medium text-gray-500\">Line Items:</span>\n//                     <div className=\"mt-2 space-y-2\">\n//                       {selectedEntry.originalOrder.lineItems.map((item, index) => (\n//                         <div key={index} className=\"text-sm bg-white p-2 rounded border\">\n//                           <span className=\"font-medium\">{item.productName}</span> - \n//                           Qty: {item.quantity}, Price: PKR {parseFloat(item.price).toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}, \n//                           Total: PKR {parseFloat(item.total).toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\n//                           {item.taxAmount > 0 && <span className=\"text-gray-500\"> (Tax: PKR {parseFloat(item.taxAmount).toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})})</span>}\n//                         </div>\n//                       ))}\n//                     </div>\n//                   </div>\n//                 </div>\n//               )}\n\n//               {/* Entry Metadata */}\n//               <div className=\"text-xs text-gray-500\">\n//                 <p>Created: {new Date(selectedEntry.createdAt).toLocaleString()}</p>\n//                 <p>Status: {selectedEntry.status}</p>\n//                 <p>Type: {selectedEntry.transactionType}</p>\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n//       )}\n\n//       {/* Trial Balance Modal */}\n//       {showTrialBalance && (\n//         <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center p-4 z-50\">\n//           <div className=\"bg-white rounded-lg max-w-5xl w-full max-h-[90vh] overflow-y-auto\">\n//             <div className=\"px-6 py-4 border-b border-gray-200\">\n//               <div className=\"flex items-center justify-between\">\n//                 <h3 className=\"text-lg font-semibold text-gray-900\">\n//                   Trial Balance - As of {new Date().toLocaleDateString()}\n//                 </h3>\n//                 <div className=\"flex items-center space-x-2\">\n//                   <button\n//                     onClick={() => {\n//                       // Export functionality would go here\n//                       alert('Export functionality would be implemented here');\n//                     }}\n//                     className=\"px-3 py-1 bg-emerald-600 text-white rounded text-sm hover:bg-emerald-700 flex items-center space-x-1\"\n//                   >\n//                     <Download size={14} />\n//                     <span>Export</span>\n//                   </button>\n//                   <button\n//                     onClick={() => setShowTrialBalance(false)}\n//                     className=\"text-gray-400 hover:text-gray-600\"\n//                   >\n//                     <X size={20} />\n//                   </button>\n//                 </div>\n//               </div>\n//             </div>\n\n//             <div className=\"px-6 py-4\">\n//               <div className=\"overflow-x-auto\">\n//                 <table className=\"w-full\">\n//                   <thead className=\"bg-gray-50\">\n//                     <tr>\n//                       <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                         Account Code\n//                       </th>\n//                       <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                         Account Name\n//                       </th>\n//                       <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                         Type\n//                       </th>\n//                       <th className=\"px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                         Debit Total\n//                       </th>\n//                       <th className=\"px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                         Credit Total\n//                       </th>\n//                       <th className=\"px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                         Balance\n//                       </th>\n//                     </tr>\n//                   </thead>\n//                   <tbody className=\"bg-white divide-y divide-gray-200\">\n//                     {trialBalance.map((account) => (\n//                       <tr key={account.accountId}>\n//                         <td className=\"px-4 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\n//                           {account.accountCode}\n//                         </td>\n//                         <td className=\"px-4 py-4 whitespace-nowrap text-sm text-gray-900\">\n//                           {account.accountName}\n//                         </td>\n//                         <td className=\"px-4 py-4 whitespace-nowrap\">\n//                           <span className={`px-2 py-1 text-xs font-medium rounded-full ${\n//                             account.accountType === 'assets' ? 'bg-green-100 text-green-800' :\n//                             account.accountType === 'liabilities' ? 'bg-red-100 text-red-800' :\n//                             account.accountType === 'equity' ? 'bg-blue-100 text-blue-800' :\n//                             account.accountType === 'revenue' ? 'bg-purple-100 text-purple-800' :\n//                             'bg-orange-100 text-orange-800'\n//                           }`}>\n//                             {account.accountType}\n//                           </span>\n//                         </td>\n//                         <td className=\"px-4 py-4 whitespace-nowrap text-sm text-gray-900 text-right\">\n//                           PKR {account.debit.toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\n//                         </td>\n//                         <td className=\"px-4 py-4 whitespace-nowrap text-sm text-gray-900 text-right\">\n//                           PKR {account.credit.toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\n//                         </td>\n//                         <td className=\"px-4 py-4 whitespace-nowrap text-sm font-medium text-right\">\n//                           <span className={account.balance >= 0 ? 'text-green-600' : 'text-red-600'}>\n//                             PKR {Math.abs(account.balance).toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\n//                             {account.balance < 0 && ' (CR)'}\n//                           </span>\n//                         </td>\n//                       </tr>\n//                     ))}\n//                   </tbody>\n//                   <tfoot className=\"bg-gray-50\">\n//                     <tr>\n//                       <td colSpan=\"3\" className=\"px-4 py-3 text-sm font-bold text-gray-900\">\n//                         TOTALS:\n//                       </td>\n//                       <td className=\"px-4 py-3 text-sm font-bold text-gray-900 text-right\">\n//                         PKR {trialBalance.reduce((sum, acc) => sum + acc.debit, 0).toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\n//                       </td>\n//                       <td className=\"px-4 py-3 text-sm font-bold text-gray-900 text-right\">\n//                         PKR {trialBalance.reduce((sum, acc) => sum + acc.credit, 0).toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\n//                       </td>\n//                       <td className=\"px-4 py-3 text-sm font-bold text-gray-900 text-right\">\n//                         PKR {Math.abs(trialBalance.reduce((sum, acc) => sum + acc.balance, 0)).toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\n//                       </td>\n//                     </tr>\n//                   </tfoot>\n//                 </table>\n//               </div>\n\n//               {/* Trial Balance Validation */}\n//               <div className=\"mt-4 p-4 bg-green-50 border border-green-200 rounded-lg\">\n//                 <div className=\"flex items-center\">\n//                   <CheckCircle className=\"text-green-600 mr-2\" size={20} />\n//                   <div>\n//                     <h4 className=\"font-medium text-green-800\">Trial Balance is Balanced</h4>\n//                     <p className=\"text-sm text-green-700\">\n//                       Total Debits = Total Credits = PKR {trialBalance.reduce((sum, acc) => sum + acc.debit, 0).toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\n//                     </p>\n//                   </div>\n//                 </div>\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n//       )}\n\n//       {/* Integration Status */}\n//       <div className=\"mt-8 grid grid-cols-1 md:grid-cols-3 gap-4\">\n//         <div className=\"p-4 bg-green-50 border border-green-200 rounded-lg\">\n//           <div className=\"flex items-center mb-2\">\n//             <CheckCircle className=\"text-green-600 mr-2\" size={16} />\n//             <h4 className=\"font-medium text-green-800\">POS API Integration</h4>\n//           </div>\n//           <p className=\"text-sm text-green-700\">\n//             Sales orders automatically create journal entries from live API data\n//           </p>\n//         </div>\n\n//         <div className=\"p-4 bg-blue-50 border border-blue-200 rounded-lg\">\n//           <div className=\"flex items-center mb-2\">\n//             <RefreshCw className=\"text-blue-600 mr-2\" size={16} />\n//             <h4 className=\"font-medium text-blue-800\">Real-time Sync</h4>\n//           </div>\n//           <p className=\"text-sm text-blue-700\">\n//             Journal entries updated automatically with each sales transaction\n//           </p>\n//         </div>\n\n//         <div className=\"p-4 bg-orange-50 border border-orange-200 rounded-lg\">\n//           <div className=\"flex items-center mb-2\">\n//             <FileText className=\"text-orange-600 mr-2\" size={16} />\n//             <h4 className=\"font-medium text-orange-800\">Manual Entries</h4>\n//           </div>\n//           <p className=\"text-sm text-orange-700\">\n//             Add adjustments and corrections with full double-entry validation\n//           </p>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default GeneralLedger;\n\n// import React, { useState, useEffect } from 'react';\n// import { \n//   Book, \n//   Plus, \n//   Filter, \n//   Search, \n//   Calendar, \n//   FileText, \n//   Edit, \n//   Trash2, \n//   Save, \n//   X, \n//   AlertCircle,\n//   CheckCircle,\n//   DollarSign,\n//   TrendingUp,\n//   Eye,\n//   Download,\n//   RefreshCw\n// } from 'lucide-react';\n\n// const GeneralLedger = () => {\n//   const [journalEntries, setJournalEntries] = useState([]);\n//   const [accounts, setAccounts] = useState([]);\n//   const [filteredEntries, setFilteredEntries] = useState([]);\n//   const [selectedEntry, setSelectedEntry] = useState(null);\n//   const [isAddingEntry, setIsAddingEntry] = useState(false);\n//   const [loading, setLoading] = useState(false);\n//   // Add missing state variables for accounts loading state\n//   const [accountsLoading, setAccountsLoading] = useState(false);\n//   const [accountsError, setAccountsError] = useState(null);\n//   const [filters, setFilters] = useState({\n//     dateFrom: '',\n//     dateTo: '',\n//     accountId: '',\n//     transactionType: 'all',\n//     searchTerm: ''\n//   });\n//   const [trialBalance, setTrialBalance] = useState([]);\n//   const [showTrialBalance, setShowTrialBalance] = useState(false);\n//   const [newEntry, setNewEntry] = useState({\n//     date: new Date().toISOString().split('T')[0],\n//     description: '',\n//     reference: '',\n//     entries: [\n//       { accountId: '', debit: 0, credit: 0, description: '' },\n//       { accountId: '', debit: 0, credit: 0, description: '' }\n//     ]\n//   });\n\n//   // Chart of Accounts - we'll replace this with API data\n//   const chartOfAccounts = [\n//     { id: '1111', code: '1111', name: 'Petty Cash', type: 'assets' },\n//     { id: '1112', code: '1112', name: 'Bank - Main Account', type: 'assets' },\n//     { id: '1120', code: '1120', name: 'Accounts Receivable', type: 'assets' },\n//     { id: '1130', code: '1130', name: 'Inventory', type: 'assets' },\n//     { id: '2110', code: '2110', name: 'Accounts Payable', type: 'liabilities' },\n//     { id: '2130', code: '2130', name: 'Sales Tax Payable', type: 'liabilities' },\n//     { id: '4100', code: '4100', name: 'Sales Revenue', type: 'revenue' },\n//     { id: '4110', code: '4110', name: 'Electronics Sales', type: 'revenue' },\n//     { id: '5100', code: '5100', name: 'Cost of Goods Sold', type: 'expenses' },\n//     { id: '5200', code: '5200', name: 'Purchase Expenses', type: 'expenses' }\n//   ];\n\n//   // API Configuration - This is already correct\n//   const API_BASE_URL = 'https://api-pos.hulmsolutions.com/POS/accounting2/31fc8df0-61db-41e5-bb67-070fde367ea1/orders?start=0&size=200';\n//   const API_BASE_URL_CHARTS_OF_ACCOUNTS = 'http://localhost:8080/api/accounts';\n\n//   useEffect(() => {\n//     loadChartsOfAccounts();\n//     loadJournalEntriesFromAPI();\n//   }, []);\n\n//   useEffect(() => {\n//     filterEntries();\n//   }, [journalEntries, filters]);\n\n//   // Fetch Charts of Accounts from API\n//   const loadChartsOfAccounts = async () => {\n//     setAccountsLoading(true);\n//     setAccountsError(null);\n\n//     try {\n//       const response = await fetch(API_BASE_URL_CHARTS_OF_ACCOUNTS, {\n//         method: 'GET',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//       });\n\n//       if (!response.ok) {\n//         throw new Error(`Failed to fetch accounts: ${response.status}`);\n//       }\n\n//       const data = await response.json();\n\n//       // Transform the data to match our accounts structure\n//       // Assuming the API returns records similar to the paste-2.txt format\n//       const formattedAccounts = data.map(account => ({\n//         id: account.id || account.code,\n//         code: account.code,\n//         name: account.name,\n//         type: account.type || 'other',\n//         category: account.category || account.group,\n//         description: account.description || ''\n//       }));\n\n//       setAccounts(formattedAccounts);\n//       console.log('Loaded charts of accounts:', formattedAccounts.length);\n//     } catch (error) {\n//       console.error('Error loading charts of accounts:', error);\n//       setAccountsError(error.message);\n\n//       // Fallback to basic chart of accounts if API fails\n//       const fallbackAccounts = [\n//         { id: '1111', code: '1111', name: 'Petty Cash', type: 'assets' },\n//         { id: '1112', code: '1112', name: 'Bank - Main Account', type: 'assets' },\n//         { id: '1120', code: '1120', name: 'Accounts Receivable', type: 'assets' },\n//         { id: '1130', code: '1130', name: 'Inventory', type: 'assets' },\n//         { id: '2110', code: '2110', name: 'Accounts Payable', type: 'liabilities' },\n//         { id: '2130', code: '2130', name: 'Sales Tax Payable', type: 'liabilities' },\n//         { id: '4100', code: '4100', name: 'Sales Revenue', type: 'revenue' },\n//         { id: '4110', code: '4110', name: 'Electronics Sales', type: 'revenue' },\n//         { id: '5100', code: '5100', name: 'Cost of Goods Sold', type: 'expenses' },\n//         { id: '5200', code: '5200', name: 'Purchase Expenses', type: 'expenses' }\n//       ];\n\n//       setAccounts(fallbackAccounts);\n//       console.log('Using fallback chart of accounts');\n//     } finally {\n//       setAccountsLoading(false);\n//     }\n//   };\n\n//   async function fetchOrderData() {\n//     try {\n//       const response = await fetch(API_BASE_URL, {\n//         method: 'GET',\n//         headers: {\n//           'Authorization': 'Bearer Hamid',\n//           'Content-Type': 'application/json',\n//         },\n//       });\n\n//       if (!response.ok) {\n//         throw new Error(`API request failed with status ${response.status}`);\n//       }\n\n//       const data = await response.json();\n//       return data;\n//     } catch (error) {\n//       console.error('Error fetching order data:', error);\n//       // Implement notification system for integration errors\n//       return null;\n//     }\n//   }\n\n//   // Fetch Sales Orders from API and convert to Journal Entries\n//   const loadJournalEntriesFromAPI = async () => {\n//     setLoading(true);\n//     try {\n//       // FIXED: Using the correct API_BASE_URL directly instead of appending \"/orders?start=0&size=200\"\n//       const salesOrders = await fetchOrderData();\n\n//       if (!salesOrders) {\n//         throw new Error('Failed to fetch sales orders');\n//       }\n\n//       // Filter only PAID and FULFILLED orders\n//       const completedOrders = salesOrders.filter(order => \n//         order.paid === true && order.fulfilled === true && order.status === 'Closed'\n//       );\n\n//       // Convert completed sales orders to journal entries\n//       const journalEntriesFromSales = completedOrders.map(order => convertSalesOrderToJournalEntry(order))\n//         .filter(entry => entry !== null); // Filter out any null entries\n\n//       // Load any manual journal entries from localStorage\n//       const manualEntries = JSON.parse(localStorage.getItem('manualJournalEntries') || '[]');\n\n//       // Combine both types of entries\n//       const allEntries = [...journalEntriesFromSales, ...manualEntries];\n\n//       setJournalEntries(allEntries);\n//       console.log('Loaded completed orders:', completedOrders.length, 'Total journal entries:', allEntries.length);\n//     } catch (error) {\n//       console.error('Error loading sales orders:', error);\n//       // Fallback to sample data if API fails\n//       loadSampleJournalEntries();\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   // Convert Sales Order to Journal Entry\n//   const convertSalesOrderToJournalEntry = (order) => {\n//     const entries = [];\n\n//     // Use actual values from API (amounts are in PKR, not USD)\n//     const subTotal = parseFloat(order.subTotal) || 0;\n//     const taxAmount = parseFloat(order.taxAmount) || 0;\n//     const total = parseFloat(order.total) || 0;\n\n//     // Only process PAID and FULFILLED orders\n//     if (!order.paid || !order.fulfilled || order.status !== 'Closed') {\n//       return null; // Skip incomplete orders\n//     }\n\n//     // Cash/Bank Account (Debit) - Total amount received\n//     entries.push({\n//       accountId: '1111', // Petty Cash (assume cash payment)\n//       accountName: 'Petty Cash',\n//       debit: total,\n//       credit: 0,\n//       description: `Cash received from Order #${order.orderId} - ${order.lineItems.map(item => item.productName).join(', ')}`\n//     });\n\n//     // Sales Revenue (Credit) - Subtotal\n//     if (subTotal > 0) {\n//       entries.push({\n//         accountId: '4110', // Electronics Sales\n//         accountName: 'Electronics Sales',\n//         debit: 0,\n//         credit: subTotal,\n//         description: `Revenue from Order #${order.orderId}`\n//       });\n//     }\n\n//     // Sales Tax Payable (Credit) - Tax amount\n//     if (taxAmount > 0) {\n//       entries.push({\n//         accountId: '2130',\n//         accountName: 'Sales Tax Payable',\n//         debit: 0,\n//         credit: taxAmount,\n//         description: `${order.taxRate}% tax collected on Order #${order.orderId}`\n//       });\n//     }\n\n//     // Cost of Goods Sold and Inventory reduction (only for fulfilled items)\n//     let totalCOGS = 0;\n//     order.lineItems.forEach(item => {\n//       if (item.fulfilled && item.status === 'Fulfilled') {\n//         const costPrice = parseFloat(item.costPrice) || 0;\n//         const quantity = parseFloat(item.quantity) || 0;\n//         const itemCOGS = costPrice * quantity;\n//         totalCOGS += itemCOGS;\n//       }\n//     });\n\n//     if (totalCOGS > 0) {\n//       // Cost of Goods Sold (Debit)\n//       entries.push({\n//         accountId: '5100',\n//         accountName: 'Cost of Goods Sold',\n//         debit: totalCOGS,\n//         credit: 0,\n//         description: `COGS for Order #${order.orderId}`\n//       });\n\n//       // Inventory (Credit)\n//       entries.push({\n//         accountId: '1130',\n//         accountName: 'Inventory',\n//         debit: 0,\n//         credit: totalCOGS,\n//         description: `Inventory reduction - Order #${order.orderId}`\n//       });\n//     }\n\n//     // Calculate totals\n//     const totalDebit = entries.reduce((sum, entry) => sum + entry.debit, 0);\n//     const totalCredit = entries.reduce((sum, entry) => sum + entry.credit, 0);\n\n//     return {\n//       id: `JE-ORDER-${order.orderId}`,\n//       date: formatDateFromCreatedAt(order.createdAt),\n//       description: `Sales Order #${order.orderId} - ${order.lineItems.map(item => `${item.productName} (${item.quantity})`).join(', ')}`,\n//       reference: `ORDER-${order.orderId}`,\n//       transactionType: 'automatic',\n//       source: 'POS Sales',\n//       status: 'posted',\n//       entries: entries,\n//       totalDebit: Math.round(totalDebit * 100) / 100,\n//       totalCredit: Math.round(totalCredit * 100) / 100,\n//       createdAt: order.createdAt,\n//       originalOrder: order // Keep reference to original order\n//     };\n//   };\n\n//   // Format date from API format (2025.08.18.10.08.54.569) to YYYY-MM-DD\n//   const formatDateFromCreatedAt = (createdAt) => {\n//     try {\n//       const parts = createdAt.split('.');\n//       if (parts.length >= 3) {\n//         return `${parts[0]}-${parts[1].padStart(2, '0')}-${parts[2].padStart(2, '0')}`;\n//       }\n//       return new Date().toISOString().split('T')[0];\n//     } catch (error) {\n//       return new Date().toISOString().split('T')[0];\n//     }\n//   };\n\n//   // Fallback sample data\n//   const loadSampleJournalEntries = () => {\n//     const sampleEntries = [\n//       {\n//         id: 'JE001',\n//         date: '2025-08-18',\n//         description: 'Sample POS Sale - Medical products',\n//         reference: 'POS001',\n//         transactionType: 'automatic',\n//         source: 'POS',\n//         status: 'posted',\n//         entries: [\n//           { accountId: '1111', accountName: 'Petty Cash', debit: 60.50, credit: 0, description: 'Cash received from customer' },\n//           { accountId: '4100', accountName: 'Sales Revenue', debit: 0, credit: 55.00, description: 'Revenue from medical products' },\n//           { accountId: '2130', accountName: 'Sales Tax Payable', debit: 0, credit: 5.50, description: 'Sales tax collected' }\n//         ],\n//         totalDebit: 60.50,\n//         totalCredit: 60.50,\n//         createdAt: '2025-08-18T10:30:00Z'\n//       }\n//     ];\n//     setJournalEntries(sampleEntries);\n//   };\n\n//   const filterEntries = () => {\n//     let filtered = [...journalEntries];\n\n//     if (filters.dateFrom) {\n//       filtered = filtered.filter(entry => entry.date >= filters.dateFrom);\n//     }\n//     if (filters.dateTo) {\n//       filtered = filtered.filter(entry => entry.date <= filters.dateTo);\n//     }\n//     if (filters.accountId) {\n//       filtered = filtered.filter(entry => \n//         entry.entries.some(e => e.accountId === filters.accountId)\n//       );\n//     }\n//     if (filters.transactionType !== 'all') {\n//       filtered = filtered.filter(entry => entry.transactionType === filters.transactionType);\n//     }\n//     if (filters.searchTerm) {\n//       const term = filters.searchTerm.toLowerCase();\n//       filtered = filtered.filter(entry => \n//         entry.description.toLowerCase().includes(term) ||\n//         entry.reference.toLowerCase().includes(term) ||\n//         entry.entries.some(e => e.description.toLowerCase().includes(term))\n//       );\n//     }\n\n//     setFilteredEntries(filtered);\n//   };\n\n//   const generateTrialBalance = () => {\n//     const balances = {};\n//       console.log('accounts:',accounts)\n//     // Initialize all accounts\n//     accounts.forEach(account => {\n//       // Only include account types, not headers or groups\n//       if (account.category !== 'header' && account.category !== 'group') {\n//         balances[account.id] = {\n//           accountId: account.id,\n//           accountCode: account.code,\n//           accountName: account.name,\n//           accountType: account.type,\n//           debit: 0,\n//           credit: 0,\n//           balance: 0\n//         };\n//       }\n//     });\n\n//     // Calculate balances from journal entries\n//     journalEntries.forEach(entry => {\n//       if (entry.status === 'posted') {\n//         entry.entries.forEach(entryLine => {\n//           if (balances[entryLine.accountId]) {\n//             balances[entryLine.accountId].debit += entryLine.debit;\n//             balances[entryLine.accountId].credit += entryLine.credit;\n//           }\n//         });\n//       }\n//     });\n\n//     // Calculate net balances\n//     Object.values(balances).forEach(account => {\n//       if (account.accountType === 'assets' || account.accountType === 'expenses') {\n//         account.balance = account.debit - account.credit;\n//       } else {\n//         account.balance = account.credit - account.debit;\n//       }\n//     });\n\n//     const trialBalanceData = Object.values(balances)\n//       .filter(account => account.debit !== 0 || account.credit !== 0)\n//       .sort((a, b) => a.accountCode.localeCompare(b.accountCode));\n\n//     setTrialBalance(trialBalanceData);\n//     setShowTrialBalance(true);\n//   };\n\n//   const addEntryLine = () => {\n//     setNewEntry({\n//       ...newEntry,\n//       entries: [...newEntry.entries, { accountId: '', debit: 0, credit: 0, description: '' }]\n//     });\n//   };\n\n//   const removeEntryLine = (index) => {\n//     if (newEntry.entries.length > 2) {\n//       const updatedEntries = newEntry.entries.filter((_, i) => i !== index);\n//       setNewEntry({ ...newEntry, entries: updatedEntries });\n//     }\n//   };\n\n//   const updateEntryLine = (index, field, value) => {\n//     const updatedEntries = [...newEntry.entries];\n//     updatedEntries[index] = { ...updatedEntries[index], [field]: value };\n//     setNewEntry({ ...newEntry, entries: updatedEntries });\n//   };\n\n//   const calculateTotals = (entries) => {\n//     const totalDebit = entries.reduce((sum, entry) => sum + (parseFloat(entry.debit) || 0), 0);\n//     const totalCredit = entries.reduce((sum, entry) => sum + (parseFloat(entry.credit) || 0), 0);\n//     return { totalDebit, totalCredit };\n//   };\n\n//   const isBalanced = (entries) => {\n//     const { totalDebit, totalCredit } = calculateTotals(entries);\n//     return Math.abs(totalDebit - totalCredit) < 0.01;\n//   };\n\n//   const saveJournalEntry = () => {\n//     if (!newEntry.description || !newEntry.entries.every(e => e.accountId)) {\n//       alert('Please fill in all required fields');\n//       return;\n//     }\n\n//     if (!isBalanced(newEntry.entries)) {\n//       alert('Journal entry must be balanced - total debits must equal total credits');\n//       return;\n//     }\n\n//     const { totalDebit, totalCredit } = calculateTotals(newEntry.entries);\n\n//     // Add account names to entries\n//     const entriesWithNames = newEntry.entries.map(entry => ({\n//       ...entry,\n//       accountName: accounts.find(acc => acc.id === entry.accountId)?.name || '',\n//       debit: parseFloat(entry.debit) || 0,\n//       credit: parseFloat(entry.credit) || 0\n//     }));\n\n//     const journalEntry = {\n//       id: `JE-MANUAL-${Date.now()}`,\n//       date: newEntry.date,\n//       description: newEntry.description,\n//       reference: newEntry.reference || `MAN${Date.now()}`,\n//       transactionType: 'manual',\n//       source: 'Manual',\n//       status: 'posted',\n//       entries: entriesWithNames,\n//       totalDebit,\n//       totalCredit,\n//       createdAt: new Date().toISOString()\n//     };\n\n//     // Save manual entries to localStorage\n//     const existingManualEntries = JSON.parse(localStorage.getItem('manualJournalEntries') || '[]');\n//     const updatedManualEntries = [...existingManualEntries, journalEntry];\n//     localStorage.setItem('manualJournalEntries', JSON.stringify(updatedManualEntries));\n\n//     // Update state\n//     setJournalEntries([...journalEntries, journalEntry]);\n\n//     // Reset form\n//     setNewEntry({\n//       date: new Date().toISOString().split('T')[0],\n//       description: '',\n//       reference: '',\n//       entries: [\n//         { accountId: '', debit: 0, credit: 0, description: '' },\n//         { accountId: '', debit: 0, credit: 0, description: '' }\n//       ]\n//     });\n//     setIsAddingEntry(false);\n//   };\n\n//   const getAccountName = (accountId) => {\n//     const account = accounts.find(acc => acc.id === accountId);\n//     return account ? `${account.code} - ${account.name}` : '';\n//   };\n\n//   const { totalDebit, totalCredit } = calculateTotals(newEntry.entries);\n//   const entryIsBalanced = isBalanced(newEntry.entries);\n\n//   return (\n//     <div className=\"max-w-7xl mx-auto p-6 bg-white\">\n//       {/* Header */}\n//       <div className=\"mb-8\">\n//         <h1 className=\"text-3xl font-bold text-gray-900 mb-2 flex items-center\">\n//           <Book className=\"mr-3 text-emerald-600\" />\n//           General Ledger\n//         </h1>\n//         <p className=\"text-gray-600\">Real-time transaction recording and journal entry management</p>\n\n//         {/* Show loading or error messages for accounts */}\n//         {accountsLoading && (\n//           <div className=\"mt-2 p-2 bg-blue-50 text-blue-700 rounded-md text-sm flex items-center\">\n//             <RefreshCw className=\"animate-spin mr-2\" size={16} />\n//             Loading chart of accounts...\n//           </div>\n//         )}\n\n//         {accountsError && (\n//           <div className=\"mt-2 p-2 bg-red-50 text-red-700 rounded-md text-sm flex items-center\">\n//             <AlertCircle className=\"mr-2\" size={16} />\n//             Error loading accounts: {accountsError}\n//           </div>\n//         )}\n//       </div>\n\n//       {/* Quick Stats */}\n//       <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n//         <div className=\"bg-blue-50 p-4 rounded-lg border border-blue-200\">\n//           <div className=\"flex items-center justify-between\">\n//             <div>\n//               <p className=\"text-blue-600 text-sm font-medium\">Total Entries</p>\n//               <p className=\"text-2xl font-bold text-blue-900\">{journalEntries.length}</p>\n//             </div>\n//             <FileText className=\"text-blue-600\" size={24} />\n//           </div>\n//         </div>\n\n//         <div className=\"bg-green-50 p-4 rounded-lg border border-green-200\">\n//           <div className=\"flex items-center justify-between\">\n//             <div>\n//               <p className=\"text-green-600 text-sm font-medium\">POS Entries</p>\n//               <p className=\"text-2xl font-bold text-green-900\">\n//                 {journalEntries.filter(e => e.source === 'POS Sales').length}\n//               </p>\n//             </div>\n//             <TrendingUp className=\"text-green-600\" size={24} />\n//           </div>\n//         </div>\n\n//         <div className=\"bg-orange-50 p-4 rounded-lg border border-orange-200\">\n//           <div className=\"flex items-center justify-between\">\n//             <div>\n//               <p className=\"text-orange-600 text-sm font-medium\">Manual Entries</p>\n//               <p className=\"text-2xl font-bold text-orange-900\">\n//                 {journalEntries.filter(e => e.transactionType === 'manual').length}\n//               </p>\n//             </div>\n//             <Edit className=\"text-orange-600\" size={24} />\n//           </div>\n//         </div>\n\n//         <div className=\"bg-purple-50 p-4 rounded-lg border border-purple-200\">\n//           <div className=\"flex items-center justify-between\">\n//             <div>\n//               <p className=\"text-purple-600 text-sm font-medium\">Total Value</p>\n//               <p className=\"text-2xl font-bold text-purple-900\">\n//                 PKR {journalEntries.reduce((sum, entry) => sum + entry.totalDebit, 0).toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\n//               </p>\n//             </div>\n//             <DollarSign className=\"text-purple-600\" size={24} />\n//           </div>\n//         </div>\n//       </div>\n\n//       {/* Controls */}\n//       <div className=\"flex flex-wrap items-center justify-between gap-4 mb-6\">\n//         <div className=\"flex flex-wrap items-center gap-4\">\n//           {/* Date Filters */}\n//           <div className=\"flex items-center space-x-2\">\n//             <Calendar size={16} className=\"text-gray-400\" />\n//             <input\n//               type=\"date\"\n//               value={filters.dateFrom}\n//               onChange={(e) => setFilters({ ...filters, dateFrom: e.target.value })}\n//               className=\"px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\n//               placeholder=\"From\"\n//             />\n//             <span className=\"text-gray-500\">to</span>\n//             <input\n//               type=\"date\"\n//               value={filters.dateTo}\n//               onChange={(e) => setFilters({ ...filters, dateTo: e.target.value })}\n//               className=\"px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\n//               placeholder=\"To\"\n//             />\n//           </div>\n\n//           {/* Account Filter */}\n//           <div className=\"relative\">\n//             <Filter className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" size={16} />\n//             <select\n//               value={filters.accountId}\n//               onChange={(e) => setFilters({ ...filters, accountId: e.target.value })}\n//               className=\"pl-10 pr-8 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\n//             >\n//               <option value=\"\">All Accounts</option>\n//               {/* Group accounts by type for better organization */}\n//               {['assets', 'liabilities', 'equity', 'revenue', 'expenses'].map(type => {\n//                 const accountsOfType = accounts.filter(acc => \n//                   acc.type === type && acc.category !== 'header' && acc.category !== 'group'\n//                 );\n\n//                 if (accountsOfType.length === 0) return null;\n\n//                 return (\n//                   <optgroup key={type} label={type.charAt(0).toUpperCase() + type.slice(1)}>\n//                     {accountsOfType.map(account => (\n//                       <option key={account.id} value={account.id}>\n//                         {account.code} - {account.name}\n//                       </option>\n//                     ))}\n//                   </optgroup>\n//                 );\n//               })}\n//             </select>\n//           </div>\n\n//           {/* Transaction Type Filter */}\n//           <select\n//             value={filters.transactionType}\n//             onChange={(e) => setFilters({ ...filters, transactionType: e.target.value })}\n//             className=\"px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\n//           >\n//             <option value=\"all\">All Types</option>\n//             <option value=\"automatic\">POS Sales</option>\n//             <option value=\"manual\">Manual</option>\n//           </select>\n\n//           {/* Search */}\n//           <div className=\"relative\">\n//             <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" size={16} />\n//             <input\n//               type=\"text\"\n//               placeholder=\"Search entries...\"\n//               value={filters.searchTerm}\n//               onChange={(e) => setFilters({ ...filters, searchTerm: e.target.value })}\n//               className=\"pl-10 pr-4 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\n//             />\n//           </div>\n//         </div>\n\n//         <div className=\"flex space-x-3\">\n//           <button\n//             onClick={loadJournalEntriesFromAPI}\n//             disabled={loading}\n//             className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center space-x-2 disabled:bg-gray-400\"\n//           >\n//             {loading ? <RefreshCw className=\"animate-spin\" size={16} /> : <RefreshCw size={16} />}\n//             <span>Refresh from API</span>\n//           </button>\n//           <button\n//             onClick={loadChartsOfAccounts}\n//             disabled={accountsLoading}\n//             className=\"px-4 py-2 bg-teal-600 text-white rounded-lg hover:bg-teal-700 flex items-center space-x-2 disabled:bg-gray-400\"\n//           >\n//             {accountsLoading ? <RefreshCw className=\"animate-spin\" size={16} /> : <RefreshCw size={16} />}\n//             <span>Refresh Accounts</span>\n//           </button>\n//           <button\n//             onClick={() => setIsAddingEntry(true)}\n//             className=\"px-4 py-2 bg-emerald-600 text-white rounded-lg hover:bg-emerald-700 flex items-center space-x-2\"\n//           >\n//             <Plus size={16} />\n//             <span>Add Entry</span>\n//           </button>\n//           <button\n//             onClick={generateTrialBalance}\n//             className=\"px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 flex items-center space-x-2\"\n//           >\n//             <FileText size={16} />\n//             <span>Trial Balance</span>\n//           </button>\n//         </div>\n//       </div>\n\n//       {/* Journal Entry Form */}\n//       {isAddingEntry && (\n//         <div className=\"mb-8 p-6 bg-gray-50 rounded-lg border\">\n//           <h3 className=\"text-lg font-semibold mb-4\">Add Manual Journal Entry</h3>\n\n//           <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n//             <div>\n//               <label className=\"block text-sm font-medium text-gray-700 mb-1\">Date *</label>\n//               <input\n//                 type=\"date\"\n//                 value={newEntry.date}\n//                 onChange={(e) => setNewEntry({ ...newEntry, date: e.target.value })}\n//                 className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\n//               />\n//             </div>\n//             <div>\n//               <label className=\"block text-sm font-medium text-gray-700 mb-1\">Description *</label>\n//               <input\n//                 type=\"text\"\n//                 value={newEntry.description}\n//                 onChange={(e) => setNewEntry({ ...newEntry, description: e.target.value })}\n//                 placeholder=\"Enter description\"\n//                 className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\n//               />\n//             </div>\n//             <div>\n//               <label className=\"block text-sm font-medium text-gray-700 mb-1\">Reference</label>\n//               <input\n//                 type=\"text\"\n//                 value={newEntry.reference}\n//                 onChange={(e) => setNewEntry({ ...newEntry, reference: e.target.value })}\n//                 placeholder=\"Reference number\"\n//                 className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\n//               />\n//             </div>\n//           </div>\n\n//           {/* Entry Lines */}\n//           <div className=\"mb-4\">\n//             <label className=\"block text-sm font-medium text-gray-700 mb-2\">Journal Entry Lines</label>\n//             <div className=\"space-y-3\">\n//               {newEntry.entries.map((entry, index) => (\n//                 <div key={index} className=\"grid grid-cols-12 gap-2 items-center bg-white p-3 rounded border\">\n//                   <div className=\"col-span-4\">\n//                     <select\n//                       value={entry.accountId}\n//                       onChange={(e) => updateEntryLine(index, 'accountId', e.target.value)}\n//                       className=\"w-full px-2 py-1 border border-gray-300 rounded text-sm focus:ring-2 focus:ring-emerald-500\"\n//                     >\n//                       <option value=\"\">Select Account</option>\n//                       {/* Group accounts by type for better organization */}\n//                       {['assets', 'liabilities', 'equity', 'revenue', 'expenses'].map(type => {\n//                         const accountsOfType = accounts.filter(acc => \n//                           acc.type === type && acc.category !== 'header' && acc.category !== 'group'\n//                         );\n\n//                         if (accountsOfType.length === 0) return null;\n\n//                         return (\n//                           <optgroup key={type} label={type.charAt(0).toUpperCase() + type.slice(1)}>\n//                             {accountsOfType.map(account => (\n//                               <option key={account.id} value={account.id}>\n//                                 {account.code} - {account.name}\n//                               </option>\n//                             ))}\n//                           </optgroup>\n//                         );\n//                       })}\n//                     </select>\n//                   </div>\n//                   <div className=\"col-span-3\">\n//                     <input\n//                       type=\"text\"\n//                       value={entry.description}\n//                       onChange={(e) => updateEntryLine(index, 'description', e.target.value)}\n//                       placeholder=\"Description\"\n//                       className=\"w-full px-2 py-1 border border-gray-300 rounded text-sm focus:ring-2 focus:ring-emerald-500\"\n//                     />\n//                   </div>\n//                   <div className=\"col-span-2\">\n//                     <input\n//                       type=\"number\"\n//                       step=\"0.01\"\n//                       value={entry.debit}\n//                       onChange={(e) => updateEntryLine(index, 'debit', e.target.value)}\n//                       placeholder=\"Debit\"\n//                       className=\"w-full px-2 py-1 border border-gray-300 rounded text-sm focus:ring-2 focus:ring-emerald-500\"\n//                     />\n//                   </div>\n//                   <div className=\"col-span-2\">\n//                     <input\n//                       type=\"number\"\n//                       step=\"0.01\"\n//                       value={entry.credit}\n//                       onChange={(e) => updateEntryLine(index, 'credit', e.target.value)}\n//                       placeholder=\"Credit\"\n//                       className=\"w-full px-2 py-1 border border-gray-300 rounded text-sm focus:ring-2 focus:ring-emerald-500\"\n//                     />\n//                   </div>\n//                   <div className=\"col-span-1\">\n//                     {newEntry.entries.length > 2 && (\n//                       <button\n//                         onClick={() => removeEntryLine(index)}\n//                         className=\"p-1 text-red-600 hover:bg-red-100 rounded\"\n//                       >\n//                         <Trash2 size={14} />\n//                       </button>\n//                     )}\n//                   </div>\n//                 </div>\n//               ))}\n//             </div>\n\n//             <div className=\"flex justify-between items-center mt-3\">\n//               <button\n//                 onClick={addEntryLine}\n//                 className=\"px-3 py-1 text-sm bg-gray-200 text-gray-700 rounded hover:bg-gray-300 flex items-center space-x-1\"\n//               >\n//                 <Plus size={14} />\n//                 <span>Add Line</span>\n//               </button>\n\n//               <div className=\"flex items-center space-x-4\">\n//                 <div className=\"text-sm\">\n//                   <span className=\"font-medium\">Total Debit: PKR {totalDebit.toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}</span>\n//                   <span className=\"mx-2\">|</span>\n//                   <span className=\"font-medium\">Total Credit: PKR {totalCredit.toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}</span>\n//                 </div>\n//                 {entryIsBalanced ? (\n//                   <div className=\"flex items-center text-green-600\">\n//                     <CheckCircle size={16} className=\"mr-1\" />\n//                     <span className=\"text-sm\">Balanced</span>\n//                   </div>\n//                 ) : (\n//                   <div className=\"flex items-center text-red-600\">\n//                     <AlertCircle size={16} className=\"mr-1\" />\n//                     <span className=\"text-sm\">Not Balanced</span>\n//                   </div>\n//                 )}\n//               </div>\n//             </div>\n//           </div>\n\n//           <div className=\"flex space-x-3\">\n//             <button\n//               onClick={saveJournalEntry}\n//               disabled={!entryIsBalanced}\n//               className=\"px-4 py-2 bg-emerald-600 text-white rounded-lg hover:bg-emerald-700 disabled:bg-gray-400 flex items-center space-x-2\"\n//             >\n//               <Save size={16} />\n//               <span>Save Entry</span>\n//             </button>\n//             <button\n//               onClick={() => setIsAddingEntry(false)}\n//               className=\"px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 flex items-center space-x-2\"\n//             >\n//               <X size={16} />\n//               <span>Cancel</span>\n//             </button>\n//           </div>\n//         </div>\n//       )}\n\n//       {/* Journal Entries Table */}\n//       <div className=\"bg-white border border-gray-200 rounded-lg overflow-hidden\">\n//         <div className=\"px-6 py-4 border-b border-gray-200\">\n//           <h2 className=\"text-lg font-semibold text-gray-900\">Journal Entries</h2>\n//           <p className=\"text-sm text-gray-600 mt-1\">\n//             Showing {filteredEntries.length} of {journalEntries.length} entries\n//           </p>\n//         </div>\n\n//         <div className=\"overflow-x-auto\">\n//           <table className=\"w-full\">\n//             <thead className=\"bg-gray-50\">\n//               <tr>\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                   Entry ID\n//                 </th>\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                   Date\n//                 </th>\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                   Description\n//                 </th>\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                   Reference\n//                 </th>\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                   Source\n//                 </th>\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                   Amount\n//                 </th>\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                   Status\n//                 </th>\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                   Actions\n//                 </th>\n//               </tr>\n//             </thead>\n//             <tbody className=\"bg-white divide-y divide-gray-200\">\n//               {filteredEntries.map((entry) => (\n//                 <tr key={entry.id} className=\"hover:bg-gray-50\">\n//                   <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\n//                     {entry.id}\n//                   </td>\n//                   <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n//                     {entry.date}\n//                   </td>\n//                   <td className=\"px-6 py-4 text-sm text-gray-900 max-w-xs truncate\">\n//                     {entry.description}\n//                   </td>\n//                   <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n//                     {entry.reference}\n//                   </td>\n//                   <td className=\"px-6 py-4 whitespace-nowrap\">\n//                     <span className={`px-2 py-1 text-xs font-medium rounded-full ${\n//                       entry.source === 'POS Sales' ? 'bg-green-100 text-green-800' : \n//                       entry.source === 'Manual' ? 'bg-orange-100 text-orange-800' :\n//                       'bg-blue-100 text-blue-800'\n//                     }`}>\n//                       {entry.source}\n//                     </span>\n//                   </td>\n//                   <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n//                     PKR {entry.totalDebit.toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\n//                   </td>\n//                   <td className=\"px-6 py-4 whitespace-nowrap\">\n//                     <span className={`px-2 py-1 text-xs font-medium rounded-full ${\n//                       entry.status === 'posted' ? 'bg-blue-100 text-blue-800' : 'bg-yellow-100 text-yellow-800'\n//                     }`}>\n//                       {entry.status}\n//                     </span>\n//                   </td>\n//                   <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">\n//                     <button\n//                       onClick={() => setSelectedEntry(entry)}\n//                       className=\"text-emerald-600 hover:text-emerald-900 mr-3\"\n//                     >\n//                       <Eye size={16} />\n//                     </button>\n//                   </td>\n//                 </tr>\n//               ))}\n//             </tbody>\n//           </table>\n//         </div>\n//       </div>\n\n//       {/* Entry Details Modal */}\n//       {selectedEntry && (\n//         <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center p-4 z-50\">\n//           <div className=\"bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-y-auto\">\n//             <div className=\"px-6 py-4 border-b border-gray-200\">\n//               <div className=\"flex items-center justify-between\">\n//                 <h3 className=\"text-lg font-semibold text-gray-900\">\n//                   Journal Entry Details - {selectedEntry.id}\n//                 </h3>\n//                 <button\n//                   onClick={() => setSelectedEntry(null)}\n//                   className=\"text-gray-400 hover:text-gray-600\"\n//                 >\n//                   <X size={20} />\n//                 </button>\n//               </div>\n//             </div>\n\n//             <div className=\"px-6 py-4\">\n//               {/* Entry Header */}\n//               <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-6\">\n//                 <div>\n//                   <label className=\"text-sm font-medium text-gray-500\">Date</label>\n//                   <p className=\"text-sm text-gray-900\">{selectedEntry.date}</p>\n//                 </div>\n//                 <div>\n//                   <label className=\"text-sm font-medium text-gray-500\">Reference</label>\n//                   <p className=\"text-sm text-gray-900\">{selectedEntry.reference}</p>\n//                 </div>\n//                 <div>\n//                   <label className=\"text-sm font-medium text-gray-500\">Description</label>\n//                   <p className=\"text-sm text-gray-900\">{selectedEntry.description}</p>\n//                 </div>\n//                 <div>\n//                   <label className=\"text-sm font-medium text-gray-500\">Source</label>\n//                   <span className={`px-2 py-1 text-xs font-medium rounded-full ${\n//                     selectedEntry.source === 'POS Sales' ? 'bg-green-100 text-green-800' : 'bg-orange-100 text-orange-800'\n//                   }`}>\n//                     {selectedEntry.source}\n//                   </span>\n//                 </div>\n//               </div>\n\n//               {/* Entry Lines */}\n//               <div className=\"mb-6\">\n//                 <h4 className=\"text-sm font-medium text-gray-700 mb-3\">Account Entries</h4>\n//                 <div className=\"overflow-x-auto\">\n//                   <table className=\"w-full border border-gray-200 rounded\">\n//                     <thead className=\"bg-gray-50\">\n//                       <tr>\n//                         <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500\">Account</th>\n//                         <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500\">Description</th>\n//                         <th className=\"px-4 py-2 text-right text-xs font-medium text-gray-500\">Debit</th>\n//                         <th className=\"px-4 py-2 text-right text-xs font-medium text-gray-500\">Credit</th>\n//                       </tr>\n//                     </thead>\n//                     <tbody className=\"divide-y divide-gray-200\">\n//                       {selectedEntry.entries.map((entryLine, index) => (\n//                         <tr key={index}>\n//                           <td className=\"px-4 py-2 text-sm text-gray-900\">\n//                             {getAccountName(entryLine.accountId)}\n//                           </td>\n//                           <td className=\"px-4 py-2 text-sm text-gray-600\">\n//                             {entryLine.description}\n//                           </td>\n//                           <td className=\"px-4 py-2 text-sm text-gray-900 text-right\">\n//                             {entryLine.debit > 0 ? `${entryLine.debit.toFixed(2)}` : '-'}\n//                           </td>\n//                           <td className=\"px-4 py-2 text-sm text-gray-900 text-right\">\n//                             {entryLine.credit > 0 ? `${entryLine.credit.toFixed(2)}` : '-'}\n//                           </td>\n//                         </tr>\n//                       ))}\n//                     </tbody>\n//                     <tfoot className=\"bg-gray-50\">\n//                       <tr>\n//                         <td colSpan=\"2\" className=\"px-4 py-2 text-sm font-medium text-gray-900\">\n//                           Totals:\n//                         </td>\n//                         <td className=\"px-4 py-2 text-sm font-bold text-gray-900 text-right\">\n//                           PKR {selectedEntry.totalDebit.toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\n//                         </td>\n//                         <td className=\"px-4 py-2 text-sm font-bold text-gray-900 text-right\">\n//                           PKR {selectedEntry.totalCredit.toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\n//                         </td>\n//                       </tr>\n//                     </tfoot>\n//                   </table>\n//                 </div>\n//               </div>\n\n//               {/* Original Order Info (if available) */}\n//               {selectedEntry.originalOrder && (\n//                 <div className=\"mb-6 p-4 bg-gray-50 rounded-lg\">\n//                   <h4 className=\"text-sm font-medium text-gray-700 mb-3\">Original Sales Order Details</h4>\n//                   <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n//                     <div>\n//                       <span className=\"font-medium text-gray-500\">Order ID:</span>\n//                       <p className=\"text-gray-900\">{selectedEntry.originalOrder.orderId}</p>\n//                     </div>\n//                     <div>\n//                       <span className=\"font-medium text-gray-500\">Status:</span>\n//                       <p className=\"text-gray-900\">{selectedEntry.originalOrder.status}</p>\n//                     </div>\n//                     <div>\n//                       <span className=\"font-medium text-gray-500\">Payment Status:</span>\n//                       <p className=\"text-gray-900\">{selectedEntry.originalOrder.paid ? 'Paid' : 'Unpaid'}</p>\n//                     </div>\n//                     <div>\n//                       <span className=\"font-medium text-gray-500\">Fulfilled:</span>\n//                       <p className=\"text-gray-900\">{selectedEntry.originalOrder.fulfilled ? 'Yes' : 'No'}</p>\n//                     </div>\n//                   </div>\n\n//                   {/* Line Items */}\n//                   <div className=\"mt-4\">\n//                     <span className=\"font-medium text-gray-500\">Line Items:</span>\n//                     <div className=\"mt-2 space-y-2\">\n//                       {selectedEntry.originalOrder.lineItems.map((item, index) => (\n//                         <div key={index} className=\"text-sm bg-white p-2 rounded border\">\n//                           <span className=\"font-medium\">{item.productName}</span> - \n//                           Qty: {item.quantity}, Price: PKR {parseFloat(item.price).toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}, \n//                           Total: PKR {parseFloat(item.total).toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\n//                           {item.taxAmount > 0 && <span className=\"text-gray-500\"> (Tax: PKR {parseFloat(item.taxAmount).toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})})</span>}\n//                         </div>\n//                       ))}\n//                     </div>\n//                   </div>\n//                 </div>\n//               )}\n\n//               {/* Entry Metadata */}\n//               <div className=\"text-xs text-gray-500\">\n//                 <p>Created: {new Date(selectedEntry.createdAt).toLocaleString()}</p>\n//                 <p>Status: {selectedEntry.status}</p>\n//                 <p>Type: {selectedEntry.transactionType}</p>\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n//       )}\n\n//       {/* Trial Balance Modal */}\n//       {showTrialBalance && (\n//         <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center p-4 z-50\">\n//           <div className=\"bg-white rounded-lg max-w-5xl w-full max-h-[90vh] overflow-y-auto\">\n//             <div className=\"px-6 py-4 border-b border-gray-200\">\n//               <div className=\"flex items-center justify-between\">\n//                 <h3 className=\"text-lg font-semibold text-gray-900\">\n//                   Trial Balance - As of {new Date().toLocaleDateString()}\n//                 </h3>\n//                 <div className=\"flex items-center space-x-2\">\n//                   <button\n//                     onClick={() => {\n//                       // Export functionality would go here\n//                       alert('Export functionality would be implemented here');\n//                     }}\n//                     className=\"px-3 py-1 bg-emerald-600 text-white rounded text-sm hover:bg-emerald-700 flex items-center space-x-1\"\n//                   >\n//                     <Download size={14} />\n//                     <span>Export</span>\n//                   </button>\n//                   <button\n//                     onClick={() => setShowTrialBalance(false)}\n//                     className=\"text-gray-400 hover:text-gray-600\"\n//                   >\n//                     <X size={20} />\n//                   </button>\n//                 </div>\n//               </div>\n//             </div>\n\n//             <div className=\"px-6 py-4\">\n//               <div className=\"overflow-x-auto\">\n//                 <table className=\"w-full\">\n//                   <thead className=\"bg-gray-50\">\n//                     <tr>\n//                       <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                         Account Code\n//                       </th>\n//                       <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                         Account Name\n//                       </th>\n//                       <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                         Type\n//                       </th>\n//                       <th className=\"px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                         Debit Total\n//                       </th>\n//                       <th className=\"px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                         Credit Total\n//                       </th>\n//                       <th className=\"px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                         Balance\n//                       </th>\n//                     </tr>\n//                   </thead>\n//                   <tbody className=\"bg-white divide-y divide-gray-200\">\n//                     {trialBalance.map((account) => (\n//                       <tr key={account.accountId}>\n//                         <td className=\"px-4 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\n//                           {account.accountCode}\n//                         </td>\n//                         <td className=\"px-4 py-4 whitespace-nowrap text-sm text-gray-900\">\n//                           {account.accountName}\n//                         </td>\n//                         <td className=\"px-4 py-4 whitespace-nowrap\">\n//                           <span className={`px-2 py-1 text-xs font-medium rounded-full ${\n//                             account.accountType === 'assets' ? 'bg-green-100 text-green-800' :\n//                             account.accountType === 'liabilities' ? 'bg-red-100 text-red-800' :\n//                             account.accountType === 'equity' ? 'bg-blue-100 text-blue-800' :\n//                             account.accountType === 'revenue' ? 'bg-purple-100 text-purple-800' :\n//                             'bg-orange-100 text-orange-800'\n//                           }`}>\n//                             {account.accountType}\n//                           </span>\n//                         </td>\n//                         <td className=\"px-4 py-4 whitespace-nowrap text-sm text-gray-900 text-right\">\n//                           PKR {account.debit.toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\n//                         </td>\n//                         <td className=\"px-4 py-4 whitespace-nowrap text-sm text-gray-900 text-right\">\n//                           PKR {account.credit.toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\n//                         </td>\n//                         <td className=\"px-4 py-4 whitespace-nowrap text-sm font-medium text-right\">\n//                           <span className={account.balance >= 0 ? 'text-green-600' : 'text-red-600'}>\n//                             PKR {Math.abs(account.balance).toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\n//                             {account.balance < 0 && ' (CR)'}\n//                           </span>\n//                         </td>\n//                       </tr>\n//                     ))}\n//                   </tbody>\n//                   <tfoot className=\"bg-gray-50\">\n//                     <tr>\n//                       <td colSpan=\"3\" className=\"px-4 py-3 text-sm font-bold text-gray-900\">\n//                         TOTALS:\n//                       </td>\n//                       <td className=\"px-4 py-3 text-sm font-bold text-gray-900 text-right\">\n//                         PKR {trialBalance.reduce((sum, acc) => sum + acc.debit, 0).toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\n//                       </td>\n//                       <td className=\"px-4 py-3 text-sm font-bold text-gray-900 text-right\">\n//                         PKR {trialBalance.reduce((sum, acc) => sum + acc.credit, 0).toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\n//                       </td>\n//                       <td className=\"px-4 py-3 text-sm font-bold text-gray-900 text-right\">\n//                         PKR {Math.abs(trialBalance.reduce((sum, acc) => sum + acc.balance, 0)).toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\n//                       </td>\n//                     </tr>\n//                   </tfoot>\n//                 </table>\n//               </div>\n\n//               {/* Trial Balance Validation */}\n//               <div className=\"mt-4 p-4 bg-green-50 border border-green-200 rounded-lg\">\n//                 <div className=\"flex items-center\">\n//                   <CheckCircle className=\"text-green-600 mr-2\" size={20} />\n//                   <div>\n//                     <h4 className=\"font-medium text-green-800\">Trial Balance is Balanced</h4>\n//                     <p className=\"text-sm text-green-700\">\n//                       Total Debits = Total Credits = PKR {trialBalance.reduce((sum, acc) => sum + acc.debit, 0).toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\n//                     </p>\n//                   </div>\n//                 </div>\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n//       )}\n\n//       {/* Integration Status */}\n//       <div className=\"mt-8 grid grid-cols-1 md:grid-cols-3 gap-4\">\n//         <div className=\"p-4 bg-green-50 border border-green-200 rounded-lg\">\n//           <div className=\"flex items-center mb-2\">\n//             <CheckCircle className=\"text-green-600 mr-2\" size={16} />\n//             <h4 className=\"font-medium text-green-800\">POS API Integration</h4>\n//           </div>\n//           <p className=\"text-sm text-green-700\">\n//             Sales orders automatically create journal entries from live API data\n//           </p>\n//         </div>\n\n//         <div className=\"p-4 bg-blue-50 border border-blue-200 rounded-lg\">\n//           <div className=\"flex items-center mb-2\">\n//             <RefreshCw className=\"text-blue-600 mr-2\" size={16} />\n//             <h4 className=\"font-medium text-blue-800\">Real-time Sync</h4>\n//           </div>\n//           <p className=\"text-sm text-blue-700\">\n//             Journal entries updated automatically with each sales transaction\n//           </p>\n//         </div>\n\n//         <div className=\"p-4 bg-orange-50 border border-orange-200 rounded-lg\">\n//           <div className=\"flex items-center mb-2\">\n//             <FileText className=\"text-orange-600 mr-2\" size={16} />\n//             <h4 className=\"font-medium text-orange-800\">Manual Entries</h4>\n//           </div>\n//           <p className=\"text-sm text-orange-700\">\n//             Add adjustments and corrections with full double-entry validation\n//           </p>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default GeneralLedger;\n\n// //correct\n// import React, { useState, useEffect, useCallback } from 'react';\n// import { \n//   Book, \n//   Plus, \n//   Filter, \n//   Search, \n//   Calendar, \n//   FileText, \n//   Edit, \n//   Trash2, \n//   Save, \n//   X, \n//   AlertCircle,\n//   CheckCircle,\n//   DollarSign,\n//   TrendingUp,\n//   Eye,\n//   Download,\n//   RefreshCw\n// } from 'lucide-react';\n\n// const GeneralLedger = () => {\n//   const [journalEntries, setJournalEntries] = useState([]);\n//   const [accounts, setAccounts] = useState([]);\n//   const [filteredEntries, setFilteredEntries] = useState([]);\n//   const [selectedEntry, setSelectedEntry] = useState(null);\n//   const [isAddingEntry, setIsAddingEntry] = useState(false);\n//   const [loading, setLoading] = useState({\n//     entries: false,\n//     accounts: false\n//   });\n//   const [errors, setErrors] = useState({\n//     entries: null,\n//     accounts: null\n//   });\n//   const [filters, setFilters] = useState({\n//     dateFrom: '',\n//     dateTo: '',\n//     accountId: '',\n//     transactionType: 'all',\n//     searchTerm: ''\n//   });\n//   const [trialBalance, setTrialBalance] = useState([]);\n//   const [showTrialBalance, setShowTrialBalance] = useState(false);\n//   const [newEntry, setNewEntry] = useState({\n//     date: new Date().toISOString().split('T')[0],\n//     description: '',\n//     reference: '',\n//     entries: [\n//       { accountId: '', debit: 0, credit: 0, description: '' },\n//       { accountId: '', debit: 0, credit: 0, description: '' }\n//     ]\n//   });\n\n//   // API Configuration\n//   const API_BASE_URL = 'https://api-pos.hulmsolutions.com/POS/accounting2/31fc8df0-61db-41e5-bb67-070fde367ea1/orders?start=0&size=200';\n//   const API_BASE_URL_CHARTS_OF_ACCOUNTS = 'http://localhost:8080/api/accounts';\n\n//   // Fetch order data from API\n//   const fetchOrderData = async () => {\n//     try {\n//       const response = await fetch(API_BASE_URL, {\n//         method: 'GET',\n//         headers: {\n//           'Authorization': 'Bearer Hamid',\n//           'Content-Type': 'application/json',\n//         },\n//       });\n\n//       if (!response.ok) {\n//         throw new Error(`API request failed with status ${response.status}`);\n//       }\n\n//       const data = await response.json();\n//       return data;\n//     } catch (error) {\n//       console.error('Error fetching order data:', error);\n//       return null;\n//     }\n//   };\n\n//   // Format date from API format\n//   const formatDateFromCreatedAt = (createdAt) => {\n//     try {\n//       const parts = createdAt.split('.');\n//       if (parts.length >= 3) {\n//         return `${parts[0]}-${parts[1].padStart(2, '0')}-${parts[2].padStart(2, '0')}`;\n//       }\n//       return new Date().toISOString().split('T')[0];\n//     } catch (error) {\n//       return new Date().toISOString().split('T')[0];\n//     }\n//   };\n\n//   // Fetch Charts of Accounts from API\n//   const loadChartsOfAccounts = useCallback(async () => {\n//     setLoading(prev => ({ ...prev, accounts: true }));\n//     setErrors(prev => ({ ...prev, accounts: null }));\n\n//     try {\n//       const response = await fetch(API_BASE_URL_CHARTS_OF_ACCOUNTS, {\n//         method: 'GET',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//       });\n\n//       if (!response.ok) {\n//         throw new Error(`Failed to fetch accounts: ${response.status}`);\n//       }\n\n//       const data = await response.json();\n//       console.log('Raw accounts data from API:', data);\n\n//       const formattedAccounts = data\n//         .filter(account => account[4] === 'account')\n//         .map(account => ({\n//           id: account[0],\n//           code: account[1],\n//           name: account[2],\n//           type: account[3],\n//           category: account[4],\n//           parentId: account[5],\n//           level: account[6],\n//           description: account[7] || ''\n//         }))\n//         .sort((a, b) => a.code.localeCompare(b.code));\n\n//       console.log('Formatted accounts:', formattedAccounts);\n//       setAccounts(formattedAccounts);\n//       setLoading(prev => ({ ...prev, accounts: false }));\n\n//       return formattedAccounts;\n//     } catch (error) {\n//       console.error('Error loading charts of accounts:', error);\n//       setErrors(prev => ({ ...prev, accounts: error.message }));\n//       setLoading(prev => ({ ...prev, accounts: false }));\n\n//       const fallbackAccounts = [\n//         { id: '1111', code: '1111', name: 'Petty Cash', type: 'assets', category: 'account' },\n//         { id: '1112', code: '1112', name: 'Bank - Main Account', type: 'assets', category: 'account' },\n//         { id: '1120', code: '1120', name: 'Accounts Receivable', type: 'assets', category: 'account' },\n//         { id: '1130', code: '1130', name: 'Inventory', type: 'assets', category: 'account' },\n//         { id: '2110', code: '2110', name: 'Accounts Payable', type: 'liabilities', category: 'account' },\n//         { id: '2130', code: '2130', name: 'Sales Tax Payable', type: 'liabilities', category: 'account' },\n//         { id: '4100', code: '4100', name: 'Sales Revenue', type: 'revenue', category: 'account' },\n//         { id: '4110', code: '4110', name: 'Electronics Sales', type: 'revenue', category: 'account' },\n//         { id: '5100', code: '5100', name: 'Cost of Goods Sold', type: 'expenses', category: 'account' },\n//         { id: '5200', code: '5200', name: 'Purchase Expenses', type: 'expenses', category: 'account' }\n//       ];\n\n//       setAccounts(fallbackAccounts);\n//       return fallbackAccounts;\n//     }\n//   }, []);\n\n//   // Convert Sales Order to Journal Entry\n//   const convertSalesOrderToJournalEntry = useCallback((order, accountsList) => {\n//     const entries = [];\n\n//     const subTotal = parseFloat(order.subTotal) || 0;\n//     const taxAmount = parseFloat(order.taxAmount) || 0;\n//     const total = parseFloat(order.total) || 0;\n\n//     if (!order.paid || !order.fulfilled || order.status !== 'Closed') {\n//       return null;\n//     }\n\n//     const findAccountByType = (type) => {\n//       const matchingAccount = accountsList.find(acc => \n//         acc.type.toLowerCase() === type.toLowerCase()\n//       );\n//       return matchingAccount || { \n//         id: 'UNKNOWN', \n//         name: `Unknown ${type} Account`, \n//         code: 'N/A' \n//       };\n//     };\n\n//     const cashAccount = findAccountByType('assets');\n//     entries.push({\n//       accountId: cashAccount.id,\n//       accountName: cashAccount.name,\n//       accountCode: cashAccount.code,\n//       debit: total,\n//       credit: 0,\n//       description: `Cash received from Order #${order.orderId} - ${order.lineItems.map(item => item.productName).join(', ')}`\n//     });\n\n//     if (subTotal > 0) {\n//       const revenueAccount = findAccountByType('revenue');\n//       entries.push({\n//         accountId: revenueAccount.id,\n//         accountName: revenueAccount.name,\n//         accountCode: revenueAccount.code,\n//         debit: 0,\n//         credit: subTotal,\n//         description: `Revenue from Order #${order.orderId}`\n//       });\n//     }\n\n//     if (taxAmount > 0) {\n//       const taxAccount = findAccountByType('liabilities');\n//       entries.push({\n//         accountId: taxAccount.id,\n//         accountName: taxAccount.name,\n//         accountCode: taxAccount.code,\n//         debit: 0,\n//         credit: taxAmount,\n//         description: `${order.taxRate}% tax collected on Order #${order.orderId}`\n//       });\n//     }\n\n//     let totalCOGS = 0;\n//     order.lineItems.forEach(item => {\n//       if (item.fulfilled && item.status === 'Fulfilled') {\n//         const costPrice = parseFloat(item.costPrice) || 0;\n//         const quantity = parseFloat(item.quantity) || 0;\n//         const itemCOGS = costPrice * quantity;\n//         totalCOGS += itemCOGS;\n//       }\n//     });\n\n//     if (totalCOGS > 0) {\n//       const cogsAccount = findAccountByType('expenses');\n//       entries.push({\n//         accountId: cogsAccount.id,\n//         accountName: cogsAccount.name,\n//         accountCode: cogsAccount.code,\n//         debit: totalCOGS,\n//         credit: 0,\n//         description: `COGS for Order #${order.orderId}`\n//       });\n\n//       const inventoryAccount = findAccountByType('assets');\n//       entries.push({\n//         accountId: inventoryAccount.id,\n//         accountName: inventoryAccount.name,\n//         accountCode: inventoryAccount.code,\n//         debit: 0,\n//         credit: totalCOGS,\n//         description: `Inventory reduction - Order #${order.orderId}`\n//       });\n//     }\n\n//     const totalDebit = entries.reduce((sum, entry) => sum + parseFloat(entry.debit || 0), 0);\n//     const totalCredit = entries.reduce((sum, entry) => sum + parseFloat(entry.credit || 0), 0);\n\n//     return {\n//       id: `JE-ORDER-${order.orderId}`,\n//       date: formatDateFromCreatedAt(order.createdAt),\n//       description: `Sales Order #${order.orderId} - ${order.lineItems.map(item => `${item.productName} (${item.quantity})`).join(', ')}`,\n//       reference: `ORDER-${order.orderId}`,\n//       transactionType: 'automatic',\n//       source: 'POS Sales',\n//       status: 'posted',\n//       entries: entries,\n//       totalDebit: Math.round(totalDebit * 100) / 100,\n//       totalCredit: Math.round(totalCredit * 100) / 100,\n//       createdAt: order.createdAt,\n//       originalOrder: order\n//     };\n//   }, []);\n\n//   // Load Journal Entries from API and Local Storage\n//   const loadJournalEntriesFromAPI = useCallback(async () => {\n//     setLoading(prev => ({ ...prev, entries: true }));\n//     setErrors(prev => ({ ...prev, entries: null }));\n\n//     try {\n//       const salesOrders = await fetchOrderData();\n\n//       if (!salesOrders) {\n//         throw new Error('Failed to fetch sales orders');\n//       }\n\n//       const journalEntriesFromSales = salesOrders\n//         .filter(order => order.paid && order.fulfilled && order.status === 'Closed')\n//         .map(order => convertSalesOrderToJournalEntry(order, accounts))\n//         .filter(entry => entry !== null);\n\n//       let manualEntries = [];\n//       try {\n//         const storedEntries = localStorage.getItem('manualJournalEntries');\n//         manualEntries = storedEntries ? JSON.parse(storedEntries) : [];\n//       } catch (error) {\n//         console.warn('Error loading manual entries from localStorage:', error);\n//         manualEntries = [];\n//       }\n\n//       const allEntries = [...journalEntriesFromSales, ...manualEntries];\n\n//       setJournalEntries(allEntries);\n//       setFilteredEntries(allEntries);\n//       setLoading(prev => ({ ...prev, entries: false }));\n//     } catch (error) {\n//       console.error('Error loading journal entries:', error);\n//       setErrors(prev => ({ ...prev, entries: error.message }));\n//       setLoading(prev => ({ ...prev, entries: false }));\n//     }\n//   }, [accounts, convertSalesOrderToJournalEntry]);\n\n//   // Filter entries\n//   const filterEntries = useCallback(() => {\n//     let filtered = [...journalEntries];\n\n//     if (filters.dateFrom) {\n//       filtered = filtered.filter(entry => entry.date >= filters.dateFrom);\n//     }\n\n//     if (filters.dateTo) {\n//       filtered = filtered.filter(entry => entry.date <= filters.dateTo);\n//     }\n\n//     if (filters.accountId) {\n//       filtered = filtered.filter(entry => {\n//         return entry.entries.some(e => e.accountId === filters.accountId);\n//       });\n//     }\n\n//     if (filters.transactionType !== 'all') {\n//       filtered = filtered.filter(entry => entry.transactionType === filters.transactionType);\n//     }\n\n//     if (filters.searchTerm) {\n//       const term = filters.searchTerm.toLowerCase();\n//       filtered = filtered.filter(entry => \n//         entry.description.toLowerCase().includes(term) ||\n//         entry.reference.toLowerCase().includes(term) ||\n//         entry.entries.some(e => e.description.toLowerCase().includes(term))\n//       );\n//     }\n\n//     setFilteredEntries(filtered);\n//   }, [journalEntries, filters]);\n\n//   // Generate trial balance\n//   const generateTrialBalance = useCallback(() => {\n//     const balances = {};\n\n//     const requiredAccountIds = new Set();\n\n//     journalEntries.forEach(entry => {\n//       if (entry.status === 'posted') {\n//         entry.entries.forEach(entryLine => {\n//           if (entryLine.accountId) {\n//             requiredAccountIds.add(entryLine.accountId);\n//           }\n//         });\n//       }\n//     });\n\n//     const accountTypesMap = {};\n//     accounts.forEach(account => {\n//       accountTypesMap[account.id] = account.type;\n//       accountTypesMap[account.code] = account.type;\n//     });\n\n//     accounts.forEach(account => {\n//       if (account.category !== 'header') {\n//         balances[account.id] = {\n//           accountId: account.id,\n//           accountCode: account.code,\n//           accountName: account.name,\n//           accountType: account.type || 'unknown',\n//           debit: 0,\n//           credit: 0,\n//           balance: 0\n//         };\n//       }\n//     });\n\n//     requiredAccountIds.forEach(accountId => {\n//       if (!balances[accountId]) {\n//         let accountName = '';\n//         let accountType = '';\n\n//         journalEntries.forEach(entry => {\n//           entry.entries.forEach(entryLine => {\n//             if (entryLine.accountId === accountId) {\n//               if (entryLine.accountName) accountName = entryLine.accountName;\n//             }\n//           });\n//         });\n\n//         const prefix = accountId.toString().substring(0, 1);\n//         if (prefix === '1') accountType = 'assets';\n//         else if (prefix === '2') accountType = 'liabilities';\n//         else if (prefix === '3') accountType = 'equity';\n//         else if (prefix === '4') accountType = 'revenue';\n//         else if (prefix === '5') accountType = 'expenses';\n//         else accountType = accountTypesMap[accountId] || 'unknown';\n\n//         balances[accountId] = {\n//           accountId: accountId,\n//           accountCode: accountId,\n//           accountName: accountName || `Account ${accountId}`,\n//           accountType: accountType,\n//           debit: 0,\n//           credit: 0,\n//           balance: 0\n//         };\n//       }\n//     });\n\n//     journalEntries.forEach(entry => {\n//       if (entry.status === 'posted') {\n//         entry.entries.forEach(entryLine => {\n//           const accountId = entryLine.accountId;\n//           if (balances[accountId]) {\n//             balances[accountId].debit += parseFloat(entryLine.debit || 0);\n//             balances[accountId].credit += parseFloat(entryLine.credit || 0);\n\n//             if (entryLine.accountName && !balances[accountId].accountName) {\n//               balances[accountId].accountName = entryLine.accountName;\n//             }\n//           }\n//         });\n//       }\n//     });\n\n//     Object.values(balances).forEach(account => {\n//       if (account.accountType === 'assets' || account.accountType === 'expenses') {\n//         account.balance = account.debit - account.credit;\n//       } else {\n//         account.balance = account.credit - account.debit;\n//       }\n//     });\n\n//     const trialBalanceData = Object.values(balances)\n//       .filter(account => account.debit > 0 || account.credit > 0)\n//       .sort((a, b) => a.accountCode.localeCompare(b.accountCode));\n\n//     setTrialBalance(trialBalanceData);\n//     setShowTrialBalance(true);\n//   }, [accounts, journalEntries]);\n\n//   // Helper functions for entry management\n//   const addEntryLine = () => {\n//     setNewEntry({\n//       ...newEntry,\n//       entries: [...newEntry.entries, { accountId: '', debit: 0, credit: 0, description: '' }]\n//     });\n//   };\n\n//   const removeEntryLine = (index) => {\n//     if (newEntry.entries.length > 2) {\n//       const updatedEntries = newEntry.entries.filter((_, i) => i !== index);\n//       setNewEntry({ ...newEntry, entries: updatedEntries });\n//     }\n//   };\n\n//   const updateEntryLine = (index, field, value) => {\n//     const updatedEntries = [...newEntry.entries];\n//     updatedEntries[index] = { ...updatedEntries[index], [field]: value };\n//     setNewEntry({ ...newEntry, entries: updatedEntries });\n//   };\n\n//   const calculateTotals = (entries) => {\n//     const totalDebit = entries.reduce((sum, entry) => sum + (parseFloat(entry.debit) || 0), 0);\n//     const totalCredit = entries.reduce((sum, entry) => sum + (parseFloat(entry.credit) || 0), 0);\n//     return { totalDebit, totalCredit };\n//   };\n\n//   const isBalanced = (entries) => {\n//     const { totalDebit, totalCredit } = calculateTotals(entries);\n//     return Math.abs(totalDebit - totalCredit) < 0.01;\n//   };\n\n//   const saveJournalEntry = () => {\n//     if (!newEntry.description || !newEntry.entries.every(e => e.accountId)) {\n//       alert('Please fill in all required fields');\n//       return;\n//     }\n\n//     if (!isBalanced(newEntry.entries)) {\n//       alert('Journal entry must be balanced - total debits must equal total credits');\n//       return;\n//     }\n\n//     const { totalDebit, totalCredit } = calculateTotals(newEntry.entries);\n\n//     const entriesWithNames = newEntry.entries.map(entry => ({\n//       ...entry,\n//       accountName: accounts.find(acc => acc.id === entry.accountId)?.name || '',\n//       debit: parseFloat(entry.debit) || 0,\n//       credit: parseFloat(entry.credit) || 0\n//     }));\n\n//     const journalEntry = {\n//       id: `JE-MANUAL-${Date.now()}`,\n//       date: newEntry.date,\n//       description: newEntry.description,\n//       reference: newEntry.reference || `MAN${Date.now()}`,\n//       transactionType: 'manual',\n//       source: 'Manual',\n//       status: 'posted',\n//       entries: entriesWithNames,\n//       totalDebit,\n//       totalCredit,\n//       createdAt: new Date().toISOString()\n//     };\n\n//     try {\n//       const existingManualEntries = JSON.parse(localStorage.getItem('manualJournalEntries') || '[]');\n//       const updatedManualEntries = [...existingManualEntries, journalEntry];\n//       localStorage.setItem('manualJournalEntries', JSON.stringify(updatedManualEntries));\n//     } catch (error) {\n//       console.warn('Could not save to localStorage:', error);\n//     }\n\n//     setJournalEntries([...journalEntries, journalEntry]);\n\n//     setNewEntry({\n//       date: new Date().toISOString().split('T')[0],\n//       description: '',\n//       reference: '',\n//       entries: [\n//         { accountId: '', debit: 0, credit: 0, description: '' },\n//         { accountId: '', debit: 0, credit: 0, description: '' }\n//       ]\n//     });\n//     setIsAddingEntry(false);\n//   };\n\n//   const getAccountName = useCallback((accountId) => {\n//     const account = accounts.find(acc => acc.id === accountId || acc.code === accountId);\n\n//     if (account) {\n//       return `${account.code} - ${account.name}`;\n//     }\n\n//     let accountName = '';\n\n//     journalEntries.forEach(entry => {\n//       entry.entries.forEach(entryLine => {\n//         if (entryLine.accountId === accountId && entryLine.accountName) {\n//           accountName = entryLine.accountName;\n//         }\n//       });\n//     });\n\n//     if (accountName) {\n//       return `${accountId} - ${accountName}`;\n//     }\n\n//     const prefix = accountId.toString().substring(0, 1);\n//     let accountType = '';\n\n//     if (prefix === '1') accountType = 'Assets';\n//     else if (prefix === '2') accountType = 'Liabilities';\n//     else if (prefix === '3') accountType = 'Equity';\n//     else if (prefix === '4') accountType = 'Revenue';\n//     else if (prefix === '5') accountType = 'Expenses';\n\n//     return accountType ? `${accountId} - ${accountType} Account` : `${accountId} - Unknown Account`;\n//   }, [accounts, journalEntries]);\n\n//   // useEffect hooks\n//   useEffect(() => {\n//     loadChartsOfAccounts();\n//   }, [loadChartsOfAccounts]);\n\n//   useEffect(() => {\n//     if (accounts.length > 0) {\n//       loadJournalEntriesFromAPI();\n//     }\n//   }, [accounts, loadJournalEntriesFromAPI]);\n\n//   useEffect(() => {\n//     if (journalEntries.length > 0) {\n//       filterEntries();\n//     }\n//   }, [journalEntries, filters, filterEntries]);\n\n//   const { totalDebit, totalCredit } = calculateTotals(newEntry.entries);\n//   const entryIsBalanced = isBalanced(newEntry.entries);\n\n//   return (\n//     <div className=\"max-w-7xl mx-auto p-6 bg-white\">\n//       {/* Header */}\n//       <div className=\"mb-8\">\n//         <h1 className=\"text-3xl font-bold text-gray-900 mb-2 flex items-center\">\n//           <Book className=\"mr-3 text-emerald-600\" />\n//           General Ledger\n//         </h1>\n//         <p className=\"text-gray-600\">Real-time transaction recording and journal entry management</p>\n\n//         {loading.accounts && (\n//           <div className=\"mt-2 p-2 bg-blue-50 text-blue-700 rounded-md text-sm flex items-center\">\n//             <RefreshCw className=\"animate-spin mr-2\" size={16} />\n//             Loading chart of accounts...\n//           </div>\n//         )}\n\n//         {errors.accounts && (\n//           <div className=\"mt-2 p-2 bg-red-50 text-red-700 rounded-md text-sm flex items-center\">\n//             <AlertCircle className=\"mr-2\" size={16} />\n//             Error loading accounts: {errors.accounts}\n//           </div>\n//         )}\n\n//         {loading.entries && (\n//           <div className=\"mt-2 p-2 bg-blue-50 text-blue-700 rounded-md text-sm flex items-center\">\n//             <RefreshCw className=\"animate-spin mr-2\" size={16} />\n//             Loading journal entries...\n//           </div>\n//         )}\n\n//         {errors.entries && (\n//           <div className=\"mt-2 p-2 bg-red-50 text-red-700 rounded-md text-sm flex items-center\">\n//             <AlertCircle className=\"mr-2\" size={16} />\n//             Error loading entries: {errors.entries}\n//           </div>\n//         )}\n//       </div>\n\n//       {/* Quick Stats */}\n//       <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n//         <div className=\"bg-blue-50 p-4 rounded-lg border border-blue-200\">\n//           <div className=\"flex items-center justify-between\">\n//             <div>\n//               <p className=\"text-blue-600 text-sm font-medium\">Total Entries</p>\n//               <p className=\"text-2xl font-bold text-blue-900\">{journalEntries.length}</p>\n//             </div>\n//             <FileText className=\"text-blue-600\" size={24} />\n//           </div>\n//         </div>\n\n//         <div className=\"bg-green-50 p-4 rounded-lg border border-green-200\">\n//           <div className=\"flex items-center justify-between\">\n//             <div>\n//               <p className=\"text-green-600 text-sm font-medium\">POS Entries</p>\n//               <p className=\"text-2xl font-bold text-green-900\">\n//                 {journalEntries.filter(e => e.source === 'POS Sales').length}\n//               </p>\n//             </div>\n//             <TrendingUp className=\"text-green-600\" size={24} />\n//           </div>\n//         </div>\n\n//         <div className=\"bg-orange-50 p-4 rounded-lg border border-orange-200\">\n//           <div className=\"flex items-center justify-between\">\n//             <div>\n//               <p className=\"text-orange-600 text-sm font-medium\">Manual Entries</p>\n//               <p className=\"text-2xl font-bold text-orange-900\">\n//                 {journalEntries.filter(e => e.transactionType === 'manual').length}\n//               </p>\n//             </div>\n//             <Edit className=\"text-orange-600\" size={24} />\n//           </div>\n//         </div>\n\n//         <div className=\"bg-purple-50 p-4 rounded-lg border border-purple-200\">\n//           <div className=\"flex items-center justify-between\">\n//             <div>\n//               <p className=\"text-purple-600 text-sm font-medium\">Total Value</p>\n//               <p className=\"text-2xl font-bold text-purple-900\">\n//                 PKR {journalEntries.reduce((sum, entry) => sum + entry.totalDebit, 0).toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\n//               </p>\n//             </div>\n//             <DollarSign className=\"text-purple-600\" size={24} />\n//           </div>\n//         </div>\n//       </div>\n\n//       {/* Controls */}\n//       <div className=\"flex flex-wrap items-center justify-between gap-4 mb-6\">\n//         <div className=\"flex flex-wrap items-center gap-4\">\n//           {/* Date Filters */}\n//           <div className=\"flex items-center space-x-2\">\n//             <Calendar size={16} className=\"text-gray-400\" />\n//             <input\n//               type=\"date\"\n//               value={filters.dateFrom}\n//               onChange={(e) => setFilters({ ...filters, dateFrom: e.target.value })}\n//               className=\"px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\n//               placeholder=\"From\"\n//             />\n//             <span className=\"text-gray-500\">to</span>\n//             <input\n//               type=\"date\"\n//               value={filters.dateTo}\n//               onChange={(e) => setFilters({ ...filters, dateTo: e.target.value })}\n//               className=\"px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\n//               placeholder=\"To\"\n//             />\n//           </div>\n\n//           {/* Account Filter */}\n//           <div className=\"relative\">\n//             <Filter className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" size={16} />\n//             <select\n//               value={filters.accountId}\n//               onChange={(e) => setFilters({ ...filters, accountId: e.target.value })}\n//               className=\"pl-10 pr-8 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\n//             >\n//               <option value=\"\">All Accounts</option>\n//               {accounts.map(account => (\n//                 <option key={account.id} value={account.id}>\n//                   {account.code} - {account.name}\n//                 </option>\n//               ))}\n//             </select>\n//           </div>\n\n//           {/* Transaction Type Filter */}\n//           <select\n//             value={filters.transactionType}\n//             onChange={(e) => setFilters({ ...filters, transactionType: e.target.value })}\n//             className=\"px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\n//           >\n//             <option value=\"all\">All Types</option>\n//             <option value=\"automatic\">POS Sales</option>\n//             <option value=\"manual\">Manual</option>\n//           </select>\n\n//           {/* Search */}\n//           <div className=\"relative\">\n//             <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" size={16} />\n//             <input\n//               type=\"text\"\n//               placeholder=\"Search entries...\"\n//               value={filters.searchTerm}\n//               onChange={(e) => setFilters({ ...filters, searchTerm: e.target.value })}\n//               className=\"pl-10 pr-4 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\n//             />\n//           </div>\n//         </div>\n\n//         <div className=\"flex space-x-3\">\n//           <button\n//             onClick={loadJournalEntriesFromAPI}\n//             disabled={loading.entries}\n//             className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center space-x-2 disabled:bg-gray-400\"\n//           >\n//             {loading.entries ? <RefreshCw className=\"animate-spin\" size={16} /> : <RefreshCw size={16} />}\n//             <span>Refresh from API</span>\n//           </button>\n//           <button\n//             onClick={loadChartsOfAccounts}\n//             disabled={loading.accounts}\n//             className=\"px-4 py-2 bg-teal-600 text-white rounded-lg hover:bg-teal-700 flex items-center space-x-2 disabled:bg-gray-400\"\n//           >\n//             {loading.accounts ? <RefreshCw className=\"animate-spin\" size={16} /> : <RefreshCw size={16} />}\n//             <span>Refresh Accounts</span>\n//           </button>\n//           <button\n//             onClick={() => {\n//               setFilters({\n//                 dateFrom: '',\n//                 dateTo: '',\n//                 accountId: '',\n//                 transactionType: 'all',\n//                 searchTerm: ''\n//               });\n//               setFilteredEntries([...journalEntries]);\n//             }}\n//             className=\"px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 flex items-center space-x-2\"\n//           >\n//             <X size={16} />\n//             <span>Clear Filters</span>\n//           </button>\n//           <button\n//             onClick={() => setIsAddingEntry(true)}\n//             className=\"px-4 py-2 bg-emerald-600 text-white rounded-lg hover:bg-emerald-700 flex items-center space-x-2\"\n//           >\n//             <Plus size={16} />\n//             <span>Add Entry</span>\n//           </button>\n//           <button\n//             onClick={generateTrialBalance}\n//             className=\"px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 flex items-center space-x-2\"\n//           >\n//             <FileText size={16} />\n//             <span>Trial Balance</span>\n//           </button>\n//         </div>\n//       </div>\n\n//       {/* Journal Entry Form */}\n//       {isAddingEntry && (\n//         <div className=\"mb-8 p-6 bg-gray-50 rounded-lg border\">\n//           <h3 className=\"text-lg font-semibold mb-4\">Add Manual Journal Entry</h3>\n\n//           <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n//             <div>\n//               <label className=\"block text-sm font-medium text-gray-700 mb-1\">Date *</label>\n//               <input\n//                 type=\"date\"\n//                 value={newEntry.date}\n//                 onChange={(e) => setNewEntry({ ...newEntry, date: e.target.value })}\n//                 className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\n//               />\n//             </div>\n//             <div>\n//               <label className=\"block text-sm font-medium text-gray-700 mb-1\">Description *</label>\n//               <input\n//                 type=\"text\"\n//                 value={newEntry.description}\n//                 onChange={(e) => setNewEntry({ ...newEntry, description: e.target.value })}\n//                 placeholder=\"Enter description\"\n//                 className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\n//               />\n//             </div>\n//             <div>\n//               <label className=\"block text-sm font-medium text-gray-700 mb-1\">Reference</label>\n//               <input\n//                 type=\"text\"\n//                 value={newEntry.reference}\n//                 onChange={(e) => setNewEntry({ ...newEntry, reference: e.target.value })}\n//                 placeholder=\"Reference number\"\n//                 className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\n//               />\n//             </div>\n//           </div>\n\n//           {/* Entry Lines */}\n//           <div className=\"mb-4\">\n//             <label className=\"block text-sm font-medium text-gray-700 mb-2\">Journal Entry Lines</label>\n//             <div className=\"space-y-3\">\n//               {newEntry.entries.map((entry, index) => (\n//                 <div key={index} className=\"grid grid-cols-12 gap-2 items-center bg-white p-3 rounded border\">\n//                   <div className=\"col-span-4\">\n//                     <select\n//                       value={entry.accountId}\n//                       onChange={(e) => updateEntryLine(index, 'accountId', e.target.value)}\n//                       className=\"w-full px-2 py-1 border border-gray-300 rounded text-sm focus:ring-2 focus:ring-emerald-500\"\n//                     >\n//                       <option value=\"\">Select Account</option>\n//                       {accounts.map(account => (\n//                         <option key={account.id} value={account.id}>\n//                           {account.code} - {account.name}\n//                         </option>\n//                       ))}\n//                     </select>\n//                   </div>\n//                   <div className=\"col-span-3\">\n//                     <input\n//                       type=\"text\"\n//                       value={entry.description}\n//                       onChange={(e) => updateEntryLine(index, 'description', e.target.value)}\n//                       placeholder=\"Description\"\n//                       className=\"w-full px-2 py-1 border border-gray-300 rounded text-sm focus:ring-2 focus:ring-emerald-500\"\n//                     />\n//                   </div>\n//                   <div className=\"col-span-2\">\n//                     <input\n//                       type=\"number\"\n//                       step=\"0.01\"\n//                       value={entry.debit}\n//                       onChange={(e) => updateEntryLine(index, 'debit', e.target.value)}\n//                       placeholder=\"Debit\"\n//                       className=\"w-full px-2 py-1 border border-gray-300 rounded text-sm focus:ring-2 focus:ring-emerald-500\"\n//                     />\n//                   </div>\n//                   <div className=\"col-span-2\">\n//                     <input\n//                       type=\"number\"\n//                       step=\"0.01\"\n//                       value={entry.credit}\n//                       onChange={(e) => updateEntryLine(index, 'credit', e.target.value)}\n//                       placeholder=\"Credit\"\n//                       className=\"w-full px-2 py-1 border border-gray-300 rounded text-sm focus:ring-2 focus:ring-emerald-500\"\n//                     />\n//                   </div>\n//                   <div className=\"col-span-1\">\n//                     {newEntry.entries.length > 2 && (\n//                       <button\n//                         onClick={() => removeEntryLine(index)}\n//                         className=\"p-1 text-red-600 hover:bg-red-100 rounded\"\n//                       >\n//                         <Trash2 size={14} />\n//                       </button>\n//                     )}\n//                   </div>\n//                 </div>\n//               ))}\n//             </div>\n\n//             <div className=\"flex justify-between items-center mt-3\">\n//               <button\n//                 onClick={addEntryLine}\n//                 className=\"px-3 py-1 text-sm bg-gray-200 text-gray-700 rounded hover:bg-gray-300 flex items-center space-x-1\"\n//               >\n//                 <Plus size={14} />\n//                 <span>Add Line</span>\n//               </button>\n\n//               <div className=\"flex items-center space-x-4\">\n//                 <div className=\"text-sm\">\n//                   <span className=\"font-medium\">Total Debit: PKR {totalDebit.toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}</span>\n//                   <span className=\"mx-2\">|</span>\n//                   <span className=\"font-medium\">Total Credit: PKR {totalCredit.toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}</span>\n//                 </div>\n//                 {entryIsBalanced ? (\n//                   <div className=\"flex items-center text-green-600\">\n//                     <CheckCircle size={16} className=\"mr-1\" />\n//                     <span className=\"text-sm\">Balanced</span>\n//                   </div>\n//                 ) : (\n//                   <div className=\"flex items-center text-red-600\">\n//                     <AlertCircle size={16} className=\"mr-1\" />\n//                     <span className=\"text-sm\">Not Balanced</span>\n//                   </div>\n//                 )}\n//               </div>\n//             </div>\n//           </div>\n\n//           <div className=\"flex space-x-3\">\n//             <button\n//               onClick={saveJournalEntry}\n//               disabled={!entryIsBalanced}\n//               className=\"px-4 py-2 bg-emerald-600 text-white rounded-lg hover:bg-emerald-700 disabled:bg-gray-400 flex items-center space-x-2\"\n//             >\n//               <Save size={16} />\n//               <span>Save Entry</span>\n//             </button>\n//             <button\n//               onClick={() => setIsAddingEntry(false)}\n//               className=\"px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 flex items-center space-x-2\"\n//             >\n//               <X size={16} />\n//               <span>Cancel</span>\n//             </button>\n//           </div>\n//         </div>\n//       )}\n\n//       {/* Journal Entries Table */}\n//       <div className=\"bg-white border border-gray-200 rounded-lg overflow-hidden\">\n//         <div className=\"px-6 py-4 border-b border-gray-200\">\n//           <h2 className=\"text-lg font-semibold text-gray-900\">Journal Entries</h2>\n//           <p className=\"text-sm text-gray-600 mt-1\">\n//             Showing {filteredEntries.length} of {journalEntries.length} entries\n//           </p>\n//         </div>\n\n//         <div className=\"overflow-x-auto\">\n//           <table className=\"w-full\">\n//             <thead className=\"bg-gray-50\">\n//               <tr>\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                   Entry ID\n//                 </th>\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                   Date\n//                 </th>\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                   Description\n//                 </th>\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                   Reference\n//                 </th>\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                   Source\n//                 </th>\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                   Amount\n//                 </th>\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                   Status\n//                 </th>\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                   Actions\n//                 </th>\n//               </tr>\n//             </thead>\n//             <tbody className=\"bg-white divide-y divide-gray-200\">\n//               {filteredEntries.map((entry) => (\n//                 <tr key={entry.id} className=\"hover:bg-gray-50\">\n//                   <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\n//                     {entry.id}\n//                   </td>\n//                   <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n//                     {entry.date}\n//                   </td>\n//                   <td className=\"px-6 py-4 text-sm text-gray-900 max-w-xs truncate\">\n//                     {entry.description}\n//                   </td>\n//                   <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n//                     {entry.reference}\n//                   </td>\n//                   <td className=\"px-6 py-4 whitespace-nowrap\">\n//                     <span className={`px-2 py-1 text-xs font-medium rounded-full ${\n//                       entry.source === 'POS Sales' ? 'bg-green-100 text-green-800' : \n//                       entry.source === 'Manual' ? 'bg-orange-100 text-orange-800' :\n//                       'bg-blue-100 text-blue-800'\n//                     }`}>\n//                       {entry.source}\n//                     </span>\n//                   </td>\n//                   <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n//                     PKR {entry.totalDebit.toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\n//                   </td>\n//                   <td className=\"px-6 py-4 whitespace-nowrap\">\n//                     <span className={`px-2 py-1 text-xs font-medium rounded-full ${\n//                       entry.status === 'posted' ? 'bg-blue-100 text-blue-800' : 'bg-yellow-100 text-yellow-800'\n//                     }`}>\n//                       {entry.status}\n//                     </span>\n//                   </td>\n//                   <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">\n//                     <button\n//                       onClick={() => setSelectedEntry(entry)}\n//                       className=\"text-emerald-600 hover:text-emerald-900 mr-3\"\n//                     >\n//                       <Eye size={16} />\n//                     </button>\n//                   </td>\n//                 </tr>\n//               ))}\n//             </tbody>\n//           </table>\n//         </div>\n//       </div>\n\n//       {/* Entry Details Modal */}\n//       {selectedEntry && (\n//         <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center p-4 z-50\">\n//           <div className=\"bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-y-auto\">\n//             <div className=\"px-6 py-4 border-b border-gray-200\">\n//               <div className=\"flex items-center justify-between\">\n//                 <h3 className=\"text-lg font-semibold text-gray-900\">\n//                   Journal Entry Details - {selectedEntry.id}\n//                 </h3>\n//                 <button\n//                   onClick={() => setSelectedEntry(null)}\n//                   className=\"text-gray-400 hover:text-gray-600\"\n//                 >\n//                   <X size={20} />\n//                 </button>\n//               </div>\n//             </div>\n\n//             <div className=\"px-6 py-4\">\n//               {/* Entry Header */}\n//               <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-6\">\n//                 <div>\n//                   <label className=\"text-sm font-medium text-gray-500\">Date</label>\n//                   <p className=\"text-sm text-gray-900\">{selectedEntry.date}</p>\n//                 </div>\n//                 <div>\n//                   <label className=\"text-sm font-medium text-gray-500\">Reference</label>\n//                   <p className=\"text-sm text-gray-900\">{selectedEntry.reference}</p>\n//                 </div>\n//                 <div>\n//                   <label className=\"text-sm font-medium text-gray-500\">Description</label>\n//                   <p className=\"text-sm text-gray-900\">{selectedEntry.description}</p>\n//                 </div>\n//                 <div>\n//                   <label className=\"text-sm font-medium text-gray-500\">Source</label>\n//                   <span className={`px-2 py-1 text-xs font-medium rounded-full ${\n//                     selectedEntry.source === 'POS Sales' ? 'bg-green-100 text-green-800' : 'bg-orange-100 text-orange-800'\n//                   }`}>\n//                     {selectedEntry.source}\n//                   </span>\n//                 </div>\n//               </div>\n\n//               {/* Entry Lines */}\n//               <div className=\"mb-6\">\n//                 <h4 className=\"text-sm font-medium text-gray-700 mb-3\">Account Entries</h4>\n//                 <div className=\"overflow-x-auto\">\n//                   <table className=\"w-full border border-gray-200 rounded\">\n//                     <thead className=\"bg-gray-50\">\n//                       <tr>\n//                         <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500\">Account</th>\n//                         <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500\">Description</th>\n//                         <th className=\"px-4 py-2 text-right text-xs font-medium text-gray-500\">Debit</th>\n//                         <th className=\"px-4 py-2 text-right text-xs font-medium text-gray-500\">Credit</th>\n//                       </tr>\n//                     </thead>\n//                     <tbody className=\"divide-y divide-gray-200\">\n//                       {selectedEntry.entries.map((entryLine, index) => (\n//                         <tr key={index}>\n//                           <td className=\"px-4 py-2 text-sm text-gray-900\">\n//                             {getAccountName(entryLine.accountId)}\n//                           </td>\n//                           <td className=\"px-4 py-2 text-sm text-gray-600\">\n//                             {entryLine.description}\n//                           </td>\n//                           <td className=\"px-4 py-2 text-sm text-gray-900 text-right\">\n//                             {entryLine.debit > 0 ? `${entryLine.debit.toFixed(2)}` : '-'}\n//                           </td>\n//                           <td className=\"px-4 py-2 text-sm text-gray-900 text-right\">\n//                             {entryLine.credit > 0 ? `${entryLine.credit.toFixed(2)}` : '-'}\n//                           </td>\n//                         </tr>\n//                       ))}\n//                     </tbody>\n//                     <tfoot className=\"bg-gray-50\">\n//                       <tr>\n//                         <td colSpan=\"2\" className=\"px-4 py-2 text-sm font-medium text-gray-900\">\n//                           Totals:\n//                         </td>\n//                         <td className=\"px-4 py-2 text-sm font-bold text-gray-900 text-right\">\n//                           PKR {selectedEntry.totalDebit.toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\n//                         </td>\n//                         <td className=\"px-4 py-2 text-sm font-bold text-gray-900 text-right\">\n//                           PKR {selectedEntry.totalCredit.toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\n//                         </td>\n//                       </tr>\n//                     </tfoot>\n//                   </table>\n//                 </div>\n//               </div>\n\n//               {/* Original Order Info (if available) */}\n//               {selectedEntry.originalOrder && (\n//                 <div className=\"mb-6 p-4 bg-gray-50 rounded-lg\">\n//                   <h4 className=\"text-sm font-medium text-gray-700 mb-3\">Original Sales Order Details</h4>\n//                   <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n//                     <div>\n//                       <span className=\"font-medium text-gray-500\">Order ID:</span>\n//                       <p className=\"text-gray-900\">{selectedEntry.originalOrder.orderId}</p>\n//                     </div>\n//                     <div>\n//                       <span className=\"font-medium text-gray-500\">Status:</span>\n//                       <p className=\"text-gray-900\">{selectedEntry.originalOrder.status}</p>\n//                     </div>\n//                     <div>\n//                       <span className=\"font-medium text-gray-500\">Payment Status:</span>\n//                       <p className=\"text-gray-900\">{selectedEntry.originalOrder.paid ? 'Paid' : 'Unpaid'}</p>\n//                     </div>\n//                     <div>\n//                       <span className=\"font-medium text-gray-500\">Fulfilled:</span>\n//                       <p className=\"text-gray-900\">{selectedEntry.originalOrder.fulfilled ? 'Yes' : 'No'}</p>\n//                     </div>\n//                   </div>\n\n//                   {/* Line Items */}\n//                   <div className=\"mt-4\">\n//                     <span className=\"font-medium text-gray-500\">Line Items:</span>\n//                     <div className=\"mt-2 space-y-2\">\n//                       {selectedEntry.originalOrder.lineItems.map((item, index) => (\n//                         <div key={index} className=\"text-sm bg-white p-2 rounded border\">\n//                           <span className=\"font-medium\">{item.productName}</span> - \n//                           Qty: {item.quantity}, Price: PKR {parseFloat(item.price).toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}, \n//                           Total: PKR {parseFloat(item.total).toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\n//                           {item.taxAmount > 0 && <span className=\"text-gray-500\"> (Tax: PKR {parseFloat(item.taxAmount).toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})})</span>}\n//                         </div>\n//                       ))}\n//                     </div>\n//                   </div>\n//                 </div>\n//               )}\n\n//               {/* Entry Metadata */}\n//               <div className=\"text-xs text-gray-500\">\n//                 <p>Created: {new Date(selectedEntry.createdAt).toLocaleString()}</p>\n//                 <p>Status: {selectedEntry.status}</p>\n//                 <p>Type: {selectedEntry.transactionType}</p>\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n//       )}\n\n//       {/* Trial Balance Modal */}\n//       {showTrialBalance && (\n//         <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center p-4 z-50\">\n//           <div className=\"bg-white rounded-lg max-w-5xl w-full max-h-[90vh] overflow-y-auto\">\n//             <div className=\"px-6 py-4 border-b border-gray-200\">\n//               <div className=\"flex items-center justify-between\">\n//                 <h3 className=\"text-lg font-semibold text-gray-900\">\n//                   Trial Balance - As of {new Date().toLocaleDateString()}\n//                 </h3>\n//                 <div className=\"flex items-center space-x-2\">\n//                   <button\n//                     onClick={() => {\n//                       alert('Export functionality would be implemented here');\n//                     }}\n//                     className=\"px-3 py-1 bg-emerald-600 text-white rounded text-sm hover:bg-emerald-700 flex items-center space-x-1\"\n//                   >\n//                     <Download size={14} />\n//                     <span>Export</span>\n//                   </button>\n//                   <button\n//                     onClick={() => setShowTrialBalance(false)}\n//                     className=\"text-gray-400 hover:text-gray-600\"\n//                   >\n//                     <X size={20} />\n//                   </button>\n//                 </div>\n//               </div>\n//             </div>\n\n//             <div className=\"px-6 py-4\">\n//               <div className=\"overflow-x-auto\">\n//                 <table className=\"w-full\">\n//                   <thead className=\"bg-gray-50\">\n//                     <tr>\n//                       <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                         Account Code\n//                       </th>\n//                       <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                         Account Name\n//                       </th>\n//                       <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                         Type\n//                       </th>\n//                       <th className=\"px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                         Debit Total\n//                       </th>\n//                       <th className=\"px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                         Credit Total\n//                       </th>\n//                       <th className=\"px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">\n//                         Balance\n//                       </th>\n//                     </tr>\n//                   </thead>\n//                   <tbody className=\"bg-white divide-y divide-gray-200\">\n//                     {trialBalance.map((item) => (\n//                       <tr key={item.accountId}>\n//                         <td className=\"px-4 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\n//                           {item.accountCode}\n//                         </td>\n//                         <td className=\"px-4 py-4 whitespace-nowrap text-sm text-gray-900\">\n//                           {item.accountName}\n//                         </td>\n//                         <td className=\"px-4 py-4 whitespace-nowrap\">\n//                           <span className={`px-2 py-1 text-xs font-medium rounded-full ${\n//                             item.accountType === 'assets' ? 'bg-green-100 text-green-800' :\n//                             item.accountType === 'liabilities' ? 'bg-red-100 text-red-800' :\n//                             item.accountType === 'equity' ? 'bg-blue-100 text-blue-800' :\n//                             item.accountType === 'revenue' ? 'bg-purple-100 text-purple-800' :\n//                             item.accountType === 'expenses' ? 'bg-orange-100 text-orange-800' :\n//                             'bg-gray-100 text-gray-800'\n//                           }`}>\n//                             {typeof item.accountType === 'string' && item.accountType.length > 0 \n//                               ? item.accountType.charAt(0).toUpperCase() + item.accountType.slice(1)\n//                               : 'Unknown'}\n//                           </span>\n//                         </td>\n//                         <td className=\"px-4 py-4 whitespace-nowrap text-sm text-gray-900 text-right\">\n//                           PKR {item.debit.toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\n//                         </td>\n//                         <td className=\"px-4 py-4 whitespace-nowrap text-sm text-gray-900 text-right\">\n//                           PKR {item.credit.toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\n//                         </td>\n//                         <td className=\"px-4 py-4 whitespace-nowrap text-sm font-medium text-right\">\n//                           <span className={item.balance >= 0 ? 'text-green-600' : 'text-red-600'}>\n//                             PKR {Math.abs(item.balance).toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\n//                             {item.balance < 0 && ' (CR)'}\n//                           </span>\n//                         </td>\n//                       </tr>\n//                     ))}\n//                   </tbody>\n//                   <tfoot className=\"bg-gray-50\">\n//                     <tr>\n//                       <td colSpan=\"3\" className=\"px-4 py-3 text-sm font-bold text-gray-900\">\n//                         TOTALS:\n//                       </td>\n//                       <td className=\"px-4 py-3 text-sm font-bold text-gray-900 text-right\">\n//                         PKR {trialBalance.reduce((sum, acc) => sum + acc.debit, 0).toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\n//                       </td>\n//                       <td className=\"px-4 py-3 text-sm font-bold text-gray-900 text-right\">\n//                         PKR {trialBalance.reduce((sum, acc) => sum + acc.credit, 0).toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\n//                       </td>\n//                       <td className=\"px-4 py-3 text-sm font-bold text-gray-900 text-right\">\n//                         PKR {Math.abs(trialBalance.reduce((sum, acc) => sum + acc.balance, 0)).toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\n//                       </td>\n//                     </tr>\n//                   </tfoot>\n//                 </table>\n//               </div>\n\n//               {/* Trial Balance Validation */}\n//               <div className=\"mt-4 p-4 bg-green-50 border border-green-200 rounded-lg\">\n//                 <div className=\"flex items-center\">\n//                   <CheckCircle className=\"text-green-600 mr-2\" size={20} />\n//                   <div>\n//                     <h4 className=\"font-medium text-green-800\">Trial Balance is Balanced</h4>\n//                     <p className=\"text-sm text-green-700\">\n//                       Total Debits = Total Credits = PKR {trialBalance.reduce((sum, acc) => sum + acc.debit, 0).toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\n//                     </p>\n//                   </div>\n//                 </div>\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n//       )}\n\n//       {/* Integration Status */}\n//       <div className=\"mt-8 grid grid-cols-1 md:grid-cols-3 gap-4\">\n//         <div className=\"p-4 bg-green-50 border border-green-200 rounded-lg\">\n//           <div className=\"flex items-center mb-2\">\n//             <CheckCircle className=\"text-green-600 mr-2\" size={16} />\n//             <h4 className=\"font-medium text-green-800\">POS API Integration</h4>\n//           </div>\n//           <p className=\"text-sm text-green-700\">\n//             Sales orders automatically create journal entries from live API data\n//           </p>\n//         </div>\n\n//         <div className=\"p-4 bg-blue-50 border border-blue-200 rounded-lg\">\n//           <div className=\"flex items-center mb-2\">\n//             <RefreshCw className=\"text-blue-600 mr-2\" size={16} />\n//             <h4 className=\"font-medium text-blue-800\">Real-time Sync</h4>\n//           </div>\n//           <p className=\"text-sm text-blue-700\">\n//             Journal entries updated automatically with each sales transaction\n//           </p>\n//         </div>\n\n//         <div className=\"p-4 bg-orange-50 border border-orange-200 rounded-lg\">\n//           <div className=\"flex items-center mb-2\">\n//             <FileText className=\"text-orange-600 mr-2\" size={16} />\n//             <h4 className=\"font-medium text-orange-800\">Manual Entries</h4>\n//           </div>\n//           <p className=\"text-sm text-orange-700\">\n//             Add adjustments and corrections with full double-entry validation\n//           </p>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default GeneralLedger;\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { Book, Plus, Filter, Search, Calendar, FileText, Edit, Trash2, Save, X, AlertCircle, CheckCircle, DollarSign, TrendingUp, Eye, Download, RefreshCw } from 'lucide-react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst GeneralLedger = () => {\n  _s();\n  const [journalEntries, setJournalEntries] = useState([]);\n  const [accounts, setAccounts] = useState([]);\n  const [filteredEntries, setFilteredEntries] = useState([]);\n  const [selectedEntry, setSelectedEntry] = useState(null);\n  const [isAddingEntry, setIsAddingEntry] = useState(false);\n  const [loading, setLoading] = useState({\n    entries: false,\n    accounts: false\n  });\n  const [errors, setErrors] = useState({\n    entries: null,\n    accounts: null\n  });\n  const [filters, setFilters] = useState({\n    dateFrom: '',\n    dateTo: '',\n    accountId: '',\n    transactionType: 'all',\n    searchTerm: ''\n  });\n  const [trialBalance, setTrialBalance] = useState([]);\n  const [showTrialBalance, setShowTrialBalance] = useState(false);\n  const [newEntry, setNewEntry] = useState({\n    date: new Date().toISOString().split('T')[0],\n    description: '',\n    reference: '',\n    entries: [{\n      accountId: '',\n      debit: 0,\n      credit: 0,\n      description: ''\n    }, {\n      accountId: '',\n      debit: 0,\n      credit: 0,\n      description: ''\n    }]\n  });\n\n  // API Configuration\n  const API_BASE_URL = 'https://api-pos.hulmsolutions.com/POS/accounting2/31fc8df0-61db-41e5-bb67-070fde367ea1/orders?start=0&size=200';\n  const API_BASE_URL_CHARTS_OF_ACCOUNTS = 'http://localhost:8080/api/accounts';\n\n  // Fetch order data from API\n  const fetchOrderData = async () => {\n    try {\n      const response = await fetch(API_BASE_URL, {\n        method: 'GET',\n        headers: {\n          'Authorization': 'Bearer Hamid',\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`API request failed with status ${response.status}`);\n      }\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Error fetching order data:', error);\n      return null;\n    }\n  };\n\n  // Format date from API format\n  const formatDateFromCreatedAt = createdAt => {\n    try {\n      const parts = createdAt.split('.');\n      if (parts.length >= 3) {\n        return `${parts[0]}-${parts[1].padStart(2, '0')}-${parts[2].padStart(2, '0')}`;\n      }\n      return new Date().toISOString().split('T')[0];\n    } catch (error) {\n      return new Date().toISOString().split('T')[0];\n    }\n  };\n\n  // Fetch Charts of Accounts from API\n  const loadChartsOfAccounts = useCallback(async () => {\n    setLoading(prev => ({\n      ...prev,\n      accounts: true\n    }));\n    setErrors(prev => ({\n      ...prev,\n      accounts: null\n    }));\n    try {\n      const response = await fetch(API_BASE_URL_CHARTS_OF_ACCOUNTS, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`Failed to fetch accounts: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('Raw accounts data from API:', data);\n      const formattedAccounts = data.filter(account => account[4] === 'account').map(account => ({\n        id: account[0],\n        code: account[1],\n        name: account[2],\n        type: account[3],\n        category: account[4],\n        parentId: account[5],\n        level: account[6],\n        description: account[7] || ''\n      })).sort((a, b) => a.code.localeCompare(b.code));\n      console.log('Formatted accounts:', formattedAccounts);\n      setAccounts(formattedAccounts);\n      setLoading(prev => ({\n        ...prev,\n        accounts: false\n      }));\n      return formattedAccounts;\n    } catch (error) {\n      console.error('Error loading charts of accounts:', error);\n      setErrors(prev => ({\n        ...prev,\n        accounts: error.message\n      }));\n      setLoading(prev => ({\n        ...prev,\n        accounts: false\n      }));\n      const fallbackAccounts = [\n      // Assets\n      {\n        id: '1000',\n        code: '1000',\n        name: 'Assets',\n        type: 'assets',\n        category: 'header'\n      }, {\n        id: '1100',\n        code: '1100',\n        name: 'Current Assets',\n        type: 'assets',\n        category: 'header'\n      }, {\n        id: '1111',\n        code: '1111',\n        name: 'Petty Cash',\n        type: 'assets',\n        category: 'account'\n      }, {\n        id: '1112',\n        code: '1112',\n        name: 'Bank - Main Account',\n        type: 'assets',\n        category: 'account'\n      }, {\n        id: '1120',\n        code: '1120',\n        name: 'Accounts Receivable',\n        type: 'assets',\n        category: 'account'\n      }, {\n        id: '1125',\n        code: '1125',\n        name: 'Insurance Receivables',\n        type: 'assets',\n        category: 'account'\n      }, {\n        id: '1130',\n        code: '1130',\n        name: 'Inventory - Telecom Equipment',\n        type: 'assets',\n        category: 'account'\n      }, {\n        id: '1140',\n        code: '1140',\n        name: 'Pharmaceutical Inventory',\n        type: 'assets',\n        category: 'account'\n      }, {\n        id: '1150',\n        code: '1150',\n        name: 'Promotional Materials',\n        type: 'assets',\n        category: 'account'\n      }, {\n        id: '1200',\n        code: '1200',\n        name: 'Fixed Assets',\n        type: 'assets',\n        category: 'header'\n      }, {\n        id: '1210',\n        code: '1210',\n        name: 'Medical Equipment',\n        type: 'assets',\n        category: 'account'\n      }, {\n        id: '1220',\n        code: '1220',\n        name: 'IT Infrastructure',\n        type: 'assets',\n        category: 'account'\n      },\n      // Liabilities\n      {\n        id: '2000',\n        code: '2000',\n        name: 'Liabilities',\n        type: 'liabilities',\n        category: 'header'\n      }, {\n        id: '2100',\n        code: '2100',\n        name: 'Current Liabilities',\n        type: 'liabilities',\n        category: 'header'\n      }, {\n        id: '2110',\n        code: '2110',\n        name: 'Accounts Payable',\n        type: 'liabilities',\n        category: 'account'\n      }, {\n        id: '2130',\n        code: '2130',\n        name: 'Sales Tax Payable',\n        type: 'liabilities',\n        category: 'account'\n      }, {\n        id: '2140',\n        code: '2140',\n        name: 'Payroll Payable',\n        type: 'liabilities',\n        category: 'account'\n      }, {\n        id: '2150',\n        code: '2150',\n        name: 'Insurance Premiums Payable',\n        type: 'liabilities',\n        category: 'account'\n      },\n      // Equity\n      {\n        id: '3000',\n        code: '3000',\n        name: 'Equity',\n        type: 'equity',\n        category: 'header'\n      }, {\n        id: '3100',\n        code: '3100',\n        name: 'Owner Equity',\n        type: 'equity',\n        category: 'header'\n      }, {\n        id: '3110',\n        code: '3110',\n        name: 'Capital Stock',\n        type: 'equity',\n        category: 'account'\n      }, {\n        id: '3200',\n        code: '3200',\n        name: 'Retained Earnings',\n        type: 'equity',\n        category: 'account'\n      },\n      // Revenue\n      {\n        id: '4000',\n        code: '4000',\n        name: 'Revenue',\n        type: 'revenue',\n        category: 'header'\n      }, {\n        id: '4110',\n        code: '4110',\n        name: 'Mobile Service Revenue',\n        type: 'revenue',\n        category: 'account'\n      }, {\n        id: '4120',\n        code: '4120',\n        name: 'Data Service Revenue',\n        type: 'revenue',\n        category: 'account'\n      }, {\n        id: '4130',\n        code: '4130',\n        name: 'Pharmaceutical Sales',\n        type: 'revenue',\n        category: 'account'\n      }, {\n        id: '4140',\n        code: '4140',\n        name: 'Treatment Revenue',\n        type: 'revenue',\n        category: 'account'\n      }, {\n        id: '4150',\n        code: '4150',\n        name: 'Enterprise Services',\n        type: 'revenue',\n        category: 'account'\n      }, {\n        id: '4180',\n        code: '4180',\n        name: 'Wholesale Revenue',\n        type: 'revenue',\n        category: 'account'\n      },\n      // Expenses\n      {\n        id: '5000',\n        code: '5000',\n        name: 'Expenses',\n        type: 'expenses',\n        category: 'header'\n      }, {\n        id: '5100',\n        code: '5100',\n        name: 'Cost of Goods Sold',\n        type: 'expenses',\n        category: 'account'\n      }, {\n        id: '5200',\n        code: '5200',\n        name: 'Operating Expenses',\n        type: 'expenses',\n        category: 'account'\n      }, {\n        id: '5240',\n        code: '5240',\n        name: 'Medical Staff Salaries',\n        type: 'expenses',\n        category: 'account'\n      }, {\n        id: '5250',\n        code: '5250',\n        name: 'Marketing & Advertising',\n        type: 'expenses',\n        category: 'account'\n      }, {\n        id: '5260',\n        code: '5260',\n        name: 'Medical Supplies',\n        type: 'expenses',\n        category: 'account'\n      }, {\n        id: '5270',\n        code: '5270',\n        name: 'License & Compliance',\n        type: 'expenses',\n        category: 'account'\n      }];\n      setAccounts(fallbackAccounts);\n      return fallbackAccounts;\n    }\n  }, []);\n\n  // Convert Sales Order to Journal Entry\n  const convertSalesOrderToJournalEntry = useCallback((order, accountsList) => {\n    const entries = [];\n    const subTotal = parseFloat(order.subTotal) || 0;\n    const taxAmount = parseFloat(order.taxAmount) || 0;\n    const total = parseFloat(order.total) || 0;\n    if (!order.paid || !order.fulfilled || order.status !== 'Closed') {\n      return null;\n    }\n\n    // Enhanced function to find specific accounts from your chart of accounts\n    const findSpecificAccount = accountCode => {\n      const account = accountsList.find(acc => acc.code === accountCode || acc.id === accountCode);\n      return account || null;\n    };\n    const findAccountByType = (type, preferredCode = null) => {\n      // First try to find the preferred specific account\n      if (preferredCode) {\n        const specificAccount = findSpecificAccount(preferredCode);\n        if (specificAccount) return specificAccount;\n      }\n\n      // Then try to find by type\n      const matchingAccount = accountsList.find(acc => acc.type && acc.type.toLowerCase() === type.toLowerCase());\n      if (matchingAccount) return matchingAccount;\n\n      // Fallback with proper account codes from your chart\n      // const fallbackAccounts = {\n      //   'assets': { id: '1112', code: '1112', name: 'Bank - Main Account', type: 'assets' },\n      //   'revenue': { id: '4110', code: '4110', name: 'Mobile Service Revenue', type: 'revenue' },\n      //   'liabilities': { id: '2130', code: '2130', name: 'Sales Tax Payable', type: 'liabilities' },\n      //   'expenses': { id: '5100', code: '5100', name: 'Cost of Goods Sold', type: 'expenses' }\n      // };\n\n      // return fallbackAccounts[type.toLowerCase()] || { \n      //   id: 'UNKNOWN', \n      //   name: `Unknown ${type} Account`, \n      //   code: 'N/A' \n      // };\n    };\n    const cashAccount = findAccountByType('assets');\n    entries.push({\n      accountId: cashAccount.id,\n      accountName: cashAccount.name,\n      accountCode: cashAccount.code,\n      debit: total,\n      credit: 0,\n      description: `Cash received from Order #${order.orderId} - ${order.lineItems.map(item => item.productName).join(', ')}`\n    });\n    if (subTotal > 0) {\n      const revenueAccount = findAccountByType('revenue');\n      entries.push({\n        accountId: revenueAccount.id,\n        accountName: revenueAccount.name,\n        accountCode: revenueAccount.code,\n        debit: 0,\n        credit: subTotal,\n        description: `Revenue from Order #${order.orderId}`\n      });\n    }\n    if (taxAmount > 0) {\n      const taxAccount = findAccountByType('liabilities');\n      entries.push({\n        accountId: taxAccount.id,\n        accountName: taxAccount.name,\n        accountCode: taxAccount.code,\n        debit: 0,\n        credit: taxAmount,\n        description: `${order.taxRate}% tax collected on Order #${order.orderId}`\n      });\n    }\n    let totalCOGS = 0;\n    order.lineItems.forEach(item => {\n      if (item.fulfilled && item.status === 'Fulfilled') {\n        const costPrice = parseFloat(item.costPrice) || 0;\n        const quantity = parseFloat(item.quantity) || 0;\n        const itemCOGS = costPrice * quantity;\n        totalCOGS += itemCOGS;\n      }\n    });\n    if (totalCOGS > 0) {\n      const cogsAccount = findAccountByType('expenses');\n      entries.push({\n        accountId: cogsAccount.id,\n        accountName: cogsAccount.name,\n        accountCode: cogsAccount.code,\n        debit: totalCOGS,\n        credit: 0,\n        description: `COGS for Order #${order.orderId}`\n      });\n      const inventoryAccount = findAccountByType('assets');\n      entries.push({\n        accountId: inventoryAccount.id,\n        accountName: inventoryAccount.name,\n        accountCode: inventoryAccount.code,\n        debit: 0,\n        credit: totalCOGS,\n        description: `Inventory reduction - Order #${order.orderId}`\n      });\n    }\n    const totalDebit = entries.reduce((sum, entry) => sum + parseFloat(entry.debit || 0), 0);\n    const totalCredit = entries.reduce((sum, entry) => sum + parseFloat(entry.credit || 0), 0);\n    return {\n      id: `JE-ORDER-${order.orderId}`,\n      date: formatDateFromCreatedAt(order.createdAt),\n      description: `Sales Order #${order.orderId} - ${order.lineItems.map(item => `${item.productName} (${item.quantity})`).join(', ')}`,\n      reference: `ORDER-${order.orderId}`,\n      transactionType: 'automatic',\n      source: 'POS Sales',\n      status: 'posted',\n      entries: entries,\n      totalDebit: Math.round(totalDebit * 100) / 100,\n      totalCredit: Math.round(totalCredit * 100) / 100,\n      createdAt: order.createdAt,\n      originalOrder: order\n    };\n  }, []);\n\n  // Load Journal Entries from API and Local Storage\n  const loadJournalEntriesFromAPI = useCallback(async () => {\n    setLoading(prev => ({\n      ...prev,\n      entries: true\n    }));\n    setErrors(prev => ({\n      ...prev,\n      entries: null\n    }));\n    try {\n      const salesOrders = await fetchOrderData();\n      if (!salesOrders) {\n        throw new Error('Failed to fetch sales orders');\n      }\n      const journalEntriesFromSales = salesOrders.filter(order => order.paid && order.fulfilled && order.status === 'Closed').map(order => convertSalesOrderToJournalEntry(order, accounts)).filter(entry => entry !== null);\n      let manualEntries = [];\n      try {\n        const storedEntries = localStorage.getItem('manualJournalEntries');\n        manualEntries = storedEntries ? JSON.parse(storedEntries) : [];\n      } catch (error) {\n        console.warn('Error loading manual entries from localStorage:', error);\n        manualEntries = [];\n      }\n      const allEntries = [...journalEntriesFromSales, ...manualEntries];\n      setJournalEntries(allEntries);\n      setFilteredEntries(allEntries);\n      setLoading(prev => ({\n        ...prev,\n        entries: false\n      }));\n    } catch (error) {\n      console.error('Error loading journal entries:', error);\n      setErrors(prev => ({\n        ...prev,\n        entries: error.message\n      }));\n      setLoading(prev => ({\n        ...prev,\n        entries: false\n      }));\n    }\n  }, [accounts, convertSalesOrderToJournalEntry]);\n\n  // Filter entries\n  const filterEntries = useCallback(() => {\n    let filtered = [...journalEntries];\n    if (filters.dateFrom) {\n      filtered = filtered.filter(entry => entry.date >= filters.dateFrom);\n    }\n    if (filters.dateTo) {\n      filtered = filtered.filter(entry => entry.date <= filters.dateTo);\n    }\n    if (filters.accountId) {\n      filtered = filtered.filter(entry => {\n        return entry.entries.some(e => e.accountId === filters.accountId);\n      });\n    }\n    if (filters.transactionType !== 'all') {\n      filtered = filtered.filter(entry => entry.transactionType === filters.transactionType);\n    }\n    if (filters.searchTerm) {\n      const term = filters.searchTerm.toLowerCase();\n      filtered = filtered.filter(entry => entry.description.toLowerCase().includes(term) || entry.reference.toLowerCase().includes(term) || entry.entries.some(e => e.description.toLowerCase().includes(term)));\n    }\n    setFilteredEntries(filtered);\n  }, [journalEntries, filters]);\n\n  // Generate trial balance\n  const generateTrialBalance = useCallback(() => {\n    const balances = {};\n    const requiredAccountIds = new Set();\n    journalEntries.forEach(entry => {\n      if (entry.status === 'posted') {\n        entry.entries.forEach(entryLine => {\n          if (entryLine.accountId) {\n            requiredAccountIds.add(entryLine.accountId);\n          }\n        });\n      }\n    });\n    const accountTypesMap = {};\n    accounts.forEach(account => {\n      accountTypesMap[account.id] = account.type;\n      accountTypesMap[account.code] = account.type;\n    });\n    accounts.forEach(account => {\n      if (account.category !== 'header') {\n        balances[account.id] = {\n          accountId: account.id,\n          accountCode: account.code,\n          accountName: account.name,\n          accountType: account.type || 'unknown',\n          debit: 0,\n          credit: 0,\n          balance: 0\n        };\n      }\n    });\n    requiredAccountIds.forEach(accountId => {\n      if (!balances[accountId]) {\n        let accountName = '';\n        let accountType = '';\n        journalEntries.forEach(entry => {\n          entry.entries.forEach(entryLine => {\n            if (entryLine.accountId === accountId) {\n              if (entryLine.accountName) accountName = entryLine.accountName;\n            }\n          });\n        });\n        const prefix = accountId.toString().substring(0, 1);\n        if (prefix === '1') accountType = 'assets';else if (prefix === '2') accountType = 'liabilities';else if (prefix === '3') accountType = 'equity';else if (prefix === '4') accountType = 'revenue';else if (prefix === '5') accountType = 'expenses';else accountType = accountTypesMap[accountId] || 'unknown';\n        balances[accountId] = {\n          accountId: accountId,\n          accountCode: accountId,\n          accountName: accountName || `Account ${accountId}`,\n          accountType: accountType,\n          debit: 0,\n          credit: 0,\n          balance: 0\n        };\n      }\n    });\n    journalEntries.forEach(entry => {\n      if (entry.status === 'posted') {\n        entry.entries.forEach(entryLine => {\n          const accountId = entryLine.accountId;\n          if (balances[accountId]) {\n            balances[accountId].debit += parseFloat(entryLine.debit || 0);\n            balances[accountId].credit += parseFloat(entryLine.credit || 0);\n            if (entryLine.accountName && !balances[accountId].accountName) {\n              balances[accountId].accountName = entryLine.accountName;\n            }\n          }\n        });\n      }\n    });\n    Object.values(balances).forEach(account => {\n      if (account.accountType === 'assets' || account.accountType === 'expenses') {\n        account.balance = account.debit - account.credit;\n      } else {\n        account.balance = account.credit - account.debit;\n      }\n    });\n    const trialBalanceData = Object.values(balances).filter(account => account.debit > 0 || account.credit > 0).sort((a, b) => a.accountCode.localeCompare(b.accountCode));\n    setTrialBalance(trialBalanceData);\n    setShowTrialBalance(true);\n  }, [accounts, journalEntries]);\n\n  // Helper functions for entry management\n  const addEntryLine = () => {\n    setNewEntry({\n      ...newEntry,\n      entries: [...newEntry.entries, {\n        accountId: '',\n        debit: 0,\n        credit: 0,\n        description: ''\n      }]\n    });\n  };\n  const removeEntryLine = index => {\n    if (newEntry.entries.length > 2) {\n      const updatedEntries = newEntry.entries.filter((_, i) => i !== index);\n      setNewEntry({\n        ...newEntry,\n        entries: updatedEntries\n      });\n    }\n  };\n  const updateEntryLine = (index, field, value) => {\n    const updatedEntries = [...newEntry.entries];\n    updatedEntries[index] = {\n      ...updatedEntries[index],\n      [field]: value\n    };\n    setNewEntry({\n      ...newEntry,\n      entries: updatedEntries\n    });\n  };\n  const calculateTotals = entries => {\n    const totalDebit = entries.reduce((sum, entry) => sum + (parseFloat(entry.debit) || 0), 0);\n    const totalCredit = entries.reduce((sum, entry) => sum + (parseFloat(entry.credit) || 0), 0);\n    return {\n      totalDebit,\n      totalCredit\n    };\n  };\n  const isBalanced = entries => {\n    const {\n      totalDebit,\n      totalCredit\n    } = calculateTotals(entries);\n    return Math.abs(totalDebit - totalCredit) < 0.01;\n  };\n  const saveJournalEntry = () => {\n    if (!newEntry.description || !newEntry.entries.every(e => e.accountId)) {\n      alert('Please fill in all required fields');\n      return;\n    }\n    if (!isBalanced(newEntry.entries)) {\n      alert('Journal entry must be balanced - total debits must equal total credits');\n      return;\n    }\n    const {\n      totalDebit,\n      totalCredit\n    } = calculateTotals(newEntry.entries);\n    const entriesWithNames = newEntry.entries.map(entry => {\n      var _accounts$find;\n      return {\n        ...entry,\n        accountName: ((_accounts$find = accounts.find(acc => acc.id === entry.accountId)) === null || _accounts$find === void 0 ? void 0 : _accounts$find.name) || '',\n        debit: parseFloat(entry.debit) || 0,\n        credit: parseFloat(entry.credit) || 0\n      };\n    });\n    const journalEntry = {\n      id: `JE-MANUAL-${Date.now()}`,\n      date: newEntry.date,\n      description: newEntry.description,\n      reference: newEntry.reference || `MAN${Date.now()}`,\n      transactionType: 'manual',\n      source: 'Manual',\n      status: 'posted',\n      entries: entriesWithNames,\n      totalDebit,\n      totalCredit,\n      createdAt: new Date().toISOString()\n    };\n    try {\n      const existingManualEntries = JSON.parse(localStorage.getItem('manualJournalEntries') || '[]');\n      const updatedManualEntries = [...existingManualEntries, journalEntry];\n      localStorage.setItem('manualJournalEntries', JSON.stringify(updatedManualEntries));\n    } catch (error) {\n      console.warn('Could not save to localStorage:', error);\n    }\n    setJournalEntries([...journalEntries, journalEntry]);\n    setNewEntry({\n      date: new Date().toISOString().split('T')[0],\n      description: '',\n      reference: '',\n      entries: [{\n        accountId: '',\n        debit: 0,\n        credit: 0,\n        description: ''\n      }, {\n        accountId: '',\n        debit: 0,\n        credit: 0,\n        description: ''\n      }]\n    });\n    setIsAddingEntry(false);\n  };\n  const getAccountName = useCallback(accountId => {\n    const account = accounts.find(acc => acc.id === accountId || acc.code === accountId);\n    if (account) {\n      return `${account.code} - ${account.name}`;\n    }\n    let accountName = '';\n    journalEntries.forEach(entry => {\n      entry.entries.forEach(entryLine => {\n        if (entryLine.accountId === accountId && entryLine.accountName) {\n          accountName = entryLine.accountName;\n        }\n      });\n    });\n    if (accountName) {\n      return `${accountId} - ${accountName}`;\n    }\n    const prefix = accountId.toString().substring(0, 1);\n    let accountType = '';\n    if (prefix === '1') accountType = 'Assets';else if (prefix === '2') accountType = 'Liabilities';else if (prefix === '3') accountType = 'Equity';else if (prefix === '4') accountType = 'Revenue';else if (prefix === '5') accountType = 'Expenses';\n    return accountType ? `${accountId} - ${accountType} Account` : `${accountId} - Unknown Account`;\n  }, [accounts, journalEntries]);\n\n  // useEffect hooks\n  useEffect(() => {\n    loadChartsOfAccounts();\n  }, [loadChartsOfAccounts]);\n  useEffect(() => {\n    if (accounts.length > 0) {\n      loadJournalEntriesFromAPI();\n    }\n  }, [accounts, loadJournalEntriesFromAPI]);\n  useEffect(() => {\n    if (journalEntries.length > 0) {\n      filterEntries();\n    }\n  }, [journalEntries, filters, filterEntries]);\n  const {\n    totalDebit,\n    totalCredit\n  } = calculateTotals(newEntry.entries);\n  const entryIsBalanced = isBalanced(newEntry.entries);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"max-w-7xl mx-auto p-6 bg-white\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-8\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-3xl font-bold text-gray-900 mb-2 flex items-center\",\n        children: [/*#__PURE__*/_jsxDEV(Book, {\n          className: \"mr-3 text-emerald-600\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 6405,\n          columnNumber: 11\n        }, this), \"General Ledger\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 6404,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-gray-600\",\n        children: \"Real-time transaction recording and journal entry management\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 6408,\n        columnNumber: 9\n      }, this), loading.accounts && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-2 p-2 bg-blue-50 text-blue-700 rounded-md text-sm flex items-center\",\n        children: [/*#__PURE__*/_jsxDEV(RefreshCw, {\n          className: \"animate-spin mr-2\",\n          size: 16\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 6412,\n          columnNumber: 13\n        }, this), \"Loading chart of accounts...\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 6411,\n        columnNumber: 11\n      }, this), errors.accounts && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-2 p-2 bg-red-50 text-red-700 rounded-md text-sm flex items-center\",\n        children: [/*#__PURE__*/_jsxDEV(AlertCircle, {\n          className: \"mr-2\",\n          size: 16\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 6419,\n          columnNumber: 13\n        }, this), \"Error loading accounts: \", errors.accounts]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 6418,\n        columnNumber: 11\n      }, this), loading.entries && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-2 p-2 bg-blue-50 text-blue-700 rounded-md text-sm flex items-center\",\n        children: [/*#__PURE__*/_jsxDEV(RefreshCw, {\n          className: \"animate-spin mr-2\",\n          size: 16\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 6426,\n          columnNumber: 13\n        }, this), \"Loading journal entries...\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 6425,\n        columnNumber: 11\n      }, this), errors.entries && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-2 p-2 bg-red-50 text-red-700 rounded-md text-sm flex items-center\",\n        children: [/*#__PURE__*/_jsxDEV(AlertCircle, {\n          className: \"mr-2\",\n          size: 16\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 6433,\n          columnNumber: 13\n        }, this), \"Error loading entries: \", errors.entries]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 6432,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 6403,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-blue-50 p-4 rounded-lg border border-blue-200\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center justify-between\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-blue-600 text-sm font-medium\",\n              children: \"Total Entries\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 6444,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-2xl font-bold text-blue-900\",\n              children: journalEntries.length\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 6445,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 6443,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FileText, {\n            className: \"text-blue-600\",\n            size: 24\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 6447,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 6442,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 6441,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-green-50 p-4 rounded-lg border border-green-200\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center justify-between\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-green-600 text-sm font-medium\",\n              children: \"POS Entries\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 6454,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-2xl font-bold text-green-900\",\n              children: journalEntries.filter(e => e.source === 'POS Sales').length\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 6455,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 6453,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TrendingUp, {\n            className: \"text-green-600\",\n            size: 24\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 6459,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 6452,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 6451,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-orange-50 p-4 rounded-lg border border-orange-200\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center justify-between\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-orange-600 text-sm font-medium\",\n              children: \"Manual Entries\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 6466,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-2xl font-bold text-orange-900\",\n              children: journalEntries.filter(e => e.transactionType === 'manual').length\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 6467,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 6465,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Edit, {\n            className: \"text-orange-600\",\n            size: 24\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 6471,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 6464,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 6463,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-purple-50 p-4 rounded-lg border border-purple-200\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center justify-between\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-purple-600 text-sm font-medium\",\n              children: \"Total Value\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 6478,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-2xl font-bold text-purple-900\",\n              children: [\"PKR \", journalEntries.reduce((sum, entry) => sum + entry.totalDebit, 0).toLocaleString('en-PK', {\n                minimumFractionDigits: 2,\n                maximumFractionDigits: 2\n              })]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 6479,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 6477,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(DollarSign, {\n            className: \"text-purple-600\",\n            size: 24\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 6483,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 6476,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 6475,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 6440,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-wrap items-center justify-between gap-4 mb-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex flex-wrap items-center gap-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center space-x-2\",\n          children: [/*#__PURE__*/_jsxDEV(Calendar, {\n            size: 16,\n            className: \"text-gray-400\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 6493,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"date\",\n            value: filters.dateFrom,\n            onChange: e => setFilters({\n              ...filters,\n              dateFrom: e.target.value\n            }),\n            className: \"px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-emerald-500 focus:border-transparent\",\n            placeholder: \"From\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 6494,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-gray-500\",\n            children: \"to\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 6501,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"date\",\n            value: filters.dateTo,\n            onChange: e => setFilters({\n              ...filters,\n              dateTo: e.target.value\n            }),\n            className: \"px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-emerald-500 focus:border-transparent\",\n            placeholder: \"To\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 6502,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 6492,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"relative\",\n          children: [/*#__PURE__*/_jsxDEV(Filter, {\n            className: \"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\",\n            size: 16\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 6513,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: filters.accountId,\n            onChange: e => setFilters({\n              ...filters,\n              accountId: e.target.value\n            }),\n            className: \"pl-10 pr-8 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-emerald-500 focus:border-transparent\",\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"All Accounts\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 6519,\n              columnNumber: 15\n            }, this), accounts.length > 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"optgroup\", {\n                label: \"Assets\",\n                children: accounts.filter(acc => acc.type === 'assets' && acc.category === 'account').map(account => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: account.id,\n                  children: [account.code, \" - \", account.name]\n                }, account.id, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 6529,\n                  columnNumber: 25\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 6525,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"optgroup\", {\n                label: \"Liabilities\",\n                children: accounts.filter(acc => acc.type === 'liabilities' && acc.category === 'account').map(account => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: account.id,\n                  children: [account.code, \" - \", account.name]\n                }, account.id, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 6540,\n                  columnNumber: 25\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 6536,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"optgroup\", {\n                label: \"Equity\",\n                children: accounts.filter(acc => acc.type === 'equity' && acc.category === 'account').map(account => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: account.id,\n                  children: [account.code, \" - \", account.name]\n                }, account.id, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 6551,\n                  columnNumber: 25\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 6547,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"optgroup\", {\n                label: \"Revenue\",\n                children: accounts.filter(acc => acc.type === 'revenue' && acc.category === 'account').map(account => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: account.id,\n                  children: [account.code, \" - \", account.name]\n                }, account.id, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 6562,\n                  columnNumber: 25\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 6558,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"optgroup\", {\n                label: \"Expenses\",\n                children: accounts.filter(acc => acc.type === 'expenses' && acc.category === 'account').map(account => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: account.id,\n                  children: [account.code, \" - \", account.name]\n                }, account.id, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 6573,\n                  columnNumber: 25\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 6569,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true), accounts.length === 0 && /*#__PURE__*/_jsxDEV(\"option\", {\n              disabled: true,\n              children: \"Loading accounts...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 6582,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 6514,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 6512,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: filters.transactionType,\n          onChange: e => setFilters({\n            ...filters,\n            transactionType: e.target.value\n          }),\n          className: \"px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-emerald-500 focus:border-transparent\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"all\",\n            children: \"All Types\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 6593,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"automatic\",\n            children: \"POS Sales\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 6594,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"manual\",\n            children: \"Manual\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 6595,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 6588,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"relative\",\n          children: [/*#__PURE__*/_jsxDEV(Search, {\n            className: \"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\",\n            size: 16\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 6600,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Search entries...\",\n            value: filters.searchTerm,\n            onChange: e => setFilters({\n              ...filters,\n              searchTerm: e.target.value\n            }),\n            className: \"pl-10 pr-4 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 6601,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 6599,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 6490,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex space-x-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: loadJournalEntriesFromAPI,\n          disabled: loading.entries,\n          className: \"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center space-x-2 disabled:bg-gray-400\",\n          children: [loading.entries ? /*#__PURE__*/_jsxDEV(RefreshCw, {\n            className: \"animate-spin\",\n            size: 16\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 6617,\n            columnNumber: 32\n          }, this) : /*#__PURE__*/_jsxDEV(RefreshCw, {\n            size: 16\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 6617,\n            columnNumber: 83\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Refresh from API\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 6618,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 6612,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: loadChartsOfAccounts,\n          disabled: loading.accounts,\n          className: \"px-4 py-2 bg-teal-600 text-white rounded-lg hover:bg-teal-700 flex items-center space-x-2 disabled:bg-gray-400\",\n          children: [loading.accounts ? /*#__PURE__*/_jsxDEV(RefreshCw, {\n            className: \"animate-spin\",\n            size: 16\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 6625,\n            columnNumber: 33\n          }, this) : /*#__PURE__*/_jsxDEV(RefreshCw, {\n            size: 16\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 6625,\n            columnNumber: 84\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Refresh Accounts\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 6626,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 6620,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            setFilters({\n              dateFrom: '',\n              dateTo: '',\n              accountId: '',\n              transactionType: 'all',\n              searchTerm: ''\n            });\n            setFilteredEntries([...journalEntries]);\n          },\n          className: \"px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 flex items-center space-x-2\",\n          children: [/*#__PURE__*/_jsxDEV(X, {\n            size: 16\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 6641,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Clear Filters\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 6642,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 6628,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setIsAddingEntry(true),\n          className: \"px-4 py-2 bg-emerald-600 text-white rounded-lg hover:bg-emerald-700 flex items-center space-x-2\",\n          children: [/*#__PURE__*/_jsxDEV(Plus, {\n            size: 16\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 6648,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Add Entry\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 6649,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 6644,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: generateTrialBalance,\n          className: \"px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 flex items-center space-x-2\",\n          children: [/*#__PURE__*/_jsxDEV(FileText, {\n            size: 16\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 6655,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Trial Balance\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 6656,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 6651,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 6611,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 6489,\n      columnNumber: 7\n    }, this), isAddingEntry && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-8 p-6 bg-gray-50 rounded-lg border\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"text-lg font-semibold mb-4\",\n        children: \"Add Manual Journal Entry\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 6664,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"block text-sm font-medium text-gray-700 mb-1\",\n            children: \"Date *\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 6668,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"date\",\n            value: newEntry.date,\n            onChange: e => setNewEntry({\n              ...newEntry,\n              date: e.target.value\n            }),\n            className: \"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 6669,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 6667,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"block text-sm font-medium text-gray-700 mb-1\",\n            children: \"Description *\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 6677,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: newEntry.description,\n            onChange: e => setNewEntry({\n              ...newEntry,\n              description: e.target.value\n            }),\n            placeholder: \"Enter description\",\n            className: \"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 6678,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 6676,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"block text-sm font-medium text-gray-700 mb-1\",\n            children: \"Reference\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 6687,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: newEntry.reference,\n            onChange: e => setNewEntry({\n              ...newEntry,\n              reference: e.target.value\n            }),\n            placeholder: \"Reference number\",\n            className: \"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 6688,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 6686,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 6666,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"block text-sm font-medium text-gray-700 mb-2\",\n          children: \"Journal Entry Lines\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 6700,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"space-y-3\",\n          children: newEntry.entries.map((entry, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"grid grid-cols-12 gap-2 items-center bg-white p-3 rounded border\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-span-4\",\n              children: /*#__PURE__*/_jsxDEV(\"select\", {\n                value: entry.accountId,\n                onChange: e => updateEntryLine(index, 'accountId', e.target.value),\n                className: \"w-full px-2 py-1 border border-gray-300 rounded text-sm focus:ring-2 focus:ring-emerald-500\",\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"\",\n                  children: \"Select Account\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 6710,\n                  columnNumber: 23\n                }, this), accounts.length > 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(\"optgroup\", {\n                    label: \"Assets\",\n                    children: accounts.filter(acc => acc.type === 'assets' && acc.category === 'account').map(account => /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: account.id,\n                      children: [account.code, \" - \", account.name]\n                    }, account.id, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 6719,\n                      columnNumber: 33\n                    }, this))\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 6715,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"optgroup\", {\n                    label: \"Liabilities\",\n                    children: accounts.filter(acc => acc.type === 'liabilities' && acc.category === 'account').map(account => /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: account.id,\n                      children: [account.code, \" - \", account.name]\n                    }, account.id, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 6730,\n                      columnNumber: 33\n                    }, this))\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 6726,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"optgroup\", {\n                    label: \"Equity\",\n                    children: accounts.filter(acc => acc.type === 'equity' && acc.category === 'account').map(account => /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: account.id,\n                      children: [account.code, \" - \", account.name]\n                    }, account.id, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 6741,\n                      columnNumber: 33\n                    }, this))\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 6737,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"optgroup\", {\n                    label: \"Revenue\",\n                    children: accounts.filter(acc => acc.type === 'revenue' && acc.category === 'account').map(account => /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: account.id,\n                      children: [account.code, \" - \", account.name]\n                    }, account.id, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 6752,\n                      columnNumber: 33\n                    }, this))\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 6748,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"optgroup\", {\n                    label: \"Expenses\",\n                    children: accounts.filter(acc => acc.type === 'expenses' && acc.category === 'account').map(account => /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: account.id,\n                      children: [account.code, \" - \", account.name]\n                    }, account.id, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 6763,\n                      columnNumber: 33\n                    }, this))\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 6759,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true), accounts.length === 0 && /*#__PURE__*/_jsxDEV(\"option\", {\n                  disabled: true,\n                  children: \"Loading accounts...\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 6772,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 6705,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 6704,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-span-3\",\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                value: entry.description,\n                onChange: e => updateEntryLine(index, 'description', e.target.value),\n                placeholder: \"Description\",\n                className: \"w-full px-2 py-1 border border-gray-300 rounded text-sm focus:ring-2 focus:ring-emerald-500\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 6777,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 6776,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-span-2\",\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"number\",\n                step: \"0.01\",\n                value: entry.debit,\n                onChange: e => updateEntryLine(index, 'debit', e.target.value),\n                placeholder: \"Debit\",\n                className: \"w-full px-2 py-1 border border-gray-300 rounded text-sm focus:ring-2 focus:ring-emerald-500\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 6786,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 6785,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-span-2\",\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"number\",\n                step: \"0.01\",\n                value: entry.credit,\n                onChange: e => updateEntryLine(index, 'credit', e.target.value),\n                placeholder: \"Credit\",\n                className: \"w-full px-2 py-1 border border-gray-300 rounded text-sm focus:ring-2 focus:ring-emerald-500\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 6796,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 6795,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-span-1\",\n              children: newEntry.entries.length > 2 && /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => removeEntryLine(index),\n                className: \"p-1 text-red-600 hover:bg-red-100 rounded\",\n                children: /*#__PURE__*/_jsxDEV(Trash2, {\n                  size: 14\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 6811,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 6807,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 6805,\n              columnNumber: 19\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 6703,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 6701,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex justify-between items-center mt-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: addEntryLine,\n            className: \"px-3 py-1 text-sm bg-gray-200 text-gray-700 rounded hover:bg-gray-300 flex items-center space-x-1\",\n            children: [/*#__PURE__*/_jsxDEV(Plus, {\n              size: 14\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 6824,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Add Line\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 6825,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 6820,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center space-x-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-sm\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"font-medium\",\n                children: [\"Total Debit: PKR \", totalDebit.toLocaleString('en-PK', {\n                  minimumFractionDigits: 2,\n                  maximumFractionDigits: 2\n                })]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 6830,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"mx-2\",\n                children: \"|\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 6831,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"font-medium\",\n                children: [\"Total Credit: PKR \", totalCredit.toLocaleString('en-PK', {\n                  minimumFractionDigits: 2,\n                  maximumFractionDigits: 2\n                })]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 6832,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 6829,\n              columnNumber: 17\n            }, this), entryIsBalanced ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex items-center text-green-600\",\n              children: [/*#__PURE__*/_jsxDEV(CheckCircle, {\n                size: 16,\n                className: \"mr-1\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 6836,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"text-sm\",\n                children: \"Balanced\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 6837,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 6835,\n              columnNumber: 19\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex items-center text-red-600\",\n              children: [/*#__PURE__*/_jsxDEV(AlertCircle, {\n                size: 16,\n                className: \"mr-1\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 6841,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"text-sm\",\n                children: \"Not Balanced\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 6842,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 6840,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 6828,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 6819,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 6699,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex space-x-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: saveJournalEntry,\n          disabled: !entryIsBalanced,\n          className: \"px-4 py-2 bg-emerald-600 text-white rounded-lg hover:bg-emerald-700 disabled:bg-gray-400 flex items-center space-x-2\",\n          children: [/*#__PURE__*/_jsxDEV(Save, {\n            size: 16\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 6855,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Save Entry\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 6856,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 6850,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setIsAddingEntry(false),\n          className: \"px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 flex items-center space-x-2\",\n          children: [/*#__PURE__*/_jsxDEV(X, {\n            size: 16\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 6862,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 6863,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 6858,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 6849,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 6663,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-white border border-gray-200 rounded-lg overflow-hidden\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"px-6 py-4 border-b border-gray-200\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-lg font-semibold text-gray-900\",\n          children: \"Journal Entries\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 6872,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-sm text-gray-600 mt-1\",\n          children: [\"Showing \", filteredEntries.length, \" of \", journalEntries.length, \" entries\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 6873,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 6871,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"overflow-x-auto\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"w-full\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            className: \"bg-gray-50\",\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\",\n                children: \"Entry ID\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 6882,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\",\n                children: \"Date\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 6885,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\",\n                children: \"Description\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 6888,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\",\n                children: \"Reference\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 6891,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\",\n                children: \"Source\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 6894,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\",\n                children: \"Amount\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 6897,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\",\n                children: \"Status\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 6900,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\",\n                children: \"Actions\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 6903,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 6881,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 6880,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            className: \"bg-white divide-y divide-gray-200\",\n            children: filteredEntries.map(entry => /*#__PURE__*/_jsxDEV(\"tr\", {\n              className: \"hover:bg-gray-50\",\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\",\n                children: entry.id\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 6911,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"px-6 py-4 whitespace-nowrap text-sm text-gray-900\",\n                children: entry.date\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 6914,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"px-6 py-4 text-sm text-gray-900 max-w-xs truncate\",\n                children: entry.description\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 6917,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"px-6 py-4 whitespace-nowrap text-sm text-gray-900\",\n                children: entry.reference\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 6920,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"px-6 py-4 whitespace-nowrap\",\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: `px-2 py-1 text-xs font-medium rounded-full ${entry.source === 'POS Sales' ? 'bg-green-100 text-green-800' : entry.source === 'Manual' ? 'bg-orange-100 text-orange-800' : 'bg-blue-100 text-blue-800'}`,\n                  children: entry.source\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 6924,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 6923,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"px-6 py-4 whitespace-nowrap text-sm text-gray-900\",\n                children: [\"PKR \", entry.totalDebit.toLocaleString('en-PK', {\n                  minimumFractionDigits: 2,\n                  maximumFractionDigits: 2\n                })]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 6932,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"px-6 py-4 whitespace-nowrap\",\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: `px-2 py-1 text-xs font-medium rounded-full ${entry.status === 'posted' ? 'bg-blue-100 text-blue-800' : 'bg-yellow-100 text-yellow-800'}`,\n                  children: entry.status\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 6936,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 6935,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"px-6 py-4 whitespace-nowrap text-sm font-medium\",\n                children: /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => setSelectedEntry(entry),\n                  className: \"text-emerald-600 hover:text-emerald-900 mr-3\",\n                  children: /*#__PURE__*/_jsxDEV(Eye, {\n                    size: 16\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 6947,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 6943,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 6942,\n                columnNumber: 19\n              }, this)]\n            }, entry.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 6910,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 6908,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 6879,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 6878,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 6870,\n      columnNumber: 7\n    }, this), selectedEntry && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center p-4 z-50\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-y-auto\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"px-6 py-4 border-b border-gray-200\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center justify-between\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"text-lg font-semibold text-gray-900\",\n              children: [\"Journal Entry Details - \", selectedEntry.id]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 6963,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => setSelectedEntry(null),\n              className: \"text-gray-400 hover:text-gray-600\",\n              children: /*#__PURE__*/_jsxDEV(X, {\n                size: 20\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 6970,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 6966,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 6962,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 6961,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"px-6 py-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"grid grid-cols-1 md:grid-cols-2 gap-4 mb-6\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"text-sm font-medium text-gray-500\",\n                children: \"Date\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 6979,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"text-sm text-gray-900\",\n                children: selectedEntry.date\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 6980,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 6978,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"text-sm font-medium text-gray-500\",\n                children: \"Reference\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 6983,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"text-sm text-gray-900\",\n                children: selectedEntry.reference\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 6984,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 6982,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"text-sm font-medium text-gray-500\",\n                children: \"Description\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 6987,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"text-sm text-gray-900\",\n                children: selectedEntry.description\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 6988,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 6986,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"text-sm font-medium text-gray-500\",\n                children: \"Source\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 6991,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: `px-2 py-1 text-xs font-medium rounded-full ${selectedEntry.source === 'POS Sales' ? 'bg-green-100 text-green-800' : 'bg-orange-100 text-orange-800'}`,\n                children: selectedEntry.source\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 6992,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 6990,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 6977,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mb-6\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              className: \"text-sm font-medium text-gray-700 mb-3\",\n              children: \"Account Entries\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 7002,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"overflow-x-auto\",\n              children: /*#__PURE__*/_jsxDEV(\"table\", {\n                className: \"w-full border border-gray-200 rounded\",\n                children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                  className: \"bg-gray-50\",\n                  children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                      className: \"px-4 py-2 text-left text-xs font-medium text-gray-500\",\n                      children: \"Account\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 7007,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                      className: \"px-4 py-2 text-left text-xs font-medium text-gray-500\",\n                      children: \"Description\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 7008,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                      className: \"px-4 py-2 text-right text-xs font-medium text-gray-500\",\n                      children: \"Debit\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 7009,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                      className: \"px-4 py-2 text-right text-xs font-medium text-gray-500\",\n                      children: \"Credit\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 7010,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 7006,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 7005,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                  className: \"divide-y divide-gray-200\",\n                  children: selectedEntry.entries.map((entryLine, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                      className: \"px-4 py-2 text-sm text-gray-900\",\n                      children: getAccountName(entryLine.accountId)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 7016,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      className: \"px-4 py-2 text-sm text-gray-600\",\n                      children: entryLine.description\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 7019,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      className: \"px-4 py-2 text-sm text-gray-900 text-right\",\n                      children: entryLine.debit > 0 ? `${entryLine.debit.toFixed(2)}` : '-'\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 7022,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      className: \"px-4 py-2 text-sm text-gray-900 text-right\",\n                      children: entryLine.credit > 0 ? `${entryLine.credit.toFixed(2)}` : '-'\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 7025,\n                      columnNumber: 27\n                    }, this)]\n                  }, index, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 7015,\n                    columnNumber: 25\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 7013,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"tfoot\", {\n                  className: \"bg-gray-50\",\n                  children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                      colSpan: \"2\",\n                      className: \"px-4 py-2 text-sm font-medium text-gray-900\",\n                      children: \"Totals:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 7033,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      className: \"px-4 py-2 text-sm font-bold text-gray-900 text-right\",\n                      children: [\"PKR \", selectedEntry.totalDebit.toLocaleString('en-PK', {\n                        minimumFractionDigits: 2,\n                        maximumFractionDigits: 2\n                      })]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 7036,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      className: \"px-4 py-2 text-sm font-bold text-gray-900 text-right\",\n                      children: [\"PKR \", selectedEntry.totalCredit.toLocaleString('en-PK', {\n                        minimumFractionDigits: 2,\n                        maximumFractionDigits: 2\n                      })]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 7039,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 7032,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 7031,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 7004,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 7003,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 7001,\n            columnNumber: 15\n          }, this), selectedEntry.originalOrder && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mb-6 p-4 bg-gray-50 rounded-lg\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              className: \"text-sm font-medium text-gray-700 mb-3\",\n              children: \"Original Sales Order Details\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 7051,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"font-medium text-gray-500\",\n                  children: \"Order ID:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 7054,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"text-gray-900\",\n                  children: selectedEntry.originalOrder.orderId\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 7055,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 7053,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"font-medium text-gray-500\",\n                  children: \"Status:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 7058,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"text-gray-900\",\n                  children: selectedEntry.originalOrder.status\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 7059,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 7057,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"font-medium text-gray-500\",\n                  children: \"Payment Status:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 7062,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"text-gray-900\",\n                  children: selectedEntry.originalOrder.paid ? 'Paid' : 'Unpaid'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 7063,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 7061,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"font-medium text-gray-500\",\n                  children: \"Fulfilled:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 7066,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"text-gray-900\",\n                  children: selectedEntry.originalOrder.fulfilled ? 'Yes' : 'No'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 7067,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 7065,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 7052,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mt-4\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"font-medium text-gray-500\",\n                children: \"Line Items:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 7073,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"mt-2 space-y-2\",\n                children: selectedEntry.originalOrder.lineItems.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"text-sm bg-white p-2 rounded border\",\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"font-medium\",\n                    children: item.productName\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 7077,\n                    columnNumber: 27\n                  }, this), \" - Qty: \", item.quantity, \", Price: PKR \", parseFloat(item.price).toLocaleString('en-PK', {\n                    minimumFractionDigits: 2,\n                    maximumFractionDigits: 2\n                  }), \", Total: PKR \", parseFloat(item.total).toLocaleString('en-PK', {\n                    minimumFractionDigits: 2,\n                    maximumFractionDigits: 2\n                  }), item.taxAmount > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"text-gray-500\",\n                    children: [\" (Tax: PKR \", parseFloat(item.taxAmount).toLocaleString('en-PK', {\n                      minimumFractionDigits: 2,\n                      maximumFractionDigits: 2\n                    }), \")\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 7080,\n                    columnNumber: 50\n                  }, this)]\n                }, index, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 7076,\n                  columnNumber: 25\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 7074,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 7072,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 7050,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-xs text-gray-500\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Created: \", new Date(selectedEntry.createdAt).toLocaleString()]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 7090,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Status: \", selectedEntry.status]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 7091,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Type: \", selectedEntry.transactionType]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 7092,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 7089,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 6975,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 6960,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 6959,\n      columnNumber: 9\n    }, this), showTrialBalance && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center p-4 z-50\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white rounded-lg max-w-5xl w-full max-h-[90vh] overflow-y-auto\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"px-6 py-4 border-b border-gray-200\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center justify-between\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"text-lg font-semibold text-gray-900\",\n              children: [\"Trial Balance - As of \", new Date().toLocaleDateString()]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 7105,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex items-center space-x-2\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => {\n                  alert('Export functionality would be implemented here');\n                },\n                className: \"px-3 py-1 bg-emerald-600 text-white rounded text-sm hover:bg-emerald-700 flex items-center space-x-1\",\n                children: [/*#__PURE__*/_jsxDEV(Download, {\n                  size: 14\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 7115,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: \"Export\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 7116,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 7109,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => setShowTrialBalance(false),\n                className: \"text-gray-400 hover:text-gray-600\",\n                children: /*#__PURE__*/_jsxDEV(X, {\n                  size: 20\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 7122,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 7118,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 7108,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 7104,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 7103,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"px-6 py-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"overflow-x-auto\",\n            children: /*#__PURE__*/_jsxDEV(\"table\", {\n              className: \"w-full\",\n              children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                className: \"bg-gray-50\",\n                children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                    className: \"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\",\n                    children: \"Account Code\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 7133,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    className: \"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\",\n                    children: \"Account Name\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 7136,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    className: \"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\",\n                    children: \"Type\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 7139,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    className: \"px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\",\n                    children: \"Debit Total\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 7142,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    className: \"px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\",\n                    children: \"Credit Total\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 7145,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    className: \"px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\",\n                    children: \"Balance\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 7148,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 7132,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 7131,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                className: \"bg-white divide-y divide-gray-200\",\n                children: trialBalance.map(item => /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    className: \"px-4 py-4 whitespace-nowrap text-sm font-medium text-gray-900\",\n                    children: item.accountCode\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 7156,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    className: \"px-4 py-4 whitespace-nowrap text-sm text-gray-900\",\n                    children: item.accountName\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 7159,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    className: \"px-4 py-4 whitespace-nowrap\",\n                    children: /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: `px-2 py-1 text-xs font-medium rounded-full ${item.accountType === 'assets' ? 'bg-green-100 text-green-800' : item.accountType === 'liabilities' ? 'bg-red-100 text-red-800' : item.accountType === 'equity' ? 'bg-blue-100 text-blue-800' : item.accountType === 'revenue' ? 'bg-purple-100 text-purple-800' : item.accountType === 'expenses' ? 'bg-orange-100 text-orange-800' : 'bg-gray-100 text-gray-800'}`,\n                      children: typeof item.accountType === 'string' && item.accountType.length > 0 ? item.accountType.charAt(0).toUpperCase() + item.accountType.slice(1) : 'Unknown'\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 7163,\n                      columnNumber: 27\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 7162,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    className: \"px-4 py-4 whitespace-nowrap text-sm text-gray-900 text-right\",\n                    children: [\"PKR \", item.debit.toLocaleString('en-PK', {\n                      minimumFractionDigits: 2,\n                      maximumFractionDigits: 2\n                    })]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 7176,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    className: \"px-4 py-4 whitespace-nowrap text-sm text-gray-900 text-right\",\n                    children: [\"PKR \", item.credit.toLocaleString('en-PK', {\n                      minimumFractionDigits: 2,\n                      maximumFractionDigits: 2\n                    })]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 7179,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    className: \"px-4 py-4 whitespace-nowrap text-sm font-medium text-right\",\n                    children: /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: item.balance >= 0 ? 'text-green-600' : 'text-red-600',\n                      children: [\"PKR \", Math.abs(item.balance).toLocaleString('en-PK', {\n                        minimumFractionDigits: 2,\n                        maximumFractionDigits: 2\n                      }), item.balance < 0 && ' (CR)']\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 7183,\n                      columnNumber: 27\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 7182,\n                    columnNumber: 25\n                  }, this)]\n                }, item.accountId, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 7155,\n                  columnNumber: 23\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 7153,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"tfoot\", {\n                className: \"bg-gray-50\",\n                children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    colSpan: \"3\",\n                    className: \"px-4 py-3 text-sm font-bold text-gray-900\",\n                    children: \"TOTALS:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 7193,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    className: \"px-4 py-3 text-sm font-bold text-gray-900 text-right\",\n                    children: [\"PKR \", trialBalance.reduce((sum, acc) => sum + acc.debit, 0).toLocaleString('en-PK', {\n                      minimumFractionDigits: 2,\n                      maximumFractionDigits: 2\n                    })]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 7196,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    className: \"px-4 py-3 text-sm font-bold text-gray-900 text-right\",\n                    children: [\"PKR \", trialBalance.reduce((sum, acc) => sum + acc.credit, 0).toLocaleString('en-PK', {\n                      minimumFractionDigits: 2,\n                      maximumFractionDigits: 2\n                    })]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 7199,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    className: \"px-4 py-3 text-sm font-bold text-gray-900 text-right\",\n                    children: [\"PKR \", Math.abs(trialBalance.reduce((sum, acc) => sum + acc.balance, 0)).toLocaleString('en-PK', {\n                      minimumFractionDigits: 2,\n                      maximumFractionDigits: 2\n                    })]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 7202,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 7192,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 7191,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 7130,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 7129,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mt-4 p-4 bg-green-50 border border-green-200 rounded-lg\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex items-center\",\n              children: [/*#__PURE__*/_jsxDEV(CheckCircle, {\n                className: \"text-green-600 mr-2\",\n                size: 20\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 7213,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                  className: \"font-medium text-green-800\",\n                  children: \"Trial Balance is Balanced\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 7215,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"text-sm text-green-700\",\n                  children: [\"Total Debits = Total Credits = PKR \", trialBalance.reduce((sum, acc) => sum + acc.debit, 0).toLocaleString('en-PK', {\n                    minimumFractionDigits: 2,\n                    maximumFractionDigits: 2\n                  })]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 7216,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 7214,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 7212,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 7211,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 7128,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 7102,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7101,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-8 grid grid-cols-1 md:grid-cols-3 gap-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"p-4 bg-green-50 border border-green-200 rounded-lg\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center mb-2\",\n          children: [/*#__PURE__*/_jsxDEV(CheckCircle, {\n            className: \"text-green-600 mr-2\",\n            size: 16\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 7231,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"font-medium text-green-800\",\n            children: \"POS API Integration\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 7232,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 7230,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-sm text-green-700\",\n          children: \"Sales orders automatically create journal entries from live API data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 7234,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 7229,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"p-4 bg-blue-50 border border-blue-200 rounded-lg\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center mb-2\",\n          children: [/*#__PURE__*/_jsxDEV(RefreshCw, {\n            className: \"text-blue-600 mr-2\",\n            size: 16\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 7241,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"font-medium text-blue-800\",\n            children: \"Real-time Sync\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 7242,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 7240,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-sm text-blue-700\",\n          children: \"Journal entries updated automatically with each sales transaction\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 7244,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 7239,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"p-4 bg-orange-50 border border-orange-200 rounded-lg\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center mb-2\",\n          children: [/*#__PURE__*/_jsxDEV(FileText, {\n            className: \"text-orange-600 mr-2\",\n            size: 16\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 7251,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"font-medium text-orange-800\",\n            children: \"Manual Entries\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 7252,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 7250,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-sm text-orange-700\",\n          children: \"Add adjustments and corrections with full double-entry validation\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 7254,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 7249,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 7228,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 6401,\n    columnNumber: 5\n  }, this);\n};\n_s(GeneralLedger, \"bsUizNyYK6ZFgGi9HuGRHD73Gq8=\");\n_c = GeneralLedger;\nexport default GeneralLedger;\nvar _c;\n$RefreshReg$(_c, \"GeneralLedger\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","Book","Plus","Filter","Search","Calendar","FileText","Edit","Trash2","Save","X","AlertCircle","CheckCircle","DollarSign","TrendingUp","Eye","Download","RefreshCw","jsxDEV","_jsxDEV","Fragment","_Fragment","GeneralLedger","_s","journalEntries","setJournalEntries","accounts","setAccounts","filteredEntries","setFilteredEntries","selectedEntry","setSelectedEntry","isAddingEntry","setIsAddingEntry","loading","setLoading","entries","errors","setErrors","filters","setFilters","dateFrom","dateTo","accountId","transactionType","searchTerm","trialBalance","setTrialBalance","showTrialBalance","setShowTrialBalance","newEntry","setNewEntry","date","Date","toISOString","split","description","reference","debit","credit","API_BASE_URL","API_BASE_URL_CHARTS_OF_ACCOUNTS","fetchOrderData","response","fetch","method","headers","ok","Error","status","data","json","error","console","formatDateFromCreatedAt","createdAt","parts","length","padStart","loadChartsOfAccounts","prev","log","formattedAccounts","filter","account","map","id","code","name","type","category","parentId","level","sort","a","b","localeCompare","message","fallbackAccounts","convertSalesOrderToJournalEntry","order","accountsList","subTotal","parseFloat","taxAmount","total","paid","fulfilled","findSpecificAccount","accountCode","find","acc","findAccountByType","preferredCode","specificAccount","matchingAccount","toLowerCase","cashAccount","push","accountName","orderId","lineItems","item","productName","join","revenueAccount","taxAccount","taxRate","totalCOGS","forEach","costPrice","quantity","itemCOGS","cogsAccount","inventoryAccount","totalDebit","reduce","sum","entry","totalCredit","source","Math","round","originalOrder","loadJournalEntriesFromAPI","salesOrders","journalEntriesFromSales","manualEntries","storedEntries","localStorage","getItem","JSON","parse","warn","allEntries","filterEntries","filtered","some","e","term","includes","generateTrialBalance","balances","requiredAccountIds","Set","entryLine","add","accountTypesMap","accountType","balance","prefix","toString","substring","Object","values","trialBalanceData","addEntryLine","removeEntryLine","index","updatedEntries","_","i","updateEntryLine","field","value","calculateTotals","isBalanced","abs","saveJournalEntry","every","alert","entriesWithNames","_accounts$find","journalEntry","now","existingManualEntries","updatedManualEntries","setItem","stringify","getAccountName","entryIsBalanced","className","children","fileName","_jsxFileName","lineNumber","columnNumber","size","toLocaleString","minimumFractionDigits","maximumFractionDigits","onChange","target","placeholder","label","disabled","onClick","step","toFixed","colSpan","price","toLocaleDateString","charAt","toUpperCase","slice","_c","$RefreshReg$"],"sources":["C:/Users/Logic-Unit/my-account/src/pages/GeneralLedger.jsx"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import { \r\n//   Book, \r\n//   Plus, \r\n//   Filter, \r\n//   Search, \r\n//   Calendar, \r\n//   FileText, \r\n//   Edit, \r\n//   Trash2, \r\n//   Save, \r\n//   X, \r\n//   AlertCircle,\r\n//   CheckCircle,\r\n//   DollarSign,\r\n//   TrendingUp,\r\n//   Eye,\r\n//   Download\r\n// } from 'lucide-react';\r\n\r\n// const GeneralLedger = () => {\r\n//   const [journalEntries, setJournalEntries] = useState([]);\r\n//   const [accounts, setAccounts] = useState([]);\r\n//   const [filteredEntries, setFilteredEntries] = useState([]);\r\n//   const [selectedEntry, setSelectedEntry] = useState(null);\r\n//   const [isAddingEntry, setIsAddingEntry] = useState(false);\r\n//   const [filters, setFilters] = useState({\r\n//     dateFrom: '',\r\n//     dateTo: '',\r\n//     accountId: '',\r\n//     transactionType: 'all',\r\n//     searchTerm: ''\r\n//   });\r\n//   const [trialBalance, setTrialBalance] = useState([]);\r\n//   const [showTrialBalance, setShowTrialBalance] = useState(false);\r\n//   const [newEntry, setNewEntry] = useState({\r\n//     date: new Date().toISOString().split('T')[0],\r\n//     description: '',\r\n//     reference: '',\r\n//     entries: [\r\n//       { accountId: '', debit: 0, credit: 0, description: '' },\r\n//       { accountId: '', debit: 0, credit: 0, description: '' }\r\n//     ]\r\n//   });\r\n\r\n//   // Sample Chart of Accounts\r\n//   const chartOfAccounts = [\r\n//     { id: '1111', code: '1111', name: 'Petty Cash', type: 'assets' },\r\n//     { id: '1112', code: '1112', name: 'Bank - Main Account', type: 'assets' },\r\n//     { id: '1120', code: '1120', name: 'Accounts Receivable', type: 'assets' },\r\n//     { id: '1130', code: '1130', name: 'Inventory', type: 'assets' },\r\n//     { id: '2110', code: '2110', name: 'Accounts Payable', type: 'liabilities' },\r\n//     { id: '2130', code: '2130', name: 'Sales Tax Payable', type: 'liabilities' },\r\n//     { id: '4100', code: '4100', name: 'Sales Revenue - Medical', type: 'revenue' },\r\n//     { id: '5100', code: '5100', name: 'Cost of Goods Sold', type: 'expenses' },\r\n//     { id: '5200', code: '5200', name: 'Purchase Expenses', type: 'expenses' },\r\n//     { id: '5210', code: '5210', name: 'Office Supplies', type: 'expenses' }\r\n//   ];\r\n\r\n//   useEffect(() => {\r\n//     setAccounts(chartOfAccounts);\r\n//     loadSampleJournalEntries();\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     filterEntries();\r\n//   }, [journalEntries, filters]);\r\n\r\n//   const loadSampleJournalEntries = () => {\r\n//     const sampleEntries = [\r\n//       {\r\n//         id: 'JE001',\r\n//         date: '2025-01-15',\r\n//         description: 'POS Sale #POS001 - Medical products',\r\n//         reference: 'POS001',\r\n//         transactionType: 'automatic',\r\n//         source: 'POS',\r\n//         status: 'posted',\r\n//         entries: [\r\n//           { accountId: '1111', accountName: 'Petty Cash', debit: 60.50, credit: 0, description: 'Cash received from customer' },\r\n//           { accountId: '4100', accountName: 'Sales Revenue - Medical', debit: 0, credit: 55.00, description: 'Revenue from medical products' },\r\n//           { accountId: '2130', accountName: 'Sales Tax Payable', debit: 0, credit: 5.50, description: 'Sales tax collected' },\r\n//           { accountId: '5100', accountName: 'Cost of Goods Sold', debit: 33.00, credit: 0, description: 'Cost of products sold' },\r\n//           { accountId: '1130', accountName: 'Inventory', debit: 0, credit: 33.00, description: 'Inventory reduction' }\r\n//         ],\r\n//         totalDebit: 93.50,\r\n//         totalCredit: 93.50,\r\n//         createdAt: '2025-01-15T10:30:00Z'\r\n//       },\r\n//       {\r\n//         id: 'JE002',\r\n//         date: '2025-01-14',\r\n//         description: 'Purchase Order #PO002 - Medical inventory',\r\n//         reference: 'PO002',\r\n//         transactionType: 'automatic',\r\n//         source: 'Purchase',\r\n//         status: 'posted',\r\n//         entries: [\r\n//           { accountId: '1130', accountName: 'Inventory', debit: 350.00, credit: 0, description: 'Medical products purchased' },\r\n//           { accountId: '2110', accountName: 'Accounts Payable', debit: 0, credit: 350.00, description: 'Amount owed to Medical Supply Co.' }\r\n//         ],\r\n//         totalDebit: 350.00,\r\n//         totalCredit: 350.00,\r\n//         createdAt: '2025-01-14T14:20:00Z'\r\n//       },\r\n//       {\r\n//         id: 'JE003',\r\n//         date: '2025-01-13',\r\n//         description: 'Manual adjustment - Inventory count variance',\r\n//         reference: 'ADJ001',\r\n//         transactionType: 'manual',\r\n//         source: 'Manual',\r\n//         status: 'posted',\r\n//         entries: [\r\n//           { accountId: '1130', accountName: 'Inventory', debit: 25.00, credit: 0, description: 'Inventory adjustment - undercount' },\r\n//           { accountId: '5200', accountName: 'Purchase Expenses', debit: 0, credit: 25.00, description: 'Adjustment to purchase variance' }\r\n//         ],\r\n//         totalDebit: 25.00,\r\n//         totalCredit: 25.00,\r\n//         createdAt: '2025-01-13T16:45:00Z'\r\n//       },\r\n//       {\r\n//         id: 'JE004',\r\n//         date: '2025-01-15',\r\n//         description: 'POS Sale #POS002 - Medical products',\r\n//         reference: 'POS002',\r\n//         transactionType: 'automatic',\r\n//         source: 'POS',\r\n//         status: 'posted',\r\n//         entries: [\r\n//           { accountId: '1112', accountName: 'Bank - Main Account', debit: 85.00, credit: 0, description: 'Card payment received' },\r\n//           { accountId: '4100', accountName: 'Sales Revenue - Medical', debit: 0, credit: 77.27, description: 'Revenue from medical products' },\r\n//           { accountId: '2130', accountName: 'Sales Tax Payable', debit: 0, credit: 7.73, description: 'Sales tax collected' },\r\n//           { accountId: '5100', accountName: 'Cost of Goods Sold', debit: 46.36, credit: 0, description: 'Cost of products sold' },\r\n//           { accountId: '1130', accountName: 'Inventory', debit: 0, credit: 46.36, description: 'Inventory reduction' }\r\n//         ],\r\n//         totalDebit: 131.36,\r\n//         totalCredit: 131.36,\r\n//         createdAt: '2025-01-15T15:20:00Z'\r\n//       }\r\n//     ];\r\n\r\n//     setJournalEntries(sampleEntries);\r\n//   };\r\n\r\n//   const filterEntries = () => {\r\n//     let filtered = [...journalEntries];\r\n\r\n//     if (filters.dateFrom) {\r\n//       filtered = filtered.filter(entry => entry.date >= filters.dateFrom);\r\n//     }\r\n//     if (filters.dateTo) {\r\n//       filtered = filtered.filter(entry => entry.date <= filters.dateTo);\r\n//     }\r\n//     if (filters.accountId) {\r\n//       filtered = filtered.filter(entry => \r\n//         entry.entries.some(e => e.accountId === filters.accountId)\r\n//       );\r\n//     }\r\n//     if (filters.transactionType !== 'all') {\r\n//       filtered = filtered.filter(entry => entry.transactionType === filters.transactionType);\r\n//     }\r\n//     if (filters.searchTerm) {\r\n//       const term = filters.searchTerm.toLowerCase();\r\n//       filtered = filtered.filter(entry => \r\n//         entry.description.toLowerCase().includes(term) ||\r\n//         entry.reference.toLowerCase().includes(term) ||\r\n//         entry.entries.some(e => e.description.toLowerCase().includes(term))\r\n//       );\r\n//     }\r\n\r\n//     setFilteredEntries(filtered);\r\n//   };\r\n\r\n//   const generateTrialBalance = () => {\r\n//     const balances = {};\r\n    \r\n//     // Initialize all accounts\r\n//     chartOfAccounts.forEach(account => {\r\n//       balances[account.id] = {\r\n//         accountId: account.id,\r\n//         accountCode: account.code,\r\n//         accountName: account.name,\r\n//         accountType: account.type,\r\n//         debit: 0,\r\n//         credit: 0,\r\n//         balance: 0\r\n//       };\r\n//     });\r\n\r\n//     // Calculate balances from journal entries\r\n//     journalEntries.forEach(entry => {\r\n//       if (entry.status === 'posted') {\r\n//         entry.entries.forEach(entryLine => {\r\n//           if (balances[entryLine.accountId]) {\r\n//             balances[entryLine.accountId].debit += entryLine.debit;\r\n//             balances[entryLine.accountId].credit += entryLine.credit;\r\n//           }\r\n//         });\r\n//       }\r\n//     });\r\n\r\n//     // Calculate net balances\r\n//     Object.values(balances).forEach(account => {\r\n//       if (account.accountType === 'assets' || account.accountType === 'expenses') {\r\n//         account.balance = account.debit - account.credit;\r\n//       } else {\r\n//         account.balance = account.credit - account.debit;\r\n//       }\r\n//     });\r\n\r\n//     const trialBalanceData = Object.values(balances)\r\n//       .filter(account => account.debit !== 0 || account.credit !== 0)\r\n//       .sort((a, b) => a.accountCode.localeCompare(b.accountCode));\r\n\r\n//     setTrialBalance(trialBalanceData);\r\n//     setShowTrialBalance(true);\r\n//   };\r\n\r\n//   const addEntryLine = () => {\r\n//     setNewEntry({\r\n//       ...newEntry,\r\n//       entries: [...newEntry.entries, { accountId: '', debit: 0, credit: 0, description: '' }]\r\n//     });\r\n//   };\r\n\r\n//   const removeEntryLine = (index) => {\r\n//     if (newEntry.entries.length > 2) {\r\n//       const updatedEntries = newEntry.entries.filter((_, i) => i !== index);\r\n//       setNewEntry({ ...newEntry, entries: updatedEntries });\r\n//     }\r\n//   };\r\n\r\n//   const updateEntryLine = (index, field, value) => {\r\n//     const updatedEntries = [...newEntry.entries];\r\n//     updatedEntries[index] = { ...updatedEntries[index], [field]: value };\r\n//     setNewEntry({ ...newEntry, entries: updatedEntries });\r\n//   };\r\n\r\n//   const calculateTotals = (entries) => {\r\n//     const totalDebit = entries.reduce((sum, entry) => sum + (parseFloat(entry.debit) || 0), 0);\r\n//     const totalCredit = entries.reduce((sum, entry) => sum + (parseFloat(entry.credit) || 0), 0);\r\n//     return { totalDebit, totalCredit };\r\n//   };\r\n\r\n//   const isBalanced = (entries) => {\r\n//     const { totalDebit, totalCredit } = calculateTotals(entries);\r\n//     return Math.abs(totalDebit - totalCredit) < 0.01;\r\n//   };\r\n\r\n//   const saveJournalEntry = () => {\r\n//     if (!newEntry.description || !newEntry.entries.every(e => e.accountId)) {\r\n//       alert('Please fill in all required fields');\r\n//       return;\r\n//     }\r\n\r\n//     if (!isBalanced(newEntry.entries)) {\r\n//       alert('Journal entry must be balanced - total debits must equal total credits');\r\n//       return;\r\n//     }\r\n\r\n//     const { totalDebit, totalCredit } = calculateTotals(newEntry.entries);\r\n    \r\n//     // Add account names to entries\r\n//     const entriesWithNames = newEntry.entries.map(entry => ({\r\n//       ...entry,\r\n//       accountName: accounts.find(acc => acc.id === entry.accountId)?.name || '',\r\n//       debit: parseFloat(entry.debit) || 0,\r\n//       credit: parseFloat(entry.credit) || 0\r\n//     }));\r\n\r\n//     const journalEntry = {\r\n//       id: `JE${String(journalEntries.length + 1).padStart(3, '0')}`,\r\n//       date: newEntry.date,\r\n//       description: newEntry.description,\r\n//       reference: newEntry.reference || `MAN${Date.now()}`,\r\n//       transactionType: 'manual',\r\n//       source: 'Manual',\r\n//       status: 'posted',\r\n//       entries: entriesWithNames,\r\n//       totalDebit,\r\n//       totalCredit,\r\n//       createdAt: new Date().toISOString()\r\n//     };\r\n\r\n//     setJournalEntries([...journalEntries, journalEntry]);\r\n    \r\n//     // Reset form\r\n//     setNewEntry({\r\n//       date: new Date().toISOString().split('T')[0],\r\n//       description: '',\r\n//       reference: '',\r\n//       entries: [\r\n//         { accountId: '', debit: 0, credit: 0, description: '' },\r\n//         { accountId: '', debit: 0, credit: 0, description: '' }\r\n//       ]\r\n//     });\r\n//     setIsAddingEntry(false);\r\n//   };\r\n\r\n//   const getAccountName = (accountId) => {\r\n//     const account = accounts.find(acc => acc.id === accountId);\r\n//     return account ? `${account.code} - ${account.name}` : '';\r\n//   };\r\n\r\n//   const { totalDebit, totalCredit } = calculateTotals(newEntry.entries);\r\n//   const entryIsBalanced = isBalanced(newEntry.entries);\r\n\r\n//   return (\r\n//     <div className=\"max-w-7xl mx-auto p-6 bg-white\">\r\n//       {/* Header */}\r\n//       <div className=\"mb-8\">\r\n//         <h1 className=\"text-3xl font-bold text-gray-900 mb-2 flex items-center\">\r\n//           <Book className=\"mr-3 text-emerald-600\" />\r\n//           General Ledger\r\n//         </h1>\r\n//         <p className=\"text-gray-600\">Real-time transaction recording and journal entry management</p>\r\n//       </div>\r\n\r\n//       {/* Quick Stats */}\r\n//       <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\r\n//         <div className=\"bg-blue-50 p-4 rounded-lg border border-blue-200\">\r\n//           <div className=\"flex items-center justify-between\">\r\n//             <div>\r\n//               <p className=\"text-blue-600 text-sm font-medium\">Total Entries</p>\r\n//               <p className=\"text-2xl font-bold text-blue-900\">{journalEntries.length}</p>\r\n//             </div>\r\n//             <FileText className=\"text-blue-600\" size={24} />\r\n//           </div>\r\n//         </div>\r\n\r\n//         <div className=\"bg-green-50 p-4 rounded-lg border border-green-200\">\r\n//           <div className=\"flex items-center justify-between\">\r\n//             <div>\r\n//               <p className=\"text-green-600 text-sm font-medium\">Automatic Entries</p>\r\n//               <p className=\"text-2xl font-bold text-green-900\">\r\n//                 {journalEntries.filter(e => e.transactionType === 'automatic').length}\r\n//               </p>\r\n//             </div>\r\n//             <TrendingUp className=\"text-green-600\" size={24} />\r\n//           </div>\r\n//         </div>\r\n\r\n//         <div className=\"bg-orange-50 p-4 rounded-lg border border-orange-200\">\r\n//           <div className=\"flex items-center justify-between\">\r\n//             <div>\r\n//               <p className=\"text-orange-600 text-sm font-medium\">Manual Entries</p>\r\n//               <p className=\"text-2xl font-bold text-orange-900\">\r\n//                 {journalEntries.filter(e => e.transactionType === 'manual').length}\r\n//               </p>\r\n//             </div>\r\n//             <Edit className=\"text-orange-600\" size={24} />\r\n//           </div>\r\n//         </div>\r\n\r\n//         <div className=\"bg-purple-50 p-4 rounded-lg border border-purple-200\">\r\n//           <div className=\"flex items-center justify-between\">\r\n//             <div>\r\n//               <p className=\"text-purple-600 text-sm font-medium\">Total Value</p>\r\n//               <p className=\"text-2xl font-bold text-purple-900\">\r\n//                 ${journalEntries.reduce((sum, entry) => sum + entry.totalDebit, 0).toFixed(2)}\r\n//               </p>\r\n//             </div>\r\n//             <DollarSign className=\"text-purple-600\" size={24} />\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n\r\n//       {/* Controls */}\r\n//       <div className=\"flex flex-wrap items-center justify-between gap-4 mb-6\">\r\n//         <div className=\"flex flex-wrap items-center gap-4\">\r\n//           {/* Date Filters */}\r\n//           <div className=\"flex items-center space-x-2\">\r\n//             <Calendar size={16} className=\"text-gray-400\" />\r\n//             <input\r\n//               type=\"date\"\r\n//               value={filters.dateFrom}\r\n//               onChange={(e) => setFilters({ ...filters, dateFrom: e.target.value })}\r\n//               className=\"px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\r\n//               placeholder=\"From\"\r\n//             />\r\n//             <span className=\"text-gray-500\">to</span>\r\n//             <input\r\n//               type=\"date\"\r\n//               value={filters.dateTo}\r\n//               onChange={(e) => setFilters({ ...filters, dateTo: e.target.value })}\r\n//               className=\"px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\r\n//               placeholder=\"To\"\r\n//             />\r\n//           </div>\r\n\r\n//           {/* Account Filter */}\r\n//           <div className=\"relative\">\r\n//             <Filter className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" size={16} />\r\n//             <select\r\n//               value={filters.accountId}\r\n//               onChange={(e) => setFilters({ ...filters, accountId: e.target.value })}\r\n//               className=\"pl-10 pr-8 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\r\n//             >\r\n//               <option value=\"\">All Accounts</option>\r\n//               {accounts.map(account => (\r\n//                 <option key={account.id} value={account.id}>\r\n//                   {account.code} - {account.name}\r\n//                 </option>\r\n//               ))}\r\n//             </select>\r\n//           </div>\r\n\r\n//           {/* Transaction Type Filter */}\r\n//           <select\r\n//             value={filters.transactionType}\r\n//             onChange={(e) => setFilters({ ...filters, transactionType: e.target.value })}\r\n//             className=\"px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\r\n//           >\r\n//             <option value=\"all\">All Types</option>\r\n//             <option value=\"automatic\">Automatic</option>\r\n//             <option value=\"manual\">Manual</option>\r\n//           </select>\r\n\r\n//           {/* Search */}\r\n//           <div className=\"relative\">\r\n//             <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" size={16} />\r\n//             <input\r\n//               type=\"text\"\r\n//               placeholder=\"Search entries...\"\r\n//               value={filters.searchTerm}\r\n//               onChange={(e) => setFilters({ ...filters, searchTerm: e.target.value })}\r\n//               className=\"pl-10 pr-4 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\r\n//             />\r\n//           </div>\r\n//         </div>\r\n\r\n//         <div className=\"flex space-x-3\">\r\n//           <button\r\n//             onClick={() => setIsAddingEntry(true)}\r\n//             className=\"px-4 py-2 bg-emerald-600 text-white rounded-lg hover:bg-emerald-700 flex items-center space-x-2\"\r\n//           >\r\n//             <Plus size={16} />\r\n//             <span>Add Entry</span>\r\n//           </button>\r\n//           <button\r\n//             onClick={generateTrialBalance}\r\n//             className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center space-x-2\"\r\n//           >\r\n//             <FileText size={16} />\r\n//             <span>Trial Balance</span>\r\n//           </button>\r\n//         </div>\r\n//       </div>\r\n\r\n//       {/* Journal Entry Form */}\r\n//       {isAddingEntry && (\r\n//         <div className=\"mb-8 p-6 bg-gray-50 rounded-lg border\">\r\n//           <h3 className=\"text-lg font-semibold mb-4\">Add Manual Journal Entry</h3>\r\n          \r\n//           <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\r\n//             <div>\r\n//               <label className=\"block text-sm font-medium text-gray-700 mb-1\">Date *</label>\r\n//               <input\r\n//                 type=\"date\"\r\n//                 value={newEntry.date}\r\n//                 onChange={(e) => setNewEntry({ ...newEntry, date: e.target.value })}\r\n//                 className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\r\n//               />\r\n//             </div>\r\n//             <div>\r\n//               <label className=\"block text-sm font-medium text-gray-700 mb-1\">Description *</label>\r\n//               <input\r\n//                 type=\"text\"\r\n//                 value={newEntry.description}\r\n//                 onChange={(e) => setNewEntry({ ...newEntry, description: e.target.value })}\r\n//                 placeholder=\"Enter description\"\r\n//                 className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\r\n//               />\r\n//             </div>\r\n//             <div>\r\n//               <label className=\"block text-sm font-medium text-gray-700 mb-1\">Reference</label>\r\n//               <input\r\n//                 type=\"text\"\r\n//                 value={newEntry.reference}\r\n//                 onChange={(e) => setNewEntry({ ...newEntry, reference: e.target.value })}\r\n//                 placeholder=\"Reference number\"\r\n//                 className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\r\n//               />\r\n//             </div>\r\n//           </div>\r\n\r\n//           {/* Entry Lines */}\r\n//           <div className=\"mb-4\">\r\n//             <label className=\"block text-sm font-medium text-gray-700 mb-2\">Journal Entry Lines</label>\r\n//             <div className=\"space-y-3\">\r\n//               {newEntry.entries.map((entry, index) => (\r\n//                 <div key={index} className=\"grid grid-cols-12 gap-2 items-center bg-white p-3 rounded border\">\r\n//                   <div className=\"col-span-4\">\r\n//                     <select\r\n//                       value={entry.accountId}\r\n//                       onChange={(e) => updateEntryLine(index, 'accountId', e.target.value)}\r\n//                       className=\"w-full px-2 py-1 border border-gray-300 rounded text-sm focus:ring-2 focus:ring-emerald-500\"\r\n//                     >\r\n//                       <option value=\"\">Select Account</option>\r\n//                       {accounts.map(account => (\r\n//                         <option key={account.id} value={account.id}>\r\n//                           {account.code} - {account.name}\r\n//                         </option>\r\n//                       ))}\r\n//                     </select>\r\n//                   </div>\r\n//                   <div className=\"col-span-3\">\r\n//                     <input\r\n//                       type=\"text\"\r\n//                       value={entry.description}\r\n//                       onChange={(e) => updateEntryLine(index, 'description', e.target.value)}\r\n//                       placeholder=\"Description\"\r\n//                       className=\"w-full px-2 py-1 border border-gray-300 rounded text-sm focus:ring-2 focus:ring-emerald-500\"\r\n//                     />\r\n//                   </div>\r\n//                   <div className=\"col-span-2\">\r\n//                     <input\r\n//                       type=\"number\"\r\n//                       step=\"0.01\"\r\n//                       value={entry.debit}\r\n//                       onChange={(e) => updateEntryLine(index, 'debit', e.target.value)}\r\n//                       placeholder=\"Debit\"\r\n//                       className=\"w-full px-2 py-1 border border-gray-300 rounded text-sm focus:ring-2 focus:ring-emerald-500\"\r\n//                     />\r\n//                   </div>\r\n//                   <div className=\"col-span-2\">\r\n//                     <input\r\n//                       type=\"number\"\r\n//                       step=\"0.01\"\r\n//                       value={entry.credit}\r\n//                       onChange={(e) => updateEntryLine(index, 'credit', e.target.value)}\r\n//                       placeholder=\"Credit\"\r\n//                       className=\"w-full px-2 py-1 border border-gray-300 rounded text-sm focus:ring-2 focus:ring-emerald-500\"\r\n//                     />\r\n//                   </div>\r\n//                   <div className=\"col-span-1\">\r\n//                     {newEntry.entries.length > 2 && (\r\n//                       <button\r\n//                         onClick={() => removeEntryLine(index)}\r\n//                         className=\"p-1 text-red-600 hover:bg-red-100 rounded\"\r\n//                       >\r\n//                         <Trash2 size={14} />\r\n//                       </button>\r\n//                     )}\r\n//                   </div>\r\n//                 </div>\r\n//               ))}\r\n//             </div>\r\n\r\n//             <div className=\"flex justify-between items-center mt-3\">\r\n//               <button\r\n//                 onClick={addEntryLine}\r\n//                 className=\"px-3 py-1 text-sm bg-gray-200 text-gray-700 rounded hover:bg-gray-300 flex items-center space-x-1\"\r\n//               >\r\n//                 <Plus size={14} />\r\n//                 <span>Add Line</span>\r\n//               </button>\r\n\r\n//               <div className=\"flex items-center space-x-4\">\r\n//                 <div className=\"text-sm\">\r\n//                   <span className=\"font-medium\">Total Debit: ${totalDebit.toFixed(2)}</span>\r\n//                   <span className=\"mx-2\">|</span>\r\n//                   <span className=\"font-medium\">Total Credit: ${totalCredit.toFixed(2)}</span>\r\n//                 </div>\r\n//                 {entryIsBalanced ? (\r\n//                   <div className=\"flex items-center text-green-600\">\r\n//                     <CheckCircle size={16} className=\"mr-1\" />\r\n//                     <span className=\"text-sm\">Balanced</span>\r\n//                   </div>\r\n//                 ) : (\r\n//                   <div className=\"flex items-center text-red-600\">\r\n//                     <AlertCircle size={16} className=\"mr-1\" />\r\n//                     <span className=\"text-sm\">Not Balanced</span>\r\n//                   </div>\r\n//                 )}\r\n//               </div>\r\n//             </div>\r\n//           </div>\r\n\r\n//           <div className=\"flex space-x-3\">\r\n//             <button\r\n//               onClick={saveJournalEntry}\r\n//               disabled={!entryIsBalanced}\r\n//               className=\"px-4 py-2 bg-emerald-600 text-white rounded-lg hover:bg-emerald-700 disabled:bg-gray-400 flex items-center space-x-2\"\r\n//             >\r\n//               <Save size={16} />\r\n//               <span>Save Entry</span>\r\n//             </button>\r\n//             <button\r\n//               onClick={() => setIsAddingEntry(false)}\r\n//               className=\"px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 flex items-center space-x-2\"\r\n//             >\r\n//               <X size={16} />\r\n//               <span>Cancel</span>\r\n//             </button>\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n\r\n//       {/* Journal Entries Table */}\r\n//       <div className=\"bg-white border border-gray-200 rounded-lg overflow-hidden\">\r\n//         <div className=\"px-6 py-4 border-b border-gray-200\">\r\n//           <h2 className=\"text-lg font-semibold text-gray-900\">Journal Entries</h2>\r\n//           <p className=\"text-sm text-gray-600 mt-1\">\r\n//             Showing {filteredEntries.length} of {journalEntries.length} entries\r\n//           </p>\r\n//         </div>\r\n\r\n//         <div className=\"overflow-x-auto\">\r\n//           <table className=\"w-full\">\r\n//             <thead className=\"bg-gray-50\">\r\n//               <tr>\r\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                   Entry ID\r\n//                 </th>\r\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                   Date\r\n//                 </th>\r\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                   Description\r\n//                 </th>\r\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                   Reference\r\n//                 </th>\r\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                   Source\r\n//                 </th>\r\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                   Amount\r\n//                 </th>\r\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                   Status\r\n//                 </th>\r\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                   Actions\r\n//                 </th>\r\n//               </tr>\r\n//             </thead>\r\n//             <tbody className=\"bg-white divide-y divide-gray-200\">\r\n//               {filteredEntries.map((entry) => (\r\n//                 <tr key={entry.id} className=\"hover:bg-gray-50\">\r\n//                   <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\r\n//                     {entry.id}\r\n//                   </td>\r\n//                   <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\r\n//                     {entry.date}\r\n//                   </td>\r\n//                   <td className=\"px-6 py-4 text-sm text-gray-900 max-w-xs truncate\">\r\n//                     {entry.description}\r\n//                   </td>\r\n//                   <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\r\n//                     {entry.reference}\r\n//                   </td>\r\n//                   <td className=\"px-6 py-4 whitespace-nowrap\">\r\n//                     <span className={`px-2 py-1 text-xs font-medium rounded-full ${\r\n//                       entry.transactionType === 'automatic' ? 'bg-green-100 text-green-800' : 'bg-orange-100 text-orange-800'\r\n//                     }`}>\r\n//                       {entry.source}\r\n//                     </span>\r\n//                   </td>\r\n//                   <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\r\n//                     ${entry.totalDebit.toFixed(2)}\r\n//                   </td>\r\n//                   <td className=\"px-6 py-4 whitespace-nowrap\">\r\n//                     <span className={`px-2 py-1 text-xs font-medium rounded-full ${\r\n//                       entry.status === 'posted' ? 'bg-blue-100 text-blue-800' : 'bg-yellow-100 text-yellow-800'\r\n//                     }`}>\r\n//                       {entry.status}\r\n//                     </span>\r\n//                   </td>\r\n//                   <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">\r\n//                     <button\r\n//                       onClick={() => setSelectedEntry(entry)}\r\n//                       className=\"text-emerald-600 hover:text-emerald-900 mr-3\"\r\n//                     >\r\n//                       <Eye size={16} />\r\n//                     </button>\r\n//                   </td>\r\n//                 </tr>\r\n//               ))}\r\n//             </tbody>\r\n//           </table>\r\n//         </div>\r\n//       </div>\r\n\r\n//       {/* Entry Details Modal */}\r\n//       {selectedEntry && (\r\n//         <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center p-4 z-50\">\r\n//           <div className=\"bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-y-auto\">\r\n//             <div className=\"px-6 py-4 border-b border-gray-200\">\r\n//               <div className=\"flex items-center justify-between\">\r\n//                 <h3 className=\"text-lg font-semibold text-gray-900\">\r\n//                   Journal Entry Details - {selectedEntry.id}\r\n//                 </h3>\r\n//                 <button\r\n//                   onClick={() => setSelectedEntry(null)}\r\n//                   className=\"text-gray-400 hover:text-gray-600\"\r\n//                 >\r\n//                   <X size={20} />\r\n//                 </button>\r\n//               </div>\r\n//             </div>\r\n            \r\n//             <div className=\"px-6 py-4\">\r\n//               {/* Entry Header */}\r\n//               <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-6\">\r\n//                 <div>\r\n//                   <label className=\"text-sm font-medium text-gray-500\">Date</label>\r\n//                   <p className=\"text-sm text-gray-900\">{selectedEntry.date}</p>\r\n//                 </div>\r\n//                 <div>\r\n//                   <label className=\"text-sm font-medium text-gray-500\">Reference</label>\r\n//                   <p className=\"text-sm text-gray-900\">{selectedEntry.reference}</p>\r\n//                 </div>\r\n//                 <div>\r\n//                   <label className=\"text-sm font-medium text-gray-500\">Description</label>\r\n//                   <p className=\"text-sm text-gray-900\">{selectedEntry.description}</p>\r\n//                 </div>\r\n//                 <div>\r\n//                   <label className=\"text-sm font-medium text-gray-500\">Source</label>\r\n//                   <span className={`px-2 py-1 text-xs font-medium rounded-full ${\r\n//                     selectedEntry.transactionType === 'automatic' ? 'bg-green-100 text-green-800' : 'bg-orange-100 text-orange-800'\r\n//                   }`}>\r\n//                     {selectedEntry.source}\r\n//                   </span>\r\n//                 </div>\r\n//               </div>\r\n\r\n//               {/* Entry Lines */}\r\n//               <div className=\"mb-6\">\r\n//                 <h4 className=\"text-sm font-medium text-gray-700 mb-3\">Account Entries</h4>\r\n//                 <div className=\"overflow-x-auto\">\r\n//                   <table className=\"w-full border border-gray-200 rounded\">\r\n//                     <thead className=\"bg-gray-50\">\r\n//                       <tr>\r\n//                         <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500\">Account</th>\r\n//                         <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500\">Description</th>\r\n//                         <th className=\"px-4 py-2 text-right text-xs font-medium text-gray-500\">Debit</th>\r\n//                         <th className=\"px-4 py-2 text-right text-xs font-medium text-gray-500\">Credit</th>\r\n//                       </tr>\r\n//                     </thead>\r\n//                     <tbody className=\"divide-y divide-gray-200\">\r\n//                       {selectedEntry.entries.map((entryLine, index) => (\r\n//                         <tr key={index}>\r\n//                           <td className=\"px-4 py-2 text-sm text-gray-900\">\r\n//                             {getAccountName(entryLine.accountId)}\r\n//                           </td>\r\n//                           <td className=\"px-4 py-2 text-sm text-gray-600\">\r\n//                             {entryLine.description}\r\n//                           </td>\r\n//                           <td className=\"px-4 py-2 text-sm text-gray-900 text-right\">\r\n//                             {entryLine.debit > 0 ? `${entryLine.debit.toFixed(2)}` : '-'}\r\n//                           </td>\r\n//                           <td className=\"px-4 py-2 text-sm text-gray-900 text-right\">\r\n//                             {entryLine.credit > 0 ? `${entryLine.credit.toFixed(2)}` : '-'}\r\n//                           </td>\r\n//                         </tr>\r\n//                       ))}\r\n//                     </tbody>\r\n//                     <tfoot className=\"bg-gray-50\">\r\n//                       <tr>\r\n//                         <td colSpan=\"2\" className=\"px-4 py-2 text-sm font-medium text-gray-900\">\r\n//                           Totals:\r\n//                         </td>\r\n//                         <td className=\"px-4 py-2 text-sm font-bold text-gray-900 text-right\">\r\n//                           ${selectedEntry.totalDebit.toFixed(2)}\r\n//                         </td>\r\n//                         <td className=\"px-4 py-2 text-sm font-bold text-gray-900 text-right\">\r\n//                           ${selectedEntry.totalCredit.toFixed(2)}\r\n//                         </td>\r\n//                       </tr>\r\n//                     </tfoot>\r\n//                   </table>\r\n//                 </div>\r\n//               </div>\r\n\r\n//               {/* Entry Metadata */}\r\n//               <div className=\"text-xs text-gray-500\">\r\n//                 <p>Created: {new Date(selectedEntry.createdAt).toLocaleString()}</p>\r\n//                 <p>Status: {selectedEntry.status}</p>\r\n//               </div>\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n\r\n//       {/* Trial Balance Modal */}\r\n//       {showTrialBalance && (\r\n//         <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center p-4 z-50\">\r\n//           <div className=\"bg-white rounded-lg max-w-5xl w-full max-h-[90vh] overflow-y-auto\">\r\n//             <div className=\"px-6 py-4 border-b border-gray-200\">\r\n//               <div className=\"flex items-center justify-between\">\r\n//                 <h3 className=\"text-lg font-semibold text-gray-900\">\r\n//                   Trial Balance - As of {new Date().toLocaleDateString()}\r\n//                 </h3>\r\n//                 <div className=\"flex items-center space-x-2\">\r\n//                   <button\r\n//                     onClick={() => {\r\n//                       // Export functionality would go here\r\n//                       alert('Export functionality would be implemented here');\r\n//                     }}\r\n//                     className=\"px-3 py-1 bg-emerald-600 text-white rounded text-sm hover:bg-emerald-700 flex items-center space-x-1\"\r\n//                   >\r\n//                     <Download size={14} />\r\n//                     <span>Export</span>\r\n//                   </button>\r\n//                   <button\r\n//                     onClick={() => setShowTrialBalance(false)}\r\n//                     className=\"text-gray-400 hover:text-gray-600\"\r\n//                   >\r\n//                     <X size={20} />\r\n//                   </button>\r\n//                 </div>\r\n//               </div>\r\n//             </div>\r\n            \r\n//             <div className=\"px-6 py-4\">\r\n//               <div className=\"overflow-x-auto\">\r\n//                 <table className=\"w-full\">\r\n//                   <thead className=\"bg-gray-50\">\r\n//                     <tr>\r\n//                       <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                         Account Code\r\n//                       </th>\r\n//                       <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                         Account Name\r\n//                       </th>\r\n//                       <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                         Type\r\n//                       </th>\r\n//                       <th className=\"px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                         Debit Total\r\n//                       </th>\r\n//                       <th className=\"px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                         Credit Total\r\n//                       </th>\r\n//                       <th className=\"px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                         Balance\r\n//                       </th>\r\n//                     </tr>\r\n//                   </thead>\r\n//                   <tbody className=\"bg-white divide-y divide-gray-200\">\r\n//                     {trialBalance.map((account) => (\r\n//                       <tr key={account.accountId}>\r\n//                         <td className=\"px-4 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\r\n//                           {account.accountCode}\r\n//                         </td>\r\n//                         <td className=\"px-4 py-4 whitespace-nowrap text-sm text-gray-900\">\r\n//                           {account.accountName}\r\n//                         </td>\r\n//                         <td className=\"px-4 py-4 whitespace-nowrap\">\r\n//                           <span className={`px-2 py-1 text-xs font-medium rounded-full ${\r\n//                             account.accountType === 'assets' ? 'bg-green-100 text-green-800' :\r\n//                             account.accountType === 'liabilities' ? 'bg-red-100 text-red-800' :\r\n//                             account.accountType === 'equity' ? 'bg-blue-100 text-blue-800' :\r\n//                             account.accountType === 'revenue' ? 'bg-purple-100 text-purple-800' :\r\n//                             'bg-orange-100 text-orange-800'\r\n//                           }`}>\r\n//                             {account.accountType}\r\n//                           </span>\r\n//                         </td>\r\n//                         <td className=\"px-4 py-4 whitespace-nowrap text-sm text-gray-900 text-right\">\r\n//                           ${account.debit.toFixed(2)}\r\n//                         </td>\r\n//                         <td className=\"px-4 py-4 whitespace-nowrap text-sm text-gray-900 text-right\">\r\n//                           ${account.credit.toFixed(2)}\r\n//                         </td>\r\n//                         <td className=\"px-4 py-4 whitespace-nowrap text-sm font-medium text-right\">\r\n//                           <span className={account.balance >= 0 ? 'text-green-600' : 'text-red-600'}>\r\n//                             ${Math.abs(account.balance).toFixed(2)}\r\n//                             {account.balance < 0 && ' (CR)'}\r\n//                           </span>\r\n//                         </td>\r\n//                       </tr>\r\n//                     ))}\r\n//                   </tbody>\r\n//                   <tfoot className=\"bg-gray-50\">\r\n//                     <tr>\r\n//                       <td colSpan=\"3\" className=\"px-4 py-3 text-sm font-bold text-gray-900\">\r\n//                         TOTALS:\r\n//                       </td>\r\n//                       <td className=\"px-4 py-3 text-sm font-bold text-gray-900 text-right\">\r\n//                         ${trialBalance.reduce((sum, acc) => sum + acc.debit, 0).toFixed(2)}\r\n//                       </td>\r\n//                       <td className=\"px-4 py-3 text-sm font-bold text-gray-900 text-right\">\r\n//                         ${trialBalance.reduce((sum, acc) => sum + acc.credit, 0).toFixed(2)}\r\n//                       </td>\r\n//                       <td className=\"px-4 py-3 text-sm font-bold text-gray-900 text-right\">\r\n//                         ${Math.abs(trialBalance.reduce((sum, acc) => sum + acc.balance, 0)).toFixed(2)}\r\n//                       </td>\r\n//                     </tr>\r\n//                   </tfoot>\r\n//                 </table>\r\n//               </div>\r\n              \r\n//               {/* Trial Balance Validation */}\r\n//               <div className=\"mt-4 p-4 bg-green-50 border border-green-200 rounded-lg\">\r\n//                 <div className=\"flex items-center\">\r\n//                   <CheckCircle className=\"text-green-600 mr-2\" size={20} />\r\n//                   <div>\r\n//                     <h4 className=\"font-medium text-green-800\">Trial Balance is Balanced</h4>\r\n//                     <p className=\"text-sm text-green-700\">\r\n//                       Total Debits = Total Credits = ${trialBalance.reduce((sum, acc) => sum + acc.debit, 0).toFixed(2)}\r\n//                     </p>\r\n//                   </div>\r\n//                 </div>\r\n//               </div>\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n\r\n//       {/* Integration Status */}\r\n//       <div className=\"mt-8 grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n//         <div className=\"p-4 bg-green-50 border border-green-200 rounded-lg\">\r\n//           <div className=\"flex items-center mb-2\">\r\n//             <CheckCircle className=\"text-green-600 mr-2\" size={16} />\r\n//             <h4 className=\"font-medium text-green-800\">POS Integration</h4>\r\n//           </div>\r\n//           <p className=\"text-sm text-green-700\">\r\n//             All sales transactions automatically create journal entries\r\n//           </p>\r\n//         </div>\r\n\r\n//         <div className=\"p-4 bg-green-50 border border-green-200 rounded-lg\">\r\n//           <div className=\"flex items-center mb-2\">\r\n//             <CheckCircle className=\"text-green-600 mr-2\" size={16} />\r\n//             <h4 className=\"font-medium text-green-800\">Purchase Integration</h4>\r\n//           </div>\r\n//           <p className=\"text-sm text-green-700\">\r\n//             Purchase orders automatically update accounts payable and inventory\r\n//           </p>\r\n//         </div>\r\n\r\n//         <div className=\"p-4 bg-blue-50 border border-blue-200 rounded-lg\">\r\n//           <div className=\"flex items-center mb-2\">\r\n//             <FileText className=\"text-blue-600 mr-2\" size={16} />\r\n//             <h4 className=\"font-medium text-blue-800\">Manual Entries</h4>\r\n//           </div>\r\n//           <p className=\"text-sm text-blue-700\">\r\n//             Add adjustments and corrections with full validation\r\n//           </p>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default GeneralLedger;\r\n\r\n\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import { \r\n//   Book, \r\n//   Plus, \r\n//   Filter, \r\n//   Search, \r\n//   Calendar, \r\n//   FileText, \r\n//   Edit, \r\n//   Trash2, \r\n//   Save, \r\n//   X, \r\n//   AlertCircle,\r\n//   CheckCircle,\r\n//   DollarSign,\r\n//   TrendingUp,\r\n//   Eye,\r\n//   Download,\r\n//   RefreshCw\r\n// } from 'lucide-react';\r\n\r\n// const GeneralLedger = () => {\r\n//   const [journalEntries, setJournalEntries] = useState([]);\r\n//   const [accounts, setAccounts] = useState([]);\r\n//   const [filteredEntries, setFilteredEntries] = useState([]);\r\n//   const [selectedEntry, setSelectedEntry] = useState(null);\r\n//   const [isAddingEntry, setIsAddingEntry] = useState(false);\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [filters, setFilters] = useState({\r\n//     dateFrom: '',\r\n//     dateTo: '',\r\n//     accountId: '',\r\n//     transactionType: 'all',\r\n//     searchTerm: ''\r\n//   });\r\n//   const [trialBalance, setTrialBalance] = useState([]);\r\n//   const [showTrialBalance, setShowTrialBalance] = useState(false);\r\n//   const [newEntry, setNewEntry] = useState({\r\n//     date: new Date().toISOString().split('T')[0],\r\n//     description: '',\r\n//     reference: '',\r\n//     entries: [\r\n//       { accountId: '', debit: 0, credit: 0, description: '' },\r\n//       { accountId: '', debit: 0, credit: 0, description: '' }\r\n//     ]\r\n//   });\r\n\r\n//   // Chart of Accounts\r\n//   const chartOfAccounts = [\r\n//     { id: '1111', code: '1111', name: 'Petty Cash', type: 'assets' },\r\n//     { id: '1112', code: '1112', name: 'Bank - Main Account', type: 'assets' },\r\n//     { id: '1120', code: '1120', name: 'Accounts Receivable', type: 'assets' },\r\n//     { id: '1130', code: '1130', name: 'Inventory', type: 'assets' },\r\n//     { id: '2110', code: '2110', name: 'Accounts Payable', type: 'liabilities' },\r\n//     { id: '2130', code: '2130', name: 'Sales Tax Payable', type: 'liabilities' },\r\n//     { id: '4100', code: '4100', name: 'Sales Revenue', type: 'revenue' },\r\n//     { id: '4110', code: '4110', name: 'Electronics Sales', type: 'revenue' },\r\n//     { id: '5100', code: '5100', name: 'Cost of Goods Sold', type: 'expenses' },\r\n//     { id: '5200', code: '5200', name: 'Purchase Expenses', type: 'expenses' }\r\n//   ];\r\n\r\n//   // API Configuration\r\n//   const API_BASE_URL = 'https://api-pos.hulmsolutions.com/POS/accounting2/31fc8df0-61db-41e5-bb67-070fde367ea1/orders?start=0&size=200';\r\n\r\n//   useEffect(() => {\r\n//     setAccounts(chartOfAccounts);\r\n//     loadJournalEntriesFromAPI();\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     filterEntries();\r\n//   }, [journalEntries, filters]);\r\n\r\n//   // Fetch Sales Orders from API and convert to Journal Entries\r\n//   const loadJournalEntriesFromAPI = async () => {\r\n//     setLoading(true);\r\n//     try {\r\n//       const response = await fetch(`${API_BASE_URL}/orders?start=0&size=200`);\r\n//       const salesOrders = await response.json();\r\n      \r\n//       // Convert sales orders to journal entries\r\n//       const journalEntriesFromSales = salesOrders.map(order => convertSalesOrderToJournalEntry(order));\r\n      \r\n//       // Load any manual journal entries from localStorage\r\n//       const manualEntries = JSON.parse(localStorage.getItem('manualJournalEntries') || '[]');\r\n      \r\n//       // Combine both types of entries\r\n//       const allEntries = [...journalEntriesFromSales, ...manualEntries];\r\n      \r\n//       setJournalEntries(allEntries);\r\n//     } catch (error) {\r\n//       console.error('Error loading sales orders:', error);\r\n//       // Fallback to sample data if API fails\r\n//       loadSampleJournalEntries();\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   // Convert Sales Order to Journal Entry\r\n//   const convertSalesOrderToJournalEntry = (order) => {\r\n//     const entries = [];\r\n//     const subTotal = order.subTotal || 0;\r\n//     const taxAmount = order.taxAmount || 0;\r\n//     const total = order.total || 0;\r\n    \r\n//     // Determine payment method - if paid, assume cash/bank\r\n//     if (order.paid && order.status === 'Closed') {\r\n//       // Cash/Bank Account (Debit)\r\n//       entries.push({\r\n//         accountId: '1111', // Petty Cash (assume cash payment)\r\n//         accountName: 'Petty Cash',\r\n//         debit: total,\r\n//         credit: 0,\r\n//         description: `Cash received from sale Order #${order.orderId}`\r\n//       });\r\n//     } else if (!order.paid) {\r\n//       // Accounts Receivable (Debit) for unpaid orders\r\n//       entries.push({\r\n//         accountId: '1120',\r\n//         accountName: 'Accounts Receivable',\r\n//         debit: total,\r\n//         credit: 0,\r\n//         description: `Credit sale Order #${order.orderId}`\r\n//       });\r\n//     }\r\n\r\n//     // Sales Revenue (Credit)\r\n//     if (subTotal > 0) {\r\n//       entries.push({\r\n//         accountId: '4110', // Electronics Sales\r\n//         accountName: 'Electronics Sales',\r\n//         debit: 0,\r\n//         credit: subTotal,\r\n//         description: `Revenue from Order #${order.orderId}`\r\n//       });\r\n//     }\r\n\r\n//     // Sales Tax Payable (Credit)\r\n//     if (taxAmount > 0) {\r\n//       entries.push({\r\n//         accountId: '2130',\r\n//         accountName: 'Sales Tax Payable',\r\n//         debit: 0,\r\n//         credit: taxAmount,\r\n//         description: `Tax collected on Order #${order.orderId}`\r\n//       });\r\n//     }\r\n\r\n//     // Cost of Goods Sold and Inventory reduction\r\n//     order.lineItems.forEach(item => {\r\n//       const costPrice = item.costPrice || 0;\r\n//       const quantity = item.quantity || 0;\r\n//       const totalCost = costPrice * quantity;\r\n\r\n//       if (totalCost > 0 && order.fulfilled) {\r\n//         // Cost of Goods Sold (Debit)\r\n//         entries.push({\r\n//           accountId: '5100',\r\n//           accountName: 'Cost of Goods Sold',\r\n//           debit: totalCost,\r\n//           credit: 0,\r\n//           description: `COGS for ${item.productName}`\r\n//         });\r\n\r\n//         // Inventory (Credit)\r\n//         entries.push({\r\n//           accountId: '1130',\r\n//           accountName: 'Inventory',\r\n//           debit: 0,\r\n//           credit: totalCost,\r\n//           description: `Inventory reduction - ${item.productName}`\r\n//         });\r\n//       }\r\n//     });\r\n\r\n//     // Calculate totals\r\n//     const totalDebit = entries.reduce((sum, entry) => sum + entry.debit, 0);\r\n//     const totalCredit = entries.reduce((sum, entry) => sum + entry.credit, 0);\r\n\r\n//     return {\r\n//       id: `JE-ORDER-${order.orderId}`,\r\n//       date: formatDateFromCreatedAt(order.createdAt),\r\n//       description: `Sales Order #${order.orderId} - ${order.lineItems.map(item => item.productName).join(', ')}`,\r\n//       reference: `ORDER-${order.orderId}`,\r\n//       transactionType: 'automatic',\r\n//       source: 'POS Sales',\r\n//       status: order.fulfilled ? 'posted' : 'pending',\r\n//       entries: entries,\r\n//       totalDebit: Math.round(totalDebit * 100) / 100,\r\n//       totalCredit: Math.round(totalCredit * 100) / 100,\r\n//       createdAt: order.createdAt,\r\n//       originalOrder: order // Keep reference to original order\r\n//     };\r\n//   };\r\n\r\n//   // Format date from API format (2025.08.18.10.08.54.569) to YYYY-MM-DD\r\n//   const formatDateFromCreatedAt = (createdAt) => {\r\n//     try {\r\n//       const parts = createdAt.split('.');\r\n//       if (parts.length >= 3) {\r\n//         return `${parts[0]}-${parts[1].padStart(2, '0')}-${parts[2].padStart(2, '0')}`;\r\n//       }\r\n//       return new Date().toISOString().split('T')[0];\r\n//     } catch (error) {\r\n//       return new Date().toISOString().split('T')[0];\r\n//     }\r\n//   };\r\n\r\n//   // Fallback sample data\r\n//   const loadSampleJournalEntries = () => {\r\n//     const sampleEntries = [\r\n//       {\r\n//         id: 'JE001',\r\n//         date: '2025-08-18',\r\n//         description: 'Sample POS Sale - Medical products',\r\n//         reference: 'POS001',\r\n//         transactionType: 'automatic',\r\n//         source: 'POS',\r\n//         status: 'posted',\r\n//         entries: [\r\n//           { accountId: '1111', accountName: 'Petty Cash', debit: 60.50, credit: 0, description: 'Cash received from customer' },\r\n//           { accountId: '4100', accountName: 'Sales Revenue', debit: 0, credit: 55.00, description: 'Revenue from medical products' },\r\n//           { accountId: '2130', accountName: 'Sales Tax Payable', debit: 0, credit: 5.50, description: 'Sales tax collected' }\r\n//         ],\r\n//         totalDebit: 60.50,\r\n//         totalCredit: 60.50,\r\n//         createdAt: '2025-08-18T10:30:00Z'\r\n//       }\r\n//     ];\r\n//     setJournalEntries(sampleEntries);\r\n//   };\r\n\r\n//   const filterEntries = () => {\r\n//     let filtered = [...journalEntries];\r\n\r\n//     if (filters.dateFrom) {\r\n//       filtered = filtered.filter(entry => entry.date >= filters.dateFrom);\r\n//     }\r\n//     if (filters.dateTo) {\r\n//       filtered = filtered.filter(entry => entry.date <= filters.dateTo);\r\n//     }\r\n//     if (filters.accountId) {\r\n//       filtered = filtered.filter(entry => \r\n//         entry.entries.some(e => e.accountId === filters.accountId)\r\n//       );\r\n//     }\r\n//     if (filters.transactionType !== 'all') {\r\n//       filtered = filtered.filter(entry => entry.transactionType === filters.transactionType);\r\n//     }\r\n//     if (filters.searchTerm) {\r\n//       const term = filters.searchTerm.toLowerCase();\r\n//       filtered = filtered.filter(entry => \r\n//         entry.description.toLowerCase().includes(term) ||\r\n//         entry.reference.toLowerCase().includes(term) ||\r\n//         entry.entries.some(e => e.description.toLowerCase().includes(term))\r\n//       );\r\n//     }\r\n\r\n//     setFilteredEntries(filtered);\r\n//   };\r\n\r\n//   const generateTrialBalance = () => {\r\n//     const balances = {};\r\n    \r\n//     // Initialize all accounts\r\n//     chartOfAccounts.forEach(account => {\r\n//       balances[account.id] = {\r\n//         accountId: account.id,\r\n//         accountCode: account.code,\r\n//         accountName: account.name,\r\n//         accountType: account.type,\r\n//         debit: 0,\r\n//         credit: 0,\r\n//         balance: 0\r\n//       };\r\n//     });\r\n\r\n//     // Calculate balances from journal entries\r\n//     journalEntries.forEach(entry => {\r\n//       if (entry.status === 'posted') {\r\n//         entry.entries.forEach(entryLine => {\r\n//           if (balances[entryLine.accountId]) {\r\n//             balances[entryLine.accountId].debit += entryLine.debit;\r\n//             balances[entryLine.accountId].credit += entryLine.credit;\r\n//           }\r\n//         });\r\n//       }\r\n//     });\r\n\r\n//     // Calculate net balances\r\n//     Object.values(balances).forEach(account => {\r\n//       if (account.accountType === 'assets' || account.accountType === 'expenses') {\r\n//         account.balance = account.debit - account.credit;\r\n//       } else {\r\n//         account.balance = account.credit - account.debit;\r\n//       }\r\n//     });\r\n\r\n//     const trialBalanceData = Object.values(balances)\r\n//       .filter(account => account.debit !== 0 || account.credit !== 0)\r\n//       .sort((a, b) => a.accountCode.localeCompare(b.accountCode));\r\n\r\n//     setTrialBalance(trialBalanceData);\r\n//     setShowTrialBalance(true);\r\n//   };\r\n\r\n//   const addEntryLine = () => {\r\n//     setNewEntry({\r\n//       ...newEntry,\r\n//       entries: [...newEntry.entries, { accountId: '', debit: 0, credit: 0, description: '' }]\r\n//     });\r\n//   };\r\n\r\n//   const removeEntryLine = (index) => {\r\n//     if (newEntry.entries.length > 2) {\r\n//       const updatedEntries = newEntry.entries.filter((_, i) => i !== index);\r\n//       setNewEntry({ ...newEntry, entries: updatedEntries });\r\n//     }\r\n//   };\r\n\r\n//   const updateEntryLine = (index, field, value) => {\r\n//     const updatedEntries = [...newEntry.entries];\r\n//     updatedEntries[index] = { ...updatedEntries[index], [field]: value };\r\n//     setNewEntry({ ...newEntry, entries: updatedEntries });\r\n//   };\r\n\r\n//   const calculateTotals = (entries) => {\r\n//     const totalDebit = entries.reduce((sum, entry) => sum + (parseFloat(entry.debit) || 0), 0);\r\n//     const totalCredit = entries.reduce((sum, entry) => sum + (parseFloat(entry.credit) || 0), 0);\r\n//     return { totalDebit, totalCredit };\r\n//   };\r\n\r\n//   const isBalanced = (entries) => {\r\n//     const { totalDebit, totalCredit } = calculateTotals(entries);\r\n//     return Math.abs(totalDebit - totalCredit) < 0.01;\r\n//   };\r\n\r\n//   const saveJournalEntry = () => {\r\n//     if (!newEntry.description || !newEntry.entries.every(e => e.accountId)) {\r\n//       alert('Please fill in all required fields');\r\n//       return;\r\n//     }\r\n\r\n//     if (!isBalanced(newEntry.entries)) {\r\n//       alert('Journal entry must be balanced - total debits must equal total credits');\r\n//       return;\r\n//     }\r\n\r\n//     const { totalDebit, totalCredit } = calculateTotals(newEntry.entries);\r\n    \r\n//     // Add account names to entries\r\n//     const entriesWithNames = newEntry.entries.map(entry => ({\r\n//       ...entry,\r\n//       accountName: accounts.find(acc => acc.id === entry.accountId)?.name || '',\r\n//       debit: parseFloat(entry.debit) || 0,\r\n//       credit: parseFloat(entry.credit) || 0\r\n//     }));\r\n\r\n//     const journalEntry = {\r\n//       id: `JE-MANUAL-${Date.now()}`,\r\n//       date: newEntry.date,\r\n//       description: newEntry.description,\r\n//       reference: newEntry.reference || `MAN${Date.now()}`,\r\n//       transactionType: 'manual',\r\n//       source: 'Manual',\r\n//       status: 'posted',\r\n//       entries: entriesWithNames,\r\n//       totalDebit,\r\n//       totalCredit,\r\n//       createdAt: new Date().toISOString()\r\n//     };\r\n\r\n//     // Save manual entries to localStorage\r\n//     const existingManualEntries = JSON.parse(localStorage.getItem('manualJournalEntries') || '[]');\r\n//     const updatedManualEntries = [...existingManualEntries, journalEntry];\r\n//     localStorage.setItem('manualJournalEntries', JSON.stringify(updatedManualEntries));\r\n\r\n//     // Update state\r\n//     setJournalEntries([...journalEntries, journalEntry]);\r\n    \r\n//     // Reset form\r\n//     setNewEntry({\r\n//       date: new Date().toISOString().split('T')[0],\r\n//       description: '',\r\n//       reference: '',\r\n//       entries: [\r\n//         { accountId: '', debit: 0, credit: 0, description: '' },\r\n//         { accountId: '', debit: 0, credit: 0, description: '' }\r\n//       ]\r\n//     });\r\n//     setIsAddingEntry(false);\r\n//   };\r\n\r\n//   const getAccountName = (accountId) => {\r\n//     const account = accounts.find(acc => acc.id === accountId);\r\n//     return account ? `${account.code} - ${account.name}` : '';\r\n//   };\r\n\r\n//   const { totalDebit, totalCredit } = calculateTotals(newEntry.entries);\r\n//   const entryIsBalanced = isBalanced(newEntry.entries);\r\n\r\n//   return (\r\n//     <div className=\"max-w-7xl mx-auto p-6 bg-white\">\r\n//       {/* Header */}\r\n//       <div className=\"mb-8\">\r\n//         <h1 className=\"text-3xl font-bold text-gray-900 mb-2 flex items-center\">\r\n//           <Book className=\"mr-3 text-emerald-600\" />\r\n//           General Ledger\r\n//         </h1>\r\n//         <p className=\"text-gray-600\">Real-time transaction recording and journal entry management</p>\r\n//       </div>\r\n\r\n//       {/* Quick Stats */}\r\n//       <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\r\n//         <div className=\"bg-blue-50 p-4 rounded-lg border border-blue-200\">\r\n//           <div className=\"flex items-center justify-between\">\r\n//             <div>\r\n//               <p className=\"text-blue-600 text-sm font-medium\">Total Entries</p>\r\n//               <p className=\"text-2xl font-bold text-blue-900\">{journalEntries.length}</p>\r\n//             </div>\r\n//             <FileText className=\"text-blue-600\" size={24} />\r\n//           </div>\r\n//         </div>\r\n\r\n//         <div className=\"bg-green-50 p-4 rounded-lg border border-green-200\">\r\n//           <div className=\"flex items-center justify-between\">\r\n//             <div>\r\n//               <p className=\"text-green-600 text-sm font-medium\">POS Entries</p>\r\n//               <p className=\"text-2xl font-bold text-green-900\">\r\n//                 {journalEntries.filter(e => e.source === 'POS Sales').length}\r\n//               </p>\r\n//             </div>\r\n//             <TrendingUp className=\"text-green-600\" size={24} />\r\n//           </div>\r\n//         </div>\r\n\r\n//         <div className=\"bg-orange-50 p-4 rounded-lg border border-orange-200\">\r\n//           <div className=\"flex items-center justify-between\">\r\n//             <div>\r\n//               <p className=\"text-orange-600 text-sm font-medium\">Manual Entries</p>\r\n//               <p className=\"text-2xl font-bold text-orange-900\">\r\n//                 {journalEntries.filter(e => e.transactionType === 'manual').length}\r\n//               </p>\r\n//             </div>\r\n//             <Edit className=\"text-orange-600\" size={24} />\r\n//           </div>\r\n//         </div>\r\n\r\n//         <div className=\"bg-purple-50 p-4 rounded-lg border border-purple-200\">\r\n//           <div className=\"flex items-center justify-between\">\r\n//             <div>\r\n//               <p className=\"text-purple-600 text-sm font-medium\">Total Value</p>\r\n//               <p className=\"text-2xl font-bold text-purple-900\">\r\n//                 ${journalEntries.reduce((sum, entry) => sum + entry.totalDebit, 0).toFixed(2)}\r\n//               </p>\r\n//             </div>\r\n//             <DollarSign className=\"text-purple-600\" size={24} />\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n\r\n//       {/* Controls */}\r\n//       <div className=\"flex flex-wrap items-center justify-between gap-4 mb-6\">\r\n//         <div className=\"flex flex-wrap items-center gap-4\">\r\n//           {/* Date Filters */}\r\n//           <div className=\"flex items-center space-x-2\">\r\n//             <Calendar size={16} className=\"text-gray-400\" />\r\n//             <input\r\n//               type=\"date\"\r\n//               value={filters.dateFrom}\r\n//               onChange={(e) => setFilters({ ...filters, dateFrom: e.target.value })}\r\n//               className=\"px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\r\n//               placeholder=\"From\"\r\n//             />\r\n//             <span className=\"text-gray-500\">to</span>\r\n//             <input\r\n//               type=\"date\"\r\n//               value={filters.dateTo}\r\n//               onChange={(e) => setFilters({ ...filters, dateTo: e.target.value })}\r\n//               className=\"px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\r\n//               placeholder=\"To\"\r\n//             />\r\n//           </div>\r\n\r\n//           {/* Account Filter */}\r\n//           <div className=\"relative\">\r\n//             <Filter className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" size={16} />\r\n//             <select\r\n//               value={filters.accountId}\r\n//               onChange={(e) => setFilters({ ...filters, accountId: e.target.value })}\r\n//               className=\"pl-10 pr-8 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\r\n//             >\r\n//               <option value=\"\">All Accounts</option>\r\n//               {accounts.map(account => (\r\n//                 <option key={account.id} value={account.id}>\r\n//                   {account.code} - {account.name}\r\n//                 </option>\r\n//               ))}\r\n//             </select>\r\n//           </div>\r\n\r\n//           {/* Transaction Type Filter */}\r\n//           <select\r\n//             value={filters.transactionType}\r\n//             onChange={(e) => setFilters({ ...filters, transactionType: e.target.value })}\r\n//             className=\"px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\r\n//           >\r\n//             <option value=\"all\">All Types</option>\r\n//             <option value=\"automatic\">POS Sales</option>\r\n//             <option value=\"manual\">Manual</option>\r\n//           </select>\r\n\r\n//           {/* Search */}\r\n//           <div className=\"relative\">\r\n//             <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" size={16} />\r\n//             <input\r\n//               type=\"text\"\r\n//               placeholder=\"Search entries...\"\r\n//               value={filters.searchTerm}\r\n//               onChange={(e) => setFilters({ ...filters, searchTerm: e.target.value })}\r\n//               className=\"pl-10 pr-4 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\r\n//             />\r\n//           </div>\r\n//         </div>\r\n\r\n//         <div className=\"flex space-x-3\">\r\n//           <button\r\n//             onClick={loadJournalEntriesFromAPI}\r\n//             disabled={loading}\r\n//             className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center space-x-2 disabled:bg-gray-400\"\r\n//           >\r\n//             {loading ? <RefreshCw className=\"animate-spin\" size={16} /> : <RefreshCw size={16} />}\r\n//             <span>Refresh from API</span>\r\n//           </button>\r\n//           <button\r\n//             onClick={() => setIsAddingEntry(true)}\r\n//             className=\"px-4 py-2 bg-emerald-600 text-white rounded-lg hover:bg-emerald-700 flex items-center space-x-2\"\r\n//           >\r\n//             <Plus size={16} />\r\n//             <span>Add Entry</span>\r\n//           </button>\r\n//           <button\r\n//             onClick={generateTrialBalance}\r\n//             className=\"px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 flex items-center space-x-2\"\r\n//           >\r\n//             <FileText size={16} />\r\n//             <span>Trial Balance</span>\r\n//           </button>\r\n//         </div>\r\n//       </div>\r\n\r\n//       {/* Journal Entry Form */}\r\n//       {isAddingEntry && (\r\n//         <div className=\"mb-8 p-6 bg-gray-50 rounded-lg border\">\r\n//           <h3 className=\"text-lg font-semibold mb-4\">Add Manual Journal Entry</h3>\r\n          \r\n//           <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\r\n//             <div>\r\n//               <label className=\"block text-sm font-medium text-gray-700 mb-1\">Date *</label>\r\n//               <input\r\n//                 type=\"date\"\r\n//                 value={newEntry.date}\r\n//                 onChange={(e) => setNewEntry({ ...newEntry, date: e.target.value })}\r\n//                 className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\r\n//               />\r\n//             </div>\r\n//             <div>\r\n//               <label className=\"block text-sm font-medium text-gray-700 mb-1\">Description *</label>\r\n//               <input\r\n//                 type=\"text\"\r\n//                 value={newEntry.description}\r\n//                 onChange={(e) => setNewEntry({ ...newEntry, description: e.target.value })}\r\n//                 placeholder=\"Enter description\"\r\n//                 className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\r\n//               />\r\n//             </div>\r\n//             <div>\r\n//               <label className=\"block text-sm font-medium text-gray-700 mb-1\">Reference</label>\r\n//               <input\r\n//                 type=\"text\"\r\n//                 value={newEntry.reference}\r\n//                 onChange={(e) => setNewEntry({ ...newEntry, reference: e.target.value })}\r\n//                 placeholder=\"Reference number\"\r\n//                 className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\r\n//               />\r\n//             </div>\r\n//           </div>\r\n\r\n//           {/* Entry Lines */}\r\n//           <div className=\"mb-4\">\r\n//             <label className=\"block text-sm font-medium text-gray-700 mb-2\">Journal Entry Lines</label>\r\n//             <div className=\"space-y-3\">\r\n//               {newEntry.entries.map((entry, index) => (\r\n//                 <div key={index} className=\"grid grid-cols-12 gap-2 items-center bg-white p-3 rounded border\">\r\n//                   <div className=\"col-span-4\">\r\n//                     <select\r\n//                       value={entry.accountId}\r\n//                       onChange={(e) => updateEntryLine(index, 'accountId', e.target.value)}\r\n//                       className=\"w-full px-2 py-1 border border-gray-300 rounded text-sm focus:ring-2 focus:ring-emerald-500\"\r\n//                     >\r\n//                       <option value=\"\">Select Account</option>\r\n//                       {accounts.map(account => (\r\n//                         <option key={account.id} value={account.id}>\r\n//                           {account.code} - {account.name}\r\n//                         </option>\r\n//                       ))}\r\n//                     </select>\r\n//                   </div>\r\n//                   <div className=\"col-span-3\">\r\n//                     <input\r\n//                       type=\"text\"\r\n//                       value={entry.description}\r\n//                       onChange={(e) => updateEntryLine(index, 'description', e.target.value)}\r\n//                       placeholder=\"Description\"\r\n//                       className=\"w-full px-2 py-1 border border-gray-300 rounded text-sm focus:ring-2 focus:ring-emerald-500\"\r\n//                     />\r\n//                   </div>\r\n//                   <div className=\"col-span-2\">\r\n//                     <input\r\n//                       type=\"number\"\r\n//                       step=\"0.01\"\r\n//                       value={entry.debit}\r\n//                       onChange={(e) => updateEntryLine(index, 'debit', e.target.value)}\r\n//                       placeholder=\"Debit\"\r\n//                       className=\"w-full px-2 py-1 border border-gray-300 rounded text-sm focus:ring-2 focus:ring-emerald-500\"\r\n//                     />\r\n//                   </div>\r\n//                   <div className=\"col-span-2\">\r\n//                     <input\r\n//                       type=\"number\"\r\n//                       step=\"0.01\"\r\n//                       value={entry.credit}\r\n//                       onChange={(e) => updateEntryLine(index, 'credit', e.target.value)}\r\n//                       placeholder=\"Credit\"\r\n//                       className=\"w-full px-2 py-1 border border-gray-300 rounded text-sm focus:ring-2 focus:ring-emerald-500\"\r\n//                     />\r\n//                   </div>\r\n//                   <div className=\"col-span-1\">\r\n//                     {newEntry.entries.length > 2 && (\r\n//                       <button\r\n//                         onClick={() => removeEntryLine(index)}\r\n//                         className=\"p-1 text-red-600 hover:bg-red-100 rounded\"\r\n//                       >\r\n//                         <Trash2 size={14} />\r\n//                       </button>\r\n//                     )}\r\n//                   </div>\r\n//                 </div>\r\n//               ))}\r\n//             </div>\r\n\r\n//             <div className=\"flex justify-between items-center mt-3\">\r\n//               <button\r\n//                 onClick={addEntryLine}\r\n//                 className=\"px-3 py-1 text-sm bg-gray-200 text-gray-700 rounded hover:bg-gray-300 flex items-center space-x-1\"\r\n//               >\r\n//                 <Plus size={14} />\r\n//                 <span>Add Line</span>\r\n//               </button>\r\n\r\n//               <div className=\"flex items-center space-x-4\">\r\n//                 <div className=\"text-sm\">\r\n//                   <span className=\"font-medium\">Total Debit: ${totalDebit.toFixed(2)}</span>\r\n//                   <span className=\"mx-2\">|</span>\r\n//                   <span className=\"font-medium\">Total Credit: ${totalCredit.toFixed(2)}</span>\r\n//                 </div>\r\n//                 {entryIsBalanced ? (\r\n//                   <div className=\"flex items-center text-green-600\">\r\n//                     <CheckCircle size={16} className=\"mr-1\" />\r\n//                     <span className=\"text-sm\">Balanced</span>\r\n//                   </div>\r\n//                 ) : (\r\n//                   <div className=\"flex items-center text-red-600\">\r\n//                     <AlertCircle size={16} className=\"mr-1\" />\r\n//                     <span className=\"text-sm\">Not Balanced</span>\r\n//                   </div>\r\n//                 )}\r\n//               </div>\r\n//             </div>\r\n//           </div>\r\n\r\n//           <div className=\"flex space-x-3\">\r\n//             <button\r\n//               onClick={saveJournalEntry}\r\n//               disabled={!entryIsBalanced}\r\n//               className=\"px-4 py-2 bg-emerald-600 text-white rounded-lg hover:bg-emerald-700 disabled:bg-gray-400 flex items-center space-x-2\"\r\n//             >\r\n//               <Save size={16} />\r\n//               <span>Save Entry</span>\r\n//             </button>\r\n//             <button\r\n//               onClick={() => setIsAddingEntry(false)}\r\n//               className=\"px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 flex items-center space-x-2\"\r\n//             >\r\n//               <X size={16} />\r\n//               <span>Cancel</span>\r\n//             </button>\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n\r\n//       {/* Journal Entries Table */}\r\n//       <div className=\"bg-white border border-gray-200 rounded-lg overflow-hidden\">\r\n//         <div className=\"px-6 py-4 border-b border-gray-200\">\r\n//           <h2 className=\"text-lg font-semibold text-gray-900\">Journal Entries</h2>\r\n//           <p className=\"text-sm text-gray-600 mt-1\">\r\n//             Showing {filteredEntries.length} of {journalEntries.length} entries\r\n//           </p>\r\n//         </div>\r\n\r\n//         <div className=\"overflow-x-auto\">\r\n//           <table className=\"w-full\">\r\n//             <thead className=\"bg-gray-50\">\r\n//               <tr>\r\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                   Entry ID\r\n//                 </th>\r\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                   Date\r\n//                 </th>\r\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                   Description\r\n//                 </th>\r\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                   Reference\r\n//                 </th>\r\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                   Source\r\n//                 </th>\r\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                   Amount\r\n//                 </th>\r\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                   Status\r\n//                 </th>\r\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                   Actions\r\n//                 </th>\r\n//               </tr>\r\n//             </thead>\r\n//             <tbody className=\"bg-white divide-y divide-gray-200\">\r\n//               {filteredEntries.map((entry) => (\r\n//                 <tr key={entry.id} className=\"hover:bg-gray-50\">\r\n//                   <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\r\n//                     {entry.id}\r\n//                   </td>\r\n//                   <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\r\n//                     {entry.date}\r\n//                   </td>\r\n//                   <td className=\"px-6 py-4 text-sm text-gray-900 max-w-xs truncate\">\r\n//                     {entry.description}\r\n//                   </td>\r\n//                   <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\r\n//                     {entry.reference}\r\n//                   </td>\r\n//                   <td className=\"px-6 py-4 whitespace-nowrap\">\r\n//                     <span className={`px-2 py-1 text-xs font-medium rounded-full ${\r\n//                       entry.source === 'POS Sales' ? 'bg-green-100 text-green-800' : \r\n//                       entry.source === 'Manual' ? 'bg-orange-100 text-orange-800' :\r\n//                       'bg-blue-100 text-blue-800'\r\n//                     }`}>\r\n//                       {entry.source}\r\n//                     </span>\r\n//                   </td>\r\n//                   <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\r\n//                     ${entry.totalDebit.toFixed(2)}\r\n//                   </td>\r\n//                   <td className=\"px-6 py-4 whitespace-nowrap\">\r\n//                     <span className={`px-2 py-1 text-xs font-medium rounded-full ${\r\n//                       entry.status === 'posted' ? 'bg-blue-100 text-blue-800' : 'bg-yellow-100 text-yellow-800'\r\n//                     }`}>\r\n//                       {entry.status}\r\n//                     </span>\r\n//                   </td>\r\n//                   <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">\r\n//                     <button\r\n//                       onClick={() => setSelectedEntry(entry)}\r\n//                       className=\"text-emerald-600 hover:text-emerald-900 mr-3\"\r\n//                     >\r\n//                       <Eye size={16} />\r\n//                     </button>\r\n//                   </td>\r\n//                 </tr>\r\n//               ))}\r\n//             </tbody>\r\n//           </table>\r\n//         </div>\r\n//       </div>\r\n\r\n//       {/* Entry Details Modal */}\r\n//       {selectedEntry && (\r\n//         <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center p-4 z-50\">\r\n//           <div className=\"bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-y-auto\">\r\n//             <div className=\"px-6 py-4 border-b border-gray-200\">\r\n//               <div className=\"flex items-center justify-between\">\r\n//                 <h3 className=\"text-lg font-semibold text-gray-900\">\r\n//                   Journal Entry Details - {selectedEntry.id}\r\n//                 </h3>\r\n//                 <button\r\n//                   onClick={() => setSelectedEntry(null)}\r\n//                   className=\"text-gray-400 hover:text-gray-600\"\r\n//                 >\r\n//                   <X size={20} />\r\n//                 </button>\r\n//               </div>\r\n//             </div>\r\n            \r\n//             <div className=\"px-6 py-4\">\r\n//               {/* Entry Header */}\r\n//               <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-6\">\r\n//                 <div>\r\n//                   <label className=\"text-sm font-medium text-gray-500\">Date</label>\r\n//                   <p className=\"text-sm text-gray-900\">{selectedEntry.date}</p>\r\n//                 </div>\r\n//                 <div>\r\n//                   <label className=\"text-sm font-medium text-gray-500\">Reference</label>\r\n//                   <p className=\"text-sm text-gray-900\">{selectedEntry.reference}</p>\r\n//                 </div>\r\n//                 <div>\r\n//                   <label className=\"text-sm font-medium text-gray-500\">Description</label>\r\n//                   <p className=\"text-sm text-gray-900\">{selectedEntry.description}</p>\r\n//                 </div>\r\n//                 <div>\r\n//                   <label className=\"text-sm font-medium text-gray-500\">Source</label>\r\n//                   <span className={`px-2 py-1 text-xs font-medium rounded-full ${\r\n//                     selectedEntry.source === 'POS Sales' ? 'bg-green-100 text-green-800' : 'bg-orange-100 text-orange-800'\r\n//                   }`}>\r\n//                     {selectedEntry.source}\r\n//                   </span>\r\n//                 </div>\r\n//               </div>\r\n\r\n//               {/* Entry Lines */}\r\n//               <div className=\"mb-6\">\r\n//                 <h4 className=\"text-sm font-medium text-gray-700 mb-3\">Account Entries</h4>\r\n//                 <div className=\"overflow-x-auto\">\r\n//                   <table className=\"w-full border border-gray-200 rounded\">\r\n//                     <thead className=\"bg-gray-50\">\r\n//                       <tr>\r\n//                         <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500\">Account</th>\r\n//                         <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500\">Description</th>\r\n//                         <th className=\"px-4 py-2 text-right text-xs font-medium text-gray-500\">Debit</th>\r\n//                         <th className=\"px-4 py-2 text-right text-xs font-medium text-gray-500\">Credit</th>\r\n//                       </tr>\r\n//                     </thead>\r\n//                     <tbody className=\"divide-y divide-gray-200\">\r\n//                       {selectedEntry.entries.map((entryLine, index) => (\r\n//                         <tr key={index}>\r\n//                           <td className=\"px-4 py-2 text-sm text-gray-900\">\r\n//                             {getAccountName(entryLine.accountId)}\r\n//                           </td>\r\n//                           <td className=\"px-4 py-2 text-sm text-gray-600\">\r\n//                             {entryLine.description}\r\n//                           </td>\r\n//                           <td className=\"px-4 py-2 text-sm text-gray-900 text-right\">\r\n//                             {entryLine.debit > 0 ? `${entryLine.debit.toFixed(2)}` : '-'}\r\n//                           </td>\r\n//                           <td className=\"px-4 py-2 text-sm text-gray-900 text-right\">\r\n//                             {entryLine.credit > 0 ? `${entryLine.credit.toFixed(2)}` : '-'}\r\n//                           </td>\r\n//                         </tr>\r\n//                       ))}\r\n//                     </tbody>\r\n//                     <tfoot className=\"bg-gray-50\">\r\n//                       <tr>\r\n//                         <td colSpan=\"2\" className=\"px-4 py-2 text-sm font-medium text-gray-900\">\r\n//                           Totals:\r\n//                         </td>\r\n//                         <td className=\"px-4 py-2 text-sm font-bold text-gray-900 text-right\">\r\n//                           ${selectedEntry.totalDebit.toFixed(2)}\r\n//                         </td>\r\n//                         <td className=\"px-4 py-2 text-sm font-bold text-gray-900 text-right\">\r\n//                           ${selectedEntry.totalCredit.toFixed(2)}\r\n//                         </td>\r\n//                       </tr>\r\n//                     </tfoot>\r\n//                   </table>\r\n//                 </div>\r\n//               </div>\r\n\r\n//               {/* Original Order Info (if available) */}\r\n//               {selectedEntry.originalOrder && (\r\n//                 <div className=\"mb-6 p-4 bg-gray-50 rounded-lg\">\r\n//                   <h4 className=\"text-sm font-medium text-gray-700 mb-3\">Original Sales Order Details</h4>\r\n//                   <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\r\n//                     <div>\r\n//                       <span className=\"font-medium text-gray-500\">Order ID:</span>\r\n//                       <p className=\"text-gray-900\">{selectedEntry.originalOrder.orderId}</p>\r\n//                     </div>\r\n//                     <div>\r\n//                       <span className=\"font-medium text-gray-500\">Status:</span>\r\n//                       <p className=\"text-gray-900\">{selectedEntry.originalOrder.status}</p>\r\n//                     </div>\r\n//                     <div>\r\n//                       <span className=\"font-medium text-gray-500\">Payment Status:</span>\r\n//                       <p className=\"text-gray-900\">{selectedEntry.originalOrder.paid ? 'Paid' : 'Unpaid'}</p>\r\n//                     </div>\r\n//                     <div>\r\n//                       <span className=\"font-medium text-gray-500\">Fulfilled:</span>\r\n//                       <p className=\"text-gray-900\">{selectedEntry.originalOrder.fulfilled ? 'Yes' : 'No'}</p>\r\n//                     </div>\r\n//                   </div>\r\n                  \r\n//                   {/* Line Items */}\r\n//                   <div className=\"mt-4\">\r\n//                     <span className=\"font-medium text-gray-500\">Line Items:</span>\r\n//                     <div className=\"mt-2 space-y-2\">\r\n//                       {selectedEntry.originalOrder.lineItems.map((item, index) => (\r\n//                         <div key={index} className=\"text-sm bg-white p-2 rounded border\">\r\n//                           <span className=\"font-medium\">{item.productName}</span> - \r\n//                           Qty: {item.quantity}, Price: ${item.price}, Total: ${item.total}\r\n//                           {item.taxAmount > 0 && <span className=\"text-gray-500\"> (Tax: ${item.taxAmount})</span>}\r\n//                         </div>\r\n//                       ))}\r\n//                     </div>\r\n//                   </div>\r\n//                 </div>\r\n//               )}\r\n\r\n//               {/* Entry Metadata */}\r\n//               <div className=\"text-xs text-gray-500\">\r\n//                 <p>Created: {new Date(selectedEntry.createdAt).toLocaleString()}</p>\r\n//                 <p>Status: {selectedEntry.status}</p>\r\n//                 <p>Type: {selectedEntry.transactionType}</p>\r\n//               </div>\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n\r\n//       {/* Trial Balance Modal */}\r\n//       {showTrialBalance && (\r\n//         <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center p-4 z-50\">\r\n//           <div className=\"bg-white rounded-lg max-w-5xl w-full max-h-[90vh] overflow-y-auto\">\r\n//             <div className=\"px-6 py-4 border-b border-gray-200\">\r\n//               <div className=\"flex items-center justify-between\">\r\n//                 <h3 className=\"text-lg font-semibold text-gray-900\">\r\n//                   Trial Balance - As of {new Date().toLocaleDateString()}\r\n//                 </h3>\r\n//                 <div className=\"flex items-center space-x-2\">\r\n//                   <button\r\n//                     onClick={() => {\r\n//                       // Export functionality would go here\r\n//                       alert('Export functionality would be implemented here');\r\n//                     }}\r\n//                     className=\"px-3 py-1 bg-emerald-600 text-white rounded text-sm hover:bg-emerald-700 flex items-center space-x-1\"\r\n//                   >\r\n//                     <Download size={14} />\r\n//                     <span>Export</span>\r\n//                   </button>\r\n//                   <button\r\n//                     onClick={() => setShowTrialBalance(false)}\r\n//                     className=\"text-gray-400 hover:text-gray-600\"\r\n//                   >\r\n//                     <X size={20} />\r\n//                   </button>\r\n//                 </div>\r\n//               </div>\r\n//             </div>\r\n            \r\n//             <div className=\"px-6 py-4\">\r\n//               <div className=\"overflow-x-auto\">\r\n//                 <table className=\"w-full\">\r\n//                   <thead className=\"bg-gray-50\">\r\n//                     <tr>\r\n//                       <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                         Account Code\r\n//                       </th>\r\n//                       <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                         Account Name\r\n//                       </th>\r\n//                       <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                         Type\r\n//                       </th>\r\n//                       <th className=\"px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                         Debit Total\r\n//                       </th>\r\n//                       <th className=\"px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                         Credit Total\r\n//                       </th>\r\n//                       <th className=\"px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                         Balance\r\n//                       </th>\r\n//                     </tr>\r\n//                   </thead>\r\n//                   <tbody className=\"bg-white divide-y divide-gray-200\">\r\n//                     {trialBalance.map((account) => (\r\n//                       <tr key={account.accountId}>\r\n//                         <td className=\"px-4 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\r\n//                           {account.accountCode}\r\n//                         </td>\r\n//                         <td className=\"px-4 py-4 whitespace-nowrap text-sm text-gray-900\">\r\n//                           {account.accountName}\r\n//                         </td>\r\n//                         <td className=\"px-4 py-4 whitespace-nowrap\">\r\n//                           <span className={`px-2 py-1 text-xs font-medium rounded-full ${\r\n//                             account.accountType === 'assets' ? 'bg-green-100 text-green-800' :\r\n//                             account.accountType === 'liabilities' ? 'bg-red-100 text-red-800' :\r\n//                             account.accountType === 'equity' ? 'bg-blue-100 text-blue-800' :\r\n//                             account.accountType === 'revenue' ? 'bg-purple-100 text-purple-800' :\r\n//                             'bg-orange-100 text-orange-800'\r\n//                           }`}>\r\n//                             {account.accountType}\r\n//                           </span>\r\n//                         </td>\r\n//                         <td className=\"px-4 py-4 whitespace-nowrap text-sm text-gray-900 text-right\">\r\n//                           ${account.debit.toFixed(2)}\r\n//                         </td>\r\n//                         <td className=\"px-4 py-4 whitespace-nowrap text-sm text-gray-900 text-right\">\r\n//                           ${account.credit.toFixed(2)}\r\n//                         </td>\r\n//                         <td className=\"px-4 py-4 whitespace-nowrap text-sm font-medium text-right\">\r\n//                           <span className={account.balance >= 0 ? 'text-green-600' : 'text-red-600'}>\r\n//                             ${Math.abs(account.balance).toFixed(2)}\r\n//                             {account.balance < 0 && ' (CR)'}\r\n//                           </span>\r\n//                         </td>\r\n//                       </tr>\r\n//                     ))}\r\n//                   </tbody>\r\n//                   <tfoot className=\"bg-gray-50\">\r\n//                     <tr>\r\n//                       <td colSpan=\"3\" className=\"px-4 py-3 text-sm font-bold text-gray-900\">\r\n//                         TOTALS:\r\n//                       </td>\r\n//                       <td className=\"px-4 py-3 text-sm font-bold text-gray-900 text-right\">\r\n//                         ${trialBalance.reduce((sum, acc) => sum + acc.debit, 0).toFixed(2)}\r\n//                       </td>\r\n//                       <td className=\"px-4 py-3 text-sm font-bold text-gray-900 text-right\">\r\n//                         ${trialBalance.reduce((sum, acc) => sum + acc.credit, 0).toFixed(2)}\r\n//                       </td>\r\n//                       <td className=\"px-4 py-3 text-sm font-bold text-gray-900 text-right\">\r\n//                         ${Math.abs(trialBalance.reduce((sum, acc) => sum + acc.balance, 0)).toFixed(2)}\r\n//                       </td>\r\n//                     </tr>\r\n//                   </tfoot>\r\n//                 </table>\r\n//               </div>\r\n              \r\n//               {/* Trial Balance Validation */}\r\n//               <div className=\"mt-4 p-4 bg-green-50 border border-green-200 rounded-lg\">\r\n//                 <div className=\"flex items-center\">\r\n//                   <CheckCircle className=\"text-green-600 mr-2\" size={20} />\r\n//                   <div>\r\n//                     <h4 className=\"font-medium text-green-800\">Trial Balance is Balanced</h4>\r\n//                     <p className=\"text-sm text-green-700\">\r\n//                       Total Debits = Total Credits = ${trialBalance.reduce((sum, acc) => sum + acc.debit, 0).toFixed(2)}\r\n//                     </p>\r\n//                   </div>\r\n//                 </div>\r\n//               </div>\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n\r\n//       {/* Integration Status */}\r\n//       <div className=\"mt-8 grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n//         <div className=\"p-4 bg-green-50 border border-green-200 rounded-lg\">\r\n//           <div className=\"flex items-center mb-2\">\r\n//             <CheckCircle className=\"text-green-600 mr-2\" size={16} />\r\n//             <h4 className=\"font-medium text-green-800\">POS API Integration</h4>\r\n//           </div>\r\n//           <p className=\"text-sm text-green-700\">\r\n//             Sales orders automatically create journal entries from live API data\r\n//           </p>\r\n//         </div>\r\n\r\n//         <div className=\"p-4 bg-blue-50 border border-blue-200 rounded-lg\">\r\n//           <div className=\"flex items-center mb-2\">\r\n//             <RefreshCw className=\"text-blue-600 mr-2\" size={16} />\r\n//             <h4 className=\"font-medium text-blue-800\">Real-time Sync</h4>\r\n//           </div>\r\n//           <p className=\"text-sm text-blue-700\">\r\n//             Journal entries updated automatically with each sales transaction\r\n//           </p>\r\n//         </div>\r\n\r\n//         <div className=\"p-4 bg-orange-50 border border-orange-200 rounded-lg\">\r\n//           <div className=\"flex items-center mb-2\">\r\n//             <FileText className=\"text-orange-600 mr-2\" size={16} />\r\n//             <h4 className=\"font-medium text-orange-800\">Manual Entries</h4>\r\n//           </div>\r\n//           <p className=\"text-sm text-orange-700\">\r\n//             Add adjustments and corrections with full double-entry validation\r\n//           </p>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default GeneralLedger;\r\n\r\n//CORRECT CODE\r\n// import React, { useState, useEffect } from 'react';\r\n// import { \r\n//   Book, \r\n//   Plus, \r\n//   Filter, \r\n//   Search, \r\n//   Calendar, \r\n//   FileText, \r\n//   Edit, \r\n//   Trash2, \r\n//   Save, \r\n//   X, \r\n//   AlertCircle,\r\n//   CheckCircle,\r\n//   DollarSign,\r\n//   TrendingUp,\r\n//   Eye,\r\n//   Download,\r\n//   RefreshCw\r\n// } from 'lucide-react';\r\n\r\n// const GeneralLedger = () => {\r\n//   const [journalEntries, setJournalEntries] = useState([]);\r\n//   const [accounts, setAccounts] = useState([]);\r\n//   const [filteredEntries, setFilteredEntries] = useState([]);\r\n//   const [selectedEntry, setSelectedEntry] = useState(null);\r\n//   const [isAddingEntry, setIsAddingEntry] = useState(false);\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [filters, setFilters] = useState({\r\n//     dateFrom: '',\r\n//     dateTo: '',\r\n//     accountId: '',\r\n//     transactionType: 'all',\r\n//     searchTerm: ''\r\n//   });\r\n//   const [trialBalance, setTrialBalance] = useState([]);\r\n//   const [showTrialBalance, setShowTrialBalance] = useState(false);\r\n//   const [newEntry, setNewEntry] = useState({\r\n//     date: new Date().toISOString().split('T')[0],\r\n//     description: '',\r\n//     reference: '',\r\n//     entries: [\r\n//       { accountId: '', debit: 0, credit: 0, description: '' },\r\n//       { accountId: '', debit: 0, credit: 0, description: '' }\r\n//     ]\r\n//   });\r\n\r\n//   // Chart of Accounts\r\n//   const chartOfAccounts = [\r\n//     { id: '1111', code: '1111', name: 'Petty Cash', type: 'assets' },\r\n//     { id: '1112', code: '1112', name: 'Bank - Main Account', type: 'assets' },\r\n//     { id: '1120', code: '1120', name: 'Accounts Receivable', type: 'assets' },\r\n//     { id: '1130', code: '1130', name: 'Inventory', type: 'assets' },\r\n//     { id: '2110', code: '2110', name: 'Accounts Payable', type: 'liabilities' },\r\n//     { id: '2130', code: '2130', name: 'Sales Tax Payable', type: 'liabilities' },\r\n//     { id: '4100', code: '4100', name: 'Sales Revenue', type: 'revenue' },\r\n//     { id: '4110', code: '4110', name: 'Electronics Sales', type: 'revenue' },\r\n//     { id: '5100', code: '5100', name: 'Cost of Goods Sold', type: 'expenses' },\r\n//     { id: '5200', code: '5200', name: 'Purchase Expenses', type: 'expenses' }\r\n//   ];\r\n\r\n//   // API Configuration - This is already correct\r\n//   const API_BASE_URL = 'https://api-pos.hulmsolutions.com/POS/accounting2/31fc8df0-61db-41e5-bb67-070fde367ea1/orders?start=0&size=200';\r\n//   const API_BASE_URL_CHARTS_OF_ACCOUNTS = 'http://localhost:8080/api/accounts';\r\n\r\n//   useEffect(() => {\r\n//     setAccounts(chartOfAccounts);\r\n//     loadJournalEntriesFromAPI();\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     filterEntries();\r\n//   }, [journalEntries, filters]);\r\n\r\n//   async function fetchOrderData() {\r\n//     try {\r\n//       const response = await fetch(API_BASE_URL, {\r\n//         method: 'GET',\r\n//         headers: {\r\n//           'Authorization': 'Bearer Hamid',\r\n//           'Content-Type': 'application/json',\r\n//         },\r\n//       });\r\n      \r\n//       if (!response.ok) {\r\n//         throw new Error(`API request failed with status ${response.status}`);\r\n//       }\r\n      \r\n//       const data = await response.json();\r\n//       return data;\r\n//     } catch (error) {\r\n//       console.error('Error fetching order data:', error);\r\n//       // Implement notification system for integration errors\r\n//       return null;\r\n//     }\r\n//   }\r\n\r\n//   // Fetch Sales Orders from API and convert to Journal Entries\r\n//   const loadJournalEntriesFromAPI = async () => {\r\n//     setLoading(true);\r\n//     try {\r\n//       // FIXED: Using the correct API_BASE_URL directly instead of appending \"/orders?start=0&size=200\"\r\n//       const salesOrders = await fetchOrderData();\r\n      \r\n//       if (!salesOrders) {\r\n//         throw new Error('Failed to fetch sales orders');\r\n//       }\r\n      \r\n//       // Filter only PAID and FULFILLED orders\r\n//       const completedOrders = salesOrders.filter(order => \r\n//         order.paid === true && order.fulfilled === true && order.status === 'Closed'\r\n//       );\r\n      \r\n//       // Convert completed sales orders to journal entries\r\n//       const journalEntriesFromSales = completedOrders.map(order => convertSalesOrderToJournalEntry(order))\r\n//         .filter(entry => entry !== null); // Filter out any null entries\r\n      \r\n//       // Load any manual journal entries from localStorage\r\n//       const manualEntries = JSON.parse(localStorage.getItem('manualJournalEntries') || '[]');\r\n      \r\n//       // Combine both types of entries\r\n//       const allEntries = [...journalEntriesFromSales, ...manualEntries];\r\n      \r\n//       setJournalEntries(allEntries);\r\n//       console.log('Loaded completed orders:', completedOrders.length, 'Total journal entries:', allEntries.length);\r\n//     } catch (error) {\r\n//       console.error('Error loading sales orders:', error);\r\n//       // Fallback to sample data if API fails\r\n//       loadSampleJournalEntries();\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   // Convert Sales Order to Journal Entry\r\n//   const convertSalesOrderToJournalEntry = (order) => {\r\n//     const entries = [];\r\n    \r\n//     // Use actual values from API (amounts are in PKR, not USD)\r\n//     const subTotal = parseFloat(order.subTotal) || 0;\r\n//     const taxAmount = parseFloat(order.taxAmount) || 0;\r\n//     const total = parseFloat(order.total) || 0;\r\n    \r\n//     // Only process PAID and FULFILLED orders\r\n//     if (!order.paid || !order.fulfilled || order.status !== 'Closed') {\r\n//       return null; // Skip incomplete orders\r\n//     }\r\n    \r\n//     // Cash/Bank Account (Debit) - Total amount received\r\n//     entries.push({\r\n//       accountId: '1111', // Petty Cash (assume cash payment)\r\n//       accountName: 'Petty Cash',\r\n//       debit: total,\r\n//       credit: 0,\r\n//       description: `Cash received from Order #${order.orderId} - ${order.lineItems.map(item => item.productName).join(', ')}`\r\n//     });\r\n\r\n//     // Sales Revenue (Credit) - Subtotal\r\n//     if (subTotal > 0) {\r\n//       entries.push({\r\n//         accountId: '4110', // Electronics Sales\r\n//         accountName: 'Electronics Sales',\r\n//         debit: 0,\r\n//         credit: subTotal,\r\n//         description: `Revenue from Order #${order.orderId}`\r\n//       });\r\n//     }\r\n\r\n//     // Sales Tax Payable (Credit) - Tax amount\r\n//     if (taxAmount > 0) {\r\n//       entries.push({\r\n//         accountId: '2130',\r\n//         accountName: 'Sales Tax Payable',\r\n//         debit: 0,\r\n//         credit: taxAmount,\r\n//         description: `${order.taxRate}% tax collected on Order #${order.orderId}`\r\n//       });\r\n//     }\r\n\r\n//     // Cost of Goods Sold and Inventory reduction (only for fulfilled items)\r\n//     let totalCOGS = 0;\r\n//     order.lineItems.forEach(item => {\r\n//       if (item.fulfilled && item.status === 'Fulfilled') {\r\n//         const costPrice = parseFloat(item.costPrice) || 0;\r\n//         const quantity = parseFloat(item.quantity) || 0;\r\n//         const itemCOGS = costPrice * quantity;\r\n//         totalCOGS += itemCOGS;\r\n//       }\r\n//     });\r\n\r\n//     if (totalCOGS > 0) {\r\n//       // Cost of Goods Sold (Debit)\r\n//       entries.push({\r\n//         accountId: '5100',\r\n//         accountName: 'Cost of Goods Sold',\r\n//         debit: totalCOGS,\r\n//         credit: 0,\r\n//         description: `COGS for Order #${order.orderId}`\r\n//       });\r\n\r\n//       // Inventory (Credit)\r\n//       entries.push({\r\n//         accountId: '1130',\r\n//         accountName: 'Inventory',\r\n//         debit: 0,\r\n//         credit: totalCOGS,\r\n//         description: `Inventory reduction - Order #${order.orderId}`\r\n//       });\r\n//     }\r\n\r\n//     // Calculate totals\r\n//     const totalDebit = entries.reduce((sum, entry) => sum + entry.debit, 0);\r\n//     const totalCredit = entries.reduce((sum, entry) => sum + entry.credit, 0);\r\n\r\n//     return {\r\n//       id: `JE-ORDER-${order.orderId}`,\r\n//       date: formatDateFromCreatedAt(order.createdAt),\r\n//       description: `Sales Order #${order.orderId} - ${order.lineItems.map(item => `${item.productName} (${item.quantity})`).join(', ')}`,\r\n//       reference: `ORDER-${order.orderId}`,\r\n//       transactionType: 'automatic',\r\n//       source: 'POS Sales',\r\n//       status: 'posted',\r\n//       entries: entries,\r\n//       totalDebit: Math.round(totalDebit * 100) / 100,\r\n//       totalCredit: Math.round(totalCredit * 100) / 100,\r\n//       createdAt: order.createdAt,\r\n//       originalOrder: order // Keep reference to original order\r\n//     };\r\n//   };\r\n\r\n//   // Format date from API format (2025.08.18.10.08.54.569) to YYYY-MM-DD\r\n//   const formatDateFromCreatedAt = (createdAt) => {\r\n//     try {\r\n//       const parts = createdAt.split('.');\r\n//       if (parts.length >= 3) {\r\n//         return `${parts[0]}-${parts[1].padStart(2, '0')}-${parts[2].padStart(2, '0')}`;\r\n//       }\r\n//       return new Date().toISOString().split('T')[0];\r\n//     } catch (error) {\r\n//       return new Date().toISOString().split('T')[0];\r\n//     }\r\n//   };\r\n\r\n//   // Fallback sample data\r\n//   const loadSampleJournalEntries = () => {\r\n//     const sampleEntries = [\r\n//       {\r\n//         id: 'JE001',\r\n//         date: '2025-08-18',\r\n//         description: 'Sample POS Sale - Medical products',\r\n//         reference: 'POS001',\r\n//         transactionType: 'automatic',\r\n//         source: 'POS',\r\n//         status: 'posted',\r\n//         entries: [\r\n//           { accountId: '1111', accountName: 'Petty Cash', debit: 60.50, credit: 0, description: 'Cash received from customer' },\r\n//           { accountId: '4100', accountName: 'Sales Revenue', debit: 0, credit: 55.00, description: 'Revenue from medical products' },\r\n//           { accountId: '2130', accountName: 'Sales Tax Payable', debit: 0, credit: 5.50, description: 'Sales tax collected' }\r\n//         ],\r\n//         totalDebit: 60.50,\r\n//         totalCredit: 60.50,\r\n//         createdAt: '2025-08-18T10:30:00Z'\r\n//       }\r\n//     ];\r\n//     setJournalEntries(sampleEntries);\r\n//   };\r\n\r\n//   const filterEntries = () => {\r\n//     let filtered = [...journalEntries];\r\n\r\n//     if (filters.dateFrom) {\r\n//       filtered = filtered.filter(entry => entry.date >= filters.dateFrom);\r\n//     }\r\n//     if (filters.dateTo) {\r\n//       filtered = filtered.filter(entry => entry.date <= filters.dateTo);\r\n//     }\r\n//     if (filters.accountId) {\r\n//       filtered = filtered.filter(entry => \r\n//         entry.entries.some(e => e.accountId === filters.accountId)\r\n//       );\r\n//     }\r\n//     if (filters.transactionType !== 'all') {\r\n//       filtered = filtered.filter(entry => entry.transactionType === filters.transactionType);\r\n//     }\r\n//     if (filters.searchTerm) {\r\n//       const term = filters.searchTerm.toLowerCase();\r\n//       filtered = filtered.filter(entry => \r\n//         entry.description.toLowerCase().includes(term) ||\r\n//         entry.reference.toLowerCase().includes(term) ||\r\n//         entry.entries.some(e => e.description.toLowerCase().includes(term))\r\n//       );\r\n//     }\r\n\r\n//     setFilteredEntries(filtered);\r\n//   };\r\n\r\n//   const generateTrialBalance = () => {\r\n//     const balances = {};\r\n    \r\n//     // Initialize all accounts\r\n//     chartOfAccounts.forEach(account => {\r\n//       balances[account.id] = {\r\n//         accountId: account.id,\r\n//         accountCode: account.code,\r\n//         accountName: account.name,\r\n//         accountType: account.type,\r\n//         debit: 0,\r\n//         credit: 0,\r\n//         balance: 0\r\n//       };\r\n//     });\r\n\r\n//     // Calculate balances from journal entries\r\n//     journalEntries.forEach(entry => {\r\n//       if (entry.status === 'posted') {\r\n//         entry.entries.forEach(entryLine => {\r\n//           if (balances[entryLine.accountId]) {\r\n//             balances[entryLine.accountId].debit += entryLine.debit;\r\n//             balances[entryLine.accountId].credit += entryLine.credit;\r\n//           }\r\n//         });\r\n//       }\r\n//     });\r\n\r\n//     // Calculate net balances\r\n//     Object.values(balances).forEach(account => {\r\n//       if (account.accountType === 'assets' || account.accountType === 'expenses') {\r\n//         account.balance = account.debit - account.credit;\r\n//       } else {\r\n//         account.balance = account.credit - account.debit;\r\n//       }\r\n//     });\r\n\r\n//     const trialBalanceData = Object.values(balances)\r\n//       .filter(account => account.debit !== 0 || account.credit !== 0)\r\n//       .sort((a, b) => a.accountCode.localeCompare(b.accountCode));\r\n\r\n//     setTrialBalance(trialBalanceData);\r\n//     setShowTrialBalance(true);\r\n//   };\r\n\r\n//   const addEntryLine = () => {\r\n//     setNewEntry({\r\n//       ...newEntry,\r\n//       entries: [...newEntry.entries, { accountId: '', debit: 0, credit: 0, description: '' }]\r\n//     });\r\n//   };\r\n\r\n//   const removeEntryLine = (index) => {\r\n//     if (newEntry.entries.length > 2) {\r\n//       const updatedEntries = newEntry.entries.filter((_, i) => i !== index);\r\n//       setNewEntry({ ...newEntry, entries: updatedEntries });\r\n//     }\r\n//   };\r\n\r\n//   const updateEntryLine = (index, field, value) => {\r\n//     const updatedEntries = [...newEntry.entries];\r\n//     updatedEntries[index] = { ...updatedEntries[index], [field]: value };\r\n//     setNewEntry({ ...newEntry, entries: updatedEntries });\r\n//   };\r\n\r\n//   const calculateTotals = (entries) => {\r\n//     const totalDebit = entries.reduce((sum, entry) => sum + (parseFloat(entry.debit) || 0), 0);\r\n//     const totalCredit = entries.reduce((sum, entry) => sum + (parseFloat(entry.credit) || 0), 0);\r\n//     return { totalDebit, totalCredit };\r\n//   };\r\n\r\n//   const isBalanced = (entries) => {\r\n//     const { totalDebit, totalCredit } = calculateTotals(entries);\r\n//     return Math.abs(totalDebit - totalCredit) < 0.01;\r\n//   };\r\n\r\n//   const saveJournalEntry = () => {\r\n//     if (!newEntry.description || !newEntry.entries.every(e => e.accountId)) {\r\n//       alert('Please fill in all required fields');\r\n//       return;\r\n//     }\r\n\r\n//     if (!isBalanced(newEntry.entries)) {\r\n//       alert('Journal entry must be balanced - total debits must equal total credits');\r\n//       return;\r\n//     }\r\n\r\n//     const { totalDebit, totalCredit } = calculateTotals(newEntry.entries);\r\n    \r\n//     // Add account names to entries\r\n//     const entriesWithNames = newEntry.entries.map(entry => ({\r\n//       ...entry,\r\n//       accountName: accounts.find(acc => acc.id === entry.accountId)?.name || '',\r\n//       debit: parseFloat(entry.debit) || 0,\r\n//       credit: parseFloat(entry.credit) || 0\r\n//     }));\r\n\r\n//     const journalEntry = {\r\n//       id: `JE-MANUAL-${Date.now()}`,\r\n//       date: newEntry.date,\r\n//       description: newEntry.description,\r\n//       reference: newEntry.reference || `MAN${Date.now()}`,\r\n//       transactionType: 'manual',\r\n//       source: 'Manual',\r\n//       status: 'posted',\r\n//       entries: entriesWithNames,\r\n//       totalDebit,\r\n//       totalCredit,\r\n//       createdAt: new Date().toISOString()\r\n//     };\r\n\r\n//     // Save manual entries to localStorage\r\n//     const existingManualEntries = JSON.parse(localStorage.getItem('manualJournalEntries') || '[]');\r\n//     const updatedManualEntries = [...existingManualEntries, journalEntry];\r\n//     localStorage.setItem('manualJournalEntries', JSON.stringify(updatedManualEntries));\r\n\r\n//     // Update state\r\n//     setJournalEntries([...journalEntries, journalEntry]);\r\n    \r\n//     // Reset form\r\n//     setNewEntry({\r\n//       date: new Date().toISOString().split('T')[0],\r\n//       description: '',\r\n//       reference: '',\r\n//       entries: [\r\n//         { accountId: '', debit: 0, credit: 0, description: '' },\r\n//         { accountId: '', debit: 0, credit: 0, description: '' }\r\n//       ]\r\n//     });\r\n//     setIsAddingEntry(false);\r\n//   };\r\n\r\n//   const getAccountName = (accountId) => {\r\n//     const account = accounts.find(acc => acc.id === accountId);\r\n//     return account ? `${account.code} - ${account.name}` : '';\r\n//   };\r\n\r\n//   const { totalDebit, totalCredit } = calculateTotals(newEntry.entries);\r\n//   const entryIsBalanced = isBalanced(newEntry.entries);\r\n\r\n//   return (\r\n//     <div className=\"max-w-7xl mx-auto p-6 bg-white\">\r\n//       {/* Header */}\r\n//       <div className=\"mb-8\">\r\n//         <h1 className=\"text-3xl font-bold text-gray-900 mb-2 flex items-center\">\r\n//           <Book className=\"mr-3 text-emerald-600\" />\r\n//           General Ledger\r\n//         </h1>\r\n//         <p className=\"text-gray-600\">Real-time transaction recording and journal entry management</p>\r\n//       </div>\r\n\r\n//       {/* Quick Stats */}\r\n//       <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\r\n//         <div className=\"bg-blue-50 p-4 rounded-lg border border-blue-200\">\r\n//           <div className=\"flex items-center justify-between\">\r\n//             <div>\r\n//               <p className=\"text-blue-600 text-sm font-medium\">Total Entries</p>\r\n//               <p className=\"text-2xl font-bold text-blue-900\">{journalEntries.length}</p>\r\n//             </div>\r\n//             <FileText className=\"text-blue-600\" size={24} />\r\n//           </div>\r\n//         </div>\r\n\r\n//         <div className=\"bg-green-50 p-4 rounded-lg border border-green-200\">\r\n//           <div className=\"flex items-center justify-between\">\r\n//             <div>\r\n//               <p className=\"text-green-600 text-sm font-medium\">POS Entries</p>\r\n//               <p className=\"text-2xl font-bold text-green-900\">\r\n//                 {journalEntries.filter(e => e.source === 'POS Sales').length}\r\n//               </p>\r\n//             </div>\r\n//             <TrendingUp className=\"text-green-600\" size={24} />\r\n//           </div>\r\n//         </div>\r\n\r\n//         <div className=\"bg-orange-50 p-4 rounded-lg border border-orange-200\">\r\n//           <div className=\"flex items-center justify-between\">\r\n//             <div>\r\n//               <p className=\"text-orange-600 text-sm font-medium\">Manual Entries</p>\r\n//               <p className=\"text-2xl font-bold text-orange-900\">\r\n//                 {journalEntries.filter(e => e.transactionType === 'manual').length}\r\n//               </p>\r\n//             </div>\r\n//             <Edit className=\"text-orange-600\" size={24} />\r\n//           </div>\r\n//         </div>\r\n\r\n//         <div className=\"bg-purple-50 p-4 rounded-lg border border-purple-200\">\r\n//           <div className=\"flex items-center justify-between\">\r\n//             <div>\r\n//               <p className=\"text-purple-600 text-sm font-medium\">Total Value</p>\r\n//               <p className=\"text-2xl font-bold text-purple-900\">\r\n//                 PKR {journalEntries.reduce((sum, entry) => sum + entry.totalDebit, 0).toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\r\n//               </p>\r\n//             </div>\r\n//             <DollarSign className=\"text-purple-600\" size={24} />\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n\r\n//       {/* Controls */}\r\n//       <div className=\"flex flex-wrap items-center justify-between gap-4 mb-6\">\r\n//         <div className=\"flex flex-wrap items-center gap-4\">\r\n//           {/* Date Filters */}\r\n//           <div className=\"flex items-center space-x-2\">\r\n//             <Calendar size={16} className=\"text-gray-400\" />\r\n//             <input\r\n//               type=\"date\"\r\n//               value={filters.dateFrom}\r\n//               onChange={(e) => setFilters({ ...filters, dateFrom: e.target.value })}\r\n//               className=\"px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\r\n//               placeholder=\"From\"\r\n//             />\r\n//             <span className=\"text-gray-500\">to</span>\r\n//             <input\r\n//               type=\"date\"\r\n//               value={filters.dateTo}\r\n//               onChange={(e) => setFilters({ ...filters, dateTo: e.target.value })}\r\n//               className=\"px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\r\n//               placeholder=\"To\"\r\n//             />\r\n//           </div>\r\n\r\n//           {/* Account Filter */}\r\n//           <div className=\"relative\">\r\n//             <Filter className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" size={16} />\r\n//             <select\r\n//               value={filters.accountId}\r\n//               onChange={(e) => setFilters({ ...filters, accountId: e.target.value })}\r\n//               className=\"pl-10 pr-8 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\r\n//             >\r\n//               <option value=\"\">All Accounts</option>\r\n//               {accounts.map(account => (\r\n//                 <option key={account.id} value={account.id}>\r\n//                   {account.code} - {account.name}\r\n//                 </option>\r\n//               ))}\r\n//             </select>\r\n//           </div>\r\n\r\n//           {/* Transaction Type Filter */}\r\n//           <select\r\n//             value={filters.transactionType}\r\n//             onChange={(e) => setFilters({ ...filters, transactionType: e.target.value })}\r\n//             className=\"px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\r\n//           >\r\n//             <option value=\"all\">All Types</option>\r\n//             <option value=\"automatic\">POS Sales</option>\r\n//             <option value=\"manual\">Manual</option>\r\n//           </select>\r\n\r\n//           {/* Search */}\r\n//           <div className=\"relative\">\r\n//             <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" size={16} />\r\n//             <input\r\n//               type=\"text\"\r\n//               placeholder=\"Search entries...\"\r\n//               value={filters.searchTerm}\r\n//               onChange={(e) => setFilters({ ...filters, searchTerm: e.target.value })}\r\n//               className=\"pl-10 pr-4 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\r\n//             />\r\n//           </div>\r\n//         </div>\r\n\r\n//         <div className=\"flex space-x-3\">\r\n//           <button\r\n//             onClick={loadJournalEntriesFromAPI}\r\n//             disabled={loading}\r\n//             className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center space-x-2 disabled:bg-gray-400\"\r\n//           >\r\n//             {loading ? <RefreshCw className=\"animate-spin\" size={16} /> : <RefreshCw size={16} />}\r\n//             <span>Refresh from API</span>\r\n//           </button>\r\n//           <button\r\n//             onClick={() => setIsAddingEntry(true)}\r\n//             className=\"px-4 py-2 bg-emerald-600 text-white rounded-lg hover:bg-emerald-700 flex items-center space-x-2\"\r\n//           >\r\n//             <Plus size={16} />\r\n//             <span>Add Entry</span>\r\n//           </button>\r\n//           <button\r\n//             onClick={generateTrialBalance}\r\n//             className=\"px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 flex items-center space-x-2\"\r\n//           >\r\n//             <FileText size={16} />\r\n//             <span>Trial Balance</span>\r\n//           </button>\r\n//         </div>\r\n//       </div>\r\n\r\n//       {/* Journal Entry Form */}\r\n//       {isAddingEntry && (\r\n//         <div className=\"mb-8 p-6 bg-gray-50 rounded-lg border\">\r\n//           <h3 className=\"text-lg font-semibold mb-4\">Add Manual Journal Entry</h3>\r\n          \r\n//           <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\r\n//             <div>\r\n//               <label className=\"block text-sm font-medium text-gray-700 mb-1\">Date *</label>\r\n//               <input\r\n//                 type=\"date\"\r\n//                 value={newEntry.date}\r\n//                 onChange={(e) => setNewEntry({ ...newEntry, date: e.target.value })}\r\n//                 className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\r\n//               />\r\n//             </div>\r\n//             <div>\r\n//               <label className=\"block text-sm font-medium text-gray-700 mb-1\">Description *</label>\r\n//               <input\r\n//                 type=\"text\"\r\n//                 value={newEntry.description}\r\n//                 onChange={(e) => setNewEntry({ ...newEntry, description: e.target.value })}\r\n//                 placeholder=\"Enter description\"\r\n//                 className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\r\n//               />\r\n//             </div>\r\n//             <div>\r\n//               <label className=\"block text-sm font-medium text-gray-700 mb-1\">Reference</label>\r\n//               <input\r\n//                 type=\"text\"\r\n//                 value={newEntry.reference}\r\n//                 onChange={(e) => setNewEntry({ ...newEntry, reference: e.target.value })}\r\n//                 placeholder=\"Reference number\"\r\n//                 className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\r\n//               />\r\n//             </div>\r\n//           </div>\r\n\r\n//           {/* Entry Lines */}\r\n//           <div className=\"mb-4\">\r\n//             <label className=\"block text-sm font-medium text-gray-700 mb-2\">Journal Entry Lines</label>\r\n//             <div className=\"space-y-3\">\r\n//               {newEntry.entries.map((entry, index) => (\r\n//                 <div key={index} className=\"grid grid-cols-12 gap-2 items-center bg-white p-3 rounded border\">\r\n//                   <div className=\"col-span-4\">\r\n//                     <select\r\n//                       value={entry.accountId}\r\n//                       onChange={(e) => updateEntryLine(index, 'accountId', e.target.value)}\r\n//                       className=\"w-full px-2 py-1 border border-gray-300 rounded text-sm focus:ring-2 focus:ring-emerald-500\"\r\n//                     >\r\n//                       <option value=\"\">Select Account</option>\r\n//                       {accounts.map(account => (\r\n//                         <option key={account.id} value={account.id}>\r\n//                           {account.code} - {account.name}\r\n//                         </option>\r\n//                       ))}\r\n//                     </select>\r\n//                   </div>\r\n//                   <div className=\"col-span-3\">\r\n//                     <input\r\n//                       type=\"text\"\r\n//                       value={entry.description}\r\n//                       onChange={(e) => updateEntryLine(index, 'description', e.target.value)}\r\n//                       placeholder=\"Description\"\r\n//                       className=\"w-full px-2 py-1 border border-gray-300 rounded text-sm focus:ring-2 focus:ring-emerald-500\"\r\n//                     />\r\n//                   </div>\r\n//                   <div className=\"col-span-2\">\r\n//                     <input\r\n//                       type=\"number\"\r\n//                       step=\"0.01\"\r\n//                       value={entry.debit}\r\n//                       onChange={(e) => updateEntryLine(index, 'debit', e.target.value)}\r\n//                       placeholder=\"Debit\"\r\n//                       className=\"w-full px-2 py-1 border border-gray-300 rounded text-sm focus:ring-2 focus:ring-emerald-500\"\r\n//                     />\r\n//                   </div>\r\n//                   <div className=\"col-span-2\">\r\n//                     <input\r\n//                       type=\"number\"\r\n//                       step=\"0.01\"\r\n//                       value={entry.credit}\r\n//                       onChange={(e) => updateEntryLine(index, 'credit', e.target.value)}\r\n//                       placeholder=\"Credit\"\r\n//                       className=\"w-full px-2 py-1 border border-gray-300 rounded text-sm focus:ring-2 focus:ring-emerald-500\"\r\n//                     />\r\n//                   </div>\r\n//                   <div className=\"col-span-1\">\r\n//                     {newEntry.entries.length > 2 && (\r\n//                       <button\r\n//                         onClick={() => removeEntryLine(index)}\r\n//                         className=\"p-1 text-red-600 hover:bg-red-100 rounded\"\r\n//                       >\r\n//                         <Trash2 size={14} />\r\n//                       </button>\r\n//                     )}\r\n//                   </div>\r\n//                 </div>\r\n//               ))}\r\n//             </div>\r\n\r\n//             <div className=\"flex justify-between items-center mt-3\">\r\n//               <button\r\n//                 onClick={addEntryLine}\r\n//                 className=\"px-3 py-1 text-sm bg-gray-200 text-gray-700 rounded hover:bg-gray-300 flex items-center space-x-1\"\r\n//               >\r\n//                 <Plus size={14} />\r\n//                 <span>Add Line</span>\r\n//               </button>\r\n\r\n//               <div className=\"flex items-center space-x-4\">\r\n//                 <div className=\"text-sm\">\r\n//                   <span className=\"font-medium\">Total Debit: PKR {totalDebit.toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}</span>\r\n//                   <span className=\"mx-2\">|</span>\r\n//                   <span className=\"font-medium\">Total Credit: PKR {totalCredit.toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}</span>\r\n//                 </div>\r\n//                 {entryIsBalanced ? (\r\n//                   <div className=\"flex items-center text-green-600\">\r\n//                     <CheckCircle size={16} className=\"mr-1\" />\r\n//                     <span className=\"text-sm\">Balanced</span>\r\n//                   </div>\r\n//                 ) : (\r\n//                   <div className=\"flex items-center text-red-600\">\r\n//                     <AlertCircle size={16} className=\"mr-1\" />\r\n//                     <span className=\"text-sm\">Not Balanced</span>\r\n//                   </div>\r\n//                 )}\r\n//               </div>\r\n//             </div>\r\n//           </div>\r\n\r\n//           <div className=\"flex space-x-3\">\r\n//             <button\r\n//               onClick={saveJournalEntry}\r\n//               disabled={!entryIsBalanced}\r\n//               className=\"px-4 py-2 bg-emerald-600 text-white rounded-lg hover:bg-emerald-700 disabled:bg-gray-400 flex items-center space-x-2\"\r\n//             >\r\n//               <Save size={16} />\r\n//               <span>Save Entry</span>\r\n//             </button>\r\n//             <button\r\n//               onClick={() => setIsAddingEntry(false)}\r\n//               className=\"px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 flex items-center space-x-2\"\r\n//             >\r\n//               <X size={16} />\r\n//               <span>Cancel</span>\r\n//             </button>\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n\r\n//       {/* Journal Entries Table */}\r\n//       <div className=\"bg-white border border-gray-200 rounded-lg overflow-hidden\">\r\n//         <div className=\"px-6 py-4 border-b border-gray-200\">\r\n//           <h2 className=\"text-lg font-semibold text-gray-900\">Journal Entries</h2>\r\n//           <p className=\"text-sm text-gray-600 mt-1\">\r\n//             Showing {filteredEntries.length} of {journalEntries.length} entries\r\n//           </p>\r\n//         </div>\r\n\r\n//         <div className=\"overflow-x-auto\">\r\n//           <table className=\"w-full\">\r\n//             <thead className=\"bg-gray-50\">\r\n//               <tr>\r\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                   Entry ID\r\n//                 </th>\r\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                   Date\r\n//                 </th>\r\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                   Description\r\n//                 </th>\r\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                   Reference\r\n//                 </th>\r\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                   Source\r\n//                 </th>\r\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                   Amount\r\n//                 </th>\r\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                   Status\r\n//                 </th>\r\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                   Actions\r\n//                 </th>\r\n//               </tr>\r\n//             </thead>\r\n//             <tbody className=\"bg-white divide-y divide-gray-200\">\r\n//               {filteredEntries.map((entry) => (\r\n//                 <tr key={entry.id} className=\"hover:bg-gray-50\">\r\n//                   <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\r\n//                     {entry.id}\r\n//                   </td>\r\n//                   <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\r\n//                     {entry.date}\r\n//                   </td>\r\n//                   <td className=\"px-6 py-4 text-sm text-gray-900 max-w-xs truncate\">\r\n//                     {entry.description}\r\n//                   </td>\r\n//                   <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\r\n//                     {entry.reference}\r\n//                   </td>\r\n//                   <td className=\"px-6 py-4 whitespace-nowrap\">\r\n//                     <span className={`px-2 py-1 text-xs font-medium rounded-full ${\r\n//                       entry.source === 'POS Sales' ? 'bg-green-100 text-green-800' : \r\n//                       entry.source === 'Manual' ? 'bg-orange-100 text-orange-800' :\r\n//                       'bg-blue-100 text-blue-800'\r\n//                     }`}>\r\n//                       {entry.source}\r\n//                     </span>\r\n//                   </td>\r\n//                   <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\r\n//                     PKR {entry.totalDebit.toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\r\n//                   </td>\r\n//                   <td className=\"px-6 py-4 whitespace-nowrap\">\r\n//                     <span className={`px-2 py-1 text-xs font-medium rounded-full ${\r\n//                       entry.status === 'posted' ? 'bg-blue-100 text-blue-800' : 'bg-yellow-100 text-yellow-800'\r\n//                     }`}>\r\n//                       {entry.status}\r\n//                     </span>\r\n//                   </td>\r\n//                   <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">\r\n//                     <button\r\n//                       onClick={() => setSelectedEntry(entry)}\r\n//                       className=\"text-emerald-600 hover:text-emerald-900 mr-3\"\r\n//                     >\r\n//                       <Eye size={16} />\r\n//                     </button>\r\n//                   </td>\r\n//                 </tr>\r\n//               ))}\r\n//             </tbody>\r\n//           </table>\r\n//         </div>\r\n//       </div>\r\n\r\n//       {/* Entry Details Modal */}\r\n//       {selectedEntry && (\r\n//         <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center p-4 z-50\">\r\n//           <div className=\"bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-y-auto\">\r\n//             <div className=\"px-6 py-4 border-b border-gray-200\">\r\n//               <div className=\"flex items-center justify-between\">\r\n//                 <h3 className=\"text-lg font-semibold text-gray-900\">\r\n//                   Journal Entry Details - {selectedEntry.id}\r\n//                 </h3>\r\n//                 <button\r\n//                   onClick={() => setSelectedEntry(null)}\r\n//                   className=\"text-gray-400 hover:text-gray-600\"\r\n//                 >\r\n//                   <X size={20} />\r\n//                 </button>\r\n//               </div>\r\n//             </div>\r\n            \r\n//             <div className=\"px-6 py-4\">\r\n//               {/* Entry Header */}\r\n//               <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-6\">\r\n//                 <div>\r\n//                   <label className=\"text-sm font-medium text-gray-500\">Date</label>\r\n//                   <p className=\"text-sm text-gray-900\">{selectedEntry.date}</p>\r\n//                 </div>\r\n//                 <div>\r\n//                   <label className=\"text-sm font-medium text-gray-500\">Reference</label>\r\n//                   <p className=\"text-sm text-gray-900\">{selectedEntry.reference}</p>\r\n//                 </div>\r\n//                 <div>\r\n//                   <label className=\"text-sm font-medium text-gray-500\">Description</label>\r\n//                   <p className=\"text-sm text-gray-900\">{selectedEntry.description}</p>\r\n//                 </div>\r\n//                 <div>\r\n//                   <label className=\"text-sm font-medium text-gray-500\">Source</label>\r\n//                   <span className={`px-2 py-1 text-xs font-medium rounded-full ${\r\n//                     selectedEntry.source === 'POS Sales' ? 'bg-green-100 text-green-800' : 'bg-orange-100 text-orange-800'\r\n//                   }`}>\r\n//                     {selectedEntry.source}\r\n//                   </span>\r\n//                 </div>\r\n//               </div>\r\n\r\n//               {/* Entry Lines */}\r\n//               <div className=\"mb-6\">\r\n//                 <h4 className=\"text-sm font-medium text-gray-700 mb-3\">Account Entries</h4>\r\n//                 <div className=\"overflow-x-auto\">\r\n//                   <table className=\"w-full border border-gray-200 rounded\">\r\n//                     <thead className=\"bg-gray-50\">\r\n//                       <tr>\r\n//                         <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500\">Account</th>\r\n//                         <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500\">Description</th>\r\n//                         <th className=\"px-4 py-2 text-right text-xs font-medium text-gray-500\">Debit</th>\r\n//                         <th className=\"px-4 py-2 text-right text-xs font-medium text-gray-500\">Credit</th>\r\n//                       </tr>\r\n//                     </thead>\r\n//                     <tbody className=\"divide-y divide-gray-200\">\r\n//                       {selectedEntry.entries.map((entryLine, index) => (\r\n//                         <tr key={index}>\r\n//                           <td className=\"px-4 py-2 text-sm text-gray-900\">\r\n//                             {getAccountName(entryLine.accountId)}\r\n//                           </td>\r\n//                           <td className=\"px-4 py-2 text-sm text-gray-600\">\r\n//                             {entryLine.description}\r\n//                           </td>\r\n//                           <td className=\"px-4 py-2 text-sm text-gray-900 text-right\">\r\n//                             {entryLine.debit > 0 ? `${entryLine.debit.toFixed(2)}` : '-'}\r\n//                           </td>\r\n//                           <td className=\"px-4 py-2 text-sm text-gray-900 text-right\">\r\n//                             {entryLine.credit > 0 ? `${entryLine.credit.toFixed(2)}` : '-'}\r\n//                           </td>\r\n//                         </tr>\r\n//                       ))}\r\n//                     </tbody>\r\n//                     <tfoot className=\"bg-gray-50\">\r\n//                       <tr>\r\n//                         <td colSpan=\"2\" className=\"px-4 py-2 text-sm font-medium text-gray-900\">\r\n//                           Totals:\r\n//                         </td>\r\n//                         <td className=\"px-4 py-2 text-sm font-bold text-gray-900 text-right\">\r\n//                           PKR {selectedEntry.totalDebit.toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\r\n//                         </td>\r\n//                         <td className=\"px-4 py-2 text-sm font-bold text-gray-900 text-right\">\r\n//                           PKR {selectedEntry.totalCredit.toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\r\n//                         </td>\r\n//                       </tr>\r\n//                     </tfoot>\r\n//                   </table>\r\n//                 </div>\r\n//               </div>\r\n\r\n//               {/* Original Order Info (if available) */}\r\n//               {selectedEntry.originalOrder && (\r\n//                 <div className=\"mb-6 p-4 bg-gray-50 rounded-lg\">\r\n//                   <h4 className=\"text-sm font-medium text-gray-700 mb-3\">Original Sales Order Details</h4>\r\n//                   <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\r\n//                     <div>\r\n//                       <span className=\"font-medium text-gray-500\">Order ID:</span>\r\n//                       <p className=\"text-gray-900\">{selectedEntry.originalOrder.orderId}</p>\r\n//                     </div>\r\n//                     <div>\r\n//                       <span className=\"font-medium text-gray-500\">Status:</span>\r\n//                       <p className=\"text-gray-900\">{selectedEntry.originalOrder.status}</p>\r\n//                     </div>\r\n//                     <div>\r\n//                       <span className=\"font-medium text-gray-500\">Payment Status:</span>\r\n//                       <p className=\"text-gray-900\">{selectedEntry.originalOrder.paid ? 'Paid' : 'Unpaid'}</p>\r\n//                     </div>\r\n//                     <div>\r\n//                       <span className=\"font-medium text-gray-500\">Fulfilled:</span>\r\n//                       <p className=\"text-gray-900\">{selectedEntry.originalOrder.fulfilled ? 'Yes' : 'No'}</p>\r\n//                     </div>\r\n//                   </div>\r\n                  \r\n//                   {/* Line Items */}\r\n//                   <div className=\"mt-4\">\r\n//                     <span className=\"font-medium text-gray-500\">Line Items:</span>\r\n//                     <div className=\"mt-2 space-y-2\">\r\n//                       {selectedEntry.originalOrder.lineItems.map((item, index) => (\r\n//                         <div key={index} className=\"text-sm bg-white p-2 rounded border\">\r\n//                           <span className=\"font-medium\">{item.productName}</span> - \r\n//                           Qty: {item.quantity}, Price: PKR {parseFloat(item.price).toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}, \r\n//                           Total: PKR {parseFloat(item.total).toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\r\n//                           {item.taxAmount > 0 && <span className=\"text-gray-500\"> (Tax: PKR {parseFloat(item.taxAmount).toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})})</span>}\r\n//                         </div>\r\n//                       ))}\r\n//                     </div>\r\n//                   </div>\r\n//                 </div>\r\n//               )}\r\n\r\n//               {/* Entry Metadata */}\r\n//               <div className=\"text-xs text-gray-500\">\r\n//                 <p>Created: {new Date(selectedEntry.createdAt).toLocaleString()}</p>\r\n//                 <p>Status: {selectedEntry.status}</p>\r\n//                 <p>Type: {selectedEntry.transactionType}</p>\r\n//               </div>\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n\r\n//       {/* Trial Balance Modal */}\r\n//       {showTrialBalance && (\r\n//         <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center p-4 z-50\">\r\n//           <div className=\"bg-white rounded-lg max-w-5xl w-full max-h-[90vh] overflow-y-auto\">\r\n//             <div className=\"px-6 py-4 border-b border-gray-200\">\r\n//               <div className=\"flex items-center justify-between\">\r\n//                 <h3 className=\"text-lg font-semibold text-gray-900\">\r\n//                   Trial Balance - As of {new Date().toLocaleDateString()}\r\n//                 </h3>\r\n//                 <div className=\"flex items-center space-x-2\">\r\n//                   <button\r\n//                     onClick={() => {\r\n//                       // Export functionality would go here\r\n//                       alert('Export functionality would be implemented here');\r\n//                     }}\r\n//                     className=\"px-3 py-1 bg-emerald-600 text-white rounded text-sm hover:bg-emerald-700 flex items-center space-x-1\"\r\n//                   >\r\n//                     <Download size={14} />\r\n//                     <span>Export</span>\r\n//                   </button>\r\n//                   <button\r\n//                     onClick={() => setShowTrialBalance(false)}\r\n//                     className=\"text-gray-400 hover:text-gray-600\"\r\n//                   >\r\n//                     <X size={20} />\r\n//                   </button>\r\n//                 </div>\r\n//               </div>\r\n//             </div>\r\n            \r\n//             <div className=\"px-6 py-4\">\r\n//               <div className=\"overflow-x-auto\">\r\n//                 <table className=\"w-full\">\r\n//                   <thead className=\"bg-gray-50\">\r\n//                     <tr>\r\n//                       <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                         Account Code\r\n//                       </th>\r\n//                       <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                         Account Name\r\n//                       </th>\r\n//                       <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                         Type\r\n//                       </th>\r\n//                       <th className=\"px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                         Debit Total\r\n//                       </th>\r\n//                       <th className=\"px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                         Credit Total\r\n//                       </th>\r\n//                       <th className=\"px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                         Balance\r\n//                       </th>\r\n//                     </tr>\r\n//                   </thead>\r\n//                   <tbody className=\"bg-white divide-y divide-gray-200\">\r\n//                     {trialBalance.map((account) => (\r\n//                       <tr key={account.accountId}>\r\n//                         <td className=\"px-4 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\r\n//                           {account.accountCode}\r\n//                         </td>\r\n//                         <td className=\"px-4 py-4 whitespace-nowrap text-sm text-gray-900\">\r\n//                           {account.accountName}\r\n//                         </td>\r\n//                         <td className=\"px-4 py-4 whitespace-nowrap\">\r\n//                           <span className={`px-2 py-1 text-xs font-medium rounded-full ${\r\n//                             account.accountType === 'assets' ? 'bg-green-100 text-green-800' :\r\n//                             account.accountType === 'liabilities' ? 'bg-red-100 text-red-800' :\r\n//                             account.accountType === 'equity' ? 'bg-blue-100 text-blue-800' :\r\n//                             account.accountType === 'revenue' ? 'bg-purple-100 text-purple-800' :\r\n//                             'bg-orange-100 text-orange-800'\r\n//                           }`}>\r\n//                             {account.accountType}\r\n//                           </span>\r\n//                         </td>\r\n//                         <td className=\"px-4 py-4 whitespace-nowrap text-sm text-gray-900 text-right\">\r\n//                           PKR {account.debit.toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\r\n//                         </td>\r\n//                         <td className=\"px-4 py-4 whitespace-nowrap text-sm text-gray-900 text-right\">\r\n//                           PKR {account.credit.toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\r\n//                         </td>\r\n//                         <td className=\"px-4 py-4 whitespace-nowrap text-sm font-medium text-right\">\r\n//                           <span className={account.balance >= 0 ? 'text-green-600' : 'text-red-600'}>\r\n//                             PKR {Math.abs(account.balance).toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\r\n//                             {account.balance < 0 && ' (CR)'}\r\n//                           </span>\r\n//                         </td>\r\n//                       </tr>\r\n//                     ))}\r\n//                   </tbody>\r\n//                   <tfoot className=\"bg-gray-50\">\r\n//                     <tr>\r\n//                       <td colSpan=\"3\" className=\"px-4 py-3 text-sm font-bold text-gray-900\">\r\n//                         TOTALS:\r\n//                       </td>\r\n//                       <td className=\"px-4 py-3 text-sm font-bold text-gray-900 text-right\">\r\n//                         PKR {trialBalance.reduce((sum, acc) => sum + acc.debit, 0).toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\r\n//                       </td>\r\n//                       <td className=\"px-4 py-3 text-sm font-bold text-gray-900 text-right\">\r\n//                         PKR {trialBalance.reduce((sum, acc) => sum + acc.credit, 0).toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\r\n//                       </td>\r\n//                       <td className=\"px-4 py-3 text-sm font-bold text-gray-900 text-right\">\r\n//                         PKR {Math.abs(trialBalance.reduce((sum, acc) => sum + acc.balance, 0)).toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\r\n//                       </td>\r\n//                     </tr>\r\n//                   </tfoot>\r\n//                 </table>\r\n//               </div>\r\n              \r\n//               {/* Trial Balance Validation */}\r\n//               <div className=\"mt-4 p-4 bg-green-50 border border-green-200 rounded-lg\">\r\n//                 <div className=\"flex items-center\">\r\n//                   <CheckCircle className=\"text-green-600 mr-2\" size={20} />\r\n//                   <div>\r\n//                     <h4 className=\"font-medium text-green-800\">Trial Balance is Balanced</h4>\r\n//                     <p className=\"text-sm text-green-700\">\r\n//                       Total Debits = Total Credits = PKR {trialBalance.reduce((sum, acc) => sum + acc.debit, 0).toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\r\n//                     </p>\r\n//                   </div>\r\n//                 </div>\r\n//               </div>\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n\r\n//       {/* Integration Status */}\r\n//       <div className=\"mt-8 grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n//         <div className=\"p-4 bg-green-50 border border-green-200 rounded-lg\">\r\n//           <div className=\"flex items-center mb-2\">\r\n//             <CheckCircle className=\"text-green-600 mr-2\" size={16} />\r\n//             <h4 className=\"font-medium text-green-800\">POS API Integration</h4>\r\n//           </div>\r\n//           <p className=\"text-sm text-green-700\">\r\n//             Sales orders automatically create journal entries from live API data\r\n//           </p>\r\n//         </div>\r\n\r\n//         <div className=\"p-4 bg-blue-50 border border-blue-200 rounded-lg\">\r\n//           <div className=\"flex items-center mb-2\">\r\n//             <RefreshCw className=\"text-blue-600 mr-2\" size={16} />\r\n//             <h4 className=\"font-medium text-blue-800\">Real-time Sync</h4>\r\n//           </div>\r\n//           <p className=\"text-sm text-blue-700\">\r\n//             Journal entries updated automatically with each sales transaction\r\n//           </p>\r\n//         </div>\r\n\r\n//         <div className=\"p-4 bg-orange-50 border border-orange-200 rounded-lg\">\r\n//           <div className=\"flex items-center mb-2\">\r\n//             <FileText className=\"text-orange-600 mr-2\" size={16} />\r\n//             <h4 className=\"font-medium text-orange-800\">Manual Entries</h4>\r\n//           </div>\r\n//           <p className=\"text-sm text-orange-700\">\r\n//             Add adjustments and corrections with full double-entry validation\r\n//           </p>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default GeneralLedger;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import { \r\n//   Book, \r\n//   Plus, \r\n//   Filter, \r\n//   Search, \r\n//   Calendar, \r\n//   FileText, \r\n//   Edit, \r\n//   Trash2, \r\n//   Save, \r\n//   X, \r\n//   AlertCircle,\r\n//   CheckCircle,\r\n//   DollarSign,\r\n//   TrendingUp,\r\n//   Eye,\r\n//   Download,\r\n//   RefreshCw\r\n// } from 'lucide-react';\r\n\r\n// const GeneralLedger = () => {\r\n//   const [journalEntries, setJournalEntries] = useState([]);\r\n//   const [accounts, setAccounts] = useState([]);\r\n//   const [filteredEntries, setFilteredEntries] = useState([]);\r\n//   const [selectedEntry, setSelectedEntry] = useState(null);\r\n//   const [isAddingEntry, setIsAddingEntry] = useState(false);\r\n//   const [loading, setLoading] = useState(false);\r\n//   // Add missing state variables for accounts loading state\r\n//   const [accountsLoading, setAccountsLoading] = useState(false);\r\n//   const [accountsError, setAccountsError] = useState(null);\r\n//   const [filters, setFilters] = useState({\r\n//     dateFrom: '',\r\n//     dateTo: '',\r\n//     accountId: '',\r\n//     transactionType: 'all',\r\n//     searchTerm: ''\r\n//   });\r\n//   const [trialBalance, setTrialBalance] = useState([]);\r\n//   const [showTrialBalance, setShowTrialBalance] = useState(false);\r\n//   const [newEntry, setNewEntry] = useState({\r\n//     date: new Date().toISOString().split('T')[0],\r\n//     description: '',\r\n//     reference: '',\r\n//     entries: [\r\n//       { accountId: '', debit: 0, credit: 0, description: '' },\r\n//       { accountId: '', debit: 0, credit: 0, description: '' }\r\n//     ]\r\n//   });\r\n\r\n//   // Chart of Accounts - we'll replace this with API data\r\n//   const chartOfAccounts = [\r\n//     { id: '1111', code: '1111', name: 'Petty Cash', type: 'assets' },\r\n//     { id: '1112', code: '1112', name: 'Bank - Main Account', type: 'assets' },\r\n//     { id: '1120', code: '1120', name: 'Accounts Receivable', type: 'assets' },\r\n//     { id: '1130', code: '1130', name: 'Inventory', type: 'assets' },\r\n//     { id: '2110', code: '2110', name: 'Accounts Payable', type: 'liabilities' },\r\n//     { id: '2130', code: '2130', name: 'Sales Tax Payable', type: 'liabilities' },\r\n//     { id: '4100', code: '4100', name: 'Sales Revenue', type: 'revenue' },\r\n//     { id: '4110', code: '4110', name: 'Electronics Sales', type: 'revenue' },\r\n//     { id: '5100', code: '5100', name: 'Cost of Goods Sold', type: 'expenses' },\r\n//     { id: '5200', code: '5200', name: 'Purchase Expenses', type: 'expenses' }\r\n//   ];\r\n\r\n//   // API Configuration - This is already correct\r\n//   const API_BASE_URL = 'https://api-pos.hulmsolutions.com/POS/accounting2/31fc8df0-61db-41e5-bb67-070fde367ea1/orders?start=0&size=200';\r\n//   const API_BASE_URL_CHARTS_OF_ACCOUNTS = 'http://localhost:8080/api/accounts';\r\n\r\n//   useEffect(() => {\r\n//     loadChartsOfAccounts();\r\n//     loadJournalEntriesFromAPI();\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     filterEntries();\r\n//   }, [journalEntries, filters]);\r\n\r\n//   // Fetch Charts of Accounts from API\r\n//   const loadChartsOfAccounts = async () => {\r\n//     setAccountsLoading(true);\r\n//     setAccountsError(null);\r\n    \r\n//     try {\r\n//       const response = await fetch(API_BASE_URL_CHARTS_OF_ACCOUNTS, {\r\n//         method: 'GET',\r\n//         headers: {\r\n//           'Content-Type': 'application/json',\r\n//         },\r\n//       });\r\n      \r\n//       if (!response.ok) {\r\n//         throw new Error(`Failed to fetch accounts: ${response.status}`);\r\n//       }\r\n      \r\n//       const data = await response.json();\r\n      \r\n//       // Transform the data to match our accounts structure\r\n//       // Assuming the API returns records similar to the paste-2.txt format\r\n//       const formattedAccounts = data.map(account => ({\r\n//         id: account.id || account.code,\r\n//         code: account.code,\r\n//         name: account.name,\r\n//         type: account.type || 'other',\r\n//         category: account.category || account.group,\r\n//         description: account.description || ''\r\n//       }));\r\n      \r\n//       setAccounts(formattedAccounts);\r\n//       console.log('Loaded charts of accounts:', formattedAccounts.length);\r\n//     } catch (error) {\r\n//       console.error('Error loading charts of accounts:', error);\r\n//       setAccountsError(error.message);\r\n      \r\n//       // Fallback to basic chart of accounts if API fails\r\n//       const fallbackAccounts = [\r\n//         { id: '1111', code: '1111', name: 'Petty Cash', type: 'assets' },\r\n//         { id: '1112', code: '1112', name: 'Bank - Main Account', type: 'assets' },\r\n//         { id: '1120', code: '1120', name: 'Accounts Receivable', type: 'assets' },\r\n//         { id: '1130', code: '1130', name: 'Inventory', type: 'assets' },\r\n//         { id: '2110', code: '2110', name: 'Accounts Payable', type: 'liabilities' },\r\n//         { id: '2130', code: '2130', name: 'Sales Tax Payable', type: 'liabilities' },\r\n//         { id: '4100', code: '4100', name: 'Sales Revenue', type: 'revenue' },\r\n//         { id: '4110', code: '4110', name: 'Electronics Sales', type: 'revenue' },\r\n//         { id: '5100', code: '5100', name: 'Cost of Goods Sold', type: 'expenses' },\r\n//         { id: '5200', code: '5200', name: 'Purchase Expenses', type: 'expenses' }\r\n//       ];\r\n      \r\n//       setAccounts(fallbackAccounts);\r\n//       console.log('Using fallback chart of accounts');\r\n//     } finally {\r\n//       setAccountsLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   async function fetchOrderData() {\r\n//     try {\r\n//       const response = await fetch(API_BASE_URL, {\r\n//         method: 'GET',\r\n//         headers: {\r\n//           'Authorization': 'Bearer Hamid',\r\n//           'Content-Type': 'application/json',\r\n//         },\r\n//       });\r\n      \r\n//       if (!response.ok) {\r\n//         throw new Error(`API request failed with status ${response.status}`);\r\n//       }\r\n      \r\n//       const data = await response.json();\r\n//       return data;\r\n//     } catch (error) {\r\n//       console.error('Error fetching order data:', error);\r\n//       // Implement notification system for integration errors\r\n//       return null;\r\n//     }\r\n//   }\r\n\r\n//   // Fetch Sales Orders from API and convert to Journal Entries\r\n//   const loadJournalEntriesFromAPI = async () => {\r\n//     setLoading(true);\r\n//     try {\r\n//       // FIXED: Using the correct API_BASE_URL directly instead of appending \"/orders?start=0&size=200\"\r\n//       const salesOrders = await fetchOrderData();\r\n      \r\n//       if (!salesOrders) {\r\n//         throw new Error('Failed to fetch sales orders');\r\n//       }\r\n      \r\n//       // Filter only PAID and FULFILLED orders\r\n//       const completedOrders = salesOrders.filter(order => \r\n//         order.paid === true && order.fulfilled === true && order.status === 'Closed'\r\n//       );\r\n      \r\n//       // Convert completed sales orders to journal entries\r\n//       const journalEntriesFromSales = completedOrders.map(order => convertSalesOrderToJournalEntry(order))\r\n//         .filter(entry => entry !== null); // Filter out any null entries\r\n      \r\n//       // Load any manual journal entries from localStorage\r\n//       const manualEntries = JSON.parse(localStorage.getItem('manualJournalEntries') || '[]');\r\n      \r\n//       // Combine both types of entries\r\n//       const allEntries = [...journalEntriesFromSales, ...manualEntries];\r\n      \r\n//       setJournalEntries(allEntries);\r\n//       console.log('Loaded completed orders:', completedOrders.length, 'Total journal entries:', allEntries.length);\r\n//     } catch (error) {\r\n//       console.error('Error loading sales orders:', error);\r\n//       // Fallback to sample data if API fails\r\n//       loadSampleJournalEntries();\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   // Convert Sales Order to Journal Entry\r\n//   const convertSalesOrderToJournalEntry = (order) => {\r\n//     const entries = [];\r\n    \r\n//     // Use actual values from API (amounts are in PKR, not USD)\r\n//     const subTotal = parseFloat(order.subTotal) || 0;\r\n//     const taxAmount = parseFloat(order.taxAmount) || 0;\r\n//     const total = parseFloat(order.total) || 0;\r\n    \r\n//     // Only process PAID and FULFILLED orders\r\n//     if (!order.paid || !order.fulfilled || order.status !== 'Closed') {\r\n//       return null; // Skip incomplete orders\r\n//     }\r\n    \r\n//     // Cash/Bank Account (Debit) - Total amount received\r\n//     entries.push({\r\n//       accountId: '1111', // Petty Cash (assume cash payment)\r\n//       accountName: 'Petty Cash',\r\n//       debit: total,\r\n//       credit: 0,\r\n//       description: `Cash received from Order #${order.orderId} - ${order.lineItems.map(item => item.productName).join(', ')}`\r\n//     });\r\n\r\n//     // Sales Revenue (Credit) - Subtotal\r\n//     if (subTotal > 0) {\r\n//       entries.push({\r\n//         accountId: '4110', // Electronics Sales\r\n//         accountName: 'Electronics Sales',\r\n//         debit: 0,\r\n//         credit: subTotal,\r\n//         description: `Revenue from Order #${order.orderId}`\r\n//       });\r\n//     }\r\n\r\n//     // Sales Tax Payable (Credit) - Tax amount\r\n//     if (taxAmount > 0) {\r\n//       entries.push({\r\n//         accountId: '2130',\r\n//         accountName: 'Sales Tax Payable',\r\n//         debit: 0,\r\n//         credit: taxAmount,\r\n//         description: `${order.taxRate}% tax collected on Order #${order.orderId}`\r\n//       });\r\n//     }\r\n\r\n//     // Cost of Goods Sold and Inventory reduction (only for fulfilled items)\r\n//     let totalCOGS = 0;\r\n//     order.lineItems.forEach(item => {\r\n//       if (item.fulfilled && item.status === 'Fulfilled') {\r\n//         const costPrice = parseFloat(item.costPrice) || 0;\r\n//         const quantity = parseFloat(item.quantity) || 0;\r\n//         const itemCOGS = costPrice * quantity;\r\n//         totalCOGS += itemCOGS;\r\n//       }\r\n//     });\r\n\r\n//     if (totalCOGS > 0) {\r\n//       // Cost of Goods Sold (Debit)\r\n//       entries.push({\r\n//         accountId: '5100',\r\n//         accountName: 'Cost of Goods Sold',\r\n//         debit: totalCOGS,\r\n//         credit: 0,\r\n//         description: `COGS for Order #${order.orderId}`\r\n//       });\r\n\r\n//       // Inventory (Credit)\r\n//       entries.push({\r\n//         accountId: '1130',\r\n//         accountName: 'Inventory',\r\n//         debit: 0,\r\n//         credit: totalCOGS,\r\n//         description: `Inventory reduction - Order #${order.orderId}`\r\n//       });\r\n//     }\r\n\r\n//     // Calculate totals\r\n//     const totalDebit = entries.reduce((sum, entry) => sum + entry.debit, 0);\r\n//     const totalCredit = entries.reduce((sum, entry) => sum + entry.credit, 0);\r\n\r\n//     return {\r\n//       id: `JE-ORDER-${order.orderId}`,\r\n//       date: formatDateFromCreatedAt(order.createdAt),\r\n//       description: `Sales Order #${order.orderId} - ${order.lineItems.map(item => `${item.productName} (${item.quantity})`).join(', ')}`,\r\n//       reference: `ORDER-${order.orderId}`,\r\n//       transactionType: 'automatic',\r\n//       source: 'POS Sales',\r\n//       status: 'posted',\r\n//       entries: entries,\r\n//       totalDebit: Math.round(totalDebit * 100) / 100,\r\n//       totalCredit: Math.round(totalCredit * 100) / 100,\r\n//       createdAt: order.createdAt,\r\n//       originalOrder: order // Keep reference to original order\r\n//     };\r\n//   };\r\n\r\n//   // Format date from API format (2025.08.18.10.08.54.569) to YYYY-MM-DD\r\n//   const formatDateFromCreatedAt = (createdAt) => {\r\n//     try {\r\n//       const parts = createdAt.split('.');\r\n//       if (parts.length >= 3) {\r\n//         return `${parts[0]}-${parts[1].padStart(2, '0')}-${parts[2].padStart(2, '0')}`;\r\n//       }\r\n//       return new Date().toISOString().split('T')[0];\r\n//     } catch (error) {\r\n//       return new Date().toISOString().split('T')[0];\r\n//     }\r\n//   };\r\n\r\n//   // Fallback sample data\r\n//   const loadSampleJournalEntries = () => {\r\n//     const sampleEntries = [\r\n//       {\r\n//         id: 'JE001',\r\n//         date: '2025-08-18',\r\n//         description: 'Sample POS Sale - Medical products',\r\n//         reference: 'POS001',\r\n//         transactionType: 'automatic',\r\n//         source: 'POS',\r\n//         status: 'posted',\r\n//         entries: [\r\n//           { accountId: '1111', accountName: 'Petty Cash', debit: 60.50, credit: 0, description: 'Cash received from customer' },\r\n//           { accountId: '4100', accountName: 'Sales Revenue', debit: 0, credit: 55.00, description: 'Revenue from medical products' },\r\n//           { accountId: '2130', accountName: 'Sales Tax Payable', debit: 0, credit: 5.50, description: 'Sales tax collected' }\r\n//         ],\r\n//         totalDebit: 60.50,\r\n//         totalCredit: 60.50,\r\n//         createdAt: '2025-08-18T10:30:00Z'\r\n//       }\r\n//     ];\r\n//     setJournalEntries(sampleEntries);\r\n//   };\r\n\r\n//   const filterEntries = () => {\r\n//     let filtered = [...journalEntries];\r\n\r\n//     if (filters.dateFrom) {\r\n//       filtered = filtered.filter(entry => entry.date >= filters.dateFrom);\r\n//     }\r\n//     if (filters.dateTo) {\r\n//       filtered = filtered.filter(entry => entry.date <= filters.dateTo);\r\n//     }\r\n//     if (filters.accountId) {\r\n//       filtered = filtered.filter(entry => \r\n//         entry.entries.some(e => e.accountId === filters.accountId)\r\n//       );\r\n//     }\r\n//     if (filters.transactionType !== 'all') {\r\n//       filtered = filtered.filter(entry => entry.transactionType === filters.transactionType);\r\n//     }\r\n//     if (filters.searchTerm) {\r\n//       const term = filters.searchTerm.toLowerCase();\r\n//       filtered = filtered.filter(entry => \r\n//         entry.description.toLowerCase().includes(term) ||\r\n//         entry.reference.toLowerCase().includes(term) ||\r\n//         entry.entries.some(e => e.description.toLowerCase().includes(term))\r\n//       );\r\n//     }\r\n\r\n//     setFilteredEntries(filtered);\r\n//   };\r\n\r\n//   const generateTrialBalance = () => {\r\n//     const balances = {};\r\n//       console.log('accounts:',accounts)\r\n//     // Initialize all accounts\r\n//     accounts.forEach(account => {\r\n//       // Only include account types, not headers or groups\r\n//       if (account.category !== 'header' && account.category !== 'group') {\r\n//         balances[account.id] = {\r\n//           accountId: account.id,\r\n//           accountCode: account.code,\r\n//           accountName: account.name,\r\n//           accountType: account.type,\r\n//           debit: 0,\r\n//           credit: 0,\r\n//           balance: 0\r\n//         };\r\n//       }\r\n//     });\r\n\r\n//     // Calculate balances from journal entries\r\n//     journalEntries.forEach(entry => {\r\n//       if (entry.status === 'posted') {\r\n//         entry.entries.forEach(entryLine => {\r\n//           if (balances[entryLine.accountId]) {\r\n//             balances[entryLine.accountId].debit += entryLine.debit;\r\n//             balances[entryLine.accountId].credit += entryLine.credit;\r\n//           }\r\n//         });\r\n//       }\r\n//     });\r\n\r\n//     // Calculate net balances\r\n//     Object.values(balances).forEach(account => {\r\n//       if (account.accountType === 'assets' || account.accountType === 'expenses') {\r\n//         account.balance = account.debit - account.credit;\r\n//       } else {\r\n//         account.balance = account.credit - account.debit;\r\n//       }\r\n//     });\r\n\r\n//     const trialBalanceData = Object.values(balances)\r\n//       .filter(account => account.debit !== 0 || account.credit !== 0)\r\n//       .sort((a, b) => a.accountCode.localeCompare(b.accountCode));\r\n\r\n//     setTrialBalance(trialBalanceData);\r\n//     setShowTrialBalance(true);\r\n//   };\r\n\r\n//   const addEntryLine = () => {\r\n//     setNewEntry({\r\n//       ...newEntry,\r\n//       entries: [...newEntry.entries, { accountId: '', debit: 0, credit: 0, description: '' }]\r\n//     });\r\n//   };\r\n\r\n//   const removeEntryLine = (index) => {\r\n//     if (newEntry.entries.length > 2) {\r\n//       const updatedEntries = newEntry.entries.filter((_, i) => i !== index);\r\n//       setNewEntry({ ...newEntry, entries: updatedEntries });\r\n//     }\r\n//   };\r\n\r\n//   const updateEntryLine = (index, field, value) => {\r\n//     const updatedEntries = [...newEntry.entries];\r\n//     updatedEntries[index] = { ...updatedEntries[index], [field]: value };\r\n//     setNewEntry({ ...newEntry, entries: updatedEntries });\r\n//   };\r\n\r\n//   const calculateTotals = (entries) => {\r\n//     const totalDebit = entries.reduce((sum, entry) => sum + (parseFloat(entry.debit) || 0), 0);\r\n//     const totalCredit = entries.reduce((sum, entry) => sum + (parseFloat(entry.credit) || 0), 0);\r\n//     return { totalDebit, totalCredit };\r\n//   };\r\n\r\n//   const isBalanced = (entries) => {\r\n//     const { totalDebit, totalCredit } = calculateTotals(entries);\r\n//     return Math.abs(totalDebit - totalCredit) < 0.01;\r\n//   };\r\n\r\n//   const saveJournalEntry = () => {\r\n//     if (!newEntry.description || !newEntry.entries.every(e => e.accountId)) {\r\n//       alert('Please fill in all required fields');\r\n//       return;\r\n//     }\r\n\r\n//     if (!isBalanced(newEntry.entries)) {\r\n//       alert('Journal entry must be balanced - total debits must equal total credits');\r\n//       return;\r\n//     }\r\n\r\n//     const { totalDebit, totalCredit } = calculateTotals(newEntry.entries);\r\n    \r\n//     // Add account names to entries\r\n//     const entriesWithNames = newEntry.entries.map(entry => ({\r\n//       ...entry,\r\n//       accountName: accounts.find(acc => acc.id === entry.accountId)?.name || '',\r\n//       debit: parseFloat(entry.debit) || 0,\r\n//       credit: parseFloat(entry.credit) || 0\r\n//     }));\r\n\r\n//     const journalEntry = {\r\n//       id: `JE-MANUAL-${Date.now()}`,\r\n//       date: newEntry.date,\r\n//       description: newEntry.description,\r\n//       reference: newEntry.reference || `MAN${Date.now()}`,\r\n//       transactionType: 'manual',\r\n//       source: 'Manual',\r\n//       status: 'posted',\r\n//       entries: entriesWithNames,\r\n//       totalDebit,\r\n//       totalCredit,\r\n//       createdAt: new Date().toISOString()\r\n//     };\r\n\r\n//     // Save manual entries to localStorage\r\n//     const existingManualEntries = JSON.parse(localStorage.getItem('manualJournalEntries') || '[]');\r\n//     const updatedManualEntries = [...existingManualEntries, journalEntry];\r\n//     localStorage.setItem('manualJournalEntries', JSON.stringify(updatedManualEntries));\r\n\r\n//     // Update state\r\n//     setJournalEntries([...journalEntries, journalEntry]);\r\n    \r\n//     // Reset form\r\n//     setNewEntry({\r\n//       date: new Date().toISOString().split('T')[0],\r\n//       description: '',\r\n//       reference: '',\r\n//       entries: [\r\n//         { accountId: '', debit: 0, credit: 0, description: '' },\r\n//         { accountId: '', debit: 0, credit: 0, description: '' }\r\n//       ]\r\n//     });\r\n//     setIsAddingEntry(false);\r\n//   };\r\n\r\n//   const getAccountName = (accountId) => {\r\n//     const account = accounts.find(acc => acc.id === accountId);\r\n//     return account ? `${account.code} - ${account.name}` : '';\r\n//   };\r\n\r\n//   const { totalDebit, totalCredit } = calculateTotals(newEntry.entries);\r\n//   const entryIsBalanced = isBalanced(newEntry.entries);\r\n\r\n//   return (\r\n//     <div className=\"max-w-7xl mx-auto p-6 bg-white\">\r\n//       {/* Header */}\r\n//       <div className=\"mb-8\">\r\n//         <h1 className=\"text-3xl font-bold text-gray-900 mb-2 flex items-center\">\r\n//           <Book className=\"mr-3 text-emerald-600\" />\r\n//           General Ledger\r\n//         </h1>\r\n//         <p className=\"text-gray-600\">Real-time transaction recording and journal entry management</p>\r\n        \r\n//         {/* Show loading or error messages for accounts */}\r\n//         {accountsLoading && (\r\n//           <div className=\"mt-2 p-2 bg-blue-50 text-blue-700 rounded-md text-sm flex items-center\">\r\n//             <RefreshCw className=\"animate-spin mr-2\" size={16} />\r\n//             Loading chart of accounts...\r\n//           </div>\r\n//         )}\r\n        \r\n//         {accountsError && (\r\n//           <div className=\"mt-2 p-2 bg-red-50 text-red-700 rounded-md text-sm flex items-center\">\r\n//             <AlertCircle className=\"mr-2\" size={16} />\r\n//             Error loading accounts: {accountsError}\r\n//           </div>\r\n//         )}\r\n//       </div>\r\n\r\n//       {/* Quick Stats */}\r\n//       <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\r\n//         <div className=\"bg-blue-50 p-4 rounded-lg border border-blue-200\">\r\n//           <div className=\"flex items-center justify-between\">\r\n//             <div>\r\n//               <p className=\"text-blue-600 text-sm font-medium\">Total Entries</p>\r\n//               <p className=\"text-2xl font-bold text-blue-900\">{journalEntries.length}</p>\r\n//             </div>\r\n//             <FileText className=\"text-blue-600\" size={24} />\r\n//           </div>\r\n//         </div>\r\n\r\n//         <div className=\"bg-green-50 p-4 rounded-lg border border-green-200\">\r\n//           <div className=\"flex items-center justify-between\">\r\n//             <div>\r\n//               <p className=\"text-green-600 text-sm font-medium\">POS Entries</p>\r\n//               <p className=\"text-2xl font-bold text-green-900\">\r\n//                 {journalEntries.filter(e => e.source === 'POS Sales').length}\r\n//               </p>\r\n//             </div>\r\n//             <TrendingUp className=\"text-green-600\" size={24} />\r\n//           </div>\r\n//         </div>\r\n\r\n//         <div className=\"bg-orange-50 p-4 rounded-lg border border-orange-200\">\r\n//           <div className=\"flex items-center justify-between\">\r\n//             <div>\r\n//               <p className=\"text-orange-600 text-sm font-medium\">Manual Entries</p>\r\n//               <p className=\"text-2xl font-bold text-orange-900\">\r\n//                 {journalEntries.filter(e => e.transactionType === 'manual').length}\r\n//               </p>\r\n//             </div>\r\n//             <Edit className=\"text-orange-600\" size={24} />\r\n//           </div>\r\n//         </div>\r\n\r\n//         <div className=\"bg-purple-50 p-4 rounded-lg border border-purple-200\">\r\n//           <div className=\"flex items-center justify-between\">\r\n//             <div>\r\n//               <p className=\"text-purple-600 text-sm font-medium\">Total Value</p>\r\n//               <p className=\"text-2xl font-bold text-purple-900\">\r\n//                 PKR {journalEntries.reduce((sum, entry) => sum + entry.totalDebit, 0).toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\r\n//               </p>\r\n//             </div>\r\n//             <DollarSign className=\"text-purple-600\" size={24} />\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n\r\n//       {/* Controls */}\r\n//       <div className=\"flex flex-wrap items-center justify-between gap-4 mb-6\">\r\n//         <div className=\"flex flex-wrap items-center gap-4\">\r\n//           {/* Date Filters */}\r\n//           <div className=\"flex items-center space-x-2\">\r\n//             <Calendar size={16} className=\"text-gray-400\" />\r\n//             <input\r\n//               type=\"date\"\r\n//               value={filters.dateFrom}\r\n//               onChange={(e) => setFilters({ ...filters, dateFrom: e.target.value })}\r\n//               className=\"px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\r\n//               placeholder=\"From\"\r\n//             />\r\n//             <span className=\"text-gray-500\">to</span>\r\n//             <input\r\n//               type=\"date\"\r\n//               value={filters.dateTo}\r\n//               onChange={(e) => setFilters({ ...filters, dateTo: e.target.value })}\r\n//               className=\"px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\r\n//               placeholder=\"To\"\r\n//             />\r\n//           </div>\r\n\r\n//           {/* Account Filter */}\r\n//           <div className=\"relative\">\r\n//             <Filter className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" size={16} />\r\n//             <select\r\n//               value={filters.accountId}\r\n//               onChange={(e) => setFilters({ ...filters, accountId: e.target.value })}\r\n//               className=\"pl-10 pr-8 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\r\n//             >\r\n//               <option value=\"\">All Accounts</option>\r\n//               {/* Group accounts by type for better organization */}\r\n//               {['assets', 'liabilities', 'equity', 'revenue', 'expenses'].map(type => {\r\n//                 const accountsOfType = accounts.filter(acc => \r\n//                   acc.type === type && acc.category !== 'header' && acc.category !== 'group'\r\n//                 );\r\n                \r\n//                 if (accountsOfType.length === 0) return null;\r\n                \r\n//                 return (\r\n//                   <optgroup key={type} label={type.charAt(0).toUpperCase() + type.slice(1)}>\r\n//                     {accountsOfType.map(account => (\r\n//                       <option key={account.id} value={account.id}>\r\n//                         {account.code} - {account.name}\r\n//                       </option>\r\n//                     ))}\r\n//                   </optgroup>\r\n//                 );\r\n//               })}\r\n//             </select>\r\n//           </div>\r\n\r\n//           {/* Transaction Type Filter */}\r\n//           <select\r\n//             value={filters.transactionType}\r\n//             onChange={(e) => setFilters({ ...filters, transactionType: e.target.value })}\r\n//             className=\"px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\r\n//           >\r\n//             <option value=\"all\">All Types</option>\r\n//             <option value=\"automatic\">POS Sales</option>\r\n//             <option value=\"manual\">Manual</option>\r\n//           </select>\r\n\r\n//           {/* Search */}\r\n//           <div className=\"relative\">\r\n//             <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" size={16} />\r\n//             <input\r\n//               type=\"text\"\r\n//               placeholder=\"Search entries...\"\r\n//               value={filters.searchTerm}\r\n//               onChange={(e) => setFilters({ ...filters, searchTerm: e.target.value })}\r\n//               className=\"pl-10 pr-4 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\r\n//             />\r\n//           </div>\r\n//         </div>\r\n\r\n//         <div className=\"flex space-x-3\">\r\n//           <button\r\n//             onClick={loadJournalEntriesFromAPI}\r\n//             disabled={loading}\r\n//             className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center space-x-2 disabled:bg-gray-400\"\r\n//           >\r\n//             {loading ? <RefreshCw className=\"animate-spin\" size={16} /> : <RefreshCw size={16} />}\r\n//             <span>Refresh from API</span>\r\n//           </button>\r\n//           <button\r\n//             onClick={loadChartsOfAccounts}\r\n//             disabled={accountsLoading}\r\n//             className=\"px-4 py-2 bg-teal-600 text-white rounded-lg hover:bg-teal-700 flex items-center space-x-2 disabled:bg-gray-400\"\r\n//           >\r\n//             {accountsLoading ? <RefreshCw className=\"animate-spin\" size={16} /> : <RefreshCw size={16} />}\r\n//             <span>Refresh Accounts</span>\r\n//           </button>\r\n//           <button\r\n//             onClick={() => setIsAddingEntry(true)}\r\n//             className=\"px-4 py-2 bg-emerald-600 text-white rounded-lg hover:bg-emerald-700 flex items-center space-x-2\"\r\n//           >\r\n//             <Plus size={16} />\r\n//             <span>Add Entry</span>\r\n//           </button>\r\n//           <button\r\n//             onClick={generateTrialBalance}\r\n//             className=\"px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 flex items-center space-x-2\"\r\n//           >\r\n//             <FileText size={16} />\r\n//             <span>Trial Balance</span>\r\n//           </button>\r\n//         </div>\r\n//       </div>\r\n\r\n//       {/* Journal Entry Form */}\r\n//       {isAddingEntry && (\r\n//         <div className=\"mb-8 p-6 bg-gray-50 rounded-lg border\">\r\n//           <h3 className=\"text-lg font-semibold mb-4\">Add Manual Journal Entry</h3>\r\n          \r\n//           <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\r\n//             <div>\r\n//               <label className=\"block text-sm font-medium text-gray-700 mb-1\">Date *</label>\r\n//               <input\r\n//                 type=\"date\"\r\n//                 value={newEntry.date}\r\n//                 onChange={(e) => setNewEntry({ ...newEntry, date: e.target.value })}\r\n//                 className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\r\n//               />\r\n//             </div>\r\n//             <div>\r\n//               <label className=\"block text-sm font-medium text-gray-700 mb-1\">Description *</label>\r\n//               <input\r\n//                 type=\"text\"\r\n//                 value={newEntry.description}\r\n//                 onChange={(e) => setNewEntry({ ...newEntry, description: e.target.value })}\r\n//                 placeholder=\"Enter description\"\r\n//                 className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\r\n//               />\r\n//             </div>\r\n//             <div>\r\n//               <label className=\"block text-sm font-medium text-gray-700 mb-1\">Reference</label>\r\n//               <input\r\n//                 type=\"text\"\r\n//                 value={newEntry.reference}\r\n//                 onChange={(e) => setNewEntry({ ...newEntry, reference: e.target.value })}\r\n//                 placeholder=\"Reference number\"\r\n//                 className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\r\n//               />\r\n//             </div>\r\n//           </div>\r\n\r\n//           {/* Entry Lines */}\r\n//           <div className=\"mb-4\">\r\n//             <label className=\"block text-sm font-medium text-gray-700 mb-2\">Journal Entry Lines</label>\r\n//             <div className=\"space-y-3\">\r\n//               {newEntry.entries.map((entry, index) => (\r\n//                 <div key={index} className=\"grid grid-cols-12 gap-2 items-center bg-white p-3 rounded border\">\r\n//                   <div className=\"col-span-4\">\r\n//                     <select\r\n//                       value={entry.accountId}\r\n//                       onChange={(e) => updateEntryLine(index, 'accountId', e.target.value)}\r\n//                       className=\"w-full px-2 py-1 border border-gray-300 rounded text-sm focus:ring-2 focus:ring-emerald-500\"\r\n//                     >\r\n//                       <option value=\"\">Select Account</option>\r\n//                       {/* Group accounts by type for better organization */}\r\n//                       {['assets', 'liabilities', 'equity', 'revenue', 'expenses'].map(type => {\r\n//                         const accountsOfType = accounts.filter(acc => \r\n//                           acc.type === type && acc.category !== 'header' && acc.category !== 'group'\r\n//                         );\r\n                        \r\n//                         if (accountsOfType.length === 0) return null;\r\n                        \r\n//                         return (\r\n//                           <optgroup key={type} label={type.charAt(0).toUpperCase() + type.slice(1)}>\r\n//                             {accountsOfType.map(account => (\r\n//                               <option key={account.id} value={account.id}>\r\n//                                 {account.code} - {account.name}\r\n//                               </option>\r\n//                             ))}\r\n//                           </optgroup>\r\n//                         );\r\n//                       })}\r\n//                     </select>\r\n//                   </div>\r\n//                   <div className=\"col-span-3\">\r\n//                     <input\r\n//                       type=\"text\"\r\n//                       value={entry.description}\r\n//                       onChange={(e) => updateEntryLine(index, 'description', e.target.value)}\r\n//                       placeholder=\"Description\"\r\n//                       className=\"w-full px-2 py-1 border border-gray-300 rounded text-sm focus:ring-2 focus:ring-emerald-500\"\r\n//                     />\r\n//                   </div>\r\n//                   <div className=\"col-span-2\">\r\n//                     <input\r\n//                       type=\"number\"\r\n//                       step=\"0.01\"\r\n//                       value={entry.debit}\r\n//                       onChange={(e) => updateEntryLine(index, 'debit', e.target.value)}\r\n//                       placeholder=\"Debit\"\r\n//                       className=\"w-full px-2 py-1 border border-gray-300 rounded text-sm focus:ring-2 focus:ring-emerald-500\"\r\n//                     />\r\n//                   </div>\r\n//                   <div className=\"col-span-2\">\r\n//                     <input\r\n//                       type=\"number\"\r\n//                       step=\"0.01\"\r\n//                       value={entry.credit}\r\n//                       onChange={(e) => updateEntryLine(index, 'credit', e.target.value)}\r\n//                       placeholder=\"Credit\"\r\n//                       className=\"w-full px-2 py-1 border border-gray-300 rounded text-sm focus:ring-2 focus:ring-emerald-500\"\r\n//                     />\r\n//                   </div>\r\n//                   <div className=\"col-span-1\">\r\n//                     {newEntry.entries.length > 2 && (\r\n//                       <button\r\n//                         onClick={() => removeEntryLine(index)}\r\n//                         className=\"p-1 text-red-600 hover:bg-red-100 rounded\"\r\n//                       >\r\n//                         <Trash2 size={14} />\r\n//                       </button>\r\n//                     )}\r\n//                   </div>\r\n//                 </div>\r\n//               ))}\r\n//             </div>\r\n\r\n//             <div className=\"flex justify-between items-center mt-3\">\r\n//               <button\r\n//                 onClick={addEntryLine}\r\n//                 className=\"px-3 py-1 text-sm bg-gray-200 text-gray-700 rounded hover:bg-gray-300 flex items-center space-x-1\"\r\n//               >\r\n//                 <Plus size={14} />\r\n//                 <span>Add Line</span>\r\n//               </button>\r\n\r\n//               <div className=\"flex items-center space-x-4\">\r\n//                 <div className=\"text-sm\">\r\n//                   <span className=\"font-medium\">Total Debit: PKR {totalDebit.toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}</span>\r\n//                   <span className=\"mx-2\">|</span>\r\n//                   <span className=\"font-medium\">Total Credit: PKR {totalCredit.toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}</span>\r\n//                 </div>\r\n//                 {entryIsBalanced ? (\r\n//                   <div className=\"flex items-center text-green-600\">\r\n//                     <CheckCircle size={16} className=\"mr-1\" />\r\n//                     <span className=\"text-sm\">Balanced</span>\r\n//                   </div>\r\n//                 ) : (\r\n//                   <div className=\"flex items-center text-red-600\">\r\n//                     <AlertCircle size={16} className=\"mr-1\" />\r\n//                     <span className=\"text-sm\">Not Balanced</span>\r\n//                   </div>\r\n//                 )}\r\n//               </div>\r\n//             </div>\r\n//           </div>\r\n\r\n//           <div className=\"flex space-x-3\">\r\n//             <button\r\n//               onClick={saveJournalEntry}\r\n//               disabled={!entryIsBalanced}\r\n//               className=\"px-4 py-2 bg-emerald-600 text-white rounded-lg hover:bg-emerald-700 disabled:bg-gray-400 flex items-center space-x-2\"\r\n//             >\r\n//               <Save size={16} />\r\n//               <span>Save Entry</span>\r\n//             </button>\r\n//             <button\r\n//               onClick={() => setIsAddingEntry(false)}\r\n//               className=\"px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 flex items-center space-x-2\"\r\n//             >\r\n//               <X size={16} />\r\n//               <span>Cancel</span>\r\n//             </button>\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n\r\n//       {/* Journal Entries Table */}\r\n//       <div className=\"bg-white border border-gray-200 rounded-lg overflow-hidden\">\r\n//         <div className=\"px-6 py-4 border-b border-gray-200\">\r\n//           <h2 className=\"text-lg font-semibold text-gray-900\">Journal Entries</h2>\r\n//           <p className=\"text-sm text-gray-600 mt-1\">\r\n//             Showing {filteredEntries.length} of {journalEntries.length} entries\r\n//           </p>\r\n//         </div>\r\n\r\n//         <div className=\"overflow-x-auto\">\r\n//           <table className=\"w-full\">\r\n//             <thead className=\"bg-gray-50\">\r\n//               <tr>\r\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                   Entry ID\r\n//                 </th>\r\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                   Date\r\n//                 </th>\r\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                   Description\r\n//                 </th>\r\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                   Reference\r\n//                 </th>\r\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                   Source\r\n//                 </th>\r\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                   Amount\r\n//                 </th>\r\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                   Status\r\n//                 </th>\r\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                   Actions\r\n//                 </th>\r\n//               </tr>\r\n//             </thead>\r\n//             <tbody className=\"bg-white divide-y divide-gray-200\">\r\n//               {filteredEntries.map((entry) => (\r\n//                 <tr key={entry.id} className=\"hover:bg-gray-50\">\r\n//                   <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\r\n//                     {entry.id}\r\n//                   </td>\r\n//                   <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\r\n//                     {entry.date}\r\n//                   </td>\r\n//                   <td className=\"px-6 py-4 text-sm text-gray-900 max-w-xs truncate\">\r\n//                     {entry.description}\r\n//                   </td>\r\n//                   <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\r\n//                     {entry.reference}\r\n//                   </td>\r\n//                   <td className=\"px-6 py-4 whitespace-nowrap\">\r\n//                     <span className={`px-2 py-1 text-xs font-medium rounded-full ${\r\n//                       entry.source === 'POS Sales' ? 'bg-green-100 text-green-800' : \r\n//                       entry.source === 'Manual' ? 'bg-orange-100 text-orange-800' :\r\n//                       'bg-blue-100 text-blue-800'\r\n//                     }`}>\r\n//                       {entry.source}\r\n//                     </span>\r\n//                   </td>\r\n//                   <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\r\n//                     PKR {entry.totalDebit.toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\r\n//                   </td>\r\n//                   <td className=\"px-6 py-4 whitespace-nowrap\">\r\n//                     <span className={`px-2 py-1 text-xs font-medium rounded-full ${\r\n//                       entry.status === 'posted' ? 'bg-blue-100 text-blue-800' : 'bg-yellow-100 text-yellow-800'\r\n//                     }`}>\r\n//                       {entry.status}\r\n//                     </span>\r\n//                   </td>\r\n//                   <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">\r\n//                     <button\r\n//                       onClick={() => setSelectedEntry(entry)}\r\n//                       className=\"text-emerald-600 hover:text-emerald-900 mr-3\"\r\n//                     >\r\n//                       <Eye size={16} />\r\n//                     </button>\r\n//                   </td>\r\n//                 </tr>\r\n//               ))}\r\n//             </tbody>\r\n//           </table>\r\n//         </div>\r\n//       </div>\r\n\r\n//       {/* Entry Details Modal */}\r\n//       {selectedEntry && (\r\n//         <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center p-4 z-50\">\r\n//           <div className=\"bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-y-auto\">\r\n//             <div className=\"px-6 py-4 border-b border-gray-200\">\r\n//               <div className=\"flex items-center justify-between\">\r\n//                 <h3 className=\"text-lg font-semibold text-gray-900\">\r\n//                   Journal Entry Details - {selectedEntry.id}\r\n//                 </h3>\r\n//                 <button\r\n//                   onClick={() => setSelectedEntry(null)}\r\n//                   className=\"text-gray-400 hover:text-gray-600\"\r\n//                 >\r\n//                   <X size={20} />\r\n//                 </button>\r\n//               </div>\r\n//             </div>\r\n            \r\n//             <div className=\"px-6 py-4\">\r\n//               {/* Entry Header */}\r\n//               <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-6\">\r\n//                 <div>\r\n//                   <label className=\"text-sm font-medium text-gray-500\">Date</label>\r\n//                   <p className=\"text-sm text-gray-900\">{selectedEntry.date}</p>\r\n//                 </div>\r\n//                 <div>\r\n//                   <label className=\"text-sm font-medium text-gray-500\">Reference</label>\r\n//                   <p className=\"text-sm text-gray-900\">{selectedEntry.reference}</p>\r\n//                 </div>\r\n//                 <div>\r\n//                   <label className=\"text-sm font-medium text-gray-500\">Description</label>\r\n//                   <p className=\"text-sm text-gray-900\">{selectedEntry.description}</p>\r\n//                 </div>\r\n//                 <div>\r\n//                   <label className=\"text-sm font-medium text-gray-500\">Source</label>\r\n//                   <span className={`px-2 py-1 text-xs font-medium rounded-full ${\r\n//                     selectedEntry.source === 'POS Sales' ? 'bg-green-100 text-green-800' : 'bg-orange-100 text-orange-800'\r\n//                   }`}>\r\n//                     {selectedEntry.source}\r\n//                   </span>\r\n//                 </div>\r\n//               </div>\r\n\r\n//               {/* Entry Lines */}\r\n//               <div className=\"mb-6\">\r\n//                 <h4 className=\"text-sm font-medium text-gray-700 mb-3\">Account Entries</h4>\r\n//                 <div className=\"overflow-x-auto\">\r\n//                   <table className=\"w-full border border-gray-200 rounded\">\r\n//                     <thead className=\"bg-gray-50\">\r\n//                       <tr>\r\n//                         <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500\">Account</th>\r\n//                         <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500\">Description</th>\r\n//                         <th className=\"px-4 py-2 text-right text-xs font-medium text-gray-500\">Debit</th>\r\n//                         <th className=\"px-4 py-2 text-right text-xs font-medium text-gray-500\">Credit</th>\r\n//                       </tr>\r\n//                     </thead>\r\n//                     <tbody className=\"divide-y divide-gray-200\">\r\n//                       {selectedEntry.entries.map((entryLine, index) => (\r\n//                         <tr key={index}>\r\n//                           <td className=\"px-4 py-2 text-sm text-gray-900\">\r\n//                             {getAccountName(entryLine.accountId)}\r\n//                           </td>\r\n//                           <td className=\"px-4 py-2 text-sm text-gray-600\">\r\n//                             {entryLine.description}\r\n//                           </td>\r\n//                           <td className=\"px-4 py-2 text-sm text-gray-900 text-right\">\r\n//                             {entryLine.debit > 0 ? `${entryLine.debit.toFixed(2)}` : '-'}\r\n//                           </td>\r\n//                           <td className=\"px-4 py-2 text-sm text-gray-900 text-right\">\r\n//                             {entryLine.credit > 0 ? `${entryLine.credit.toFixed(2)}` : '-'}\r\n//                           </td>\r\n//                         </tr>\r\n//                       ))}\r\n//                     </tbody>\r\n//                     <tfoot className=\"bg-gray-50\">\r\n//                       <tr>\r\n//                         <td colSpan=\"2\" className=\"px-4 py-2 text-sm font-medium text-gray-900\">\r\n//                           Totals:\r\n//                         </td>\r\n//                         <td className=\"px-4 py-2 text-sm font-bold text-gray-900 text-right\">\r\n//                           PKR {selectedEntry.totalDebit.toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\r\n//                         </td>\r\n//                         <td className=\"px-4 py-2 text-sm font-bold text-gray-900 text-right\">\r\n//                           PKR {selectedEntry.totalCredit.toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\r\n//                         </td>\r\n//                       </tr>\r\n//                     </tfoot>\r\n//                   </table>\r\n//                 </div>\r\n//               </div>\r\n\r\n//               {/* Original Order Info (if available) */}\r\n//               {selectedEntry.originalOrder && (\r\n//                 <div className=\"mb-6 p-4 bg-gray-50 rounded-lg\">\r\n//                   <h4 className=\"text-sm font-medium text-gray-700 mb-3\">Original Sales Order Details</h4>\r\n//                   <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\r\n//                     <div>\r\n//                       <span className=\"font-medium text-gray-500\">Order ID:</span>\r\n//                       <p className=\"text-gray-900\">{selectedEntry.originalOrder.orderId}</p>\r\n//                     </div>\r\n//                     <div>\r\n//                       <span className=\"font-medium text-gray-500\">Status:</span>\r\n//                       <p className=\"text-gray-900\">{selectedEntry.originalOrder.status}</p>\r\n//                     </div>\r\n//                     <div>\r\n//                       <span className=\"font-medium text-gray-500\">Payment Status:</span>\r\n//                       <p className=\"text-gray-900\">{selectedEntry.originalOrder.paid ? 'Paid' : 'Unpaid'}</p>\r\n//                     </div>\r\n//                     <div>\r\n//                       <span className=\"font-medium text-gray-500\">Fulfilled:</span>\r\n//                       <p className=\"text-gray-900\">{selectedEntry.originalOrder.fulfilled ? 'Yes' : 'No'}</p>\r\n//                     </div>\r\n//                   </div>\r\n                  \r\n//                   {/* Line Items */}\r\n//                   <div className=\"mt-4\">\r\n//                     <span className=\"font-medium text-gray-500\">Line Items:</span>\r\n//                     <div className=\"mt-2 space-y-2\">\r\n//                       {selectedEntry.originalOrder.lineItems.map((item, index) => (\r\n//                         <div key={index} className=\"text-sm bg-white p-2 rounded border\">\r\n//                           <span className=\"font-medium\">{item.productName}</span> - \r\n//                           Qty: {item.quantity}, Price: PKR {parseFloat(item.price).toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}, \r\n//                           Total: PKR {parseFloat(item.total).toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\r\n//                           {item.taxAmount > 0 && <span className=\"text-gray-500\"> (Tax: PKR {parseFloat(item.taxAmount).toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})})</span>}\r\n//                         </div>\r\n//                       ))}\r\n//                     </div>\r\n//                   </div>\r\n//                 </div>\r\n//               )}\r\n\r\n//               {/* Entry Metadata */}\r\n//               <div className=\"text-xs text-gray-500\">\r\n//                 <p>Created: {new Date(selectedEntry.createdAt).toLocaleString()}</p>\r\n//                 <p>Status: {selectedEntry.status}</p>\r\n//                 <p>Type: {selectedEntry.transactionType}</p>\r\n//               </div>\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n\r\n//       {/* Trial Balance Modal */}\r\n//       {showTrialBalance && (\r\n//         <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center p-4 z-50\">\r\n//           <div className=\"bg-white rounded-lg max-w-5xl w-full max-h-[90vh] overflow-y-auto\">\r\n//             <div className=\"px-6 py-4 border-b border-gray-200\">\r\n//               <div className=\"flex items-center justify-between\">\r\n//                 <h3 className=\"text-lg font-semibold text-gray-900\">\r\n//                   Trial Balance - As of {new Date().toLocaleDateString()}\r\n//                 </h3>\r\n//                 <div className=\"flex items-center space-x-2\">\r\n//                   <button\r\n//                     onClick={() => {\r\n//                       // Export functionality would go here\r\n//                       alert('Export functionality would be implemented here');\r\n//                     }}\r\n//                     className=\"px-3 py-1 bg-emerald-600 text-white rounded text-sm hover:bg-emerald-700 flex items-center space-x-1\"\r\n//                   >\r\n//                     <Download size={14} />\r\n//                     <span>Export</span>\r\n//                   </button>\r\n//                   <button\r\n//                     onClick={() => setShowTrialBalance(false)}\r\n//                     className=\"text-gray-400 hover:text-gray-600\"\r\n//                   >\r\n//                     <X size={20} />\r\n//                   </button>\r\n//                 </div>\r\n//               </div>\r\n//             </div>\r\n            \r\n//             <div className=\"px-6 py-4\">\r\n//               <div className=\"overflow-x-auto\">\r\n//                 <table className=\"w-full\">\r\n//                   <thead className=\"bg-gray-50\">\r\n//                     <tr>\r\n//                       <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                         Account Code\r\n//                       </th>\r\n//                       <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                         Account Name\r\n//                       </th>\r\n//                       <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                         Type\r\n//                       </th>\r\n//                       <th className=\"px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                         Debit Total\r\n//                       </th>\r\n//                       <th className=\"px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                         Credit Total\r\n//                       </th>\r\n//                       <th className=\"px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                         Balance\r\n//                       </th>\r\n//                     </tr>\r\n//                   </thead>\r\n//                   <tbody className=\"bg-white divide-y divide-gray-200\">\r\n//                     {trialBalance.map((account) => (\r\n//                       <tr key={account.accountId}>\r\n//                         <td className=\"px-4 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\r\n//                           {account.accountCode}\r\n//                         </td>\r\n//                         <td className=\"px-4 py-4 whitespace-nowrap text-sm text-gray-900\">\r\n//                           {account.accountName}\r\n//                         </td>\r\n//                         <td className=\"px-4 py-4 whitespace-nowrap\">\r\n//                           <span className={`px-2 py-1 text-xs font-medium rounded-full ${\r\n//                             account.accountType === 'assets' ? 'bg-green-100 text-green-800' :\r\n//                             account.accountType === 'liabilities' ? 'bg-red-100 text-red-800' :\r\n//                             account.accountType === 'equity' ? 'bg-blue-100 text-blue-800' :\r\n//                             account.accountType === 'revenue' ? 'bg-purple-100 text-purple-800' :\r\n//                             'bg-orange-100 text-orange-800'\r\n//                           }`}>\r\n//                             {account.accountType}\r\n//                           </span>\r\n//                         </td>\r\n//                         <td className=\"px-4 py-4 whitespace-nowrap text-sm text-gray-900 text-right\">\r\n//                           PKR {account.debit.toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\r\n//                         </td>\r\n//                         <td className=\"px-4 py-4 whitespace-nowrap text-sm text-gray-900 text-right\">\r\n//                           PKR {account.credit.toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\r\n//                         </td>\r\n//                         <td className=\"px-4 py-4 whitespace-nowrap text-sm font-medium text-right\">\r\n//                           <span className={account.balance >= 0 ? 'text-green-600' : 'text-red-600'}>\r\n//                             PKR {Math.abs(account.balance).toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\r\n//                             {account.balance < 0 && ' (CR)'}\r\n//                           </span>\r\n//                         </td>\r\n//                       </tr>\r\n//                     ))}\r\n//                   </tbody>\r\n//                   <tfoot className=\"bg-gray-50\">\r\n//                     <tr>\r\n//                       <td colSpan=\"3\" className=\"px-4 py-3 text-sm font-bold text-gray-900\">\r\n//                         TOTALS:\r\n//                       </td>\r\n//                       <td className=\"px-4 py-3 text-sm font-bold text-gray-900 text-right\">\r\n//                         PKR {trialBalance.reduce((sum, acc) => sum + acc.debit, 0).toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\r\n//                       </td>\r\n//                       <td className=\"px-4 py-3 text-sm font-bold text-gray-900 text-right\">\r\n//                         PKR {trialBalance.reduce((sum, acc) => sum + acc.credit, 0).toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\r\n//                       </td>\r\n//                       <td className=\"px-4 py-3 text-sm font-bold text-gray-900 text-right\">\r\n//                         PKR {Math.abs(trialBalance.reduce((sum, acc) => sum + acc.balance, 0)).toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\r\n//                       </td>\r\n//                     </tr>\r\n//                   </tfoot>\r\n//                 </table>\r\n//               </div>\r\n              \r\n//               {/* Trial Balance Validation */}\r\n//               <div className=\"mt-4 p-4 bg-green-50 border border-green-200 rounded-lg\">\r\n//                 <div className=\"flex items-center\">\r\n//                   <CheckCircle className=\"text-green-600 mr-2\" size={20} />\r\n//                   <div>\r\n//                     <h4 className=\"font-medium text-green-800\">Trial Balance is Balanced</h4>\r\n//                     <p className=\"text-sm text-green-700\">\r\n//                       Total Debits = Total Credits = PKR {trialBalance.reduce((sum, acc) => sum + acc.debit, 0).toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\r\n//                     </p>\r\n//                   </div>\r\n//                 </div>\r\n//               </div>\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n\r\n//       {/* Integration Status */}\r\n//       <div className=\"mt-8 grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n//         <div className=\"p-4 bg-green-50 border border-green-200 rounded-lg\">\r\n//           <div className=\"flex items-center mb-2\">\r\n//             <CheckCircle className=\"text-green-600 mr-2\" size={16} />\r\n//             <h4 className=\"font-medium text-green-800\">POS API Integration</h4>\r\n//           </div>\r\n//           <p className=\"text-sm text-green-700\">\r\n//             Sales orders automatically create journal entries from live API data\r\n//           </p>\r\n//         </div>\r\n\r\n//         <div className=\"p-4 bg-blue-50 border border-blue-200 rounded-lg\">\r\n//           <div className=\"flex items-center mb-2\">\r\n//             <RefreshCw className=\"text-blue-600 mr-2\" size={16} />\r\n//             <h4 className=\"font-medium text-blue-800\">Real-time Sync</h4>\r\n//           </div>\r\n//           <p className=\"text-sm text-blue-700\">\r\n//             Journal entries updated automatically with each sales transaction\r\n//           </p>\r\n//         </div>\r\n\r\n//         <div className=\"p-4 bg-orange-50 border border-orange-200 rounded-lg\">\r\n//           <div className=\"flex items-center mb-2\">\r\n//             <FileText className=\"text-orange-600 mr-2\" size={16} />\r\n//             <h4 className=\"font-medium text-orange-800\">Manual Entries</h4>\r\n//           </div>\r\n//           <p className=\"text-sm text-orange-700\">\r\n//             Add adjustments and corrections with full double-entry validation\r\n//           </p>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default GeneralLedger;\r\n\r\n\r\n\r\n// //correct\r\n// import React, { useState, useEffect, useCallback } from 'react';\r\n// import { \r\n//   Book, \r\n//   Plus, \r\n//   Filter, \r\n//   Search, \r\n//   Calendar, \r\n//   FileText, \r\n//   Edit, \r\n//   Trash2, \r\n//   Save, \r\n//   X, \r\n//   AlertCircle,\r\n//   CheckCircle,\r\n//   DollarSign,\r\n//   TrendingUp,\r\n//   Eye,\r\n//   Download,\r\n//   RefreshCw\r\n// } from 'lucide-react';\r\n\r\n// const GeneralLedger = () => {\r\n//   const [journalEntries, setJournalEntries] = useState([]);\r\n//   const [accounts, setAccounts] = useState([]);\r\n//   const [filteredEntries, setFilteredEntries] = useState([]);\r\n//   const [selectedEntry, setSelectedEntry] = useState(null);\r\n//   const [isAddingEntry, setIsAddingEntry] = useState(false);\r\n//   const [loading, setLoading] = useState({\r\n//     entries: false,\r\n//     accounts: false\r\n//   });\r\n//   const [errors, setErrors] = useState({\r\n//     entries: null,\r\n//     accounts: null\r\n//   });\r\n//   const [filters, setFilters] = useState({\r\n//     dateFrom: '',\r\n//     dateTo: '',\r\n//     accountId: '',\r\n//     transactionType: 'all',\r\n//     searchTerm: ''\r\n//   });\r\n//   const [trialBalance, setTrialBalance] = useState([]);\r\n//   const [showTrialBalance, setShowTrialBalance] = useState(false);\r\n//   const [newEntry, setNewEntry] = useState({\r\n//     date: new Date().toISOString().split('T')[0],\r\n//     description: '',\r\n//     reference: '',\r\n//     entries: [\r\n//       { accountId: '', debit: 0, credit: 0, description: '' },\r\n//       { accountId: '', debit: 0, credit: 0, description: '' }\r\n//     ]\r\n//   });\r\n\r\n//   // API Configuration\r\n//   const API_BASE_URL = 'https://api-pos.hulmsolutions.com/POS/accounting2/31fc8df0-61db-41e5-bb67-070fde367ea1/orders?start=0&size=200';\r\n//   const API_BASE_URL_CHARTS_OF_ACCOUNTS = 'http://localhost:8080/api/accounts';\r\n\r\n//   // Fetch order data from API\r\n//   const fetchOrderData = async () => {\r\n//     try {\r\n//       const response = await fetch(API_BASE_URL, {\r\n//         method: 'GET',\r\n//         headers: {\r\n//           'Authorization': 'Bearer Hamid',\r\n//           'Content-Type': 'application/json',\r\n//         },\r\n//       });\r\n      \r\n//       if (!response.ok) {\r\n//         throw new Error(`API request failed with status ${response.status}`);\r\n//       }\r\n      \r\n//       const data = await response.json();\r\n//       return data;\r\n//     } catch (error) {\r\n//       console.error('Error fetching order data:', error);\r\n//       return null;\r\n//     }\r\n//   };\r\n\r\n//   // Format date from API format\r\n//   const formatDateFromCreatedAt = (createdAt) => {\r\n//     try {\r\n//       const parts = createdAt.split('.');\r\n//       if (parts.length >= 3) {\r\n//         return `${parts[0]}-${parts[1].padStart(2, '0')}-${parts[2].padStart(2, '0')}`;\r\n//       }\r\n//       return new Date().toISOString().split('T')[0];\r\n//     } catch (error) {\r\n//       return new Date().toISOString().split('T')[0];\r\n//     }\r\n//   };\r\n\r\n//   // Fetch Charts of Accounts from API\r\n//   const loadChartsOfAccounts = useCallback(async () => {\r\n//     setLoading(prev => ({ ...prev, accounts: true }));\r\n//     setErrors(prev => ({ ...prev, accounts: null }));\r\n    \r\n//     try {\r\n//       const response = await fetch(API_BASE_URL_CHARTS_OF_ACCOUNTS, {\r\n//         method: 'GET',\r\n//         headers: {\r\n//           'Content-Type': 'application/json',\r\n//         },\r\n//       });\r\n      \r\n//       if (!response.ok) {\r\n//         throw new Error(`Failed to fetch accounts: ${response.status}`);\r\n//       }\r\n      \r\n//       const data = await response.json();\r\n//       console.log('Raw accounts data from API:', data);\r\n      \r\n//       const formattedAccounts = data\r\n//         .filter(account => account[4] === 'account')\r\n//         .map(account => ({\r\n//           id: account[0],\r\n//           code: account[1],\r\n//           name: account[2],\r\n//           type: account[3],\r\n//           category: account[4],\r\n//           parentId: account[5],\r\n//           level: account[6],\r\n//           description: account[7] || ''\r\n//         }))\r\n//         .sort((a, b) => a.code.localeCompare(b.code));\r\n      \r\n//       console.log('Formatted accounts:', formattedAccounts);\r\n//       setAccounts(formattedAccounts);\r\n//       setLoading(prev => ({ ...prev, accounts: false }));\r\n      \r\n//       return formattedAccounts;\r\n//     } catch (error) {\r\n//       console.error('Error loading charts of accounts:', error);\r\n//       setErrors(prev => ({ ...prev, accounts: error.message }));\r\n//       setLoading(prev => ({ ...prev, accounts: false }));\r\n      \r\n//       const fallbackAccounts = [\r\n//         { id: '1111', code: '1111', name: 'Petty Cash', type: 'assets', category: 'account' },\r\n//         { id: '1112', code: '1112', name: 'Bank - Main Account', type: 'assets', category: 'account' },\r\n//         { id: '1120', code: '1120', name: 'Accounts Receivable', type: 'assets', category: 'account' },\r\n//         { id: '1130', code: '1130', name: 'Inventory', type: 'assets', category: 'account' },\r\n//         { id: '2110', code: '2110', name: 'Accounts Payable', type: 'liabilities', category: 'account' },\r\n//         { id: '2130', code: '2130', name: 'Sales Tax Payable', type: 'liabilities', category: 'account' },\r\n//         { id: '4100', code: '4100', name: 'Sales Revenue', type: 'revenue', category: 'account' },\r\n//         { id: '4110', code: '4110', name: 'Electronics Sales', type: 'revenue', category: 'account' },\r\n//         { id: '5100', code: '5100', name: 'Cost of Goods Sold', type: 'expenses', category: 'account' },\r\n//         { id: '5200', code: '5200', name: 'Purchase Expenses', type: 'expenses', category: 'account' }\r\n//       ];\r\n      \r\n//       setAccounts(fallbackAccounts);\r\n//       return fallbackAccounts;\r\n//     }\r\n//   }, []);\r\n\r\n//   // Convert Sales Order to Journal Entry\r\n//   const convertSalesOrderToJournalEntry = useCallback((order, accountsList) => {\r\n//     const entries = [];\r\n    \r\n//     const subTotal = parseFloat(order.subTotal) || 0;\r\n//     const taxAmount = parseFloat(order.taxAmount) || 0;\r\n//     const total = parseFloat(order.total) || 0;\r\n    \r\n//     if (!order.paid || !order.fulfilled || order.status !== 'Closed') {\r\n//       return null;\r\n//     }\r\n    \r\n//     const findAccountByType = (type) => {\r\n//       const matchingAccount = accountsList.find(acc => \r\n//         acc.type.toLowerCase() === type.toLowerCase()\r\n//       );\r\n//       return matchingAccount || { \r\n//         id: 'UNKNOWN', \r\n//         name: `Unknown ${type} Account`, \r\n//         code: 'N/A' \r\n//       };\r\n//     };\r\n    \r\n//     const cashAccount = findAccountByType('assets');\r\n//     entries.push({\r\n//       accountId: cashAccount.id,\r\n//       accountName: cashAccount.name,\r\n//       accountCode: cashAccount.code,\r\n//       debit: total,\r\n//       credit: 0,\r\n//       description: `Cash received from Order #${order.orderId} - ${order.lineItems.map(item => item.productName).join(', ')}`\r\n//     });\r\n\r\n//     if (subTotal > 0) {\r\n//       const revenueAccount = findAccountByType('revenue');\r\n//       entries.push({\r\n//         accountId: revenueAccount.id,\r\n//         accountName: revenueAccount.name,\r\n//         accountCode: revenueAccount.code,\r\n//         debit: 0,\r\n//         credit: subTotal,\r\n//         description: `Revenue from Order #${order.orderId}`\r\n//       });\r\n//     }\r\n\r\n//     if (taxAmount > 0) {\r\n//       const taxAccount = findAccountByType('liabilities');\r\n//       entries.push({\r\n//         accountId: taxAccount.id,\r\n//         accountName: taxAccount.name,\r\n//         accountCode: taxAccount.code,\r\n//         debit: 0,\r\n//         credit: taxAmount,\r\n//         description: `${order.taxRate}% tax collected on Order #${order.orderId}`\r\n//       });\r\n//     }\r\n\r\n//     let totalCOGS = 0;\r\n//     order.lineItems.forEach(item => {\r\n//       if (item.fulfilled && item.status === 'Fulfilled') {\r\n//         const costPrice = parseFloat(item.costPrice) || 0;\r\n//         const quantity = parseFloat(item.quantity) || 0;\r\n//         const itemCOGS = costPrice * quantity;\r\n//         totalCOGS += itemCOGS;\r\n//       }\r\n//     });\r\n\r\n//     if (totalCOGS > 0) {\r\n//       const cogsAccount = findAccountByType('expenses');\r\n//       entries.push({\r\n//         accountId: cogsAccount.id,\r\n//         accountName: cogsAccount.name,\r\n//         accountCode: cogsAccount.code,\r\n//         debit: totalCOGS,\r\n//         credit: 0,\r\n//         description: `COGS for Order #${order.orderId}`\r\n//       });\r\n\r\n//       const inventoryAccount = findAccountByType('assets');\r\n//       entries.push({\r\n//         accountId: inventoryAccount.id,\r\n//         accountName: inventoryAccount.name,\r\n//         accountCode: inventoryAccount.code,\r\n//         debit: 0,\r\n//         credit: totalCOGS,\r\n//         description: `Inventory reduction - Order #${order.orderId}`\r\n//       });\r\n//     }\r\n\r\n//     const totalDebit = entries.reduce((sum, entry) => sum + parseFloat(entry.debit || 0), 0);\r\n//     const totalCredit = entries.reduce((sum, entry) => sum + parseFloat(entry.credit || 0), 0);\r\n\r\n//     return {\r\n//       id: `JE-ORDER-${order.orderId}`,\r\n//       date: formatDateFromCreatedAt(order.createdAt),\r\n//       description: `Sales Order #${order.orderId} - ${order.lineItems.map(item => `${item.productName} (${item.quantity})`).join(', ')}`,\r\n//       reference: `ORDER-${order.orderId}`,\r\n//       transactionType: 'automatic',\r\n//       source: 'POS Sales',\r\n//       status: 'posted',\r\n//       entries: entries,\r\n//       totalDebit: Math.round(totalDebit * 100) / 100,\r\n//       totalCredit: Math.round(totalCredit * 100) / 100,\r\n//       createdAt: order.createdAt,\r\n//       originalOrder: order\r\n//     };\r\n//   }, []);\r\n\r\n//   // Load Journal Entries from API and Local Storage\r\n//   const loadJournalEntriesFromAPI = useCallback(async () => {\r\n//     setLoading(prev => ({ ...prev, entries: true }));\r\n//     setErrors(prev => ({ ...prev, entries: null }));\r\n    \r\n//     try {\r\n//       const salesOrders = await fetchOrderData();\r\n      \r\n//       if (!salesOrders) {\r\n//         throw new Error('Failed to fetch sales orders');\r\n//       }\r\n      \r\n//       const journalEntriesFromSales = salesOrders\r\n//         .filter(order => order.paid && order.fulfilled && order.status === 'Closed')\r\n//         .map(order => convertSalesOrderToJournalEntry(order, accounts))\r\n//         .filter(entry => entry !== null);\r\n      \r\n//       let manualEntries = [];\r\n//       try {\r\n//         const storedEntries = localStorage.getItem('manualJournalEntries');\r\n//         manualEntries = storedEntries ? JSON.parse(storedEntries) : [];\r\n//       } catch (error) {\r\n//         console.warn('Error loading manual entries from localStorage:', error);\r\n//         manualEntries = [];\r\n//       }\r\n      \r\n//       const allEntries = [...journalEntriesFromSales, ...manualEntries];\r\n      \r\n//       setJournalEntries(allEntries);\r\n//       setFilteredEntries(allEntries);\r\n//       setLoading(prev => ({ ...prev, entries: false }));\r\n//     } catch (error) {\r\n//       console.error('Error loading journal entries:', error);\r\n//       setErrors(prev => ({ ...prev, entries: error.message }));\r\n//       setLoading(prev => ({ ...prev, entries: false }));\r\n//     }\r\n//   }, [accounts, convertSalesOrderToJournalEntry]);\r\n\r\n//   // Filter entries\r\n//   const filterEntries = useCallback(() => {\r\n//     let filtered = [...journalEntries];\r\n\r\n//     if (filters.dateFrom) {\r\n//       filtered = filtered.filter(entry => entry.date >= filters.dateFrom);\r\n//     }\r\n    \r\n//     if (filters.dateTo) {\r\n//       filtered = filtered.filter(entry => entry.date <= filters.dateTo);\r\n//     }\r\n    \r\n//     if (filters.accountId) {\r\n//       filtered = filtered.filter(entry => {\r\n//         return entry.entries.some(e => e.accountId === filters.accountId);\r\n//       });\r\n//     }\r\n    \r\n//     if (filters.transactionType !== 'all') {\r\n//       filtered = filtered.filter(entry => entry.transactionType === filters.transactionType);\r\n//     }\r\n    \r\n//     if (filters.searchTerm) {\r\n//       const term = filters.searchTerm.toLowerCase();\r\n//       filtered = filtered.filter(entry => \r\n//         entry.description.toLowerCase().includes(term) ||\r\n//         entry.reference.toLowerCase().includes(term) ||\r\n//         entry.entries.some(e => e.description.toLowerCase().includes(term))\r\n//       );\r\n//     }\r\n\r\n//     setFilteredEntries(filtered);\r\n//   }, [journalEntries, filters]);\r\n\r\n//   // Generate trial balance\r\n//   const generateTrialBalance = useCallback(() => {\r\n//     const balances = {};\r\n    \r\n//     const requiredAccountIds = new Set();\r\n    \r\n//     journalEntries.forEach(entry => {\r\n//       if (entry.status === 'posted') {\r\n//         entry.entries.forEach(entryLine => {\r\n//           if (entryLine.accountId) {\r\n//             requiredAccountIds.add(entryLine.accountId);\r\n//           }\r\n//         });\r\n//       }\r\n//     });\r\n    \r\n//     const accountTypesMap = {};\r\n//     accounts.forEach(account => {\r\n//       accountTypesMap[account.id] = account.type;\r\n//       accountTypesMap[account.code] = account.type;\r\n//     });\r\n    \r\n//     accounts.forEach(account => {\r\n//       if (account.category !== 'header') {\r\n//         balances[account.id] = {\r\n//           accountId: account.id,\r\n//           accountCode: account.code,\r\n//           accountName: account.name,\r\n//           accountType: account.type || 'unknown',\r\n//           debit: 0,\r\n//           credit: 0,\r\n//           balance: 0\r\n//         };\r\n//       }\r\n//     });\r\n    \r\n//     requiredAccountIds.forEach(accountId => {\r\n//       if (!balances[accountId]) {\r\n//         let accountName = '';\r\n//         let accountType = '';\r\n        \r\n//         journalEntries.forEach(entry => {\r\n//           entry.entries.forEach(entryLine => {\r\n//             if (entryLine.accountId === accountId) {\r\n//               if (entryLine.accountName) accountName = entryLine.accountName;\r\n//             }\r\n//           });\r\n//         });\r\n        \r\n//         const prefix = accountId.toString().substring(0, 1);\r\n//         if (prefix === '1') accountType = 'assets';\r\n//         else if (prefix === '2') accountType = 'liabilities';\r\n//         else if (prefix === '3') accountType = 'equity';\r\n//         else if (prefix === '4') accountType = 'revenue';\r\n//         else if (prefix === '5') accountType = 'expenses';\r\n//         else accountType = accountTypesMap[accountId] || 'unknown';\r\n        \r\n//         balances[accountId] = {\r\n//           accountId: accountId,\r\n//           accountCode: accountId,\r\n//           accountName: accountName || `Account ${accountId}`,\r\n//           accountType: accountType,\r\n//           debit: 0,\r\n//           credit: 0,\r\n//           balance: 0\r\n//         };\r\n//       }\r\n//     });\r\n    \r\n//     journalEntries.forEach(entry => {\r\n//       if (entry.status === 'posted') {\r\n//         entry.entries.forEach(entryLine => {\r\n//           const accountId = entryLine.accountId;\r\n//           if (balances[accountId]) {\r\n//             balances[accountId].debit += parseFloat(entryLine.debit || 0);\r\n//             balances[accountId].credit += parseFloat(entryLine.credit || 0);\r\n            \r\n//             if (entryLine.accountName && !balances[accountId].accountName) {\r\n//               balances[accountId].accountName = entryLine.accountName;\r\n//             }\r\n//           }\r\n//         });\r\n//       }\r\n//     });\r\n\r\n//     Object.values(balances).forEach(account => {\r\n//       if (account.accountType === 'assets' || account.accountType === 'expenses') {\r\n//         account.balance = account.debit - account.credit;\r\n//       } else {\r\n//         account.balance = account.credit - account.debit;\r\n//       }\r\n//     });\r\n\r\n//     const trialBalanceData = Object.values(balances)\r\n//       .filter(account => account.debit > 0 || account.credit > 0)\r\n//       .sort((a, b) => a.accountCode.localeCompare(b.accountCode));\r\n    \r\n//     setTrialBalance(trialBalanceData);\r\n//     setShowTrialBalance(true);\r\n//   }, [accounts, journalEntries]);\r\n\r\n//   // Helper functions for entry management\r\n//   const addEntryLine = () => {\r\n//     setNewEntry({\r\n//       ...newEntry,\r\n//       entries: [...newEntry.entries, { accountId: '', debit: 0, credit: 0, description: '' }]\r\n//     });\r\n//   };\r\n\r\n//   const removeEntryLine = (index) => {\r\n//     if (newEntry.entries.length > 2) {\r\n//       const updatedEntries = newEntry.entries.filter((_, i) => i !== index);\r\n//       setNewEntry({ ...newEntry, entries: updatedEntries });\r\n//     }\r\n//   };\r\n\r\n//   const updateEntryLine = (index, field, value) => {\r\n//     const updatedEntries = [...newEntry.entries];\r\n//     updatedEntries[index] = { ...updatedEntries[index], [field]: value };\r\n//     setNewEntry({ ...newEntry, entries: updatedEntries });\r\n//   };\r\n\r\n//   const calculateTotals = (entries) => {\r\n//     const totalDebit = entries.reduce((sum, entry) => sum + (parseFloat(entry.debit) || 0), 0);\r\n//     const totalCredit = entries.reduce((sum, entry) => sum + (parseFloat(entry.credit) || 0), 0);\r\n//     return { totalDebit, totalCredit };\r\n//   };\r\n\r\n//   const isBalanced = (entries) => {\r\n//     const { totalDebit, totalCredit } = calculateTotals(entries);\r\n//     return Math.abs(totalDebit - totalCredit) < 0.01;\r\n//   };\r\n\r\n//   const saveJournalEntry = () => {\r\n//     if (!newEntry.description || !newEntry.entries.every(e => e.accountId)) {\r\n//       alert('Please fill in all required fields');\r\n//       return;\r\n//     }\r\n\r\n//     if (!isBalanced(newEntry.entries)) {\r\n//       alert('Journal entry must be balanced - total debits must equal total credits');\r\n//       return;\r\n//     }\r\n\r\n//     const { totalDebit, totalCredit } = calculateTotals(newEntry.entries);\r\n    \r\n//     const entriesWithNames = newEntry.entries.map(entry => ({\r\n//       ...entry,\r\n//       accountName: accounts.find(acc => acc.id === entry.accountId)?.name || '',\r\n//       debit: parseFloat(entry.debit) || 0,\r\n//       credit: parseFloat(entry.credit) || 0\r\n//     }));\r\n\r\n//     const journalEntry = {\r\n//       id: `JE-MANUAL-${Date.now()}`,\r\n//       date: newEntry.date,\r\n//       description: newEntry.description,\r\n//       reference: newEntry.reference || `MAN${Date.now()}`,\r\n//       transactionType: 'manual',\r\n//       source: 'Manual',\r\n//       status: 'posted',\r\n//       entries: entriesWithNames,\r\n//       totalDebit,\r\n//       totalCredit,\r\n//       createdAt: new Date().toISOString()\r\n//     };\r\n\r\n//     try {\r\n//       const existingManualEntries = JSON.parse(localStorage.getItem('manualJournalEntries') || '[]');\r\n//       const updatedManualEntries = [...existingManualEntries, journalEntry];\r\n//       localStorage.setItem('manualJournalEntries', JSON.stringify(updatedManualEntries));\r\n//     } catch (error) {\r\n//       console.warn('Could not save to localStorage:', error);\r\n//     }\r\n\r\n//     setJournalEntries([...journalEntries, journalEntry]);\r\n    \r\n//     setNewEntry({\r\n//       date: new Date().toISOString().split('T')[0],\r\n//       description: '',\r\n//       reference: '',\r\n//       entries: [\r\n//         { accountId: '', debit: 0, credit: 0, description: '' },\r\n//         { accountId: '', debit: 0, credit: 0, description: '' }\r\n//       ]\r\n//     });\r\n//     setIsAddingEntry(false);\r\n//   };\r\n\r\n//   const getAccountName = useCallback((accountId) => {\r\n//     const account = accounts.find(acc => acc.id === accountId || acc.code === accountId);\r\n    \r\n//     if (account) {\r\n//       return `${account.code} - ${account.name}`;\r\n//     }\r\n    \r\n//     let accountName = '';\r\n    \r\n//     journalEntries.forEach(entry => {\r\n//       entry.entries.forEach(entryLine => {\r\n//         if (entryLine.accountId === accountId && entryLine.accountName) {\r\n//           accountName = entryLine.accountName;\r\n//         }\r\n//       });\r\n//     });\r\n    \r\n//     if (accountName) {\r\n//       return `${accountId} - ${accountName}`;\r\n//     }\r\n    \r\n//     const prefix = accountId.toString().substring(0, 1);\r\n//     let accountType = '';\r\n    \r\n//     if (prefix === '1') accountType = 'Assets';\r\n//     else if (prefix === '2') accountType = 'Liabilities';\r\n//     else if (prefix === '3') accountType = 'Equity';\r\n//     else if (prefix === '4') accountType = 'Revenue';\r\n//     else if (prefix === '5') accountType = 'Expenses';\r\n    \r\n//     return accountType ? `${accountId} - ${accountType} Account` : `${accountId} - Unknown Account`;\r\n//   }, [accounts, journalEntries]);\r\n\r\n//   // useEffect hooks\r\n//   useEffect(() => {\r\n//     loadChartsOfAccounts();\r\n//   }, [loadChartsOfAccounts]);\r\n\r\n//   useEffect(() => {\r\n//     if (accounts.length > 0) {\r\n//       loadJournalEntriesFromAPI();\r\n//     }\r\n//   }, [accounts, loadJournalEntriesFromAPI]);\r\n\r\n//   useEffect(() => {\r\n//     if (journalEntries.length > 0) {\r\n//       filterEntries();\r\n//     }\r\n//   }, [journalEntries, filters, filterEntries]);\r\n\r\n//   const { totalDebit, totalCredit } = calculateTotals(newEntry.entries);\r\n//   const entryIsBalanced = isBalanced(newEntry.entries);\r\n\r\n//   return (\r\n//     <div className=\"max-w-7xl mx-auto p-6 bg-white\">\r\n//       {/* Header */}\r\n//       <div className=\"mb-8\">\r\n//         <h1 className=\"text-3xl font-bold text-gray-900 mb-2 flex items-center\">\r\n//           <Book className=\"mr-3 text-emerald-600\" />\r\n//           General Ledger\r\n//         </h1>\r\n//         <p className=\"text-gray-600\">Real-time transaction recording and journal entry management</p>\r\n        \r\n//         {loading.accounts && (\r\n//           <div className=\"mt-2 p-2 bg-blue-50 text-blue-700 rounded-md text-sm flex items-center\">\r\n//             <RefreshCw className=\"animate-spin mr-2\" size={16} />\r\n//             Loading chart of accounts...\r\n//           </div>\r\n//         )}\r\n        \r\n//         {errors.accounts && (\r\n//           <div className=\"mt-2 p-2 bg-red-50 text-red-700 rounded-md text-sm flex items-center\">\r\n//             <AlertCircle className=\"mr-2\" size={16} />\r\n//             Error loading accounts: {errors.accounts}\r\n//           </div>\r\n//         )}\r\n\r\n//         {loading.entries && (\r\n//           <div className=\"mt-2 p-2 bg-blue-50 text-blue-700 rounded-md text-sm flex items-center\">\r\n//             <RefreshCw className=\"animate-spin mr-2\" size={16} />\r\n//             Loading journal entries...\r\n//           </div>\r\n//         )}\r\n        \r\n//         {errors.entries && (\r\n//           <div className=\"mt-2 p-2 bg-red-50 text-red-700 rounded-md text-sm flex items-center\">\r\n//             <AlertCircle className=\"mr-2\" size={16} />\r\n//             Error loading entries: {errors.entries}\r\n//           </div>\r\n//         )}\r\n//       </div>\r\n\r\n//       {/* Quick Stats */}\r\n//       <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\r\n//         <div className=\"bg-blue-50 p-4 rounded-lg border border-blue-200\">\r\n//           <div className=\"flex items-center justify-between\">\r\n//             <div>\r\n//               <p className=\"text-blue-600 text-sm font-medium\">Total Entries</p>\r\n//               <p className=\"text-2xl font-bold text-blue-900\">{journalEntries.length}</p>\r\n//             </div>\r\n//             <FileText className=\"text-blue-600\" size={24} />\r\n//           </div>\r\n//         </div>\r\n\r\n//         <div className=\"bg-green-50 p-4 rounded-lg border border-green-200\">\r\n//           <div className=\"flex items-center justify-between\">\r\n//             <div>\r\n//               <p className=\"text-green-600 text-sm font-medium\">POS Entries</p>\r\n//               <p className=\"text-2xl font-bold text-green-900\">\r\n//                 {journalEntries.filter(e => e.source === 'POS Sales').length}\r\n//               </p>\r\n//             </div>\r\n//             <TrendingUp className=\"text-green-600\" size={24} />\r\n//           </div>\r\n//         </div>\r\n\r\n//         <div className=\"bg-orange-50 p-4 rounded-lg border border-orange-200\">\r\n//           <div className=\"flex items-center justify-between\">\r\n//             <div>\r\n//               <p className=\"text-orange-600 text-sm font-medium\">Manual Entries</p>\r\n//               <p className=\"text-2xl font-bold text-orange-900\">\r\n//                 {journalEntries.filter(e => e.transactionType === 'manual').length}\r\n//               </p>\r\n//             </div>\r\n//             <Edit className=\"text-orange-600\" size={24} />\r\n//           </div>\r\n//         </div>\r\n\r\n//         <div className=\"bg-purple-50 p-4 rounded-lg border border-purple-200\">\r\n//           <div className=\"flex items-center justify-between\">\r\n//             <div>\r\n//               <p className=\"text-purple-600 text-sm font-medium\">Total Value</p>\r\n//               <p className=\"text-2xl font-bold text-purple-900\">\r\n//                 PKR {journalEntries.reduce((sum, entry) => sum + entry.totalDebit, 0).toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\r\n//               </p>\r\n//             </div>\r\n//             <DollarSign className=\"text-purple-600\" size={24} />\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n\r\n//       {/* Controls */}\r\n//       <div className=\"flex flex-wrap items-center justify-between gap-4 mb-6\">\r\n//         <div className=\"flex flex-wrap items-center gap-4\">\r\n//           {/* Date Filters */}\r\n//           <div className=\"flex items-center space-x-2\">\r\n//             <Calendar size={16} className=\"text-gray-400\" />\r\n//             <input\r\n//               type=\"date\"\r\n//               value={filters.dateFrom}\r\n//               onChange={(e) => setFilters({ ...filters, dateFrom: e.target.value })}\r\n//               className=\"px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\r\n//               placeholder=\"From\"\r\n//             />\r\n//             <span className=\"text-gray-500\">to</span>\r\n//             <input\r\n//               type=\"date\"\r\n//               value={filters.dateTo}\r\n//               onChange={(e) => setFilters({ ...filters, dateTo: e.target.value })}\r\n//               className=\"px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\r\n//               placeholder=\"To\"\r\n//             />\r\n//           </div>\r\n\r\n//           {/* Account Filter */}\r\n//           <div className=\"relative\">\r\n//             <Filter className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" size={16} />\r\n//             <select\r\n//               value={filters.accountId}\r\n//               onChange={(e) => setFilters({ ...filters, accountId: e.target.value })}\r\n//               className=\"pl-10 pr-8 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\r\n//             >\r\n//               <option value=\"\">All Accounts</option>\r\n//               {accounts.map(account => (\r\n//                 <option key={account.id} value={account.id}>\r\n//                   {account.code} - {account.name}\r\n//                 </option>\r\n//               ))}\r\n//             </select>\r\n//           </div>\r\n\r\n//           {/* Transaction Type Filter */}\r\n//           <select\r\n//             value={filters.transactionType}\r\n//             onChange={(e) => setFilters({ ...filters, transactionType: e.target.value })}\r\n//             className=\"px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\r\n//           >\r\n//             <option value=\"all\">All Types</option>\r\n//             <option value=\"automatic\">POS Sales</option>\r\n//             <option value=\"manual\">Manual</option>\r\n//           </select>\r\n\r\n//           {/* Search */}\r\n//           <div className=\"relative\">\r\n//             <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" size={16} />\r\n//             <input\r\n//               type=\"text\"\r\n//               placeholder=\"Search entries...\"\r\n//               value={filters.searchTerm}\r\n//               onChange={(e) => setFilters({ ...filters, searchTerm: e.target.value })}\r\n//               className=\"pl-10 pr-4 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\r\n//             />\r\n//           </div>\r\n//         </div>\r\n\r\n//         <div className=\"flex space-x-3\">\r\n//           <button\r\n//             onClick={loadJournalEntriesFromAPI}\r\n//             disabled={loading.entries}\r\n//             className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center space-x-2 disabled:bg-gray-400\"\r\n//           >\r\n//             {loading.entries ? <RefreshCw className=\"animate-spin\" size={16} /> : <RefreshCw size={16} />}\r\n//             <span>Refresh from API</span>\r\n//           </button>\r\n//           <button\r\n//             onClick={loadChartsOfAccounts}\r\n//             disabled={loading.accounts}\r\n//             className=\"px-4 py-2 bg-teal-600 text-white rounded-lg hover:bg-teal-700 flex items-center space-x-2 disabled:bg-gray-400\"\r\n//           >\r\n//             {loading.accounts ? <RefreshCw className=\"animate-spin\" size={16} /> : <RefreshCw size={16} />}\r\n//             <span>Refresh Accounts</span>\r\n//           </button>\r\n//           <button\r\n//             onClick={() => {\r\n//               setFilters({\r\n//                 dateFrom: '',\r\n//                 dateTo: '',\r\n//                 accountId: '',\r\n//                 transactionType: 'all',\r\n//                 searchTerm: ''\r\n//               });\r\n//               setFilteredEntries([...journalEntries]);\r\n//             }}\r\n//             className=\"px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 flex items-center space-x-2\"\r\n//           >\r\n//             <X size={16} />\r\n//             <span>Clear Filters</span>\r\n//           </button>\r\n//           <button\r\n//             onClick={() => setIsAddingEntry(true)}\r\n//             className=\"px-4 py-2 bg-emerald-600 text-white rounded-lg hover:bg-emerald-700 flex items-center space-x-2\"\r\n//           >\r\n//             <Plus size={16} />\r\n//             <span>Add Entry</span>\r\n//           </button>\r\n//           <button\r\n//             onClick={generateTrialBalance}\r\n//             className=\"px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 flex items-center space-x-2\"\r\n//           >\r\n//             <FileText size={16} />\r\n//             <span>Trial Balance</span>\r\n//           </button>\r\n//         </div>\r\n//       </div>\r\n\r\n//       {/* Journal Entry Form */}\r\n//       {isAddingEntry && (\r\n//         <div className=\"mb-8 p-6 bg-gray-50 rounded-lg border\">\r\n//           <h3 className=\"text-lg font-semibold mb-4\">Add Manual Journal Entry</h3>\r\n          \r\n//           <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\r\n//             <div>\r\n//               <label className=\"block text-sm font-medium text-gray-700 mb-1\">Date *</label>\r\n//               <input\r\n//                 type=\"date\"\r\n//                 value={newEntry.date}\r\n//                 onChange={(e) => setNewEntry({ ...newEntry, date: e.target.value })}\r\n//                 className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\r\n//               />\r\n//             </div>\r\n//             <div>\r\n//               <label className=\"block text-sm font-medium text-gray-700 mb-1\">Description *</label>\r\n//               <input\r\n//                 type=\"text\"\r\n//                 value={newEntry.description}\r\n//                 onChange={(e) => setNewEntry({ ...newEntry, description: e.target.value })}\r\n//                 placeholder=\"Enter description\"\r\n//                 className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\r\n//               />\r\n//             </div>\r\n//             <div>\r\n//               <label className=\"block text-sm font-medium text-gray-700 mb-1\">Reference</label>\r\n//               <input\r\n//                 type=\"text\"\r\n//                 value={newEntry.reference}\r\n//                 onChange={(e) => setNewEntry({ ...newEntry, reference: e.target.value })}\r\n//                 placeholder=\"Reference number\"\r\n//                 className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\r\n//               />\r\n//             </div>\r\n//           </div>\r\n\r\n//           {/* Entry Lines */}\r\n//           <div className=\"mb-4\">\r\n//             <label className=\"block text-sm font-medium text-gray-700 mb-2\">Journal Entry Lines</label>\r\n//             <div className=\"space-y-3\">\r\n//               {newEntry.entries.map((entry, index) => (\r\n//                 <div key={index} className=\"grid grid-cols-12 gap-2 items-center bg-white p-3 rounded border\">\r\n//                   <div className=\"col-span-4\">\r\n//                     <select\r\n//                       value={entry.accountId}\r\n//                       onChange={(e) => updateEntryLine(index, 'accountId', e.target.value)}\r\n//                       className=\"w-full px-2 py-1 border border-gray-300 rounded text-sm focus:ring-2 focus:ring-emerald-500\"\r\n//                     >\r\n//                       <option value=\"\">Select Account</option>\r\n//                       {accounts.map(account => (\r\n//                         <option key={account.id} value={account.id}>\r\n//                           {account.code} - {account.name}\r\n//                         </option>\r\n//                       ))}\r\n//                     </select>\r\n//                   </div>\r\n//                   <div className=\"col-span-3\">\r\n//                     <input\r\n//                       type=\"text\"\r\n//                       value={entry.description}\r\n//                       onChange={(e) => updateEntryLine(index, 'description', e.target.value)}\r\n//                       placeholder=\"Description\"\r\n//                       className=\"w-full px-2 py-1 border border-gray-300 rounded text-sm focus:ring-2 focus:ring-emerald-500\"\r\n//                     />\r\n//                   </div>\r\n//                   <div className=\"col-span-2\">\r\n//                     <input\r\n//                       type=\"number\"\r\n//                       step=\"0.01\"\r\n//                       value={entry.debit}\r\n//                       onChange={(e) => updateEntryLine(index, 'debit', e.target.value)}\r\n//                       placeholder=\"Debit\"\r\n//                       className=\"w-full px-2 py-1 border border-gray-300 rounded text-sm focus:ring-2 focus:ring-emerald-500\"\r\n//                     />\r\n//                   </div>\r\n//                   <div className=\"col-span-2\">\r\n//                     <input\r\n//                       type=\"number\"\r\n//                       step=\"0.01\"\r\n//                       value={entry.credit}\r\n//                       onChange={(e) => updateEntryLine(index, 'credit', e.target.value)}\r\n//                       placeholder=\"Credit\"\r\n//                       className=\"w-full px-2 py-1 border border-gray-300 rounded text-sm focus:ring-2 focus:ring-emerald-500\"\r\n//                     />\r\n//                   </div>\r\n//                   <div className=\"col-span-1\">\r\n//                     {newEntry.entries.length > 2 && (\r\n//                       <button\r\n//                         onClick={() => removeEntryLine(index)}\r\n//                         className=\"p-1 text-red-600 hover:bg-red-100 rounded\"\r\n//                       >\r\n//                         <Trash2 size={14} />\r\n//                       </button>\r\n//                     )}\r\n//                   </div>\r\n//                 </div>\r\n//               ))}\r\n//             </div>\r\n\r\n//             <div className=\"flex justify-between items-center mt-3\">\r\n//               <button\r\n//                 onClick={addEntryLine}\r\n//                 className=\"px-3 py-1 text-sm bg-gray-200 text-gray-700 rounded hover:bg-gray-300 flex items-center space-x-1\"\r\n//               >\r\n//                 <Plus size={14} />\r\n//                 <span>Add Line</span>\r\n//               </button>\r\n\r\n//               <div className=\"flex items-center space-x-4\">\r\n//                 <div className=\"text-sm\">\r\n//                   <span className=\"font-medium\">Total Debit: PKR {totalDebit.toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}</span>\r\n//                   <span className=\"mx-2\">|</span>\r\n//                   <span className=\"font-medium\">Total Credit: PKR {totalCredit.toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}</span>\r\n//                 </div>\r\n//                 {entryIsBalanced ? (\r\n//                   <div className=\"flex items-center text-green-600\">\r\n//                     <CheckCircle size={16} className=\"mr-1\" />\r\n//                     <span className=\"text-sm\">Balanced</span>\r\n//                   </div>\r\n//                 ) : (\r\n//                   <div className=\"flex items-center text-red-600\">\r\n//                     <AlertCircle size={16} className=\"mr-1\" />\r\n//                     <span className=\"text-sm\">Not Balanced</span>\r\n//                   </div>\r\n//                 )}\r\n//               </div>\r\n//             </div>\r\n//           </div>\r\n\r\n//           <div className=\"flex space-x-3\">\r\n//             <button\r\n//               onClick={saveJournalEntry}\r\n//               disabled={!entryIsBalanced}\r\n//               className=\"px-4 py-2 bg-emerald-600 text-white rounded-lg hover:bg-emerald-700 disabled:bg-gray-400 flex items-center space-x-2\"\r\n//             >\r\n//               <Save size={16} />\r\n//               <span>Save Entry</span>\r\n//             </button>\r\n//             <button\r\n//               onClick={() => setIsAddingEntry(false)}\r\n//               className=\"px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 flex items-center space-x-2\"\r\n//             >\r\n//               <X size={16} />\r\n//               <span>Cancel</span>\r\n//             </button>\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n\r\n//       {/* Journal Entries Table */}\r\n//       <div className=\"bg-white border border-gray-200 rounded-lg overflow-hidden\">\r\n//         <div className=\"px-6 py-4 border-b border-gray-200\">\r\n//           <h2 className=\"text-lg font-semibold text-gray-900\">Journal Entries</h2>\r\n//           <p className=\"text-sm text-gray-600 mt-1\">\r\n//             Showing {filteredEntries.length} of {journalEntries.length} entries\r\n//           </p>\r\n//         </div>\r\n\r\n//         <div className=\"overflow-x-auto\">\r\n//           <table className=\"w-full\">\r\n//             <thead className=\"bg-gray-50\">\r\n//               <tr>\r\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                   Entry ID\r\n//                 </th>\r\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                   Date\r\n//                 </th>\r\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                   Description\r\n//                 </th>\r\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                   Reference\r\n//                 </th>\r\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                   Source\r\n//                 </th>\r\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                   Amount\r\n//                 </th>\r\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                   Status\r\n//                 </th>\r\n//                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                   Actions\r\n//                 </th>\r\n//               </tr>\r\n//             </thead>\r\n//             <tbody className=\"bg-white divide-y divide-gray-200\">\r\n//               {filteredEntries.map((entry) => (\r\n//                 <tr key={entry.id} className=\"hover:bg-gray-50\">\r\n//                   <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\r\n//                     {entry.id}\r\n//                   </td>\r\n//                   <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\r\n//                     {entry.date}\r\n//                   </td>\r\n//                   <td className=\"px-6 py-4 text-sm text-gray-900 max-w-xs truncate\">\r\n//                     {entry.description}\r\n//                   </td>\r\n//                   <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\r\n//                     {entry.reference}\r\n//                   </td>\r\n//                   <td className=\"px-6 py-4 whitespace-nowrap\">\r\n//                     <span className={`px-2 py-1 text-xs font-medium rounded-full ${\r\n//                       entry.source === 'POS Sales' ? 'bg-green-100 text-green-800' : \r\n//                       entry.source === 'Manual' ? 'bg-orange-100 text-orange-800' :\r\n//                       'bg-blue-100 text-blue-800'\r\n//                     }`}>\r\n//                       {entry.source}\r\n//                     </span>\r\n//                   </td>\r\n//                   <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\r\n//                     PKR {entry.totalDebit.toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\r\n//                   </td>\r\n//                   <td className=\"px-6 py-4 whitespace-nowrap\">\r\n//                     <span className={`px-2 py-1 text-xs font-medium rounded-full ${\r\n//                       entry.status === 'posted' ? 'bg-blue-100 text-blue-800' : 'bg-yellow-100 text-yellow-800'\r\n//                     }`}>\r\n//                       {entry.status}\r\n//                     </span>\r\n//                   </td>\r\n//                   <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">\r\n//                     <button\r\n//                       onClick={() => setSelectedEntry(entry)}\r\n//                       className=\"text-emerald-600 hover:text-emerald-900 mr-3\"\r\n//                     >\r\n//                       <Eye size={16} />\r\n//                     </button>\r\n//                   </td>\r\n//                 </tr>\r\n//               ))}\r\n//             </tbody>\r\n//           </table>\r\n//         </div>\r\n//       </div>\r\n\r\n//       {/* Entry Details Modal */}\r\n//       {selectedEntry && (\r\n//         <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center p-4 z-50\">\r\n//           <div className=\"bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-y-auto\">\r\n//             <div className=\"px-6 py-4 border-b border-gray-200\">\r\n//               <div className=\"flex items-center justify-between\">\r\n//                 <h3 className=\"text-lg font-semibold text-gray-900\">\r\n//                   Journal Entry Details - {selectedEntry.id}\r\n//                 </h3>\r\n//                 <button\r\n//                   onClick={() => setSelectedEntry(null)}\r\n//                   className=\"text-gray-400 hover:text-gray-600\"\r\n//                 >\r\n//                   <X size={20} />\r\n//                 </button>\r\n//               </div>\r\n//             </div>\r\n            \r\n//             <div className=\"px-6 py-4\">\r\n//               {/* Entry Header */}\r\n//               <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-6\">\r\n//                 <div>\r\n//                   <label className=\"text-sm font-medium text-gray-500\">Date</label>\r\n//                   <p className=\"text-sm text-gray-900\">{selectedEntry.date}</p>\r\n//                 </div>\r\n//                 <div>\r\n//                   <label className=\"text-sm font-medium text-gray-500\">Reference</label>\r\n//                   <p className=\"text-sm text-gray-900\">{selectedEntry.reference}</p>\r\n//                 </div>\r\n//                 <div>\r\n//                   <label className=\"text-sm font-medium text-gray-500\">Description</label>\r\n//                   <p className=\"text-sm text-gray-900\">{selectedEntry.description}</p>\r\n//                 </div>\r\n//                 <div>\r\n//                   <label className=\"text-sm font-medium text-gray-500\">Source</label>\r\n//                   <span className={`px-2 py-1 text-xs font-medium rounded-full ${\r\n//                     selectedEntry.source === 'POS Sales' ? 'bg-green-100 text-green-800' : 'bg-orange-100 text-orange-800'\r\n//                   }`}>\r\n//                     {selectedEntry.source}\r\n//                   </span>\r\n//                 </div>\r\n//               </div>\r\n              \r\n//               {/* Entry Lines */}\r\n//               <div className=\"mb-6\">\r\n//                 <h4 className=\"text-sm font-medium text-gray-700 mb-3\">Account Entries</h4>\r\n//                 <div className=\"overflow-x-auto\">\r\n//                   <table className=\"w-full border border-gray-200 rounded\">\r\n//                     <thead className=\"bg-gray-50\">\r\n//                       <tr>\r\n//                         <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500\">Account</th>\r\n//                         <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500\">Description</th>\r\n//                         <th className=\"px-4 py-2 text-right text-xs font-medium text-gray-500\">Debit</th>\r\n//                         <th className=\"px-4 py-2 text-right text-xs font-medium text-gray-500\">Credit</th>\r\n//                       </tr>\r\n//                     </thead>\r\n//                     <tbody className=\"divide-y divide-gray-200\">\r\n//                       {selectedEntry.entries.map((entryLine, index) => (\r\n//                         <tr key={index}>\r\n//                           <td className=\"px-4 py-2 text-sm text-gray-900\">\r\n//                             {getAccountName(entryLine.accountId)}\r\n//                           </td>\r\n//                           <td className=\"px-4 py-2 text-sm text-gray-600\">\r\n//                             {entryLine.description}\r\n//                           </td>\r\n//                           <td className=\"px-4 py-2 text-sm text-gray-900 text-right\">\r\n//                             {entryLine.debit > 0 ? `${entryLine.debit.toFixed(2)}` : '-'}\r\n//                           </td>\r\n//                           <td className=\"px-4 py-2 text-sm text-gray-900 text-right\">\r\n//                             {entryLine.credit > 0 ? `${entryLine.credit.toFixed(2)}` : '-'}\r\n//                           </td>\r\n//                         </tr>\r\n//                       ))}\r\n//                     </tbody>\r\n//                     <tfoot className=\"bg-gray-50\">\r\n//                       <tr>\r\n//                         <td colSpan=\"2\" className=\"px-4 py-2 text-sm font-medium text-gray-900\">\r\n//                           Totals:\r\n//                         </td>\r\n//                         <td className=\"px-4 py-2 text-sm font-bold text-gray-900 text-right\">\r\n//                           PKR {selectedEntry.totalDebit.toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\r\n//                         </td>\r\n//                         <td className=\"px-4 py-2 text-sm font-bold text-gray-900 text-right\">\r\n//                           PKR {selectedEntry.totalCredit.toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\r\n//                         </td>\r\n//                       </tr>\r\n//                     </tfoot>\r\n//                   </table>\r\n//                 </div>\r\n//               </div>\r\n\r\n//               {/* Original Order Info (if available) */}\r\n//               {selectedEntry.originalOrder && (\r\n//                 <div className=\"mb-6 p-4 bg-gray-50 rounded-lg\">\r\n//                   <h4 className=\"text-sm font-medium text-gray-700 mb-3\">Original Sales Order Details</h4>\r\n//                   <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\r\n//                     <div>\r\n//                       <span className=\"font-medium text-gray-500\">Order ID:</span>\r\n//                       <p className=\"text-gray-900\">{selectedEntry.originalOrder.orderId}</p>\r\n//                     </div>\r\n//                     <div>\r\n//                       <span className=\"font-medium text-gray-500\">Status:</span>\r\n//                       <p className=\"text-gray-900\">{selectedEntry.originalOrder.status}</p>\r\n//                     </div>\r\n//                     <div>\r\n//                       <span className=\"font-medium text-gray-500\">Payment Status:</span>\r\n//                       <p className=\"text-gray-900\">{selectedEntry.originalOrder.paid ? 'Paid' : 'Unpaid'}</p>\r\n//                     </div>\r\n//                     <div>\r\n//                       <span className=\"font-medium text-gray-500\">Fulfilled:</span>\r\n//                       <p className=\"text-gray-900\">{selectedEntry.originalOrder.fulfilled ? 'Yes' : 'No'}</p>\r\n//                     </div>\r\n//                   </div>\r\n                  \r\n//                   {/* Line Items */}\r\n//                   <div className=\"mt-4\">\r\n//                     <span className=\"font-medium text-gray-500\">Line Items:</span>\r\n//                     <div className=\"mt-2 space-y-2\">\r\n//                       {selectedEntry.originalOrder.lineItems.map((item, index) => (\r\n//                         <div key={index} className=\"text-sm bg-white p-2 rounded border\">\r\n//                           <span className=\"font-medium\">{item.productName}</span> - \r\n//                           Qty: {item.quantity}, Price: PKR {parseFloat(item.price).toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}, \r\n//                           Total: PKR {parseFloat(item.total).toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\r\n//                           {item.taxAmount > 0 && <span className=\"text-gray-500\"> (Tax: PKR {parseFloat(item.taxAmount).toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})})</span>}\r\n//                         </div>\r\n//                       ))}\r\n//                     </div>\r\n//                   </div>\r\n//                 </div>\r\n//               )}\r\n\r\n//               {/* Entry Metadata */}\r\n//               <div className=\"text-xs text-gray-500\">\r\n//                 <p>Created: {new Date(selectedEntry.createdAt).toLocaleString()}</p>\r\n//                 <p>Status: {selectedEntry.status}</p>\r\n//                 <p>Type: {selectedEntry.transactionType}</p>\r\n//               </div>\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n\r\n//       {/* Trial Balance Modal */}\r\n//       {showTrialBalance && (\r\n//         <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center p-4 z-50\">\r\n//           <div className=\"bg-white rounded-lg max-w-5xl w-full max-h-[90vh] overflow-y-auto\">\r\n//             <div className=\"px-6 py-4 border-b border-gray-200\">\r\n//               <div className=\"flex items-center justify-between\">\r\n//                 <h3 className=\"text-lg font-semibold text-gray-900\">\r\n//                   Trial Balance - As of {new Date().toLocaleDateString()}\r\n//                 </h3>\r\n//                 <div className=\"flex items-center space-x-2\">\r\n//                   <button\r\n//                     onClick={() => {\r\n//                       alert('Export functionality would be implemented here');\r\n//                     }}\r\n//                     className=\"px-3 py-1 bg-emerald-600 text-white rounded text-sm hover:bg-emerald-700 flex items-center space-x-1\"\r\n//                   >\r\n//                     <Download size={14} />\r\n//                     <span>Export</span>\r\n//                   </button>\r\n//                   <button\r\n//                     onClick={() => setShowTrialBalance(false)}\r\n//                     className=\"text-gray-400 hover:text-gray-600\"\r\n//                   >\r\n//                     <X size={20} />\r\n//                   </button>\r\n//                 </div>\r\n//               </div>\r\n//             </div>\r\n            \r\n//             <div className=\"px-6 py-4\">\r\n//               <div className=\"overflow-x-auto\">\r\n//                 <table className=\"w-full\">\r\n//                   <thead className=\"bg-gray-50\">\r\n//                     <tr>\r\n//                       <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                         Account Code\r\n//                       </th>\r\n//                       <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                         Account Name\r\n//                       </th>\r\n//                       <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                         Type\r\n//                       </th>\r\n//                       <th className=\"px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                         Debit Total\r\n//                       </th>\r\n//                       <th className=\"px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                         Credit Total\r\n//                       </th>\r\n//                       <th className=\"px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n//                         Balance\r\n//                       </th>\r\n//                     </tr>\r\n//                   </thead>\r\n//                   <tbody className=\"bg-white divide-y divide-gray-200\">\r\n//                     {trialBalance.map((item) => (\r\n//                       <tr key={item.accountId}>\r\n//                         <td className=\"px-4 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\r\n//                           {item.accountCode}\r\n//                         </td>\r\n//                         <td className=\"px-4 py-4 whitespace-nowrap text-sm text-gray-900\">\r\n//                           {item.accountName}\r\n//                         </td>\r\n//                         <td className=\"px-4 py-4 whitespace-nowrap\">\r\n//                           <span className={`px-2 py-1 text-xs font-medium rounded-full ${\r\n//                             item.accountType === 'assets' ? 'bg-green-100 text-green-800' :\r\n//                             item.accountType === 'liabilities' ? 'bg-red-100 text-red-800' :\r\n//                             item.accountType === 'equity' ? 'bg-blue-100 text-blue-800' :\r\n//                             item.accountType === 'revenue' ? 'bg-purple-100 text-purple-800' :\r\n//                             item.accountType === 'expenses' ? 'bg-orange-100 text-orange-800' :\r\n//                             'bg-gray-100 text-gray-800'\r\n//                           }`}>\r\n//                             {typeof item.accountType === 'string' && item.accountType.length > 0 \r\n//                               ? item.accountType.charAt(0).toUpperCase() + item.accountType.slice(1)\r\n//                               : 'Unknown'}\r\n//                           </span>\r\n//                         </td>\r\n//                         <td className=\"px-4 py-4 whitespace-nowrap text-sm text-gray-900 text-right\">\r\n//                           PKR {item.debit.toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\r\n//                         </td>\r\n//                         <td className=\"px-4 py-4 whitespace-nowrap text-sm text-gray-900 text-right\">\r\n//                           PKR {item.credit.toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\r\n//                         </td>\r\n//                         <td className=\"px-4 py-4 whitespace-nowrap text-sm font-medium text-right\">\r\n//                           <span className={item.balance >= 0 ? 'text-green-600' : 'text-red-600'}>\r\n//                             PKR {Math.abs(item.balance).toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\r\n//                             {item.balance < 0 && ' (CR)'}\r\n//                           </span>\r\n//                         </td>\r\n//                       </tr>\r\n//                     ))}\r\n//                   </tbody>\r\n//                   <tfoot className=\"bg-gray-50\">\r\n//                     <tr>\r\n//                       <td colSpan=\"3\" className=\"px-4 py-3 text-sm font-bold text-gray-900\">\r\n//                         TOTALS:\r\n//                       </td>\r\n//                       <td className=\"px-4 py-3 text-sm font-bold text-gray-900 text-right\">\r\n//                         PKR {trialBalance.reduce((sum, acc) => sum + acc.debit, 0).toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\r\n//                       </td>\r\n//                       <td className=\"px-4 py-3 text-sm font-bold text-gray-900 text-right\">\r\n//                         PKR {trialBalance.reduce((sum, acc) => sum + acc.credit, 0).toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\r\n//                       </td>\r\n//                       <td className=\"px-4 py-3 text-sm font-bold text-gray-900 text-right\">\r\n//                         PKR {Math.abs(trialBalance.reduce((sum, acc) => sum + acc.balance, 0)).toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\r\n//                       </td>\r\n//                     </tr>\r\n//                   </tfoot>\r\n//                 </table>\r\n//               </div>\r\n              \r\n//               {/* Trial Balance Validation */}\r\n//               <div className=\"mt-4 p-4 bg-green-50 border border-green-200 rounded-lg\">\r\n//                 <div className=\"flex items-center\">\r\n//                   <CheckCircle className=\"text-green-600 mr-2\" size={20} />\r\n//                   <div>\r\n//                     <h4 className=\"font-medium text-green-800\">Trial Balance is Balanced</h4>\r\n//                     <p className=\"text-sm text-green-700\">\r\n//                       Total Debits = Total Credits = PKR {trialBalance.reduce((sum, acc) => sum + acc.debit, 0).toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\r\n//                     </p>\r\n//                   </div>\r\n//                 </div>\r\n//               </div>\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n\r\n//       {/* Integration Status */}\r\n//       <div className=\"mt-8 grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n//         <div className=\"p-4 bg-green-50 border border-green-200 rounded-lg\">\r\n//           <div className=\"flex items-center mb-2\">\r\n//             <CheckCircle className=\"text-green-600 mr-2\" size={16} />\r\n//             <h4 className=\"font-medium text-green-800\">POS API Integration</h4>\r\n//           </div>\r\n//           <p className=\"text-sm text-green-700\">\r\n//             Sales orders automatically create journal entries from live API data\r\n//           </p>\r\n//         </div>\r\n\r\n//         <div className=\"p-4 bg-blue-50 border border-blue-200 rounded-lg\">\r\n//           <div className=\"flex items-center mb-2\">\r\n//             <RefreshCw className=\"text-blue-600 mr-2\" size={16} />\r\n//             <h4 className=\"font-medium text-blue-800\">Real-time Sync</h4>\r\n//           </div>\r\n//           <p className=\"text-sm text-blue-700\">\r\n//             Journal entries updated automatically with each sales transaction\r\n//           </p>\r\n//         </div>\r\n\r\n//         <div className=\"p-4 bg-orange-50 border border-orange-200 rounded-lg\">\r\n//           <div className=\"flex items-center mb-2\">\r\n//             <FileText className=\"text-orange-600 mr-2\" size={16} />\r\n//             <h4 className=\"font-medium text-orange-800\">Manual Entries</h4>\r\n//           </div>\r\n//           <p className=\"text-sm text-orange-700\">\r\n//             Add adjustments and corrections with full double-entry validation\r\n//           </p>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default GeneralLedger;\r\n\r\n\r\n\r\n\r\nimport React, { useState, useEffect, useCallback } from 'react';\r\nimport { \r\n  Book, \r\n  Plus, \r\n  Filter, \r\n  Search, \r\n  Calendar, \r\n  FileText, \r\n  Edit, \r\n  Trash2, \r\n  Save, \r\n  X, \r\n  AlertCircle,\r\n  CheckCircle,\r\n  DollarSign,\r\n  TrendingUp,\r\n  Eye,\r\n  Download,\r\n  RefreshCw\r\n} from 'lucide-react';\r\n\r\nconst GeneralLedger = () => {\r\n  const [journalEntries, setJournalEntries] = useState([]);\r\n  const [accounts, setAccounts] = useState([]);\r\n  const [filteredEntries, setFilteredEntries] = useState([]);\r\n  const [selectedEntry, setSelectedEntry] = useState(null);\r\n  const [isAddingEntry, setIsAddingEntry] = useState(false);\r\n  const [loading, setLoading] = useState({\r\n    entries: false,\r\n    accounts: false\r\n  });\r\n  const [errors, setErrors] = useState({\r\n    entries: null,\r\n    accounts: null\r\n  });\r\n  const [filters, setFilters] = useState({\r\n    dateFrom: '',\r\n    dateTo: '',\r\n    accountId: '',\r\n    transactionType: 'all',\r\n    searchTerm: ''\r\n  });\r\n  const [trialBalance, setTrialBalance] = useState([]);\r\n  const [showTrialBalance, setShowTrialBalance] = useState(false);\r\n  const [newEntry, setNewEntry] = useState({\r\n    date: new Date().toISOString().split('T')[0],\r\n    description: '',\r\n    reference: '',\r\n    entries: [\r\n      { accountId: '', debit: 0, credit: 0, description: '' },\r\n      { accountId: '', debit: 0, credit: 0, description: '' }\r\n    ]\r\n  });\r\n\r\n  // API Configuration\r\n  const API_BASE_URL = 'https://api-pos.hulmsolutions.com/POS/accounting2/31fc8df0-61db-41e5-bb67-070fde367ea1/orders?start=0&size=200';\r\n  const API_BASE_URL_CHARTS_OF_ACCOUNTS = 'http://localhost:8080/api/accounts';\r\n\r\n  // Fetch order data from API\r\n  const fetchOrderData = async () => {\r\n    try {\r\n      const response = await fetch(API_BASE_URL, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Authorization': 'Bearer Hamid',\r\n          'Content-Type': 'application/json',\r\n        },\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`API request failed with status ${response.status}`);\r\n      }\r\n      \r\n      const data = await response.json();\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Error fetching order data:', error);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  // Format date from API format\r\n  const formatDateFromCreatedAt = (createdAt) => {\r\n    try {\r\n      const parts = createdAt.split('.');\r\n      if (parts.length >= 3) {\r\n        return `${parts[0]}-${parts[1].padStart(2, '0')}-${parts[2].padStart(2, '0')}`;\r\n      }\r\n      return new Date().toISOString().split('T')[0];\r\n    } catch (error) {\r\n      return new Date().toISOString().split('T')[0];\r\n    }\r\n  };\r\n\r\n  // Fetch Charts of Accounts from API\r\n  const loadChartsOfAccounts = useCallback(async () => {\r\n    setLoading(prev => ({ ...prev, accounts: true }));\r\n    setErrors(prev => ({ ...prev, accounts: null }));\r\n    \r\n    try {\r\n      const response = await fetch(API_BASE_URL_CHARTS_OF_ACCOUNTS, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`Failed to fetch accounts: ${response.status}`);\r\n      }\r\n      \r\n      const data = await response.json();\r\n      console.log('Raw accounts data from API:', data);\r\n      \r\n      const formattedAccounts = data\r\n        .filter(account => account[4] === 'account')\r\n        .map(account => ({\r\n          id: account[0],\r\n          code: account[1],\r\n          name: account[2],\r\n          type: account[3],\r\n          category: account[4],\r\n          parentId: account[5],\r\n          level: account[6],\r\n          description: account[7] || ''\r\n        }))\r\n        .sort((a, b) => a.code.localeCompare(b.code));\r\n      \r\n      console.log('Formatted accounts:', formattedAccounts);\r\n      setAccounts(formattedAccounts);\r\n      setLoading(prev => ({ ...prev, accounts: false }));\r\n      \r\n      return formattedAccounts;\r\n    } catch (error) {\r\n      console.error('Error loading charts of accounts:', error);\r\n      setErrors(prev => ({ ...prev, accounts: error.message }));\r\n      setLoading(prev => ({ ...prev, accounts: false }));\r\n      \r\n      const fallbackAccounts = [\r\n        // Assets\r\n        { id: '1000', code: '1000', name: 'Assets', type: 'assets', category: 'header' },\r\n        { id: '1100', code: '1100', name: 'Current Assets', type: 'assets', category: 'header' },\r\n        { id: '1111', code: '1111', name: 'Petty Cash', type: 'assets', category: 'account' },\r\n        { id: '1112', code: '1112', name: 'Bank - Main Account', type: 'assets', category: 'account' },\r\n        { id: '1120', code: '1120', name: 'Accounts Receivable', type: 'assets', category: 'account' },\r\n        { id: '1125', code: '1125', name: 'Insurance Receivables', type: 'assets', category: 'account' },\r\n        { id: '1130', code: '1130', name: 'Inventory - Telecom Equipment', type: 'assets', category: 'account' },\r\n        { id: '1140', code: '1140', name: 'Pharmaceutical Inventory', type: 'assets', category: 'account' },\r\n        { id: '1150', code: '1150', name: 'Promotional Materials', type: 'assets', category: 'account' },\r\n        { id: '1200', code: '1200', name: 'Fixed Assets', type: 'assets', category: 'header' },\r\n        { id: '1210', code: '1210', name: 'Medical Equipment', type: 'assets', category: 'account' },\r\n        { id: '1220', code: '1220', name: 'IT Infrastructure', type: 'assets', category: 'account' },\r\n        \r\n        // Liabilities\r\n        { id: '2000', code: '2000', name: 'Liabilities', type: 'liabilities', category: 'header' },\r\n        { id: '2100', code: '2100', name: 'Current Liabilities', type: 'liabilities', category: 'header' },\r\n        { id: '2110', code: '2110', name: 'Accounts Payable', type: 'liabilities', category: 'account' },\r\n        { id: '2130', code: '2130', name: 'Sales Tax Payable', type: 'liabilities', category: 'account' },\r\n        { id: '2140', code: '2140', name: 'Payroll Payable', type: 'liabilities', category: 'account' },\r\n        { id: '2150', code: '2150', name: 'Insurance Premiums Payable', type: 'liabilities', category: 'account' },\r\n        \r\n        // Equity\r\n        { id: '3000', code: '3000', name: 'Equity', type: 'equity', category: 'header' },\r\n        { id: '3100', code: '3100', name: 'Owner Equity', type: 'equity', category: 'header' },\r\n        { id: '3110', code: '3110', name: 'Capital Stock', type: 'equity', category: 'account' },\r\n        { id: '3200', code: '3200', name: 'Retained Earnings', type: 'equity', category: 'account' },\r\n        \r\n        // Revenue\r\n        { id: '4000', code: '4000', name: 'Revenue', type: 'revenue', category: 'header' },\r\n        { id: '4110', code: '4110', name: 'Mobile Service Revenue', type: 'revenue', category: 'account' },\r\n        { id: '4120', code: '4120', name: 'Data Service Revenue', type: 'revenue', category: 'account' },\r\n        { id: '4130', code: '4130', name: 'Pharmaceutical Sales', type: 'revenue', category: 'account' },\r\n        { id: '4140', code: '4140', name: 'Treatment Revenue', type: 'revenue', category: 'account' },\r\n        { id: '4150', code: '4150', name: 'Enterprise Services', type: 'revenue', category: 'account' },\r\n        { id: '4180', code: '4180', name: 'Wholesale Revenue', type: 'revenue', category: 'account' },\r\n        \r\n        // Expenses\r\n        { id: '5000', code: '5000', name: 'Expenses', type: 'expenses', category: 'header' },\r\n        { id: '5100', code: '5100', name: 'Cost of Goods Sold', type: 'expenses', category: 'account' },\r\n        { id: '5200', code: '5200', name: 'Operating Expenses', type: 'expenses', category: 'account' },\r\n        { id: '5240', code: '5240', name: 'Medical Staff Salaries', type: 'expenses', category: 'account' },\r\n        { id: '5250', code: '5250', name: 'Marketing & Advertising', type: 'expenses', category: 'account' },\r\n        { id: '5260', code: '5260', name: 'Medical Supplies', type: 'expenses', category: 'account' },\r\n        { id: '5270', code: '5270', name: 'License & Compliance', type: 'expenses', category: 'account' }\r\n      ];\r\n      \r\n      setAccounts(fallbackAccounts);\r\n      return fallbackAccounts;\r\n    }\r\n  }, []);\r\n\r\n  // Convert Sales Order to Journal Entry\r\n  const convertSalesOrderToJournalEntry = useCallback((order, accountsList) => {\r\n    const entries = [];\r\n    \r\n    const subTotal = parseFloat(order.subTotal) || 0;\r\n    const taxAmount = parseFloat(order.taxAmount) || 0;\r\n    const total = parseFloat(order.total) || 0;\r\n    \r\n    if (!order.paid || !order.fulfilled || order.status !== 'Closed') {\r\n      return null;\r\n    }\r\n    \r\n    // Enhanced function to find specific accounts from your chart of accounts\r\n    const findSpecificAccount = (accountCode) => {\r\n      const account = accountsList.find(acc => acc.code === accountCode || acc.id === accountCode);\r\n      return account || null;\r\n    };\r\n    \r\n    const findAccountByType = (type, preferredCode = null) => {\r\n      // First try to find the preferred specific account\r\n      if (preferredCode) {\r\n        const specificAccount = findSpecificAccount(preferredCode);\r\n        if (specificAccount) return specificAccount;\r\n      }\r\n      \r\n      // Then try to find by type\r\n      const matchingAccount = accountsList.find(acc => \r\n        acc.type && acc.type.toLowerCase() === type.toLowerCase()\r\n      );\r\n      \r\n      if (matchingAccount) return matchingAccount;\r\n      \r\n      // Fallback with proper account codes from your chart\r\n      // const fallbackAccounts = {\r\n      //   'assets': { id: '1112', code: '1112', name: 'Bank - Main Account', type: 'assets' },\r\n      //   'revenue': { id: '4110', code: '4110', name: 'Mobile Service Revenue', type: 'revenue' },\r\n      //   'liabilities': { id: '2130', code: '2130', name: 'Sales Tax Payable', type: 'liabilities' },\r\n      //   'expenses': { id: '5100', code: '5100', name: 'Cost of Goods Sold', type: 'expenses' }\r\n      // };\r\n      \r\n      // return fallbackAccounts[type.toLowerCase()] || { \r\n      //   id: 'UNKNOWN', \r\n      //   name: `Unknown ${type} Account`, \r\n      //   code: 'N/A' \r\n      // };\r\n    };\r\n    \r\n    const cashAccount = findAccountByType('assets');\r\n    entries.push({\r\n      accountId: cashAccount.id,\r\n      accountName: cashAccount.name,\r\n      accountCode: cashAccount.code,\r\n      debit: total,\r\n      credit: 0,\r\n      description: `Cash received from Order #${order.orderId} - ${order.lineItems.map(item => item.productName).join(', ')}`\r\n    });\r\n\r\n    if (subTotal > 0) {\r\n      const revenueAccount = findAccountByType('revenue');\r\n      entries.push({\r\n        accountId: revenueAccount.id,\r\n        accountName: revenueAccount.name,\r\n        accountCode: revenueAccount.code,\r\n        debit: 0,\r\n        credit: subTotal,\r\n        description: `Revenue from Order #${order.orderId}`\r\n      });\r\n    }\r\n\r\n    if (taxAmount > 0) {\r\n      const taxAccount = findAccountByType('liabilities');\r\n      entries.push({\r\n        accountId: taxAccount.id,\r\n        accountName: taxAccount.name,\r\n        accountCode: taxAccount.code,\r\n        debit: 0,\r\n        credit: taxAmount,\r\n        description: `${order.taxRate}% tax collected on Order #${order.orderId}`\r\n      });\r\n    }\r\n\r\n    let totalCOGS = 0;\r\n    order.lineItems.forEach(item => {\r\n      if (item.fulfilled && item.status === 'Fulfilled') {\r\n        const costPrice = parseFloat(item.costPrice) || 0;\r\n        const quantity = parseFloat(item.quantity) || 0;\r\n        const itemCOGS = costPrice * quantity;\r\n        totalCOGS += itemCOGS;\r\n      }\r\n    });\r\n\r\n    if (totalCOGS > 0) {\r\n      const cogsAccount = findAccountByType('expenses');\r\n      entries.push({\r\n        accountId: cogsAccount.id,\r\n        accountName: cogsAccount.name,\r\n        accountCode: cogsAccount.code,\r\n        debit: totalCOGS,\r\n        credit: 0,\r\n        description: `COGS for Order #${order.orderId}`\r\n      });\r\n\r\n      const inventoryAccount = findAccountByType('assets');\r\n      entries.push({\r\n        accountId: inventoryAccount.id,\r\n        accountName: inventoryAccount.name,\r\n        accountCode: inventoryAccount.code,\r\n        debit: 0,\r\n        credit: totalCOGS,\r\n        description: `Inventory reduction - Order #${order.orderId}`\r\n      });\r\n    }\r\n\r\n    const totalDebit = entries.reduce((sum, entry) => sum + parseFloat(entry.debit || 0), 0);\r\n    const totalCredit = entries.reduce((sum, entry) => sum + parseFloat(entry.credit || 0), 0);\r\n\r\n    return {\r\n      id: `JE-ORDER-${order.orderId}`,\r\n      date: formatDateFromCreatedAt(order.createdAt),\r\n      description: `Sales Order #${order.orderId} - ${order.lineItems.map(item => `${item.productName} (${item.quantity})`).join(', ')}`,\r\n      reference: `ORDER-${order.orderId}`,\r\n      transactionType: 'automatic',\r\n      source: 'POS Sales',\r\n      status: 'posted',\r\n      entries: entries,\r\n      totalDebit: Math.round(totalDebit * 100) / 100,\r\n      totalCredit: Math.round(totalCredit * 100) / 100,\r\n      createdAt: order.createdAt,\r\n      originalOrder: order\r\n    };\r\n  }, []);\r\n\r\n  // Load Journal Entries from API and Local Storage\r\n  const loadJournalEntriesFromAPI = useCallback(async () => {\r\n    setLoading(prev => ({ ...prev, entries: true }));\r\n    setErrors(prev => ({ ...prev, entries: null }));\r\n    \r\n    try {\r\n      const salesOrders = await fetchOrderData();\r\n      \r\n      if (!salesOrders) {\r\n        throw new Error('Failed to fetch sales orders');\r\n      }\r\n      \r\n      const journalEntriesFromSales = salesOrders\r\n        .filter(order => order.paid && order.fulfilled && order.status === 'Closed')\r\n        .map(order => convertSalesOrderToJournalEntry(order, accounts))\r\n        .filter(entry => entry !== null);\r\n      \r\n      let manualEntries = [];\r\n      try {\r\n        const storedEntries = localStorage.getItem('manualJournalEntries');\r\n        manualEntries = storedEntries ? JSON.parse(storedEntries) : [];\r\n      } catch (error) {\r\n        console.warn('Error loading manual entries from localStorage:', error);\r\n        manualEntries = [];\r\n      }\r\n      \r\n      const allEntries = [...journalEntriesFromSales, ...manualEntries];\r\n      \r\n      setJournalEntries(allEntries);\r\n      setFilteredEntries(allEntries);\r\n      setLoading(prev => ({ ...prev, entries: false }));\r\n    } catch (error) {\r\n      console.error('Error loading journal entries:', error);\r\n      setErrors(prev => ({ ...prev, entries: error.message }));\r\n      setLoading(prev => ({ ...prev, entries: false }));\r\n    }\r\n  }, [accounts, convertSalesOrderToJournalEntry]);\r\n\r\n  // Filter entries\r\n  const filterEntries = useCallback(() => {\r\n    let filtered = [...journalEntries];\r\n\r\n    if (filters.dateFrom) {\r\n      filtered = filtered.filter(entry => entry.date >= filters.dateFrom);\r\n    }\r\n    \r\n    if (filters.dateTo) {\r\n      filtered = filtered.filter(entry => entry.date <= filters.dateTo);\r\n    }\r\n    \r\n    if (filters.accountId) {\r\n      filtered = filtered.filter(entry => {\r\n        return entry.entries.some(e => e.accountId === filters.accountId);\r\n      });\r\n    }\r\n    \r\n    if (filters.transactionType !== 'all') {\r\n      filtered = filtered.filter(entry => entry.transactionType === filters.transactionType);\r\n    }\r\n    \r\n    if (filters.searchTerm) {\r\n      const term = filters.searchTerm.toLowerCase();\r\n      filtered = filtered.filter(entry => \r\n        entry.description.toLowerCase().includes(term) ||\r\n        entry.reference.toLowerCase().includes(term) ||\r\n        entry.entries.some(e => e.description.toLowerCase().includes(term))\r\n      );\r\n    }\r\n\r\n    setFilteredEntries(filtered);\r\n  }, [journalEntries, filters]);\r\n\r\n  // Generate trial balance\r\n  const generateTrialBalance = useCallback(() => {\r\n    const balances = {};\r\n    \r\n    const requiredAccountIds = new Set();\r\n    \r\n    journalEntries.forEach(entry => {\r\n      if (entry.status === 'posted') {\r\n        entry.entries.forEach(entryLine => {\r\n          if (entryLine.accountId) {\r\n            requiredAccountIds.add(entryLine.accountId);\r\n          }\r\n        });\r\n      }\r\n    });\r\n    \r\n    const accountTypesMap = {};\r\n    accounts.forEach(account => {\r\n      accountTypesMap[account.id] = account.type;\r\n      accountTypesMap[account.code] = account.type;\r\n    });\r\n    \r\n    accounts.forEach(account => {\r\n      if (account.category !== 'header') {\r\n        balances[account.id] = {\r\n          accountId: account.id,\r\n          accountCode: account.code,\r\n          accountName: account.name,\r\n          accountType: account.type || 'unknown',\r\n          debit: 0,\r\n          credit: 0,\r\n          balance: 0\r\n        };\r\n      }\r\n    });\r\n    \r\n    requiredAccountIds.forEach(accountId => {\r\n      if (!balances[accountId]) {\r\n        let accountName = '';\r\n        let accountType = '';\r\n        \r\n        journalEntries.forEach(entry => {\r\n          entry.entries.forEach(entryLine => {\r\n            if (entryLine.accountId === accountId) {\r\n              if (entryLine.accountName) accountName = entryLine.accountName;\r\n            }\r\n          });\r\n        });\r\n        \r\n        const prefix = accountId.toString().substring(0, 1);\r\n        if (prefix === '1') accountType = 'assets';\r\n        else if (prefix === '2') accountType = 'liabilities';\r\n        else if (prefix === '3') accountType = 'equity';\r\n        else if (prefix === '4') accountType = 'revenue';\r\n        else if (prefix === '5') accountType = 'expenses';\r\n        else accountType = accountTypesMap[accountId] || 'unknown';\r\n        \r\n        balances[accountId] = {\r\n          accountId: accountId,\r\n          accountCode: accountId,\r\n          accountName: accountName || `Account ${accountId}`,\r\n          accountType: accountType,\r\n          debit: 0,\r\n          credit: 0,\r\n          balance: 0\r\n        };\r\n      }\r\n    });\r\n    \r\n    journalEntries.forEach(entry => {\r\n      if (entry.status === 'posted') {\r\n        entry.entries.forEach(entryLine => {\r\n          const accountId = entryLine.accountId;\r\n          if (balances[accountId]) {\r\n            balances[accountId].debit += parseFloat(entryLine.debit || 0);\r\n            balances[accountId].credit += parseFloat(entryLine.credit || 0);\r\n            \r\n            if (entryLine.accountName && !balances[accountId].accountName) {\r\n              balances[accountId].accountName = entryLine.accountName;\r\n            }\r\n          }\r\n        });\r\n      }\r\n    });\r\n\r\n    Object.values(balances).forEach(account => {\r\n      if (account.accountType === 'assets' || account.accountType === 'expenses') {\r\n        account.balance = account.debit - account.credit;\r\n      } else {\r\n        account.balance = account.credit - account.debit;\r\n      }\r\n    });\r\n\r\n    const trialBalanceData = Object.values(balances)\r\n      .filter(account => account.debit > 0 || account.credit > 0)\r\n      .sort((a, b) => a.accountCode.localeCompare(b.accountCode));\r\n    \r\n    setTrialBalance(trialBalanceData);\r\n    setShowTrialBalance(true);\r\n  }, [accounts, journalEntries]);\r\n\r\n  // Helper functions for entry management\r\n  const addEntryLine = () => {\r\n    setNewEntry({\r\n      ...newEntry,\r\n      entries: [...newEntry.entries, { accountId: '', debit: 0, credit: 0, description: '' }]\r\n    });\r\n  };\r\n\r\n  const removeEntryLine = (index) => {\r\n    if (newEntry.entries.length > 2) {\r\n      const updatedEntries = newEntry.entries.filter((_, i) => i !== index);\r\n      setNewEntry({ ...newEntry, entries: updatedEntries });\r\n    }\r\n  };\r\n\r\n  const updateEntryLine = (index, field, value) => {\r\n    const updatedEntries = [...newEntry.entries];\r\n    updatedEntries[index] = { ...updatedEntries[index], [field]: value };\r\n    setNewEntry({ ...newEntry, entries: updatedEntries });\r\n  };\r\n\r\n  const calculateTotals = (entries) => {\r\n    const totalDebit = entries.reduce((sum, entry) => sum + (parseFloat(entry.debit) || 0), 0);\r\n    const totalCredit = entries.reduce((sum, entry) => sum + (parseFloat(entry.credit) || 0), 0);\r\n    return { totalDebit, totalCredit };\r\n  };\r\n\r\n  const isBalanced = (entries) => {\r\n    const { totalDebit, totalCredit } = calculateTotals(entries);\r\n    return Math.abs(totalDebit - totalCredit) < 0.01;\r\n  };\r\n\r\n  const saveJournalEntry = () => {\r\n    if (!newEntry.description || !newEntry.entries.every(e => e.accountId)) {\r\n      alert('Please fill in all required fields');\r\n      return;\r\n    }\r\n\r\n    if (!isBalanced(newEntry.entries)) {\r\n      alert('Journal entry must be balanced - total debits must equal total credits');\r\n      return;\r\n    }\r\n\r\n    const { totalDebit, totalCredit } = calculateTotals(newEntry.entries);\r\n    \r\n    const entriesWithNames = newEntry.entries.map(entry => ({\r\n      ...entry,\r\n      accountName: accounts.find(acc => acc.id === entry.accountId)?.name || '',\r\n      debit: parseFloat(entry.debit) || 0,\r\n      credit: parseFloat(entry.credit) || 0\r\n    }));\r\n\r\n    const journalEntry = {\r\n      id: `JE-MANUAL-${Date.now()}`,\r\n      date: newEntry.date,\r\n      description: newEntry.description,\r\n      reference: newEntry.reference || `MAN${Date.now()}`,\r\n      transactionType: 'manual',\r\n      source: 'Manual',\r\n      status: 'posted',\r\n      entries: entriesWithNames,\r\n      totalDebit,\r\n      totalCredit,\r\n      createdAt: new Date().toISOString()\r\n    };\r\n\r\n    try {\r\n      const existingManualEntries = JSON.parse(localStorage.getItem('manualJournalEntries') || '[]');\r\n      const updatedManualEntries = [...existingManualEntries, journalEntry];\r\n      localStorage.setItem('manualJournalEntries', JSON.stringify(updatedManualEntries));\r\n    } catch (error) {\r\n      console.warn('Could not save to localStorage:', error);\r\n    }\r\n\r\n    setJournalEntries([...journalEntries, journalEntry]);\r\n    \r\n    setNewEntry({\r\n      date: new Date().toISOString().split('T')[0],\r\n      description: '',\r\n      reference: '',\r\n      entries: [\r\n        { accountId: '', debit: 0, credit: 0, description: '' },\r\n        { accountId: '', debit: 0, credit: 0, description: '' }\r\n      ]\r\n    });\r\n    setIsAddingEntry(false);\r\n  };\r\n\r\n  const getAccountName = useCallback((accountId) => {\r\n    const account = accounts.find(acc => acc.id === accountId || acc.code === accountId);\r\n    \r\n    if (account) {\r\n      return `${account.code} - ${account.name}`;\r\n    }\r\n    \r\n    let accountName = '';\r\n    \r\n    journalEntries.forEach(entry => {\r\n      entry.entries.forEach(entryLine => {\r\n        if (entryLine.accountId === accountId && entryLine.accountName) {\r\n          accountName = entryLine.accountName;\r\n        }\r\n      });\r\n    });\r\n    \r\n    if (accountName) {\r\n      return `${accountId} - ${accountName}`;\r\n    }\r\n    \r\n    const prefix = accountId.toString().substring(0, 1);\r\n    let accountType = '';\r\n    \r\n    if (prefix === '1') accountType = 'Assets';\r\n    else if (prefix === '2') accountType = 'Liabilities';\r\n    else if (prefix === '3') accountType = 'Equity';\r\n    else if (prefix === '4') accountType = 'Revenue';\r\n    else if (prefix === '5') accountType = 'Expenses';\r\n    \r\n    return accountType ? `${accountId} - ${accountType} Account` : `${accountId} - Unknown Account`;\r\n  }, [accounts, journalEntries]);\r\n\r\n  // useEffect hooks\r\n  useEffect(() => {\r\n    loadChartsOfAccounts();\r\n  }, [loadChartsOfAccounts]);\r\n\r\n  useEffect(() => {\r\n    if (accounts.length > 0) {\r\n      loadJournalEntriesFromAPI();\r\n    }\r\n  }, [accounts, loadJournalEntriesFromAPI]);\r\n\r\n  useEffect(() => {\r\n    if (journalEntries.length > 0) {\r\n      filterEntries();\r\n    }\r\n  }, [journalEntries, filters, filterEntries]);\r\n\r\n  const { totalDebit, totalCredit } = calculateTotals(newEntry.entries);\r\n  const entryIsBalanced = isBalanced(newEntry.entries);\r\n\r\n  return (\r\n    <div className=\"max-w-7xl mx-auto p-6 bg-white\">\r\n      {/* Header */}\r\n      <div className=\"mb-8\">\r\n        <h1 className=\"text-3xl font-bold text-gray-900 mb-2 flex items-center\">\r\n          <Book className=\"mr-3 text-emerald-600\" />\r\n          General Ledger\r\n        </h1>\r\n        <p className=\"text-gray-600\">Real-time transaction recording and journal entry management</p>\r\n        \r\n        {loading.accounts && (\r\n          <div className=\"mt-2 p-2 bg-blue-50 text-blue-700 rounded-md text-sm flex items-center\">\r\n            <RefreshCw className=\"animate-spin mr-2\" size={16} />\r\n            Loading chart of accounts...\r\n          </div>\r\n        )}\r\n        \r\n        {errors.accounts && (\r\n          <div className=\"mt-2 p-2 bg-red-50 text-red-700 rounded-md text-sm flex items-center\">\r\n            <AlertCircle className=\"mr-2\" size={16} />\r\n            Error loading accounts: {errors.accounts}\r\n          </div>\r\n        )}\r\n\r\n        {loading.entries && (\r\n          <div className=\"mt-2 p-2 bg-blue-50 text-blue-700 rounded-md text-sm flex items-center\">\r\n            <RefreshCw className=\"animate-spin mr-2\" size={16} />\r\n            Loading journal entries...\r\n          </div>\r\n        )}\r\n        \r\n        {errors.entries && (\r\n          <div className=\"mt-2 p-2 bg-red-50 text-red-700 rounded-md text-sm flex items-center\">\r\n            <AlertCircle className=\"mr-2\" size={16} />\r\n            Error loading entries: {errors.entries}\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {/* Quick Stats */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\r\n        <div className=\"bg-blue-50 p-4 rounded-lg border border-blue-200\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div>\r\n              <p className=\"text-blue-600 text-sm font-medium\">Total Entries</p>\r\n              <p className=\"text-2xl font-bold text-blue-900\">{journalEntries.length}</p>\r\n            </div>\r\n            <FileText className=\"text-blue-600\" size={24} />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"bg-green-50 p-4 rounded-lg border border-green-200\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div>\r\n              <p className=\"text-green-600 text-sm font-medium\">POS Entries</p>\r\n              <p className=\"text-2xl font-bold text-green-900\">\r\n                {journalEntries.filter(e => e.source === 'POS Sales').length}\r\n              </p>\r\n            </div>\r\n            <TrendingUp className=\"text-green-600\" size={24} />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"bg-orange-50 p-4 rounded-lg border border-orange-200\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div>\r\n              <p className=\"text-orange-600 text-sm font-medium\">Manual Entries</p>\r\n              <p className=\"text-2xl font-bold text-orange-900\">\r\n                {journalEntries.filter(e => e.transactionType === 'manual').length}\r\n              </p>\r\n            </div>\r\n            <Edit className=\"text-orange-600\" size={24} />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"bg-purple-50 p-4 rounded-lg border border-purple-200\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div>\r\n              <p className=\"text-purple-600 text-sm font-medium\">Total Value</p>\r\n              <p className=\"text-2xl font-bold text-purple-900\">\r\n                PKR {journalEntries.reduce((sum, entry) => sum + entry.totalDebit, 0).toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\r\n              </p>\r\n            </div>\r\n            <DollarSign className=\"text-purple-600\" size={24} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Controls */}\r\n      <div className=\"flex flex-wrap items-center justify-between gap-4 mb-6\">\r\n        <div className=\"flex flex-wrap items-center gap-4\">\r\n          {/* Date Filters */}\r\n          <div className=\"flex items-center space-x-2\">\r\n            <Calendar size={16} className=\"text-gray-400\" />\r\n            <input\r\n              type=\"date\"\r\n              value={filters.dateFrom}\r\n              onChange={(e) => setFilters({ ...filters, dateFrom: e.target.value })}\r\n              className=\"px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\r\n              placeholder=\"From\"\r\n            />\r\n            <span className=\"text-gray-500\">to</span>\r\n            <input\r\n              type=\"date\"\r\n              value={filters.dateTo}\r\n              onChange={(e) => setFilters({ ...filters, dateTo: e.target.value })}\r\n              className=\"px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\r\n              placeholder=\"To\"\r\n            />\r\n          </div>\r\n\r\n          {/* Account Filter */}\r\n          <div className=\"relative\">\r\n            <Filter className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" size={16} />\r\n            <select\r\n              value={filters.accountId}\r\n              onChange={(e) => setFilters({ ...filters, accountId: e.target.value })}\r\n              className=\"pl-10 pr-8 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\r\n            >\r\n              <option value=\"\">All Accounts</option>\r\n              \r\n              {/* Group accounts by type for better organization */}\r\n              {accounts.length > 0 && (\r\n                <>\r\n                  {/* Assets */}\r\n                  <optgroup label=\"Assets\">\r\n                    {accounts\r\n                      .filter(acc => acc.type === 'assets' && acc.category === 'account')\r\n                      .map(account => (\r\n                        <option key={account.id} value={account.id}>\r\n                          {account.code} - {account.name}\r\n                        </option>\r\n                      ))}\r\n                  </optgroup>\r\n                  \r\n                  {/* Liabilities */}\r\n                  <optgroup label=\"Liabilities\">\r\n                    {accounts\r\n                      .filter(acc => acc.type === 'liabilities' && acc.category === 'account')\r\n                      .map(account => (\r\n                        <option key={account.id} value={account.id}>\r\n                          {account.code} - {account.name}\r\n                        </option>\r\n                      ))}\r\n                  </optgroup>\r\n                  \r\n                  {/* Equity */}\r\n                  <optgroup label=\"Equity\">\r\n                    {accounts\r\n                      .filter(acc => acc.type === 'equity' && acc.category === 'account')\r\n                      .map(account => (\r\n                        <option key={account.id} value={account.id}>\r\n                          {account.code} - {account.name}\r\n                        </option>\r\n                      ))}\r\n                  </optgroup>\r\n                  \r\n                  {/* Revenue */}\r\n                  <optgroup label=\"Revenue\">\r\n                    {accounts\r\n                      .filter(acc => acc.type === 'revenue' && acc.category === 'account')\r\n                      .map(account => (\r\n                        <option key={account.id} value={account.id}>\r\n                          {account.code} - {account.name}\r\n                        </option>\r\n                      ))}\r\n                  </optgroup>\r\n                  \r\n                  {/* Expenses */}\r\n                  <optgroup label=\"Expenses\">\r\n                    {accounts\r\n                      .filter(acc => acc.type === 'expenses' && acc.category === 'account')\r\n                      .map(account => (\r\n                        <option key={account.id} value={account.id}>\r\n                          {account.code} - {account.name}\r\n                        </option>\r\n                      ))}\r\n                  </optgroup>\r\n                </>\r\n              )}\r\n              \r\n              {accounts.length === 0 && (\r\n                <option disabled>Loading accounts...</option>\r\n              )}\r\n            </select>\r\n          </div>\r\n\r\n          {/* Transaction Type Filter */}\r\n          <select\r\n            value={filters.transactionType}\r\n            onChange={(e) => setFilters({ ...filters, transactionType: e.target.value })}\r\n            className=\"px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\r\n          >\r\n            <option value=\"all\">All Types</option>\r\n            <option value=\"automatic\">POS Sales</option>\r\n            <option value=\"manual\">Manual</option>\r\n          </select>\r\n\r\n          {/* Search */}\r\n          <div className=\"relative\">\r\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" size={16} />\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Search entries...\"\r\n              value={filters.searchTerm}\r\n              onChange={(e) => setFilters({ ...filters, searchTerm: e.target.value })}\r\n              className=\"pl-10 pr-4 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"flex space-x-3\">\r\n          <button\r\n            onClick={loadJournalEntriesFromAPI}\r\n            disabled={loading.entries}\r\n            className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center space-x-2 disabled:bg-gray-400\"\r\n          >\r\n            {loading.entries ? <RefreshCw className=\"animate-spin\" size={16} /> : <RefreshCw size={16} />}\r\n            <span>Refresh from API</span>\r\n          </button>\r\n          <button\r\n            onClick={loadChartsOfAccounts}\r\n            disabled={loading.accounts}\r\n            className=\"px-4 py-2 bg-teal-600 text-white rounded-lg hover:bg-teal-700 flex items-center space-x-2 disabled:bg-gray-400\"\r\n          >\r\n            {loading.accounts ? <RefreshCw className=\"animate-spin\" size={16} /> : <RefreshCw size={16} />}\r\n            <span>Refresh Accounts</span>\r\n          </button>\r\n          <button\r\n            onClick={() => {\r\n              setFilters({\r\n                dateFrom: '',\r\n                dateTo: '',\r\n                accountId: '',\r\n                transactionType: 'all',\r\n                searchTerm: ''\r\n              });\r\n              setFilteredEntries([...journalEntries]);\r\n            }}\r\n            className=\"px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 flex items-center space-x-2\"\r\n          >\r\n            <X size={16} />\r\n            <span>Clear Filters</span>\r\n          </button>\r\n          <button\r\n            onClick={() => setIsAddingEntry(true)}\r\n            className=\"px-4 py-2 bg-emerald-600 text-white rounded-lg hover:bg-emerald-700 flex items-center space-x-2\"\r\n          >\r\n            <Plus size={16} />\r\n            <span>Add Entry</span>\r\n          </button>\r\n          <button\r\n            onClick={generateTrialBalance}\r\n            className=\"px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 flex items-center space-x-2\"\r\n          >\r\n            <FileText size={16} />\r\n            <span>Trial Balance</span>\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Journal Entry Form */}\r\n      {isAddingEntry && (\r\n        <div className=\"mb-8 p-6 bg-gray-50 rounded-lg border\">\r\n          <h3 className=\"text-lg font-semibold mb-4\">Add Manual Journal Entry</h3>\r\n          \r\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">Date *</label>\r\n              <input\r\n                type=\"date\"\r\n                value={newEntry.date}\r\n                onChange={(e) => setNewEntry({ ...newEntry, date: e.target.value })}\r\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\r\n              />\r\n            </div>\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">Description *</label>\r\n              <input\r\n                type=\"text\"\r\n                value={newEntry.description}\r\n                onChange={(e) => setNewEntry({ ...newEntry, description: e.target.value })}\r\n                placeholder=\"Enter description\"\r\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\r\n              />\r\n            </div>\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">Reference</label>\r\n              <input\r\n                type=\"text\"\r\n                value={newEntry.reference}\r\n                onChange={(e) => setNewEntry({ ...newEntry, reference: e.target.value })}\r\n                placeholder=\"Reference number\"\r\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-transparent\"\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          {/* Entry Lines */}\r\n          <div className=\"mb-4\">\r\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">Journal Entry Lines</label>\r\n            <div className=\"space-y-3\">\r\n              {newEntry.entries.map((entry, index) => (\r\n                <div key={index} className=\"grid grid-cols-12 gap-2 items-center bg-white p-3 rounded border\">\r\n                  <div className=\"col-span-4\">\r\n                    <select\r\n                      value={entry.accountId}\r\n                      onChange={(e) => updateEntryLine(index, 'accountId', e.target.value)}\r\n                      className=\"w-full px-2 py-1 border border-gray-300 rounded text-sm focus:ring-2 focus:ring-emerald-500\"\r\n                    >\r\n                      <option value=\"\">Select Account</option>\r\n                      \r\n                      {accounts.length > 0 && (\r\n                        <>\r\n                          {/* Assets */}\r\n                          <optgroup label=\"Assets\">\r\n                            {accounts\r\n                              .filter(acc => acc.type === 'assets' && acc.category === 'account')\r\n                              .map(account => (\r\n                                <option key={account.id} value={account.id}>\r\n                                  {account.code} - {account.name}\r\n                                </option>\r\n                              ))}\r\n                          </optgroup>\r\n                          \r\n                          {/* Liabilities */}\r\n                          <optgroup label=\"Liabilities\">\r\n                            {accounts\r\n                              .filter(acc => acc.type === 'liabilities' && acc.category === 'account')\r\n                              .map(account => (\r\n                                <option key={account.id} value={account.id}>\r\n                                  {account.code} - {account.name}\r\n                                </option>\r\n                              ))}\r\n                          </optgroup>\r\n                          \r\n                          {/* Equity */}\r\n                          <optgroup label=\"Equity\">\r\n                            {accounts\r\n                              .filter(acc => acc.type === 'equity' && acc.category === 'account')\r\n                              .map(account => (\r\n                                <option key={account.id} value={account.id}>\r\n                                  {account.code} - {account.name}\r\n                                </option>\r\n                              ))}\r\n                          </optgroup>\r\n                          \r\n                          {/* Revenue */}\r\n                          <optgroup label=\"Revenue\">\r\n                            {accounts\r\n                              .filter(acc => acc.type === 'revenue' && acc.category === 'account')\r\n                              .map(account => (\r\n                                <option key={account.id} value={account.id}>\r\n                                  {account.code} - {account.name}\r\n                                </option>\r\n                              ))}\r\n                          </optgroup>\r\n                          \r\n                          {/* Expenses */}\r\n                          <optgroup label=\"Expenses\">\r\n                            {accounts\r\n                              .filter(acc => acc.type === 'expenses' && acc.category === 'account')\r\n                              .map(account => (\r\n                                <option key={account.id} value={account.id}>\r\n                                  {account.code} - {account.name}\r\n                                </option>\r\n                              ))}\r\n                          </optgroup>\r\n                        </>\r\n                      )}\r\n                      \r\n                      {accounts.length === 0 && (\r\n                        <option disabled>Loading accounts...</option>\r\n                      )}\r\n                    </select>\r\n                  </div>\r\n                  <div className=\"col-span-3\">\r\n                    <input\r\n                      type=\"text\"\r\n                      value={entry.description}\r\n                      onChange={(e) => updateEntryLine(index, 'description', e.target.value)}\r\n                      placeholder=\"Description\"\r\n                      className=\"w-full px-2 py-1 border border-gray-300 rounded text-sm focus:ring-2 focus:ring-emerald-500\"\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-span-2\">\r\n                    <input\r\n                      type=\"number\"\r\n                      step=\"0.01\"\r\n                      value={entry.debit}\r\n                      onChange={(e) => updateEntryLine(index, 'debit', e.target.value)}\r\n                      placeholder=\"Debit\"\r\n                      className=\"w-full px-2 py-1 border border-gray-300 rounded text-sm focus:ring-2 focus:ring-emerald-500\"\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-span-2\">\r\n                    <input\r\n                      type=\"number\"\r\n                      step=\"0.01\"\r\n                      value={entry.credit}\r\n                      onChange={(e) => updateEntryLine(index, 'credit', e.target.value)}\r\n                      placeholder=\"Credit\"\r\n                      className=\"w-full px-2 py-1 border border-gray-300 rounded text-sm focus:ring-2 focus:ring-emerald-500\"\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-span-1\">\r\n                    {newEntry.entries.length > 2 && (\r\n                      <button\r\n                        onClick={() => removeEntryLine(index)}\r\n                        className=\"p-1 text-red-600 hover:bg-red-100 rounded\"\r\n                      >\r\n                        <Trash2 size={14} />\r\n                      </button>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n\r\n            <div className=\"flex justify-between items-center mt-3\">\r\n              <button\r\n                onClick={addEntryLine}\r\n                className=\"px-3 py-1 text-sm bg-gray-200 text-gray-700 rounded hover:bg-gray-300 flex items-center space-x-1\"\r\n              >\r\n                <Plus size={14} />\r\n                <span>Add Line</span>\r\n              </button>\r\n\r\n              <div className=\"flex items-center space-x-4\">\r\n                <div className=\"text-sm\">\r\n                  <span className=\"font-medium\">Total Debit: PKR {totalDebit.toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}</span>\r\n                  <span className=\"mx-2\">|</span>\r\n                  <span className=\"font-medium\">Total Credit: PKR {totalCredit.toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}</span>\r\n                </div>\r\n                {entryIsBalanced ? (\r\n                  <div className=\"flex items-center text-green-600\">\r\n                    <CheckCircle size={16} className=\"mr-1\" />\r\n                    <span className=\"text-sm\">Balanced</span>\r\n                  </div>\r\n                ) : (\r\n                  <div className=\"flex items-center text-red-600\">\r\n                    <AlertCircle size={16} className=\"mr-1\" />\r\n                    <span className=\"text-sm\">Not Balanced</span>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"flex space-x-3\">\r\n            <button\r\n              onClick={saveJournalEntry}\r\n              disabled={!entryIsBalanced}\r\n              className=\"px-4 py-2 bg-emerald-600 text-white rounded-lg hover:bg-emerald-700 disabled:bg-gray-400 flex items-center space-x-2\"\r\n            >\r\n              <Save size={16} />\r\n              <span>Save Entry</span>\r\n            </button>\r\n            <button\r\n              onClick={() => setIsAddingEntry(false)}\r\n              className=\"px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 flex items-center space-x-2\"\r\n            >\r\n              <X size={16} />\r\n              <span>Cancel</span>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Journal Entries Table */}\r\n      <div className=\"bg-white border border-gray-200 rounded-lg overflow-hidden\">\r\n        <div className=\"px-6 py-4 border-b border-gray-200\">\r\n          <h2 className=\"text-lg font-semibold text-gray-900\">Journal Entries</h2>\r\n          <p className=\"text-sm text-gray-600 mt-1\">\r\n            Showing {filteredEntries.length} of {journalEntries.length} entries\r\n          </p>\r\n        </div>\r\n\r\n        <div className=\"overflow-x-auto\">\r\n          <table className=\"w-full\">\r\n            <thead className=\"bg-gray-50\">\r\n              <tr>\r\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                  Entry ID\r\n                </th>\r\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                  Date\r\n                </th>\r\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                  Description\r\n                </th>\r\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                  Reference\r\n                </th>\r\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                  Source\r\n                </th>\r\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                  Amount\r\n                </th>\r\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                  Status\r\n                </th>\r\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                  Actions\r\n                </th>\r\n              </tr>\r\n            </thead>\r\n            <tbody className=\"bg-white divide-y divide-gray-200\">\r\n              {filteredEntries.map((entry) => (\r\n                <tr key={entry.id} className=\"hover:bg-gray-50\">\r\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\r\n                    {entry.id}\r\n                  </td>\r\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\r\n                    {entry.date}\r\n                  </td>\r\n                  <td className=\"px-6 py-4 text-sm text-gray-900 max-w-xs truncate\">\r\n                    {entry.description}\r\n                  </td>\r\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\r\n                    {entry.reference}\r\n                  </td>\r\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\r\n                    <span className={`px-2 py-1 text-xs font-medium rounded-full ${\r\n                      entry.source === 'POS Sales' ? 'bg-green-100 text-green-800' : \r\n                      entry.source === 'Manual' ? 'bg-orange-100 text-orange-800' :\r\n                      'bg-blue-100 text-blue-800'\r\n                    }`}>\r\n                      {entry.source}\r\n                    </span>\r\n                  </td>\r\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\r\n                    PKR {entry.totalDebit.toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\r\n                  </td>\r\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\r\n                    <span className={`px-2 py-1 text-xs font-medium rounded-full ${\r\n                      entry.status === 'posted' ? 'bg-blue-100 text-blue-800' : 'bg-yellow-100 text-yellow-800'\r\n                    }`}>\r\n                      {entry.status}\r\n                    </span>\r\n                  </td>\r\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">\r\n                    <button\r\n                      onClick={() => setSelectedEntry(entry)}\r\n                      className=\"text-emerald-600 hover:text-emerald-900 mr-3\"\r\n                    >\r\n                      <Eye size={16} />\r\n                    </button>\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Entry Details Modal */}\r\n      {selectedEntry && (\r\n        <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center p-4 z-50\">\r\n          <div className=\"bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-y-auto\">\r\n            <div className=\"px-6 py-4 border-b border-gray-200\">\r\n              <div className=\"flex items-center justify-between\">\r\n                <h3 className=\"text-lg font-semibold text-gray-900\">\r\n                  Journal Entry Details - {selectedEntry.id}\r\n                </h3>\r\n                <button\r\n                  onClick={() => setSelectedEntry(null)}\r\n                  className=\"text-gray-400 hover:text-gray-600\"\r\n                >\r\n                  <X size={20} />\r\n                </button>\r\n              </div>\r\n            </div>\r\n            \r\n            <div className=\"px-6 py-4\">\r\n              {/* Entry Header */}\r\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-6\">\r\n                <div>\r\n                  <label className=\"text-sm font-medium text-gray-500\">Date</label>\r\n                  <p className=\"text-sm text-gray-900\">{selectedEntry.date}</p>\r\n                </div>\r\n                <div>\r\n                  <label className=\"text-sm font-medium text-gray-500\">Reference</label>\r\n                  <p className=\"text-sm text-gray-900\">{selectedEntry.reference}</p>\r\n                </div>\r\n                <div>\r\n                  <label className=\"text-sm font-medium text-gray-500\">Description</label>\r\n                  <p className=\"text-sm text-gray-900\">{selectedEntry.description}</p>\r\n                </div>\r\n                <div>\r\n                  <label className=\"text-sm font-medium text-gray-500\">Source</label>\r\n                  <span className={`px-2 py-1 text-xs font-medium rounded-full ${\r\n                    selectedEntry.source === 'POS Sales' ? 'bg-green-100 text-green-800' : 'bg-orange-100 text-orange-800'\r\n                  }`}>\r\n                    {selectedEntry.source}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n              \r\n              {/* Entry Lines */}\r\n              <div className=\"mb-6\">\r\n                <h4 className=\"text-sm font-medium text-gray-700 mb-3\">Account Entries</h4>\r\n                <div className=\"overflow-x-auto\">\r\n                  <table className=\"w-full border border-gray-200 rounded\">\r\n                    <thead className=\"bg-gray-50\">\r\n                      <tr>\r\n                        <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500\">Account</th>\r\n                        <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500\">Description</th>\r\n                        <th className=\"px-4 py-2 text-right text-xs font-medium text-gray-500\">Debit</th>\r\n                        <th className=\"px-4 py-2 text-right text-xs font-medium text-gray-500\">Credit</th>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody className=\"divide-y divide-gray-200\">\r\n                      {selectedEntry.entries.map((entryLine, index) => (\r\n                        <tr key={index}>\r\n                          <td className=\"px-4 py-2 text-sm text-gray-900\">\r\n                            {getAccountName(entryLine.accountId)}\r\n                          </td>\r\n                          <td className=\"px-4 py-2 text-sm text-gray-600\">\r\n                            {entryLine.description}\r\n                          </td>\r\n                          <td className=\"px-4 py-2 text-sm text-gray-900 text-right\">\r\n                            {entryLine.debit > 0 ? `${entryLine.debit.toFixed(2)}` : '-'}\r\n                          </td>\r\n                          <td className=\"px-4 py-2 text-sm text-gray-900 text-right\">\r\n                            {entryLine.credit > 0 ? `${entryLine.credit.toFixed(2)}` : '-'}\r\n                          </td>\r\n                        </tr>\r\n                      ))}\r\n                    </tbody>\r\n                    <tfoot className=\"bg-gray-50\">\r\n                      <tr>\r\n                        <td colSpan=\"2\" className=\"px-4 py-2 text-sm font-medium text-gray-900\">\r\n                          Totals:\r\n                        </td>\r\n                        <td className=\"px-4 py-2 text-sm font-bold text-gray-900 text-right\">\r\n                          PKR {selectedEntry.totalDebit.toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\r\n                        </td>\r\n                        <td className=\"px-4 py-2 text-sm font-bold text-gray-900 text-right\">\r\n                          PKR {selectedEntry.totalCredit.toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\r\n                        </td>\r\n                      </tr>\r\n                    </tfoot>\r\n                  </table>\r\n                </div>\r\n              </div>\r\n\r\n              {/* Original Order Info (if available) */}\r\n              {selectedEntry.originalOrder && (\r\n                <div className=\"mb-6 p-4 bg-gray-50 rounded-lg\">\r\n                  <h4 className=\"text-sm font-medium text-gray-700 mb-3\">Original Sales Order Details</h4>\r\n                  <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\r\n                    <div>\r\n                      <span className=\"font-medium text-gray-500\">Order ID:</span>\r\n                      <p className=\"text-gray-900\">{selectedEntry.originalOrder.orderId}</p>\r\n                    </div>\r\n                    <div>\r\n                      <span className=\"font-medium text-gray-500\">Status:</span>\r\n                      <p className=\"text-gray-900\">{selectedEntry.originalOrder.status}</p>\r\n                    </div>\r\n                    <div>\r\n                      <span className=\"font-medium text-gray-500\">Payment Status:</span>\r\n                      <p className=\"text-gray-900\">{selectedEntry.originalOrder.paid ? 'Paid' : 'Unpaid'}</p>\r\n                    </div>\r\n                    <div>\r\n                      <span className=\"font-medium text-gray-500\">Fulfilled:</span>\r\n                      <p className=\"text-gray-900\">{selectedEntry.originalOrder.fulfilled ? 'Yes' : 'No'}</p>\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  {/* Line Items */}\r\n                  <div className=\"mt-4\">\r\n                    <span className=\"font-medium text-gray-500\">Line Items:</span>\r\n                    <div className=\"mt-2 space-y-2\">\r\n                      {selectedEntry.originalOrder.lineItems.map((item, index) => (\r\n                        <div key={index} className=\"text-sm bg-white p-2 rounded border\">\r\n                          <span className=\"font-medium\">{item.productName}</span> - \r\n                          Qty: {item.quantity}, Price: PKR {parseFloat(item.price).toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}, \r\n                          Total: PKR {parseFloat(item.total).toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\r\n                          {item.taxAmount > 0 && <span className=\"text-gray-500\"> (Tax: PKR {parseFloat(item.taxAmount).toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})})</span>}\r\n                        </div>\r\n                      ))}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              )}\r\n\r\n              {/* Entry Metadata */}\r\n              <div className=\"text-xs text-gray-500\">\r\n                <p>Created: {new Date(selectedEntry.createdAt).toLocaleString()}</p>\r\n                <p>Status: {selectedEntry.status}</p>\r\n                <p>Type: {selectedEntry.transactionType}</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Trial Balance Modal */}\r\n      {showTrialBalance && (\r\n        <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center p-4 z-50\">\r\n          <div className=\"bg-white rounded-lg max-w-5xl w-full max-h-[90vh] overflow-y-auto\">\r\n            <div className=\"px-6 py-4 border-b border-gray-200\">\r\n              <div className=\"flex items-center justify-between\">\r\n                <h3 className=\"text-lg font-semibold text-gray-900\">\r\n                  Trial Balance - As of {new Date().toLocaleDateString()}\r\n                </h3>\r\n                <div className=\"flex items-center space-x-2\">\r\n                  <button\r\n                    onClick={() => {\r\n                      alert('Export functionality would be implemented here');\r\n                    }}\r\n                    className=\"px-3 py-1 bg-emerald-600 text-white rounded text-sm hover:bg-emerald-700 flex items-center space-x-1\"\r\n                  >\r\n                    <Download size={14} />\r\n                    <span>Export</span>\r\n                  </button>\r\n                  <button\r\n                    onClick={() => setShowTrialBalance(false)}\r\n                    className=\"text-gray-400 hover:text-gray-600\"\r\n                  >\r\n                    <X size={20} />\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            \r\n            <div className=\"px-6 py-4\">\r\n              <div className=\"overflow-x-auto\">\r\n                <table className=\"w-full\">\r\n                  <thead className=\"bg-gray-50\">\r\n                    <tr>\r\n                      <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                        Account Code\r\n                      </th>\r\n                      <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                        Account Name\r\n                      </th>\r\n                      <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                        Type\r\n                      </th>\r\n                      <th className=\"px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                        Debit Total\r\n                      </th>\r\n                      <th className=\"px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                        Credit Total\r\n                      </th>\r\n                      <th className=\"px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                        Balance\r\n                      </th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody className=\"bg-white divide-y divide-gray-200\">\r\n                    {trialBalance.map((item) => (\r\n                      <tr key={item.accountId}>\r\n                        <td className=\"px-4 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\r\n                          {item.accountCode}\r\n                        </td>\r\n                        <td className=\"px-4 py-4 whitespace-nowrap text-sm text-gray-900\">\r\n                          {item.accountName}\r\n                        </td>\r\n                        <td className=\"px-4 py-4 whitespace-nowrap\">\r\n                          <span className={`px-2 py-1 text-xs font-medium rounded-full ${\r\n                            item.accountType === 'assets' ? 'bg-green-100 text-green-800' :\r\n                            item.accountType === 'liabilities' ? 'bg-red-100 text-red-800' :\r\n                            item.accountType === 'equity' ? 'bg-blue-100 text-blue-800' :\r\n                            item.accountType === 'revenue' ? 'bg-purple-100 text-purple-800' :\r\n                            item.accountType === 'expenses' ? 'bg-orange-100 text-orange-800' :\r\n                            'bg-gray-100 text-gray-800'\r\n                          }`}>\r\n                            {typeof item.accountType === 'string' && item.accountType.length > 0 \r\n                              ? item.accountType.charAt(0).toUpperCase() + item.accountType.slice(1)\r\n                              : 'Unknown'}\r\n                          </span>\r\n                        </td>\r\n                        <td className=\"px-4 py-4 whitespace-nowrap text-sm text-gray-900 text-right\">\r\n                          PKR {item.debit.toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\r\n                        </td>\r\n                        <td className=\"px-4 py-4 whitespace-nowrap text-sm text-gray-900 text-right\">\r\n                          PKR {item.credit.toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\r\n                        </td>\r\n                        <td className=\"px-4 py-4 whitespace-nowrap text-sm font-medium text-right\">\r\n                          <span className={item.balance >= 0 ? 'text-green-600' : 'text-red-600'}>\r\n                            PKR {Math.abs(item.balance).toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\r\n                            {item.balance < 0 && ' (CR)'}\r\n                          </span>\r\n                        </td>\r\n                      </tr>\r\n                    ))}\r\n                  </tbody>\r\n                  <tfoot className=\"bg-gray-50\">\r\n                    <tr>\r\n                      <td colSpan=\"3\" className=\"px-4 py-3 text-sm font-bold text-gray-900\">\r\n                        TOTALS:\r\n                      </td>\r\n                      <td className=\"px-4 py-3 text-sm font-bold text-gray-900 text-right\">\r\n                        PKR {trialBalance.reduce((sum, acc) => sum + acc.debit, 0).toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\r\n                      </td>\r\n                      <td className=\"px-4 py-3 text-sm font-bold text-gray-900 text-right\">\r\n                        PKR {trialBalance.reduce((sum, acc) => sum + acc.credit, 0).toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\r\n                      </td>\r\n                      <td className=\"px-4 py-3 text-sm font-bold text-gray-900 text-right\">\r\n                        PKR {Math.abs(trialBalance.reduce((sum, acc) => sum + acc.balance, 0)).toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\r\n                      </td>\r\n                    </tr>\r\n                  </tfoot>\r\n                </table>\r\n              </div>\r\n              \r\n              {/* Trial Balance Validation */}\r\n              <div className=\"mt-4 p-4 bg-green-50 border border-green-200 rounded-lg\">\r\n                <div className=\"flex items-center\">\r\n                  <CheckCircle className=\"text-green-600 mr-2\" size={20} />\r\n                  <div>\r\n                    <h4 className=\"font-medium text-green-800\">Trial Balance is Balanced</h4>\r\n                    <p className=\"text-sm text-green-700\">\r\n                      Total Debits = Total Credits = PKR {trialBalance.reduce((sum, acc) => sum + acc.debit, 0).toLocaleString('en-PK', {minimumFractionDigits: 2, maximumFractionDigits: 2})}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Integration Status */}\r\n      <div className=\"mt-8 grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n        <div className=\"p-4 bg-green-50 border border-green-200 rounded-lg\">\r\n          <div className=\"flex items-center mb-2\">\r\n            <CheckCircle className=\"text-green-600 mr-2\" size={16} />\r\n            <h4 className=\"font-medium text-green-800\">POS API Integration</h4>\r\n          </div>\r\n          <p className=\"text-sm text-green-700\">\r\n            Sales orders automatically create journal entries from live API data\r\n          </p>\r\n        </div>\r\n\r\n        <div className=\"p-4 bg-blue-50 border border-blue-200 rounded-lg\">\r\n          <div className=\"flex items-center mb-2\">\r\n            <RefreshCw className=\"text-blue-600 mr-2\" size={16} />\r\n            <h4 className=\"font-medium text-blue-800\">Real-time Sync</h4>\r\n          </div>\r\n          <p className=\"text-sm text-blue-700\">\r\n            Journal entries updated automatically with each sales transaction\r\n          </p>\r\n        </div>\r\n\r\n        <div className=\"p-4 bg-orange-50 border border-orange-200 rounded-lg\">\r\n          <div className=\"flex items-center mb-2\">\r\n            <FileText className=\"text-orange-600 mr-2\" size={16} />\r\n            <h4 className=\"font-medium text-orange-800\">Manual Entries</h4>\r\n          </div>\r\n          <p className=\"text-sm text-orange-700\">\r\n            Add adjustments and corrections with full double-entry validation\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GeneralLedger;"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}