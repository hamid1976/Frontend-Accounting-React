{"ast":null,"code":"// // Calculate AR summary\n// export const calculateARSummary = (customers, allSalesData) => {\n//   const totalAR = customers.reduce((sum, customer) => sum + customer.totalOwed, 0);\n//   const totalOverdue = customers.reduce((sum, customer) => sum + customer.overdueAmount, 0);\n//   const customersWithBalance = customers.filter(customer => customer.totalOwed > 0).length;\n\n//   // Calculate real average days outstanding from actual order data\n//   let totalDaysOutstanding = 0;\n//   let orderCount = 0;\n\n//   if (allSalesData) {\n//     allSalesData.forEach(order => {\n//       // Convert order creation date from \"2025.08.18.10.08.54.569\" to proper date\n//       const orderDateStr = order.createdAt.split('.').slice(0, 3).join('-'); // \"2025-08-18\"\n//       const orderDate = new Date(orderDateStr);\n//       const today = new Date();\n\n//       // Calculate days between order creation and today\n//       const timeDiff = today.getTime() - orderDate.getTime();\n//       const daysDiff = Math.floor(timeDiff / (1000 * 3600 * 24));\n\n//       totalDaysOutstanding += daysDiff;\n//       orderCount++;\n//     });\n//   }\n\n//   const avgDaysOutstanding = orderCount > 0 ? Math.round(totalDaysOutstanding / orderCount) : 0;\n\n//   return {\n//     totalAR,\n//     totalOverdue,\n//     customersWithBalance,\n//     avgDaysOutstanding\n//   };\n// };\n\nexport const calculateARSummary = allSalesData => {\n  let totalAR = 0;\n  let totalOverdue = 0;\n  let totalDaysOutstanding = 0;\n  let orderCount = 0;\n  const namedCustomerSet = new Set();\n  let customersWithBalance = 0;\n  if (allSalesData && Array.isArray(allSalesData)) {\n    allSalesData.forEach(order => {\n      if (order['Payment Status'] !== 'Paid') {\n        var _order$Customer;\n        const amount = order.Amount || 0;\n        totalAR += amount;\n        if (order['Payment Status'] === 'Unpaid') {\n          totalOverdue += amount;\n        }\n        const customerName = (_order$Customer = order.Customer) === null || _order$Customer === void 0 ? void 0 : _order$Customer.trim();\n        if (customerName && customerName !== 'Guest Customer') {\n          if (!namedCustomerSet.has(customerName)) {\n            namedCustomerSet.add(customerName);\n            customersWithBalance++;\n          }\n        } else {\n          // Each unpaid guest order counts separately\n          customersWithBalance++;\n        }\n\n        // Days outstanding calculation\n        const orderDate = new Date(order.Date);\n        const today = new Date();\n        const daysDiff = Math.floor((today.getTime() - orderDate.getTime()) / (1000 * 3600 * 24));\n        totalDaysOutstanding += daysDiff;\n        orderCount++;\n      }\n    });\n  }\n  const avgDaysOutstanding = orderCount > 0 ? Math.round(totalDaysOutstanding / orderCount) : 0;\n  return {\n    totalAR,\n    totalOverdue,\n    customersWithBalance,\n    avgDaysOutstanding\n  };\n};\n\n// Get aging data\nexport const getAgingData = salesData => {\n  const aging = {\n    current: 0,\n    days30: 0,\n    days60: 0,\n    days90: 0,\n    over90: 0\n  };\n  if (!Array.isArray(salesData)) return aging; // <-- Safety check\n\n  salesData.forEach(order => {\n    var _order$total;\n    if (order.paid) return;\n    const daysPastDue = order.daysOverdue || 0;\n    const amount = parseFloat((_order$total = order.total) === null || _order$total === void 0 ? void 0 : _order$total.toString().replace(/[^0-9.-]+/g, \"\")) || 0;\n    if (daysPastDue <= 0) {\n      aging.current += amount;\n    } else if (daysPastDue <= 30) {\n      aging.days30 += amount;\n    } else if (daysPastDue <= 60) {\n      aging.days60 += amount;\n    } else if (daysPastDue <= 90) {\n      aging.days90 += amount;\n    } else {\n      aging.over90 += amount;\n    }\n  });\n  return aging;\n};\n\n// Filter customers\nexport const getFilteredCustomers = (customers, filters) => {\n  // First check if we have valid data\n  if (!customers || !Array.isArray(customers)) {\n    return [];\n  }\n\n  // Start by filtering ONLY customers WITH names\n  let filtered = customers.filter(customer => customer && customer.name && typeof customer.name === 'string' && customer.name.trim() !== '');\n\n  // Now apply the rest of the filters to our name-filtered list\n  if (filters && filters.customerType && filters.customerType !== 'all') {\n    filtered = filtered.filter(customer => customer.customerType === filters.customerType);\n  }\n  if (filters && filters.status && filters.status !== 'all') {\n    filtered = filtered.filter(customer => {\n      if (filters.status === 'overdue') return customer.overdueAmount > 0;\n      if (filters.status === 'current') return customer.totalOwed > 0 && customer.overdueAmount === 0;\n      if (filters.status === 'paid_up') return customer.totalOwed === 0;\n      return true;\n    });\n  }\n  if (filters && filters.searchTerm) {\n    const term = filters.searchTerm.toLowerCase();\n    filtered = filtered.filter(customer => customer.name.toLowerCase().includes(term) || customer.email && customer.email.toLowerCase().includes(term) || customer.id && customer.id.toLowerCase().includes(term));\n  }\n  console.log(`Filtered to ${filtered.length} customers with valid names`);\n  return filtered;\n};","map":{"version":3,"names":["calculateARSummary","allSalesData","totalAR","totalOverdue","totalDaysOutstanding","orderCount","namedCustomerSet","Set","customersWithBalance","Array","isArray","forEach","order","_order$Customer","amount","Amount","customerName","Customer","trim","has","add","orderDate","Date","today","daysDiff","Math","floor","getTime","avgDaysOutstanding","round","getAgingData","salesData","aging","current","days30","days60","days90","over90","_order$total","paid","daysPastDue","daysOverdue","parseFloat","total","toString","replace","getFilteredCustomers","customers","filters","filtered","filter","customer","name","customerType","status","overdueAmount","totalOwed","searchTerm","term","toLowerCase","includes","email","id","console","log","length"],"sources":["C:/Users/Logic-Unit/my-account/src/Utility/apCalculations.js"],"sourcesContent":["// // Calculate AR summary\r\n// export const calculateARSummary = (customers, allSalesData) => {\r\n//   const totalAR = customers.reduce((sum, customer) => sum + customer.totalOwed, 0);\r\n//   const totalOverdue = customers.reduce((sum, customer) => sum + customer.overdueAmount, 0);\r\n//   const customersWithBalance = customers.filter(customer => customer.totalOwed > 0).length;\r\n\r\n  \r\n//   // Calculate real average days outstanding from actual order data\r\n//   let totalDaysOutstanding = 0;\r\n//   let orderCount = 0;\r\n  \r\n//   if (allSalesData) {\r\n//     allSalesData.forEach(order => {\r\n//       // Convert order creation date from \"2025.08.18.10.08.54.569\" to proper date\r\n//       const orderDateStr = order.createdAt.split('.').slice(0, 3).join('-'); // \"2025-08-18\"\r\n//       const orderDate = new Date(orderDateStr);\r\n//       const today = new Date();\r\n      \r\n//       // Calculate days between order creation and today\r\n//       const timeDiff = today.getTime() - orderDate.getTime();\r\n//       const daysDiff = Math.floor(timeDiff / (1000 * 3600 * 24));\r\n      \r\n//       totalDaysOutstanding += daysDiff;\r\n//       orderCount++;\r\n//     });\r\n//   }\r\n  \r\n//   const avgDaysOutstanding = orderCount > 0 ? Math.round(totalDaysOutstanding / orderCount) : 0;\r\n\r\n//   return {\r\n//     totalAR,\r\n//     totalOverdue,\r\n//     customersWithBalance,\r\n//     avgDaysOutstanding\r\n//   };\r\n// };\r\n\r\nexport const calculateARSummary = (allSalesData) => {\r\n  let totalAR = 0;\r\n  let totalOverdue = 0;\r\n  let totalDaysOutstanding = 0;\r\n  let orderCount = 0;\r\n\r\n  const namedCustomerSet = new Set();\r\n  let customersWithBalance = 0;\r\n\r\n  if (allSalesData && Array.isArray(allSalesData)) {\r\n    allSalesData.forEach(order => {\r\n      if (order['Payment Status'] !== 'Paid') {\r\n        const amount = order.Amount || 0;\r\n        totalAR += amount;\r\n\r\n        if (order['Payment Status'] === 'Unpaid') {\r\n          totalOverdue += amount;\r\n        }\r\n\r\n        const customerName = order.Customer?.trim();\r\n        if (customerName && customerName !== 'Guest Customer') {\r\n          if (!namedCustomerSet.has(customerName)) {\r\n            namedCustomerSet.add(customerName);\r\n            customersWithBalance++;\r\n          }\r\n        } else {\r\n          // Each unpaid guest order counts separately\r\n          customersWithBalance++;\r\n        }\r\n\r\n        // Days outstanding calculation\r\n        const orderDate = new Date(order.Date);\r\n        const today = new Date();\r\n        const daysDiff = Math.floor((today.getTime() - orderDate.getTime()) / (1000 * 3600 * 24));\r\n        totalDaysOutstanding += daysDiff;\r\n        orderCount++;\r\n      }\r\n    });\r\n  }\r\n\r\n  const avgDaysOutstanding = orderCount > 0 ? Math.round(totalDaysOutstanding / orderCount) : 0;\r\n\r\n  return {\r\n    totalAR,\r\n    totalOverdue,\r\n    customersWithBalance,\r\n    avgDaysOutstanding\r\n  };\r\n};\r\n\r\n\r\n// Get aging data\r\nexport const getAgingData = (salesData) => {\r\n  const aging = {\r\n    current: 0,\r\n    days30: 0,\r\n    days60: 0,\r\n    days90: 0,\r\n    over90: 0\r\n  };\r\n\r\n  if (!Array.isArray(salesData)) return aging; // <-- Safety check\r\n\r\n  salesData.forEach(order => {\r\n    if (order.paid) return;\r\n\r\n    const daysPastDue = order.daysOverdue || 0;\r\n    const amount = parseFloat(order.total?.toString().replace(/[^0-9.-]+/g,\"\")) || 0;\r\n\r\n    if (daysPastDue <= 0) {\r\n      aging.current += amount;\r\n    } else if (daysPastDue <= 30) {\r\n      aging.days30 += amount;\r\n    } else if (daysPastDue <= 60) {\r\n      aging.days60 += amount;\r\n    } else if (daysPastDue <= 90) {\r\n      aging.days90 += amount;\r\n    } else {\r\n      aging.over90 += amount;\r\n    }\r\n  });\r\n\r\n  return aging;\r\n};\r\n\r\n\r\n// Filter customers\r\nexport const getFilteredCustomers = (customers, filters) => {\r\n  // First check if we have valid data\r\n  if (!customers || !Array.isArray(customers)) {\r\n    return [];\r\n  }\r\n  \r\n  // Start by filtering ONLY customers WITH names\r\n  let filtered = customers.filter(customer => \r\n    customer && \r\n    customer.name && \r\n    typeof customer.name === 'string' && \r\n    customer.name.trim() !== ''\r\n  );\r\n\r\n  // Now apply the rest of the filters to our name-filtered list\r\n  if (filters && filters.customerType && filters.customerType !== 'all') {\r\n    filtered = filtered.filter(customer => customer.customerType === filters.customerType);\r\n  }\r\n\r\n  if (filters && filters.status && filters.status !== 'all') {\r\n    filtered = filtered.filter(customer => {\r\n      if (filters.status === 'overdue') return customer.overdueAmount > 0;\r\n      if (filters.status === 'current') return customer.totalOwed > 0 && customer.overdueAmount === 0;\r\n      if (filters.status === 'paid_up') return customer.totalOwed === 0;\r\n      return true;\r\n    });\r\n  }\r\n\r\n  if (filters && filters.searchTerm) {\r\n    const term = filters.searchTerm.toLowerCase();\r\n    filtered = filtered.filter(customer =>\r\n      customer.name.toLowerCase().includes(term) ||\r\n      (customer.email && customer.email.toLowerCase().includes(term)) ||\r\n      (customer.id && customer.id.toLowerCase().includes(term))\r\n    );\r\n  }\r\n\r\n  console.log(`Filtered to ${filtered.length} customers with valid names`);\r\n  return filtered;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}