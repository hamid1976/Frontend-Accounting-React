{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback } from 'react';\nimport { API_CONFIG } from '../utils/apiConfig';\nimport { fetchSalesOrderData, fetchPurchaseOrderData, convertSalesOrderToJournalEntry, convertPurchaseOrderToJournalEntry } from '../utils/journalEntryConverters';\nexport const useJournalEntries = accounts => {\n  _s();\n  const [journalEntries, setJournalEntries] = useState([]);\n  const [filteredEntries, setFilteredEntries] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [errors, setErrors] = useState({\n    entries: null,\n    purchase: null\n  });\n  const [newEntry, setNewEntry] = useState({\n    date: new Date().toISOString().split('T')[0],\n    description: '',\n    reference: '',\n    entries: [{\n      accountId: '',\n      debit: 0,\n      credit: 0,\n      description: ''\n    }, {\n      accountId: '',\n      debit: 0,\n      credit: 0,\n      description: ''\n    }]\n  });\n  const loadJournalEntriesFromAPI = useCallback(async () => {\n    setLoading(true);\n    setErrors({\n      entries: null,\n      purchase: null\n    });\n    try {\n      // Fetch both sales and purchase orders in parallel\n      const [salesOrders, purchaseOrders] = await Promise.all([fetchSalesOrderData(), fetchPurchaseOrderData()]);\n      let allJournalEntries = [];\n\n      // Process sales orders\n      if (salesOrders && Array.isArray(salesOrders)) {\n        const journalEntriesFromSales = salesOrders.filter(order => order.paid && order.fulfilled && order.status === 'Closed').map(order => convertSalesOrderToJournalEntry(order, accounts)).filter(entry => entry !== null);\n        allJournalEntries = [...allJournalEntries, ...journalEntriesFromSales];\n        console.log(`Processed ${journalEntriesFromSales.length} sales journal entries`);\n      }\n\n      // Process purchase orders\n      if (purchaseOrders && Array.isArray(purchaseOrders)) {\n        const journalEntriesFromPurchases = purchaseOrders.map(order => convertPurchaseOrderToJournalEntry(order, accounts)).filter(entry => entry !== null);\n        allJournalEntries = [...allJournalEntries, ...journalEntriesFromPurchases];\n        console.log(`Processed ${journalEntriesFromPurchases.length} purchase journal entries`);\n      }\n\n      // Load manual entries from localStorage\n      let manualEntries = [];\n      try {\n        const storedEntries = localStorage.getItem('manualJournalEntries');\n        manualEntries = storedEntries ? JSON.parse(storedEntries) : [];\n      } catch (error) {\n        console.warn('Error loading manual entries from localStorage:', error);\n        manualEntries = [];\n      }\n      allJournalEntries = [...allJournalEntries, ...manualEntries];\n\n      // Sort by date\n      allJournalEntries.sort((a, b) => b.date.localeCompare(a.date));\n      setJournalEntries(allJournalEntries);\n      setFilteredEntries(allJournalEntries);\n      setLoading(false);\n      console.log(`Total journal entries loaded: ${allJournalEntries.length}`);\n    } catch (error) {\n      console.error('Error loading journal entries:', error);\n      setErrors({\n        entries: error.message,\n        purchase: null\n      });\n      setLoading(false);\n    }\n  }, [accounts]);\n  const filterEntries = useCallback(filters => {\n    let filtered = [...journalEntries];\n    if (filters.dateFrom) {\n      filtered = filtered.filter(entry => entry.date >= filters.dateFrom);\n    }\n    if (filters.dateTo) {\n      filtered = filtered.filter(entry => entry.date <= filters.dateTo);\n    }\n    if (filters.accountId) {\n      filtered = filtered.filter(entry => {\n        return entry.entries.some(e => e.accountId === filters.accountId);\n      });\n    }\n    if (filters.transactionType !== 'all') {\n      filtered = filtered.filter(entry => entry.transactionType === filters.transactionType);\n    }\n    if (filters.searchTerm) {\n      const term = filters.searchTerm.toLowerCase();\n      filtered = filtered.filter(entry => entry.description.toLowerCase().includes(term) || entry.reference.toLowerCase().includes(term) || entry.entries.some(e => e.description.toLowerCase().includes(term)));\n    }\n    setFilteredEntries(filtered);\n  }, [journalEntries]);\n  const saveJournalEntry = useCallback(entryData => {\n    if (!entryData.description || !entryData.entries.every(e => e.accountId)) {\n      alert('Please fill in all required fields');\n      return false;\n    }\n    const {\n      totalDebit,\n      totalCredit\n    } = entryData.entries.reduce((acc, entry) => ({\n      totalDebit: acc.totalDebit + (parseFloat(entry.debit) || 0),\n      totalCredit: acc.totalCredit + (parseFloat(entry.credit) || 0)\n    }), {\n      totalDebit: 0,\n      totalCredit: 0\n    });\n    if (Math.abs(totalDebit - totalCredit) >= 0.01) {\n      alert('Journal entry must be balanced - total debits must equal total credits');\n      return false;\n    }\n    const entriesWithNames = entryData.entries.map(entry => {\n      var _accounts$find;\n      return {\n        ...entry,\n        accountName: ((_accounts$find = accounts.find(acc => acc.id === entry.accountId)) === null || _accounts$find === void 0 ? void 0 : _accounts$find.name) || '',\n        debit: parseFloat(entry.debit) || 0,\n        credit: parseFloat(entry.credit) || 0\n      };\n    });\n    const journalEntry = {\n      id: `JE-MANUAL-${Date.now()}`,\n      date: entryData.date,\n      description: entryData.description,\n      reference: entryData.reference || `MAN${Date.now()}`,\n      transactionType: 'manual',\n      source: 'Manual',\n      status: 'posted',\n      entries: entriesWithNames,\n      totalDebit,\n      totalCredit,\n      createdAt: new Date().toISOString()\n    };\n    try {\n      const existingManualEntries = JSON.parse(localStorage.getItem('manualJournalEntries') || '[]');\n      const updatedManualEntries = [...existingManualEntries, journalEntry];\n      localStorage.setItem('manualJournalEntries', JSON.stringify(updatedManualEntries));\n    } catch (error) {\n      console.warn('Could not save to localStorage:', error);\n    }\n    setJournalEntries([...journalEntries, journalEntry]);\n    setNewEntry({\n      date: new Date().toISOString().split('T')[0],\n      description: '',\n      reference: '',\n      entries: [{\n        accountId: '',\n        debit: 0,\n        credit: 0,\n        description: ''\n      }, {\n        accountId: '',\n        debit: 0,\n        credit: 0,\n        description: ''\n      }]\n    });\n    return true;\n  }, [accounts, journalEntries]);\n  const getAccountName = useCallback(accountId => {\n    const account = accounts.find(acc => acc.id === accountId || acc.code === accountId);\n    if (account) {\n      return `${account.code} - ${account.name}`;\n    }\n    let accountName = '';\n    journalEntries.forEach(entry => {\n      entry.entries.forEach(entryLine => {\n        if (entryLine.accountId === accountId && entryLine.accountName) {\n          accountName = entryLine.accountName;\n        }\n      });\n    });\n    if (accountName) {\n      return `${accountId} - ${accountName}`;\n    }\n    const prefix = accountId.toString().substring(0, 1);\n    let accountType = '';\n    if (prefix === '1') accountType = 'Assets';else if (prefix === '2') accountType = 'Liabilities';else if (prefix === '3') accountType = 'Equity';else if (prefix === '4') accountType = 'Revenue';else if (prefix === '5') accountType = 'Expenses';\n    return accountType ? `${accountId} - ${accountType} Account` : `${accountId} - Unknown Account`;\n  }, [accounts, journalEntries]);\n  return {\n    journalEntries,\n    filteredEntries,\n    newEntry,\n    setNewEntry,\n    loading,\n    errors,\n    loadJournalEntriesFromAPI,\n    filterEntries,\n    saveJournalEntry,\n    getAccountName\n  };\n};\n_s(useJournalEntries, \"ITzquk0KNzS8c0S7lbzGkfrrHSs=\");","map":{"version":3,"names":["useState","useCallback","API_CONFIG","fetchSalesOrderData","fetchPurchaseOrderData","convertSalesOrderToJournalEntry","convertPurchaseOrderToJournalEntry","useJournalEntries","accounts","_s","journalEntries","setJournalEntries","filteredEntries","setFilteredEntries","loading","setLoading","errors","setErrors","entries","purchase","newEntry","setNewEntry","date","Date","toISOString","split","description","reference","accountId","debit","credit","loadJournalEntriesFromAPI","salesOrders","purchaseOrders","Promise","all","allJournalEntries","Array","isArray","journalEntriesFromSales","filter","order","paid","fulfilled","status","map","entry","console","log","length","journalEntriesFromPurchases","manualEntries","storedEntries","localStorage","getItem","JSON","parse","error","warn","sort","a","b","localeCompare","message","filterEntries","filters","filtered","dateFrom","dateTo","some","e","transactionType","searchTerm","term","toLowerCase","includes","saveJournalEntry","entryData","every","alert","totalDebit","totalCredit","reduce","acc","parseFloat","Math","abs","entriesWithNames","_accounts$find","accountName","find","id","name","journalEntry","now","source","createdAt","existingManualEntries","updatedManualEntries","setItem","stringify","getAccountName","account","code","forEach","entryLine","prefix","toString","substring","accountType"],"sources":["C:/Users/Logic-Unit/my-account/src/hooks/useJournalEntries.js"],"sourcesContent":["import { useState, useCallback } from 'react';\r\nimport { API_CONFIG } from '../utils/apiConfig';\r\nimport { \r\n  fetchSalesOrderData, \r\n  fetchPurchaseOrderData,\r\n  convertSalesOrderToJournalEntry,\r\n  convertPurchaseOrderToJournalEntry\r\n} from '../utils/journalEntryConverters';\r\n\r\nexport const useJournalEntries = (accounts) => {\r\n  const [journalEntries, setJournalEntries] = useState([]);\r\n  const [filteredEntries, setFilteredEntries] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [errors, setErrors] = useState({ entries: null, purchase: null });\r\n  const [newEntry, setNewEntry] = useState({\r\n    date: new Date().toISOString().split('T')[0],\r\n    description: '',\r\n    reference: '',\r\n    entries: [\r\n      { accountId: '', debit: 0, credit: 0, description: '' },\r\n      { accountId: '', debit: 0, credit: 0, description: '' }\r\n    ]\r\n  });\r\n\r\n  const loadJournalEntriesFromAPI = useCallback(async () => {\r\n    setLoading(true);\r\n    setErrors({ entries: null, purchase: null });\r\n    \r\n    try {\r\n      // Fetch both sales and purchase orders in parallel\r\n      const [salesOrders, purchaseOrders] = await Promise.all([\r\n        fetchSalesOrderData(),\r\n        fetchPurchaseOrderData()\r\n      ]);\r\n      \r\n      let allJournalEntries = [];\r\n      \r\n      // Process sales orders\r\n      if (salesOrders && Array.isArray(salesOrders)) {\r\n        const journalEntriesFromSales = salesOrders\r\n          .filter(order => order.paid && order.fulfilled && order.status === 'Closed')\r\n          .map(order => convertSalesOrderToJournalEntry(order, accounts))\r\n          .filter(entry => entry !== null);\r\n        \r\n        allJournalEntries = [...allJournalEntries, ...journalEntriesFromSales];\r\n        console.log(`Processed ${journalEntriesFromSales.length} sales journal entries`);\r\n      }\r\n      \r\n      // Process purchase orders\r\n      if (purchaseOrders && Array.isArray(purchaseOrders)) {\r\n        const journalEntriesFromPurchases = purchaseOrders\r\n          .map(order => convertPurchaseOrderToJournalEntry(order, accounts))\r\n          .filter(entry => entry !== null);\r\n        \r\n        allJournalEntries = [...allJournalEntries, ...journalEntriesFromPurchases];\r\n        console.log(`Processed ${journalEntriesFromPurchases.length} purchase journal entries`);\r\n      }\r\n      \r\n      // Load manual entries from localStorage\r\n      let manualEntries = [];\r\n      try {\r\n        const storedEntries = localStorage.getItem('manualJournalEntries');\r\n        manualEntries = storedEntries ? JSON.parse(storedEntries) : [];\r\n      } catch (error) {\r\n        console.warn('Error loading manual entries from localStorage:', error);\r\n        manualEntries = [];\r\n      }\r\n      \r\n      allJournalEntries = [...allJournalEntries, ...manualEntries];\r\n      \r\n      // Sort by date\r\n      allJournalEntries.sort((a, b) => b.date.localeCompare(a.date));\r\n      \r\n      setJournalEntries(allJournalEntries);\r\n      setFilteredEntries(allJournalEntries);\r\n      setLoading(false);\r\n      \r\n      console.log(`Total journal entries loaded: ${allJournalEntries.length}`);\r\n    } catch (error) {\r\n      console.error('Error loading journal entries:', error);\r\n      setErrors({ entries: error.message, purchase: null });\r\n      setLoading(false);\r\n    }\r\n  }, [accounts]);\r\n\r\n  const filterEntries = useCallback((filters) => {\r\n    let filtered = [...journalEntries];\r\n\r\n    if (filters.dateFrom) {\r\n      filtered = filtered.filter(entry => entry.date >= filters.dateFrom);\r\n    }\r\n    \r\n    if (filters.dateTo) {\r\n      filtered = filtered.filter(entry => entry.date <= filters.dateTo);\r\n    }\r\n    \r\n    if (filters.accountId) {\r\n      filtered = filtered.filter(entry => {\r\n        return entry.entries.some(e => e.accountId === filters.accountId);\r\n      });\r\n    }\r\n    \r\n    if (filters.transactionType !== 'all') {\r\n      filtered = filtered.filter(entry => entry.transactionType === filters.transactionType);\r\n    }\r\n    \r\n    if (filters.searchTerm) {\r\n      const term = filters.searchTerm.toLowerCase();\r\n      filtered = filtered.filter(entry => \r\n        entry.description.toLowerCase().includes(term) ||\r\n        entry.reference.toLowerCase().includes(term) ||\r\n        entry.entries.some(e => e.description.toLowerCase().includes(term))\r\n      );\r\n    }\r\n\r\n    setFilteredEntries(filtered);\r\n  }, [journalEntries]);\r\n\r\n  const saveJournalEntry = useCallback((entryData) => {\r\n    if (!entryData.description || !entryData.entries.every(e => e.accountId)) {\r\n      alert('Please fill in all required fields');\r\n      return false;\r\n    }\r\n\r\n    const { totalDebit, totalCredit } = entryData.entries.reduce(\r\n      (acc, entry) => ({\r\n        totalDebit: acc.totalDebit + (parseFloat(entry.debit) || 0),\r\n        totalCredit: acc.totalCredit + (parseFloat(entry.credit) || 0)\r\n      }),\r\n      { totalDebit: 0, totalCredit: 0 }\r\n    );\r\n\r\n    if (Math.abs(totalDebit - totalCredit) >= 0.01) {\r\n      alert('Journal entry must be balanced - total debits must equal total credits');\r\n      return false;\r\n    }\r\n    \r\n    const entriesWithNames = entryData.entries.map(entry => ({\r\n      ...entry,\r\n      accountName: accounts.find(acc => acc.id === entry.accountId)?.name || '',\r\n      debit: parseFloat(entry.debit) || 0,\r\n      credit: parseFloat(entry.credit) || 0\r\n    }));\r\n\r\n    const journalEntry = {\r\n      id: `JE-MANUAL-${Date.now()}`,\r\n      date: entryData.date,\r\n      description: entryData.description,\r\n      reference: entryData.reference || `MAN${Date.now()}`,\r\n      transactionType: 'manual',\r\n      source: 'Manual',\r\n      status: 'posted',\r\n      entries: entriesWithNames,\r\n      totalDebit,\r\n      totalCredit,\r\n      createdAt: new Date().toISOString()\r\n    };\r\n\r\n    try {\r\n      const existingManualEntries = JSON.parse(localStorage.getItem('manualJournalEntries') || '[]');\r\n      const updatedManualEntries = [...existingManualEntries, journalEntry];\r\n      localStorage.setItem('manualJournalEntries', JSON.stringify(updatedManualEntries));\r\n    } catch (error) {\r\n      console.warn('Could not save to localStorage:', error);\r\n    }\r\n\r\n    setJournalEntries([...journalEntries, journalEntry]);\r\n    \r\n    setNewEntry({\r\n      date: new Date().toISOString().split('T')[0],\r\n      description: '',\r\n      reference: '',\r\n      entries: [\r\n        { accountId: '', debit: 0, credit: 0, description: '' },\r\n        { accountId: '', debit: 0, credit: 0, description: '' }\r\n      ]\r\n    });\r\n    \r\n    return true;\r\n  }, [accounts, journalEntries]);\r\n\r\n  const getAccountName = useCallback((accountId) => {\r\n    const account = accounts.find(acc => acc.id === accountId || acc.code === accountId);\r\n    \r\n    if (account) {\r\n      return `${account.code} - ${account.name}`;\r\n    }\r\n    \r\n    let accountName = '';\r\n    \r\n    journalEntries.forEach(entry => {\r\n      entry.entries.forEach(entryLine => {\r\n        if (entryLine.accountId === accountId && entryLine.accountName) {\r\n          accountName = entryLine.accountName;\r\n        }\r\n      });\r\n    });\r\n    \r\n    if (accountName) {\r\n      return `${accountId} - ${accountName}`;\r\n    }\r\n    \r\n    const prefix = accountId.toString().substring(0, 1);\r\n    let accountType = '';\r\n    \r\n    if (prefix === '1') accountType = 'Assets';\r\n    else if (prefix === '2') accountType = 'Liabilities';\r\n    else if (prefix === '3') accountType = 'Equity';\r\n    else if (prefix === '4') accountType = 'Revenue';\r\n    else if (prefix === '5') accountType = 'Expenses';\r\n    \r\n    return accountType ? `${accountId} - ${accountType} Account` : `${accountId} - Unknown Account`;\r\n  }, [accounts, journalEntries]);\r\n\r\n  return {\r\n    journalEntries,\r\n    filteredEntries,\r\n    newEntry,\r\n    setNewEntry,\r\n    loading,\r\n    errors,\r\n    loadJournalEntriesFromAPI,\r\n    filterEntries,\r\n    saveJournalEntry,\r\n    getAccountName\r\n  };\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}